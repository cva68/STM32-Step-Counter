
StepCounter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000115c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800121c  0800121c  0000221c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800125c  0800125c  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  0800125c  0800125c  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800125c  0800125c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800125c  0800125c  0000225c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001260  08001260  00002260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001264  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001270  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001270  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002dd4  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f8e  00000000  00000000  00005e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f0  00000000  00000000  00006d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002cf  00000000  00000000  00007188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013288  00000000  00000000  00007457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000053eb  00000000  00000000  0001a6df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076d89  00000000  00000000  0001faca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00096853  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c24  00000000  00000000  00096898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000974bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001204 	.word	0x08001204

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001204 	.word	0x08001204

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b089      	sub	sp, #36	@ 0x24
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	240c      	movs	r4, #12
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f000 ffbb 	bl	80011ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000236:	4b28      	ldr	r3, [pc, #160]	@ (80002d8 <MX_GPIO_Init+0xb8>)
 8000238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800023a:	4b27      	ldr	r3, [pc, #156]	@ (80002d8 <MX_GPIO_Init+0xb8>)
 800023c:	2101      	movs	r1, #1
 800023e:	430a      	orrs	r2, r1
 8000240:	635a      	str	r2, [r3, #52]	@ 0x34
 8000242:	4b25      	ldr	r3, [pc, #148]	@ (80002d8 <MX_GPIO_Init+0xb8>)
 8000244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000246:	2201      	movs	r2, #1
 8000248:	4013      	ands	r3, r2
 800024a:	60bb      	str	r3, [r7, #8]
 800024c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800024e:	4b22      	ldr	r3, [pc, #136]	@ (80002d8 <MX_GPIO_Init+0xb8>)
 8000250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000252:	4b21      	ldr	r3, [pc, #132]	@ (80002d8 <MX_GPIO_Init+0xb8>)
 8000254:	2104      	movs	r1, #4
 8000256:	430a      	orrs	r2, r1
 8000258:	635a      	str	r2, [r3, #52]	@ 0x34
 800025a:	4b1f      	ldr	r3, [pc, #124]	@ (80002d8 <MX_GPIO_Init+0xb8>)
 800025c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800025e:	2204      	movs	r2, #4
 8000260:	4013      	ands	r3, r2
 8000262:	607b      	str	r3, [r7, #4]
 8000264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000266:	23a0      	movs	r3, #160	@ 0xa0
 8000268:	05db      	lsls	r3, r3, #23
 800026a:	2200      	movs	r2, #0
 800026c:	2120      	movs	r1, #32
 800026e:	0018      	movs	r0, r3
 8000270:	f000 fbce 	bl	8000a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000274:	2380      	movs	r3, #128	@ 0x80
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	4818      	ldr	r0, [pc, #96]	@ (80002dc <MX_GPIO_Init+0xbc>)
 800027a:	2200      	movs	r2, #0
 800027c:	0019      	movs	r1, r3
 800027e:	f000 fbc7 	bl	8000a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000282:	193b      	adds	r3, r7, r4
 8000284:	2220      	movs	r2, #32
 8000286:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000288:	193b      	adds	r3, r7, r4
 800028a:	2201      	movs	r2, #1
 800028c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028e:	193b      	adds	r3, r7, r4
 8000290:	2200      	movs	r2, #0
 8000292:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000294:	193b      	adds	r3, r7, r4
 8000296:	2200      	movs	r2, #0
 8000298:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800029a:	193a      	adds	r2, r7, r4
 800029c:	23a0      	movs	r3, #160	@ 0xa0
 800029e:	05db      	lsls	r3, r3, #23
 80002a0:	0011      	movs	r1, r2
 80002a2:	0018      	movs	r0, r3
 80002a4:	f000 fa42 	bl	800072c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002a8:	0021      	movs	r1, r4
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2280      	movs	r2, #128	@ 0x80
 80002ae:	0092      	lsls	r2, r2, #2
 80002b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2201      	movs	r2, #1
 80002b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2200      	movs	r2, #0
 80002bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2200      	movs	r2, #0
 80002c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	4a05      	ldr	r2, [pc, #20]	@ (80002dc <MX_GPIO_Init+0xbc>)
 80002c8:	0019      	movs	r1, r3
 80002ca:	0010      	movs	r0, r2
 80002cc:	f000 fa2e 	bl	800072c <HAL_GPIO_Init>

}
 80002d0:	46c0      	nop			@ (mov r8, r8)
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b009      	add	sp, #36	@ 0x24
 80002d6:	bd90      	pop	{r4, r7, pc}
 80002d8:	40021000 	.word	0x40021000
 80002dc:	50000800 	.word	0x50000800

080002e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 f8cd 	bl	8000482 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f80d 	bl	8000306 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ec:	f7ff ff98 	bl	8000220 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(200);
 80002f0:	20c8      	movs	r0, #200	@ 0xc8
 80002f2:	f000 f943 	bl	800057c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002f6:	23a0      	movs	r3, #160	@ 0xa0
 80002f8:	05db      	lsls	r3, r3, #23
 80002fa:	2120      	movs	r1, #32
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 fba4 	bl	8000a4a <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000302:	46c0      	nop			@ (mov r8, r8)
 8000304:	e7f4      	b.n	80002f0 <main+0x10>

08000306 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000306:	b590      	push	{r4, r7, lr}
 8000308:	b08f      	sub	sp, #60	@ 0x3c
 800030a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030c:	2418      	movs	r4, #24
 800030e:	193b      	adds	r3, r7, r4
 8000310:	0018      	movs	r0, r3
 8000312:	2320      	movs	r3, #32
 8000314:	001a      	movs	r2, r3
 8000316:	2100      	movs	r1, #0
 8000318:	f000 ff48 	bl	80011ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	0018      	movs	r0, r3
 8000320:	2314      	movs	r3, #20
 8000322:	001a      	movs	r2, r3
 8000324:	2100      	movs	r1, #0
 8000326:	f000 ff41 	bl	80011ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032a:	193b      	adds	r3, r7, r4
 800032c:	2202      	movs	r2, #2
 800032e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000330:	193b      	adds	r3, r7, r4
 8000332:	2280      	movs	r2, #128	@ 0x80
 8000334:	0052      	lsls	r2, r2, #1
 8000336:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000338:	193b      	adds	r3, r7, r4
 800033a:	2280      	movs	r2, #128	@ 0x80
 800033c:	0152      	lsls	r2, r2, #5
 800033e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000340:	193b      	adds	r3, r7, r4
 8000342:	2240      	movs	r2, #64	@ 0x40
 8000344:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000346:	193b      	adds	r3, r7, r4
 8000348:	0018      	movs	r0, r3
 800034a:	f000 fb99 	bl	8000a80 <HAL_RCC_OscConfig>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000352:	f000 f81c 	bl	800038e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2207      	movs	r2, #7
 800035a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2200      	movs	r2, #0
 8000360:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2100      	movs	r1, #0
 8000378:	0018      	movs	r0, r3
 800037a:	f000 fda7 	bl	8000ecc <HAL_RCC_ClockConfig>
 800037e:	1e03      	subs	r3, r0, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000382:	f000 f804 	bl	800038e <Error_Handler>
  }
}
 8000386:	46c0      	nop			@ (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	b00f      	add	sp, #60	@ 0x3c
 800038c:	bd90      	pop	{r4, r7, pc}

0800038e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000392:	b672      	cpsid	i
}
 8000394:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000396:	46c0      	nop			@ (mov r8, r8)
 8000398:	e7fd      	b.n	8000396 <Error_Handler+0x8>
	...

0800039c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003a2:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <HAL_MspInit+0x44>)
 80003a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <HAL_MspInit+0x44>)
 80003a8:	2101      	movs	r1, #1
 80003aa:	430a      	orrs	r2, r1
 80003ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80003ae:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <HAL_MspInit+0x44>)
 80003b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003b2:	2201      	movs	r2, #1
 80003b4:	4013      	ands	r3, r2
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ba:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <HAL_MspInit+0x44>)
 80003bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80003be:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <HAL_MspInit+0x44>)
 80003c0:	2180      	movs	r1, #128	@ 0x80
 80003c2:	0549      	lsls	r1, r1, #21
 80003c4:	430a      	orrs	r2, r1
 80003c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80003c8:	4b05      	ldr	r3, [pc, #20]	@ (80003e0 <HAL_MspInit+0x44>)
 80003ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80003cc:	2380      	movs	r3, #128	@ 0x80
 80003ce:	055b      	lsls	r3, r3, #21
 80003d0:	4013      	ands	r3, r2
 80003d2:	603b      	str	r3, [r7, #0]
 80003d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d6:	46c0      	nop			@ (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			@ (mov r8, r8)
 80003e0:	40021000 	.word	0x40021000

080003e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003e8:	46c0      	nop			@ (mov r8, r8)
 80003ea:	e7fd      	b.n	80003e8 <NMI_Handler+0x4>

080003ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f0:	46c0      	nop			@ (mov r8, r8)
 80003f2:	e7fd      	b.n	80003f0 <HardFault_Handler+0x4>

080003f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f8:	46c0      	nop			@ (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800040c:	f000 f89a 	bl	8000544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000410:	46c0      	nop			@ (mov r8, r8)
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800041c:	4b03      	ldr	r3, [pc, #12]	@ (800042c <SystemInit+0x14>)
 800041e:	2280      	movs	r2, #128	@ 0x80
 8000420:	0512      	lsls	r2, r2, #20
 8000422:	609a      	str	r2, [r3, #8]
#endif
}
 8000424:	46c0      	nop			@ (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	e000ed00 	.word	0xe000ed00

08000430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000430:	480d      	ldr	r0, [pc, #52]	@ (8000468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000432:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000434:	f7ff fff0 	bl	8000418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000438:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800043a:	e003      	b.n	8000444 <LoopCopyDataInit>

0800043c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800043c:	4b0b      	ldr	r3, [pc, #44]	@ (800046c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800043e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000440:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000442:	3104      	adds	r1, #4

08000444 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000444:	480a      	ldr	r0, [pc, #40]	@ (8000470 <LoopForever+0xa>)
  ldr r3, =_edata
 8000446:	4b0b      	ldr	r3, [pc, #44]	@ (8000474 <LoopForever+0xe>)
  adds r2, r0, r1
 8000448:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800044a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800044c:	d3f6      	bcc.n	800043c <CopyDataInit>
  ldr r2, =_sbss
 800044e:	4a0a      	ldr	r2, [pc, #40]	@ (8000478 <LoopForever+0x12>)
  b LoopFillZerobss
 8000450:	e002      	b.n	8000458 <LoopFillZerobss>

08000452 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  str  r3, [r2]
 8000454:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000456:	3204      	adds	r2, #4

08000458 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000458:	4b08      	ldr	r3, [pc, #32]	@ (800047c <LoopForever+0x16>)
  cmp r2, r3
 800045a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800045c:	d3f9      	bcc.n	8000452 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800045e:	f000 fead 	bl	80011bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000462:	f7ff ff3d 	bl	80002e0 <main>

08000466 <LoopForever>:

LoopForever:
    b LoopForever
 8000466:	e7fe      	b.n	8000466 <LoopForever>
  ldr   r0, =_estack
 8000468:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 800046c:	08001264 	.word	0x08001264
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000474:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000478:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800047c:	2000002c 	.word	0x2000002c

08000480 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000480:	e7fe      	b.n	8000480 <ADC1_IRQHandler>

08000482 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000488:	1dfb      	adds	r3, r7, #7
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800048e:	2003      	movs	r0, #3
 8000490:	f000 f80e 	bl	80004b0 <HAL_InitTick>
 8000494:	1e03      	subs	r3, r0, #0
 8000496:	d003      	beq.n	80004a0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000498:	1dfb      	adds	r3, r7, #7
 800049a:	2201      	movs	r2, #1
 800049c:	701a      	strb	r2, [r3, #0]
 800049e:	e001      	b.n	80004a4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004a0:	f7ff ff7c 	bl	800039c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004a4:	1dfb      	adds	r3, r7, #7
 80004a6:	781b      	ldrb	r3, [r3, #0]
}
 80004a8:	0018      	movs	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b002      	add	sp, #8
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004b8:	230f      	movs	r3, #15
 80004ba:	18fb      	adds	r3, r7, r3
 80004bc:	2200      	movs	r2, #0
 80004be:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80004c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000538 <HAL_InitTick+0x88>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d02b      	beq.n	8000520 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80004c8:	4b1c      	ldr	r3, [pc, #112]	@ (800053c <HAL_InitTick+0x8c>)
 80004ca:	681c      	ldr	r4, [r3, #0]
 80004cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000538 <HAL_InitTick+0x88>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	0019      	movs	r1, r3
 80004d2:	23fa      	movs	r3, #250	@ 0xfa
 80004d4:	0098      	lsls	r0, r3, #2
 80004d6:	f7ff fe17 	bl	8000108 <__udivsi3>
 80004da:	0003      	movs	r3, r0
 80004dc:	0019      	movs	r1, r3
 80004de:	0020      	movs	r0, r4
 80004e0:	f7ff fe12 	bl	8000108 <__udivsi3>
 80004e4:	0003      	movs	r3, r0
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 f913 	bl	8000712 <HAL_SYSTICK_Config>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d112      	bne.n	8000516 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2b03      	cmp	r3, #3
 80004f4:	d80a      	bhi.n	800050c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004f6:	6879      	ldr	r1, [r7, #4]
 80004f8:	2301      	movs	r3, #1
 80004fa:	425b      	negs	r3, r3
 80004fc:	2200      	movs	r2, #0
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 f8f2 	bl	80006e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000504:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <HAL_InitTick+0x90>)
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	e00d      	b.n	8000528 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800050c:	230f      	movs	r3, #15
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	2201      	movs	r2, #1
 8000512:	701a      	strb	r2, [r3, #0]
 8000514:	e008      	b.n	8000528 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000516:	230f      	movs	r3, #15
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	2201      	movs	r2, #1
 800051c:	701a      	strb	r2, [r3, #0]
 800051e:	e003      	b.n	8000528 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000520:	230f      	movs	r3, #15
 8000522:	18fb      	adds	r3, r7, r3
 8000524:	2201      	movs	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000528:	230f      	movs	r3, #15
 800052a:	18fb      	adds	r3, r7, r3
 800052c:	781b      	ldrb	r3, [r3, #0]
}
 800052e:	0018      	movs	r0, r3
 8000530:	46bd      	mov	sp, r7
 8000532:	b005      	add	sp, #20
 8000534:	bd90      	pop	{r4, r7, pc}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	20000008 	.word	0x20000008
 800053c:	20000000 	.word	0x20000000
 8000540:	20000004 	.word	0x20000004

08000544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000548:	4b05      	ldr	r3, [pc, #20]	@ (8000560 <HAL_IncTick+0x1c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	001a      	movs	r2, r3
 800054e:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <HAL_IncTick+0x20>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	18d2      	adds	r2, r2, r3
 8000554:	4b03      	ldr	r3, [pc, #12]	@ (8000564 <HAL_IncTick+0x20>)
 8000556:	601a      	str	r2, [r3, #0]
}
 8000558:	46c0      	nop			@ (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			@ (mov r8, r8)
 8000560:	20000008 	.word	0x20000008
 8000564:	20000028 	.word	0x20000028

08000568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  return uwTick;
 800056c:	4b02      	ldr	r3, [pc, #8]	@ (8000578 <HAL_GetTick+0x10>)
 800056e:	681b      	ldr	r3, [r3, #0]
}
 8000570:	0018      	movs	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	20000028 	.word	0x20000028

0800057c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000584:	f7ff fff0 	bl	8000568 <HAL_GetTick>
 8000588:	0003      	movs	r3, r0
 800058a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	3301      	adds	r3, #1
 8000594:	d005      	beq.n	80005a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000596:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <HAL_Delay+0x44>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	001a      	movs	r2, r3
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	f7ff ffe0 	bl	8000568 <HAL_GetTick>
 80005a8:	0002      	movs	r2, r0
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	68fa      	ldr	r2, [r7, #12]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d8f7      	bhi.n	80005a4 <HAL_Delay+0x28>
  {
  }
}
 80005b4:	46c0      	nop			@ (mov r8, r8)
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b004      	add	sp, #16
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	20000008 	.word	0x20000008

080005c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	0002      	movs	r2, r0
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	1dfb      	adds	r3, r7, #7
 80005d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80005d2:	1dfb      	adds	r3, r7, #7
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80005d8:	d828      	bhi.n	800062c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005da:	4a2f      	ldr	r2, [pc, #188]	@ (8000698 <__NVIC_SetPriority+0xd4>)
 80005dc:	1dfb      	adds	r3, r7, #7
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	089b      	lsrs	r3, r3, #2
 80005e4:	33c0      	adds	r3, #192	@ 0xc0
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	589b      	ldr	r3, [r3, r2]
 80005ea:	1dfa      	adds	r2, r7, #7
 80005ec:	7812      	ldrb	r2, [r2, #0]
 80005ee:	0011      	movs	r1, r2
 80005f0:	2203      	movs	r2, #3
 80005f2:	400a      	ands	r2, r1
 80005f4:	00d2      	lsls	r2, r2, #3
 80005f6:	21ff      	movs	r1, #255	@ 0xff
 80005f8:	4091      	lsls	r1, r2
 80005fa:	000a      	movs	r2, r1
 80005fc:	43d2      	mvns	r2, r2
 80005fe:	401a      	ands	r2, r3
 8000600:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	019b      	lsls	r3, r3, #6
 8000606:	22ff      	movs	r2, #255	@ 0xff
 8000608:	401a      	ands	r2, r3
 800060a:	1dfb      	adds	r3, r7, #7
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	0018      	movs	r0, r3
 8000610:	2303      	movs	r3, #3
 8000612:	4003      	ands	r3, r0
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000618:	481f      	ldr	r0, [pc, #124]	@ (8000698 <__NVIC_SetPriority+0xd4>)
 800061a:	1dfb      	adds	r3, r7, #7
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	b25b      	sxtb	r3, r3
 8000620:	089b      	lsrs	r3, r3, #2
 8000622:	430a      	orrs	r2, r1
 8000624:	33c0      	adds	r3, #192	@ 0xc0
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800062a:	e031      	b.n	8000690 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800062c:	4a1b      	ldr	r2, [pc, #108]	@ (800069c <__NVIC_SetPriority+0xd8>)
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	0019      	movs	r1, r3
 8000634:	230f      	movs	r3, #15
 8000636:	400b      	ands	r3, r1
 8000638:	3b08      	subs	r3, #8
 800063a:	089b      	lsrs	r3, r3, #2
 800063c:	3306      	adds	r3, #6
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	18d3      	adds	r3, r2, r3
 8000642:	3304      	adds	r3, #4
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	1dfa      	adds	r2, r7, #7
 8000648:	7812      	ldrb	r2, [r2, #0]
 800064a:	0011      	movs	r1, r2
 800064c:	2203      	movs	r2, #3
 800064e:	400a      	ands	r2, r1
 8000650:	00d2      	lsls	r2, r2, #3
 8000652:	21ff      	movs	r1, #255	@ 0xff
 8000654:	4091      	lsls	r1, r2
 8000656:	000a      	movs	r2, r1
 8000658:	43d2      	mvns	r2, r2
 800065a:	401a      	ands	r2, r3
 800065c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	019b      	lsls	r3, r3, #6
 8000662:	22ff      	movs	r2, #255	@ 0xff
 8000664:	401a      	ands	r2, r3
 8000666:	1dfb      	adds	r3, r7, #7
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	0018      	movs	r0, r3
 800066c:	2303      	movs	r3, #3
 800066e:	4003      	ands	r3, r0
 8000670:	00db      	lsls	r3, r3, #3
 8000672:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000674:	4809      	ldr	r0, [pc, #36]	@ (800069c <__NVIC_SetPriority+0xd8>)
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	001c      	movs	r4, r3
 800067c:	230f      	movs	r3, #15
 800067e:	4023      	ands	r3, r4
 8000680:	3b08      	subs	r3, #8
 8000682:	089b      	lsrs	r3, r3, #2
 8000684:	430a      	orrs	r2, r1
 8000686:	3306      	adds	r3, #6
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	18c3      	adds	r3, r0, r3
 800068c:	3304      	adds	r3, #4
 800068e:	601a      	str	r2, [r3, #0]
}
 8000690:	46c0      	nop			@ (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	b003      	add	sp, #12
 8000696:	bd90      	pop	{r4, r7, pc}
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	1e5a      	subs	r2, r3, #1
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	045b      	lsls	r3, r3, #17
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d301      	bcc.n	80006b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006b4:	2301      	movs	r3, #1
 80006b6:	e010      	b.n	80006da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b8:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <SysTick_Config+0x44>)
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	3a01      	subs	r2, #1
 80006be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006c0:	2301      	movs	r3, #1
 80006c2:	425b      	negs	r3, r3
 80006c4:	2103      	movs	r1, #3
 80006c6:	0018      	movs	r0, r3
 80006c8:	f7ff ff7c 	bl	80005c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006cc:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <SysTick_Config+0x44>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d2:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <SysTick_Config+0x44>)
 80006d4:	2207      	movs	r2, #7
 80006d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006d8:	2300      	movs	r3, #0
}
 80006da:	0018      	movs	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	b002      	add	sp, #8
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	e000e010 	.word	0xe000e010

080006e8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
 80006f2:	210f      	movs	r1, #15
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	1c02      	adds	r2, r0, #0
 80006f8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b25b      	sxtb	r3, r3
 8000702:	0011      	movs	r1, r2
 8000704:	0018      	movs	r0, r3
 8000706:	f7ff ff5d 	bl	80005c4 <__NVIC_SetPriority>
}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b004      	add	sp, #16
 8000710:	bd80      	pop	{r7, pc}

08000712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	0018      	movs	r0, r3
 800071e:	f7ff ffbf 	bl	80006a0 <SysTick_Config>
 8000722:	0003      	movs	r3, r0
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}

0800072c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800073a:	e153      	b.n	80009e4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2101      	movs	r1, #1
 8000742:	693a      	ldr	r2, [r7, #16]
 8000744:	4091      	lsls	r1, r2
 8000746:	000a      	movs	r2, r1
 8000748:	4013      	ands	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d100      	bne.n	8000754 <HAL_GPIO_Init+0x28>
 8000752:	e144      	b.n	80009de <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	2b02      	cmp	r3, #2
 800075a:	d003      	beq.n	8000764 <HAL_GPIO_Init+0x38>
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	2b12      	cmp	r3, #18
 8000762:	d125      	bne.n	80007b0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	08da      	lsrs	r2, r3, #3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3208      	adds	r2, #8
 800076c:	0092      	lsls	r2, r2, #2
 800076e:	58d3      	ldr	r3, [r2, r3]
 8000770:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	2207      	movs	r2, #7
 8000776:	4013      	ands	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	220f      	movs	r2, #15
 800077c:	409a      	lsls	r2, r3
 800077e:	0013      	movs	r3, r2
 8000780:	43da      	mvns	r2, r3
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	4013      	ands	r3, r2
 8000786:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	691b      	ldr	r3, [r3, #16]
 800078c:	220f      	movs	r2, #15
 800078e:	401a      	ands	r2, r3
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	2107      	movs	r1, #7
 8000794:	400b      	ands	r3, r1
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	409a      	lsls	r2, r3
 800079a:	0013      	movs	r3, r2
 800079c:	697a      	ldr	r2, [r7, #20]
 800079e:	4313      	orrs	r3, r2
 80007a0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	08da      	lsrs	r2, r3, #3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3208      	adds	r2, #8
 80007aa:	0092      	lsls	r2, r2, #2
 80007ac:	6979      	ldr	r1, [r7, #20]
 80007ae:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	2203      	movs	r2, #3
 80007bc:	409a      	lsls	r2, r3
 80007be:	0013      	movs	r3, r2
 80007c0:	43da      	mvns	r2, r3
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	4013      	ands	r3, r2
 80007c6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	2203      	movs	r2, #3
 80007ce:	401a      	ands	r2, r3
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	409a      	lsls	r2, r3
 80007d6:	0013      	movs	r3, r2
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	4313      	orrs	r3, r2
 80007dc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d00b      	beq.n	8000804 <HAL_GPIO_Init+0xd8>
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d007      	beq.n	8000804 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f8:	2b11      	cmp	r3, #17
 80007fa:	d003      	beq.n	8000804 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	2b12      	cmp	r3, #18
 8000802:	d130      	bne.n	8000866 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	2203      	movs	r2, #3
 8000810:	409a      	lsls	r2, r3
 8000812:	0013      	movs	r3, r2
 8000814:	43da      	mvns	r2, r3
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	4013      	ands	r3, r2
 800081a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	68da      	ldr	r2, [r3, #12]
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	409a      	lsls	r2, r3
 8000826:	0013      	movs	r3, r2
 8000828:	697a      	ldr	r2, [r7, #20]
 800082a:	4313      	orrs	r3, r2
 800082c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	697a      	ldr	r2, [r7, #20]
 8000832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800083a:	2201      	movs	r2, #1
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	409a      	lsls	r2, r3
 8000840:	0013      	movs	r3, r2
 8000842:	43da      	mvns	r2, r3
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	4013      	ands	r3, r2
 8000848:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	091b      	lsrs	r3, r3, #4
 8000850:	2201      	movs	r2, #1
 8000852:	401a      	ands	r2, r3
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	409a      	lsls	r2, r3
 8000858:	0013      	movs	r3, r2
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	4313      	orrs	r3, r2
 800085e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	697a      	ldr	r2, [r7, #20]
 8000864:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b03      	cmp	r3, #3
 800086c:	d017      	beq.n	800089e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	2203      	movs	r2, #3
 800087a:	409a      	lsls	r2, r3
 800087c:	0013      	movs	r3, r2
 800087e:	43da      	mvns	r2, r3
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	4013      	ands	r3, r2
 8000884:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	409a      	lsls	r2, r3
 8000890:	0013      	movs	r3, r2
 8000892:	697a      	ldr	r2, [r7, #20]
 8000894:	4313      	orrs	r3, r2
 8000896:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685a      	ldr	r2, [r3, #4]
 80008a2:	2380      	movs	r3, #128	@ 0x80
 80008a4:	055b      	lsls	r3, r3, #21
 80008a6:	4013      	ands	r3, r2
 80008a8:	d100      	bne.n	80008ac <HAL_GPIO_Init+0x180>
 80008aa:	e098      	b.n	80009de <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80008ac:	4a53      	ldr	r2, [pc, #332]	@ (80009fc <HAL_GPIO_Init+0x2d0>)
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	089b      	lsrs	r3, r3, #2
 80008b2:	3318      	adds	r3, #24
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	589b      	ldr	r3, [r3, r2]
 80008b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	2203      	movs	r2, #3
 80008be:	4013      	ands	r3, r2
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	220f      	movs	r2, #15
 80008c4:	409a      	lsls	r2, r3
 80008c6:	0013      	movs	r3, r2
 80008c8:	43da      	mvns	r2, r3
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	4013      	ands	r3, r2
 80008ce:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	23a0      	movs	r3, #160	@ 0xa0
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d019      	beq.n	800090e <HAL_GPIO_Init+0x1e2>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a48      	ldr	r2, [pc, #288]	@ (8000a00 <HAL_GPIO_Init+0x2d4>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d013      	beq.n	800090a <HAL_GPIO_Init+0x1de>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4a47      	ldr	r2, [pc, #284]	@ (8000a04 <HAL_GPIO_Init+0x2d8>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d00d      	beq.n	8000906 <HAL_GPIO_Init+0x1da>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a46      	ldr	r2, [pc, #280]	@ (8000a08 <HAL_GPIO_Init+0x2dc>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d007      	beq.n	8000902 <HAL_GPIO_Init+0x1d6>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a45      	ldr	r2, [pc, #276]	@ (8000a0c <HAL_GPIO_Init+0x2e0>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d101      	bne.n	80008fe <HAL_GPIO_Init+0x1d2>
 80008fa:	2305      	movs	r3, #5
 80008fc:	e008      	b.n	8000910 <HAL_GPIO_Init+0x1e4>
 80008fe:	2306      	movs	r3, #6
 8000900:	e006      	b.n	8000910 <HAL_GPIO_Init+0x1e4>
 8000902:	2303      	movs	r3, #3
 8000904:	e004      	b.n	8000910 <HAL_GPIO_Init+0x1e4>
 8000906:	2302      	movs	r3, #2
 8000908:	e002      	b.n	8000910 <HAL_GPIO_Init+0x1e4>
 800090a:	2301      	movs	r3, #1
 800090c:	e000      	b.n	8000910 <HAL_GPIO_Init+0x1e4>
 800090e:	2300      	movs	r3, #0
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	2103      	movs	r1, #3
 8000914:	400a      	ands	r2, r1
 8000916:	00d2      	lsls	r2, r2, #3
 8000918:	4093      	lsls	r3, r2
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	4313      	orrs	r3, r2
 800091e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000920:	4936      	ldr	r1, [pc, #216]	@ (80009fc <HAL_GPIO_Init+0x2d0>)
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	089b      	lsrs	r3, r3, #2
 8000926:	3318      	adds	r3, #24
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800092e:	4a33      	ldr	r2, [pc, #204]	@ (80009fc <HAL_GPIO_Init+0x2d0>)
 8000930:	2380      	movs	r3, #128	@ 0x80
 8000932:	58d3      	ldr	r3, [r2, r3]
 8000934:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	43da      	mvns	r2, r3
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	4013      	ands	r3, r2
 800093e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	2380      	movs	r3, #128	@ 0x80
 8000946:	025b      	lsls	r3, r3, #9
 8000948:	4013      	ands	r3, r2
 800094a:	d003      	beq.n	8000954 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4313      	orrs	r3, r2
 8000952:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000954:	4929      	ldr	r1, [pc, #164]	@ (80009fc <HAL_GPIO_Init+0x2d0>)
 8000956:	2280      	movs	r2, #128	@ 0x80
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 800095c:	4a27      	ldr	r2, [pc, #156]	@ (80009fc <HAL_GPIO_Init+0x2d0>)
 800095e:	2384      	movs	r3, #132	@ 0x84
 8000960:	58d3      	ldr	r3, [r2, r3]
 8000962:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	43da      	mvns	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	4013      	ands	r3, r2
 800096c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	2380      	movs	r3, #128	@ 0x80
 8000974:	029b      	lsls	r3, r3, #10
 8000976:	4013      	ands	r3, r2
 8000978:	d003      	beq.n	8000982 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800097a:	697a      	ldr	r2, [r7, #20]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4313      	orrs	r3, r2
 8000980:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000982:	491e      	ldr	r1, [pc, #120]	@ (80009fc <HAL_GPIO_Init+0x2d0>)
 8000984:	2284      	movs	r2, #132	@ 0x84
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800098a:	4b1c      	ldr	r3, [pc, #112]	@ (80009fc <HAL_GPIO_Init+0x2d0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	43da      	mvns	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	4013      	ands	r3, r2
 8000998:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	2380      	movs	r3, #128	@ 0x80
 80009a0:	035b      	lsls	r3, r3, #13
 80009a2:	4013      	ands	r3, r2
 80009a4:	d003      	beq.n	80009ae <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80009ae:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <HAL_GPIO_Init+0x2d0>)
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80009b4:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <HAL_GPIO_Init+0x2d0>)
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	43da      	mvns	r2, r3
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	4013      	ands	r3, r2
 80009c2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	2380      	movs	r3, #128	@ 0x80
 80009ca:	039b      	lsls	r3, r3, #14
 80009cc:	4013      	ands	r3, r2
 80009ce:	d003      	beq.n	80009d8 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80009d8:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <HAL_GPIO_Init+0x2d0>)
 80009da:	697a      	ldr	r2, [r7, #20]
 80009dc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	3301      	adds	r3, #1
 80009e2:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	40da      	lsrs	r2, r3
 80009ec:	1e13      	subs	r3, r2, #0
 80009ee:	d000      	beq.n	80009f2 <HAL_GPIO_Init+0x2c6>
 80009f0:	e6a4      	b.n	800073c <HAL_GPIO_Init+0x10>
  }
}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b006      	add	sp, #24
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40021800 	.word	0x40021800
 8000a00:	50000400 	.word	0x50000400
 8000a04:	50000800 	.word	0x50000800
 8000a08:	50000c00 	.word	0x50000c00
 8000a0c:	50001400 	.word	0x50001400

08000a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	0008      	movs	r0, r1
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	1cbb      	adds	r3, r7, #2
 8000a1e:	1c02      	adds	r2, r0, #0
 8000a20:	801a      	strh	r2, [r3, #0]
 8000a22:	1c7b      	adds	r3, r7, #1
 8000a24:	1c0a      	adds	r2, r1, #0
 8000a26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a28:	1c7b      	adds	r3, r7, #1
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d004      	beq.n	8000a3a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a30:	1cbb      	adds	r3, r7, #2
 8000a32:	881a      	ldrh	r2, [r3, #0]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a38:	e003      	b.n	8000a42 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a3a:	1cbb      	adds	r3, r7, #2
 8000a3c:	881a      	ldrh	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b002      	add	sp, #8
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b084      	sub	sp, #16
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	000a      	movs	r2, r1
 8000a54:	1cbb      	adds	r3, r7, #2
 8000a56:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a5e:	1cbb      	adds	r3, r7, #2
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	4013      	ands	r3, r2
 8000a66:	041a      	lsls	r2, r3, #16
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	1cb9      	adds	r1, r7, #2
 8000a6e:	8809      	ldrh	r1, [r1, #0]
 8000a70:	400b      	ands	r3, r1
 8000a72:	431a      	orrs	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	619a      	str	r2, [r3, #24]
}
 8000a78:	46c0      	nop			@ (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b004      	add	sp, #16
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d101      	bne.n	8000a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e20f      	b.n	8000eb2 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2201      	movs	r2, #1
 8000a98:	4013      	ands	r3, r2
 8000a9a:	d100      	bne.n	8000a9e <HAL_RCC_OscConfig+0x1e>
 8000a9c:	e069      	b.n	8000b72 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a9e:	4bc8      	ldr	r3, [pc, #800]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	2238      	movs	r2, #56	@ 0x38
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	2b08      	cmp	r3, #8
 8000aac:	d105      	bne.n	8000aba <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d15d      	bne.n	8000b72 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e1fb      	b.n	8000eb2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	2380      	movs	r3, #128	@ 0x80
 8000ac0:	025b      	lsls	r3, r3, #9
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d107      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x56>
 8000ac6:	4bbe      	ldr	r3, [pc, #760]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4bbd      	ldr	r3, [pc, #756]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000acc:	2180      	movs	r1, #128	@ 0x80
 8000ace:	0249      	lsls	r1, r1, #9
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	e020      	b.n	8000b18 <HAL_RCC_OscConfig+0x98>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	23a0      	movs	r3, #160	@ 0xa0
 8000adc:	02db      	lsls	r3, r3, #11
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d10e      	bne.n	8000b00 <HAL_RCC_OscConfig+0x80>
 8000ae2:	4bb7      	ldr	r3, [pc, #732]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	4bb6      	ldr	r3, [pc, #728]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000ae8:	2180      	movs	r1, #128	@ 0x80
 8000aea:	02c9      	lsls	r1, r1, #11
 8000aec:	430a      	orrs	r2, r1
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	4bb3      	ldr	r3, [pc, #716]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4bb2      	ldr	r3, [pc, #712]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000af6:	2180      	movs	r1, #128	@ 0x80
 8000af8:	0249      	lsls	r1, r1, #9
 8000afa:	430a      	orrs	r2, r1
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	e00b      	b.n	8000b18 <HAL_RCC_OscConfig+0x98>
 8000b00:	4baf      	ldr	r3, [pc, #700]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4bae      	ldr	r3, [pc, #696]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000b06:	49af      	ldr	r1, [pc, #700]	@ (8000dc4 <HAL_RCC_OscConfig+0x344>)
 8000b08:	400a      	ands	r2, r1
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	4bac      	ldr	r3, [pc, #688]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4bab      	ldr	r3, [pc, #684]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000b12:	49ad      	ldr	r1, [pc, #692]	@ (8000dc8 <HAL_RCC_OscConfig+0x348>)
 8000b14:	400a      	ands	r2, r1
 8000b16:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d014      	beq.n	8000b4a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b20:	f7ff fd22 	bl	8000568 <HAL_GetTick>
 8000b24:	0003      	movs	r3, r0
 8000b26:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b28:	e008      	b.n	8000b3c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000b2a:	f7ff fd1d 	bl	8000568 <HAL_GetTick>
 8000b2e:	0002      	movs	r2, r0
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	2b64      	cmp	r3, #100	@ 0x64
 8000b36:	d901      	bls.n	8000b3c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	e1ba      	b.n	8000eb2 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b3c:	4ba0      	ldr	r3, [pc, #640]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	2380      	movs	r3, #128	@ 0x80
 8000b42:	029b      	lsls	r3, r3, #10
 8000b44:	4013      	ands	r3, r2
 8000b46:	d0f0      	beq.n	8000b2a <HAL_RCC_OscConfig+0xaa>
 8000b48:	e013      	b.n	8000b72 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b4a:	f7ff fd0d 	bl	8000568 <HAL_GetTick>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000b52:	e008      	b.n	8000b66 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000b54:	f7ff fd08 	bl	8000568 <HAL_GetTick>
 8000b58:	0002      	movs	r2, r0
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	2b64      	cmp	r3, #100	@ 0x64
 8000b60:	d901      	bls.n	8000b66 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8000b62:	2303      	movs	r3, #3
 8000b64:	e1a5      	b.n	8000eb2 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000b66:	4b96      	ldr	r3, [pc, #600]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	2380      	movs	r3, #128	@ 0x80
 8000b6c:	029b      	lsls	r3, r3, #10
 8000b6e:	4013      	ands	r3, r2
 8000b70:	d1f0      	bne.n	8000b54 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2202      	movs	r2, #2
 8000b78:	4013      	ands	r3, r2
 8000b7a:	d100      	bne.n	8000b7e <HAL_RCC_OscConfig+0xfe>
 8000b7c:	e086      	b.n	8000c8c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b7e:	4b90      	ldr	r3, [pc, #576]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	2238      	movs	r2, #56	@ 0x38
 8000b84:	4013      	ands	r3, r2
 8000b86:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d12f      	bne.n	8000bee <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e18b      	b.n	8000eb2 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b9a:	4b89      	ldr	r3, [pc, #548]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	4a8b      	ldr	r2, [pc, #556]	@ (8000dcc <HAL_RCC_OscConfig+0x34c>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	021a      	lsls	r2, r3, #8
 8000baa:	4b85      	ldr	r3, [pc, #532]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000bac:	430a      	orrs	r2, r1
 8000bae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d112      	bne.n	8000bdc <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000bb6:	4b82      	ldr	r3, [pc, #520]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a85      	ldr	r2, [pc, #532]	@ (8000dd0 <HAL_RCC_OscConfig+0x350>)
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	0019      	movs	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	691a      	ldr	r2, [r3, #16]
 8000bc4:	4b7e      	ldr	r3, [pc, #504]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000bca:	4b7d      	ldr	r3, [pc, #500]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	0adb      	lsrs	r3, r3, #11
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	4a7f      	ldr	r2, [pc, #508]	@ (8000dd4 <HAL_RCC_OscConfig+0x354>)
 8000bd6:	40da      	lsrs	r2, r3
 8000bd8:	4b7f      	ldr	r3, [pc, #508]	@ (8000dd8 <HAL_RCC_OscConfig+0x358>)
 8000bda:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000bdc:	4b7f      	ldr	r3, [pc, #508]	@ (8000ddc <HAL_RCC_OscConfig+0x35c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff fc65 	bl	80004b0 <HAL_InitTick>
 8000be6:	1e03      	subs	r3, r0, #0
 8000be8:	d050      	beq.n	8000c8c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e161      	b.n	8000eb2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d030      	beq.n	8000c58 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000bf6:	4b72      	ldr	r3, [pc, #456]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a75      	ldr	r2, [pc, #468]	@ (8000dd0 <HAL_RCC_OscConfig+0x350>)
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	0019      	movs	r1, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	691a      	ldr	r2, [r3, #16]
 8000c04:	4b6e      	ldr	r3, [pc, #440]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000c06:	430a      	orrs	r2, r1
 8000c08:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8000c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4b6c      	ldr	r3, [pc, #432]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000c10:	2180      	movs	r1, #128	@ 0x80
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	430a      	orrs	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c18:	f7ff fca6 	bl	8000568 <HAL_GetTick>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c20:	e008      	b.n	8000c34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000c22:	f7ff fca1 	bl	8000568 <HAL_GetTick>
 8000c26:	0002      	movs	r2, r0
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d901      	bls.n	8000c34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c30:	2303      	movs	r3, #3
 8000c32:	e13e      	b.n	8000eb2 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c34:	4b62      	ldr	r3, [pc, #392]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	2380      	movs	r3, #128	@ 0x80
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	d0f0      	beq.n	8000c22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c40:	4b5f      	ldr	r3, [pc, #380]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	4a61      	ldr	r2, [pc, #388]	@ (8000dcc <HAL_RCC_OscConfig+0x34c>)
 8000c46:	4013      	ands	r3, r2
 8000c48:	0019      	movs	r1, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	021a      	lsls	r2, r3, #8
 8000c50:	4b5b      	ldr	r3, [pc, #364]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000c52:	430a      	orrs	r2, r1
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	e019      	b.n	8000c8c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8000c58:	4b59      	ldr	r3, [pc, #356]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b58      	ldr	r3, [pc, #352]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000c5e:	4960      	ldr	r1, [pc, #384]	@ (8000de0 <HAL_RCC_OscConfig+0x360>)
 8000c60:	400a      	ands	r2, r1
 8000c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c64:	f7ff fc80 	bl	8000568 <HAL_GetTick>
 8000c68:	0003      	movs	r3, r0
 8000c6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c6c:	e008      	b.n	8000c80 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000c6e:	f7ff fc7b 	bl	8000568 <HAL_GetTick>
 8000c72:	0002      	movs	r2, r0
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d901      	bls.n	8000c80 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	e118      	b.n	8000eb2 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c80:	4b4f      	ldr	r3, [pc, #316]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	2380      	movs	r3, #128	@ 0x80
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	4013      	ands	r3, r2
 8000c8a:	d1f0      	bne.n	8000c6e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2208      	movs	r2, #8
 8000c92:	4013      	ands	r3, r2
 8000c94:	d042      	beq.n	8000d1c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000c96:	4b4a      	ldr	r3, [pc, #296]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	2238      	movs	r2, #56	@ 0x38
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	2b18      	cmp	r3, #24
 8000ca0:	d105      	bne.n	8000cae <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d138      	bne.n	8000d1c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e101      	b.n	8000eb2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d019      	beq.n	8000cea <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000cb6:	4b42      	ldr	r3, [pc, #264]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000cb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000cba:	4b41      	ldr	r3, [pc, #260]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc2:	f7ff fc51 	bl	8000568 <HAL_GetTick>
 8000cc6:	0003      	movs	r3, r0
 8000cc8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000cca:	e008      	b.n	8000cde <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000ccc:	f7ff fc4c 	bl	8000568 <HAL_GetTick>
 8000cd0:	0002      	movs	r2, r0
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d901      	bls.n	8000cde <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e0e9      	b.n	8000eb2 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000cde:	4b38      	ldr	r3, [pc, #224]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d0f1      	beq.n	8000ccc <HAL_RCC_OscConfig+0x24c>
 8000ce8:	e018      	b.n	8000d1c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000cea:	4b35      	ldr	r3, [pc, #212]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000cec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000cee:	4b34      	ldr	r3, [pc, #208]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	438a      	bics	r2, r1
 8000cf4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fc37 	bl	8000568 <HAL_GetTick>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000cfe:	e008      	b.n	8000d12 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000d00:	f7ff fc32 	bl	8000568 <HAL_GetTick>
 8000d04:	0002      	movs	r2, r0
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d901      	bls.n	8000d12 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e0cf      	b.n	8000eb2 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000d12:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d16:	2202      	movs	r2, #2
 8000d18:	4013      	ands	r3, r2
 8000d1a:	d1f1      	bne.n	8000d00 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2204      	movs	r2, #4
 8000d22:	4013      	ands	r3, r2
 8000d24:	d100      	bne.n	8000d28 <HAL_RCC_OscConfig+0x2a8>
 8000d26:	e084      	b.n	8000e32 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d28:	230f      	movs	r3, #15
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000d30:	4b23      	ldr	r3, [pc, #140]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	2238      	movs	r2, #56	@ 0x38
 8000d36:	4013      	ands	r3, r2
 8000d38:	2b20      	cmp	r3, #32
 8000d3a:	d106      	bne.n	8000d4a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d000      	beq.n	8000d46 <HAL_RCC_OscConfig+0x2c6>
 8000d44:	e075      	b.n	8000e32 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e0b3      	b.n	8000eb2 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d106      	bne.n	8000d60 <HAL_RCC_OscConfig+0x2e0>
 8000d52:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000d54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000d56:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000d5e:	e01c      	b.n	8000d9a <HAL_RCC_OscConfig+0x31a>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	2b05      	cmp	r3, #5
 8000d66:	d10c      	bne.n	8000d82 <HAL_RCC_OscConfig+0x302>
 8000d68:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000d6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000d6c:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000d6e:	2104      	movs	r1, #4
 8000d70:	430a      	orrs	r2, r1
 8000d72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000d76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000d80:	e00b      	b.n	8000d9a <HAL_RCC_OscConfig+0x31a>
 8000d82:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000d84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	438a      	bics	r2, r1
 8000d8c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000d90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000d92:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000d94:	2104      	movs	r1, #4
 8000d96:	438a      	bics	r2, r1
 8000d98:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d028      	beq.n	8000df4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000da2:	f7ff fbe1 	bl	8000568 <HAL_GetTick>
 8000da6:	0003      	movs	r3, r0
 8000da8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000daa:	e01d      	b.n	8000de8 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dac:	f7ff fbdc 	bl	8000568 <HAL_GetTick>
 8000db0:	0002      	movs	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <HAL_RCC_OscConfig+0x364>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d915      	bls.n	8000de8 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e078      	b.n	8000eb2 <HAL_RCC_OscConfig+0x432>
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	fffeffff 	.word	0xfffeffff
 8000dc8:	fffbffff 	.word	0xfffbffff
 8000dcc:	ffff80ff 	.word	0xffff80ff
 8000dd0:	ffffc7ff 	.word	0xffffc7ff
 8000dd4:	02dc6c00 	.word	0x02dc6c00
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	20000004 	.word	0x20000004
 8000de0:	fffffeff 	.word	0xfffffeff
 8000de4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000de8:	4b34      	ldr	r3, [pc, #208]	@ (8000ebc <HAL_RCC_OscConfig+0x43c>)
 8000dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dec:	2202      	movs	r2, #2
 8000dee:	4013      	ands	r3, r2
 8000df0:	d0dc      	beq.n	8000dac <HAL_RCC_OscConfig+0x32c>
 8000df2:	e013      	b.n	8000e1c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df4:	f7ff fbb8 	bl	8000568 <HAL_GetTick>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000dfc:	e009      	b.n	8000e12 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dfe:	f7ff fbb3 	bl	8000568 <HAL_GetTick>
 8000e02:	0002      	movs	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	4a2d      	ldr	r2, [pc, #180]	@ (8000ec0 <HAL_RCC_OscConfig+0x440>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e04f      	b.n	8000eb2 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000e12:	4b2a      	ldr	r3, [pc, #168]	@ (8000ebc <HAL_RCC_OscConfig+0x43c>)
 8000e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e16:	2202      	movs	r2, #2
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d1f0      	bne.n	8000dfe <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d105      	bne.n	8000e32 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8000e26:	4b25      	ldr	r3, [pc, #148]	@ (8000ebc <HAL_RCC_OscConfig+0x43c>)
 8000e28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e2a:	4b24      	ldr	r3, [pc, #144]	@ (8000ebc <HAL_RCC_OscConfig+0x43c>)
 8000e2c:	4925      	ldr	r1, [pc, #148]	@ (8000ec4 <HAL_RCC_OscConfig+0x444>)
 8000e2e:	400a      	ands	r2, r1
 8000e30:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2210      	movs	r2, #16
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d039      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d01b      	beq.n	8000e7c <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000e44:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <HAL_RCC_OscConfig+0x43c>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <HAL_RCC_OscConfig+0x43c>)
 8000e4a:	2180      	movs	r1, #128	@ 0x80
 8000e4c:	03c9      	lsls	r1, r1, #15
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e52:	f7ff fb89 	bl	8000568 <HAL_GetTick>
 8000e56:	0003      	movs	r3, r0
 8000e58:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e5c:	f7ff fb84 	bl	8000568 <HAL_GetTick>
 8000e60:	0002      	movs	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e021      	b.n	8000eb2 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8000e6e:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <HAL_RCC_OscConfig+0x43c>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	2380      	movs	r3, #128	@ 0x80
 8000e74:	041b      	lsls	r3, r3, #16
 8000e76:	4013      	ands	r3, r2
 8000e78:	d0f0      	beq.n	8000e5c <HAL_RCC_OscConfig+0x3dc>
 8000e7a:	e019      	b.n	8000eb0 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <HAL_RCC_OscConfig+0x43c>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <HAL_RCC_OscConfig+0x43c>)
 8000e82:	4911      	ldr	r1, [pc, #68]	@ (8000ec8 <HAL_RCC_OscConfig+0x448>)
 8000e84:	400a      	ands	r2, r1
 8000e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e88:	f7ff fb6e 	bl	8000568 <HAL_GetTick>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8000e90:	e008      	b.n	8000ea4 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e92:	f7ff fb69 	bl	8000568 <HAL_GetTick>
 8000e96:	0002      	movs	r2, r0
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e006      	b.n	8000eb2 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <HAL_RCC_OscConfig+0x43c>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	2380      	movs	r3, #128	@ 0x80
 8000eaa:	041b      	lsls	r3, r3, #16
 8000eac:	4013      	ands	r3, r2
 8000eae:	d1f0      	bne.n	8000e92 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b006      	add	sp, #24
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	00001388 	.word	0x00001388
 8000ec4:	efffffff 	.word	0xefffffff
 8000ec8:	ffbfffff 	.word	0xffbfffff

08000ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d101      	bne.n	8000ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e0f6      	b.n	80010ce <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ee0:	4b7d      	ldr	r3, [pc, #500]	@ (80010d8 <HAL_RCC_ClockConfig+0x20c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d91e      	bls.n	8000f2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eee:	4b7a      	ldr	r3, [pc, #488]	@ (80010d8 <HAL_RCC_ClockConfig+0x20c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	4393      	bics	r3, r2
 8000ef6:	0019      	movs	r1, r3
 8000ef8:	4b77      	ldr	r3, [pc, #476]	@ (80010d8 <HAL_RCC_ClockConfig+0x20c>)
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8000f00:	f7ff fb32 	bl	8000568 <HAL_GetTick>
 8000f04:	0003      	movs	r3, r0
 8000f06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f08:	e009      	b.n	8000f1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8000f0a:	f7ff fb2d 	bl	8000568 <HAL_GetTick>
 8000f0e:	0002      	movs	r2, r0
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	4a71      	ldr	r2, [pc, #452]	@ (80010dc <HAL_RCC_ClockConfig+0x210>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e0d7      	b.n	80010ce <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f1e:	4b6e      	ldr	r3, [pc, #440]	@ (80010d8 <HAL_RCC_ClockConfig+0x20c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2207      	movs	r2, #7
 8000f24:	4013      	ands	r3, r2
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d1ee      	bne.n	8000f0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2202      	movs	r2, #2
 8000f32:	4013      	ands	r3, r2
 8000f34:	d017      	beq.n	8000f66 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d008      	beq.n	8000f52 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000f40:	4b67      	ldr	r3, [pc, #412]	@ (80010e0 <HAL_RCC_ClockConfig+0x214>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	4a67      	ldr	r2, [pc, #412]	@ (80010e4 <HAL_RCC_ClockConfig+0x218>)
 8000f46:	401a      	ands	r2, r3
 8000f48:	4b65      	ldr	r3, [pc, #404]	@ (80010e0 <HAL_RCC_ClockConfig+0x214>)
 8000f4a:	21b0      	movs	r1, #176	@ 0xb0
 8000f4c:	0109      	lsls	r1, r1, #4
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f52:	4b63      	ldr	r3, [pc, #396]	@ (80010e0 <HAL_RCC_ClockConfig+0x214>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	4a64      	ldr	r2, [pc, #400]	@ (80010e8 <HAL_RCC_ClockConfig+0x21c>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	4b5f      	ldr	r3, [pc, #380]	@ (80010e0 <HAL_RCC_ClockConfig+0x214>)
 8000f62:	430a      	orrs	r2, r1
 8000f64:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d100      	bne.n	8000f72 <HAL_RCC_ClockConfig+0xa6>
 8000f70:	e061      	b.n	8001036 <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8000f72:	4b5b      	ldr	r3, [pc, #364]	@ (80010e0 <HAL_RCC_ClockConfig+0x214>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	221c      	movs	r2, #28
 8000f78:	4393      	bics	r3, r2
 8000f7a:	0019      	movs	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	4b57      	ldr	r3, [pc, #348]	@ (80010e0 <HAL_RCC_ClockConfig+0x214>)
 8000f82:	430a      	orrs	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d107      	bne.n	8000f9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f8e:	4b54      	ldr	r3, [pc, #336]	@ (80010e0 <HAL_RCC_ClockConfig+0x214>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	2380      	movs	r3, #128	@ 0x80
 8000f94:	029b      	lsls	r3, r3, #10
 8000f96:	4013      	ands	r3, r2
 8000f98:	d12b      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e097      	b.n	80010ce <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d107      	bne.n	8000fb6 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fa6:	4b4e      	ldr	r3, [pc, #312]	@ (80010e0 <HAL_RCC_ClockConfig+0x214>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	2380      	movs	r3, #128	@ 0x80
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d11f      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e08b      	b.n	80010ce <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d107      	bne.n	8000fce <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8000fbe:	4b48      	ldr	r3, [pc, #288]	@ (80010e0 <HAL_RCC_ClockConfig+0x214>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	2380      	movs	r3, #128	@ 0x80
 8000fc4:	041b      	lsls	r3, r3, #16
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d113      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e07f      	b.n	80010ce <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d106      	bne.n	8000fe4 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000fd6:	4b42      	ldr	r3, [pc, #264]	@ (80010e0 <HAL_RCC_ClockConfig+0x214>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fda:	2202      	movs	r2, #2
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d108      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e074      	b.n	80010ce <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000fe4:	4b3e      	ldr	r3, [pc, #248]	@ (80010e0 <HAL_RCC_ClockConfig+0x214>)
 8000fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fe8:	2202      	movs	r2, #2
 8000fea:	4013      	ands	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e06d      	b.n	80010ce <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80010e0 <HAL_RCC_ClockConfig+0x214>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	2207      	movs	r2, #7
 8000ff8:	4393      	bics	r3, r2
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	4b37      	ldr	r3, [pc, #220]	@ (80010e0 <HAL_RCC_ClockConfig+0x214>)
 8001002:	430a      	orrs	r2, r1
 8001004:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001006:	f7ff faaf 	bl	8000568 <HAL_GetTick>
 800100a:	0003      	movs	r3, r0
 800100c:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800100e:	e009      	b.n	8001024 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001010:	f7ff faaa 	bl	8000568 <HAL_GetTick>
 8001014:	0002      	movs	r2, r0
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	4a30      	ldr	r2, [pc, #192]	@ (80010dc <HAL_RCC_ClockConfig+0x210>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e054      	b.n	80010ce <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001024:	4b2e      	ldr	r3, [pc, #184]	@ (80010e0 <HAL_RCC_ClockConfig+0x214>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	2238      	movs	r2, #56	@ 0x38
 800102a:	401a      	ands	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	429a      	cmp	r2, r3
 8001034:	d1ec      	bne.n	8001010 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001036:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <HAL_RCC_ClockConfig+0x20c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2207      	movs	r2, #7
 800103c:	4013      	ands	r3, r2
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d21e      	bcs.n	8001082 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001044:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <HAL_RCC_ClockConfig+0x20c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2207      	movs	r2, #7
 800104a:	4393      	bics	r3, r2
 800104c:	0019      	movs	r1, r3
 800104e:	4b22      	ldr	r3, [pc, #136]	@ (80010d8 <HAL_RCC_ClockConfig+0x20c>)
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001056:	f7ff fa87 	bl	8000568 <HAL_GetTick>
 800105a:	0003      	movs	r3, r0
 800105c:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800105e:	e009      	b.n	8001074 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001060:	f7ff fa82 	bl	8000568 <HAL_GetTick>
 8001064:	0002      	movs	r2, r0
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	4a1c      	ldr	r2, [pc, #112]	@ (80010dc <HAL_RCC_ClockConfig+0x210>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e02c      	b.n	80010ce <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001074:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <HAL_RCC_ClockConfig+0x20c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2207      	movs	r2, #7
 800107a:	4013      	ands	r3, r2
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	429a      	cmp	r2, r3
 8001080:	d1ee      	bne.n	8001060 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2204      	movs	r2, #4
 8001088:	4013      	ands	r3, r2
 800108a:	d009      	beq.n	80010a0 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800108c:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <HAL_RCC_ClockConfig+0x214>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	4a16      	ldr	r2, [pc, #88]	@ (80010ec <HAL_RCC_ClockConfig+0x220>)
 8001092:	4013      	ands	r3, r2
 8001094:	0019      	movs	r1, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691a      	ldr	r2, [r3, #16]
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <HAL_RCC_ClockConfig+0x214>)
 800109c:	430a      	orrs	r2, r1
 800109e:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80010a0:	f000 f82c 	bl	80010fc <HAL_RCC_GetSysClockFreq>
 80010a4:	0001      	movs	r1, r0
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <HAL_RCC_ClockConfig+0x214>)
 80010a8:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80010aa:	0a1b      	lsrs	r3, r3, #8
 80010ac:	220f      	movs	r2, #15
 80010ae:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <HAL_RCC_ClockConfig+0x224>)
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80010b6:	221f      	movs	r2, #31
 80010b8:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80010ba:	000a      	movs	r2, r1
 80010bc:	40da      	lsrs	r2, r3
 80010be:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <HAL_RCC_ClockConfig+0x228>)
 80010c0:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80010c2:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <HAL_RCC_ClockConfig+0x22c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	0018      	movs	r0, r3
 80010c8:	f7ff f9f2 	bl	80004b0 <HAL_InitTick>
 80010cc:	0003      	movs	r3, r0
}
 80010ce:	0018      	movs	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b004      	add	sp, #16
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			@ (mov r8, r8)
 80010d8:	40022000 	.word	0x40022000
 80010dc:	00001388 	.word	0x00001388
 80010e0:	40021000 	.word	0x40021000
 80010e4:	ffff84ff 	.word	0xffff84ff
 80010e8:	fffff0ff 	.word	0xfffff0ff
 80010ec:	ffff8fff 	.word	0xffff8fff
 80010f0:	0800121c 	.word	0x0800121c
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8001102:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	2207      	movs	r2, #7
 800110a:	4013      	ands	r3, r2
 800110c:	3301      	adds	r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001110:	4b23      	ldr	r3, [pc, #140]	@ (80011a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2238      	movs	r2, #56	@ 0x38
 8001116:	4013      	ands	r3, r2
 8001118:	d10f      	bne.n	800113a <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800111a:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	0adb      	lsrs	r3, r3, #11
 8001120:	2207      	movs	r2, #7
 8001122:	4013      	ands	r3, r2
 8001124:	2201      	movs	r2, #1
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	481d      	ldr	r0, [pc, #116]	@ (80011a4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001130:	f7fe ffea 	bl	8000108 <__udivsi3>
 8001134:	0003      	movs	r3, r0
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	e027      	b.n	800118a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800113a:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2238      	movs	r2, #56	@ 0x38
 8001140:	4013      	ands	r3, r2
 8001142:	2b08      	cmp	r3, #8
 8001144:	d102      	bne.n	800114c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001146:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	e01e      	b.n	800118a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800114c:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	2238      	movs	r2, #56	@ 0x38
 8001152:	4013      	ands	r3, r2
 8001154:	2b20      	cmp	r3, #32
 8001156:	d103      	bne.n	8001160 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001158:	2380      	movs	r3, #128	@ 0x80
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	e014      	b.n	800118a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001160:	4b0f      	ldr	r3, [pc, #60]	@ (80011a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2238      	movs	r2, #56	@ 0x38
 8001166:	4013      	ands	r3, r2
 8001168:	2b18      	cmp	r3, #24
 800116a:	d103      	bne.n	8001174 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800116c:	23fa      	movs	r3, #250	@ 0xfa
 800116e:	01db      	lsls	r3, r3, #7
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	e00a      	b.n	800118a <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8001174:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2238      	movs	r2, #56	@ 0x38
 800117a:	4013      	ands	r3, r2
 800117c:	2b10      	cmp	r3, #16
 800117e:	d102      	bne.n	8001186 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	e001      	b.n	800118a <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 800118a:	68b9      	ldr	r1, [r7, #8]
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f7fe ffbb 	bl	8000108 <__udivsi3>
 8001192:	0003      	movs	r3, r0
 8001194:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	0018      	movs	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	b004      	add	sp, #16
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	02dc6c00 	.word	0x02dc6c00
 80011a8:	007a1200 	.word	0x007a1200

080011ac <memset>:
 80011ac:	0003      	movs	r3, r0
 80011ae:	1882      	adds	r2, r0, r2
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d100      	bne.n	80011b6 <memset+0xa>
 80011b4:	4770      	bx	lr
 80011b6:	7019      	strb	r1, [r3, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	e7f9      	b.n	80011b0 <memset+0x4>

080011bc <__libc_init_array>:
 80011bc:	b570      	push	{r4, r5, r6, lr}
 80011be:	2600      	movs	r6, #0
 80011c0:	4c0c      	ldr	r4, [pc, #48]	@ (80011f4 <__libc_init_array+0x38>)
 80011c2:	4d0d      	ldr	r5, [pc, #52]	@ (80011f8 <__libc_init_array+0x3c>)
 80011c4:	1b64      	subs	r4, r4, r5
 80011c6:	10a4      	asrs	r4, r4, #2
 80011c8:	42a6      	cmp	r6, r4
 80011ca:	d109      	bne.n	80011e0 <__libc_init_array+0x24>
 80011cc:	2600      	movs	r6, #0
 80011ce:	f000 f819 	bl	8001204 <_init>
 80011d2:	4c0a      	ldr	r4, [pc, #40]	@ (80011fc <__libc_init_array+0x40>)
 80011d4:	4d0a      	ldr	r5, [pc, #40]	@ (8001200 <__libc_init_array+0x44>)
 80011d6:	1b64      	subs	r4, r4, r5
 80011d8:	10a4      	asrs	r4, r4, #2
 80011da:	42a6      	cmp	r6, r4
 80011dc:	d105      	bne.n	80011ea <__libc_init_array+0x2e>
 80011de:	bd70      	pop	{r4, r5, r6, pc}
 80011e0:	00b3      	lsls	r3, r6, #2
 80011e2:	58eb      	ldr	r3, [r5, r3]
 80011e4:	4798      	blx	r3
 80011e6:	3601      	adds	r6, #1
 80011e8:	e7ee      	b.n	80011c8 <__libc_init_array+0xc>
 80011ea:	00b3      	lsls	r3, r6, #2
 80011ec:	58eb      	ldr	r3, [r5, r3]
 80011ee:	4798      	blx	r3
 80011f0:	3601      	adds	r6, #1
 80011f2:	e7f2      	b.n	80011da <__libc_init_array+0x1e>
 80011f4:	0800125c 	.word	0x0800125c
 80011f8:	0800125c 	.word	0x0800125c
 80011fc:	08001260 	.word	0x08001260
 8001200:	0800125c 	.word	0x0800125c

08001204 <_init>:
 8001204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800120a:	bc08      	pop	{r3}
 800120c:	469e      	mov	lr, r3
 800120e:	4770      	bx	lr

08001210 <_fini>:
 8001210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001216:	bc08      	pop	{r3}
 8001218:	469e      	mov	lr, r3
 800121a:	4770      	bx	lr
