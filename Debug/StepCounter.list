
StepCounter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d30  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002df0  08002df0  00003df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e68  08002e68  0000403c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e68  08002e68  0000403c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e68  08002e68  0000403c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e68  08002e68  00003e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e6c  08002e6c  00003e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08002e70  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000003c  08002eac  0000403c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08002eac  0000412c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000790a  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002149  00000000  00000000  0000b96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0000dab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000063a  00000000  00000000  0000e350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159e1  00000000  00000000  0000e98a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9c4  00000000  00000000  0002436b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822a9  00000000  00000000  00030d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2fd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b44  00000000  00000000  000b301c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000b4b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000003c 	.word	0x2000003c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002dd8 	.word	0x08002dd8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000040 	.word	0x20000040
 8000104:	08002dd8 	.word	0x08002dd8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	230c      	movs	r3, #12
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f002 fda6 	bl	8002d80 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000234:	4b31      	ldr	r3, [pc, #196]	@ (80002fc <MX_ADC1_Init+0xdc>)
 8000236:	4a32      	ldr	r2, [pc, #200]	@ (8000300 <MX_ADC1_Init+0xe0>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800023a:	4b30      	ldr	r3, [pc, #192]	@ (80002fc <MX_ADC1_Init+0xdc>)
 800023c:	22c0      	movs	r2, #192	@ 0xc0
 800023e:	0612      	lsls	r2, r2, #24
 8000240:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000242:	4b2e      	ldr	r3, [pc, #184]	@ (80002fc <MX_ADC1_Init+0xdc>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000248:	4b2c      	ldr	r3, [pc, #176]	@ (80002fc <MX_ADC1_Init+0xdc>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800024e:	4b2b      	ldr	r3, [pc, #172]	@ (80002fc <MX_ADC1_Init+0xdc>)
 8000250:	2280      	movs	r2, #128	@ 0x80
 8000252:	0612      	lsls	r2, r2, #24
 8000254:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000256:	4b29      	ldr	r3, [pc, #164]	@ (80002fc <MX_ADC1_Init+0xdc>)
 8000258:	2204      	movs	r2, #4
 800025a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800025c:	4b27      	ldr	r3, [pc, #156]	@ (80002fc <MX_ADC1_Init+0xdc>)
 800025e:	2200      	movs	r2, #0
 8000260:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000262:	4b26      	ldr	r3, [pc, #152]	@ (80002fc <MX_ADC1_Init+0xdc>)
 8000264:	2200      	movs	r2, #0
 8000266:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000268:	4b24      	ldr	r3, [pc, #144]	@ (80002fc <MX_ADC1_Init+0xdc>)
 800026a:	2200      	movs	r2, #0
 800026c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 800026e:	4b23      	ldr	r3, [pc, #140]	@ (80002fc <MX_ADC1_Init+0xdc>)
 8000270:	2200      	movs	r2, #0
 8000272:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000274:	4b21      	ldr	r3, [pc, #132]	@ (80002fc <MX_ADC1_Init+0xdc>)
 8000276:	2220      	movs	r2, #32
 8000278:	2100      	movs	r1, #0
 800027a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800027c:	4b1f      	ldr	r3, [pc, #124]	@ (80002fc <MX_ADC1_Init+0xdc>)
 800027e:	2200      	movs	r2, #0
 8000280:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000282:	4b1e      	ldr	r3, [pc, #120]	@ (80002fc <MX_ADC1_Init+0xdc>)
 8000284:	2200      	movs	r2, #0
 8000286:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000288:	4b1c      	ldr	r3, [pc, #112]	@ (80002fc <MX_ADC1_Init+0xdc>)
 800028a:	222c      	movs	r2, #44	@ 0x2c
 800028c:	2100      	movs	r1, #0
 800028e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000290:	4b1a      	ldr	r3, [pc, #104]	@ (80002fc <MX_ADC1_Init+0xdc>)
 8000292:	2200      	movs	r2, #0
 8000294:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000296:	4b19      	ldr	r3, [pc, #100]	@ (80002fc <MX_ADC1_Init+0xdc>)
 8000298:	2200      	movs	r2, #0
 800029a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800029c:	4b17      	ldr	r3, [pc, #92]	@ (80002fc <MX_ADC1_Init+0xdc>)
 800029e:	223c      	movs	r2, #60	@ 0x3c
 80002a0:	2100      	movs	r1, #0
 80002a2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80002a4:	4b15      	ldr	r3, [pc, #84]	@ (80002fc <MX_ADC1_Init+0xdc>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002aa:	4b14      	ldr	r3, [pc, #80]	@ (80002fc <MX_ADC1_Init+0xdc>)
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fe77 	bl	8000fa0 <HAL_ADC_Init>
 80002b2:	1e03      	subs	r3, r0, #0
 80002b4:	d001      	beq.n	80002ba <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80002b6:	f000 fb7c 	bl	80009b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4a11      	ldr	r2, [pc, #68]	@ (8000304 <MX_ADC1_Init+0xe4>)
 80002be:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2201      	movs	r2, #1
 80002c4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c6:	1d3a      	adds	r2, r7, #4
 80002c8:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <MX_ADC1_Init+0xdc>)
 80002ca:	0011      	movs	r1, r2
 80002cc:	0018      	movs	r0, r3
 80002ce:	f001 f8ab 	bl	8001428 <HAL_ADC_ConfigChannel>
 80002d2:	1e03      	subs	r3, r0, #0
 80002d4:	d001      	beq.n	80002da <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80002d6:	f000 fb6c 	bl	80009b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000308 <MX_ADC1_Init+0xe8>)
 80002de:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e0:	1d3a      	adds	r2, r7, #4
 80002e2:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <MX_ADC1_Init+0xdc>)
 80002e4:	0011      	movs	r1, r2
 80002e6:	0018      	movs	r0, r3
 80002e8:	f001 f89e 	bl	8001428 <HAL_ADC_ConfigChannel>
 80002ec:	1e03      	subs	r3, r0, #0
 80002ee:	d001      	beq.n	80002f4 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80002f0:	f000 fb5f 	bl	80009b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f4:	46c0      	nop			@ (mov r8, r8)
 80002f6:	46bd      	mov	sp, r7
 80002f8:	b004      	add	sp, #16
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000058 	.word	0x20000058
 8000300:	40012400 	.word	0x40012400
 8000304:	2c000800 	.word	0x2c000800
 8000308:	30001000 	.word	0x30001000

0800030c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800030c:	b590      	push	{r4, r7, lr}
 800030e:	b093      	sub	sp, #76	@ 0x4c
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000314:	2334      	movs	r3, #52	@ 0x34
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	0018      	movs	r0, r3
 800031a:	2314      	movs	r3, #20
 800031c:	001a      	movs	r2, r3
 800031e:	2100      	movs	r1, #0
 8000320:	f002 fd2e 	bl	8002d80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000324:	2414      	movs	r4, #20
 8000326:	193b      	adds	r3, r7, r4
 8000328:	0018      	movs	r0, r3
 800032a:	2320      	movs	r3, #32
 800032c:	001a      	movs	r2, r3
 800032e:	2100      	movs	r1, #0
 8000330:	f002 fd26 	bl	8002d80 <memset>
  if(adcHandle->Instance==ADC1)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a34      	ldr	r2, [pc, #208]	@ (800040c <HAL_ADC_MspInit+0x100>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d162      	bne.n	8000404 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800033e:	193b      	adds	r3, r7, r4
 8000340:	2220      	movs	r2, #32
 8000342:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000344:	193b      	adds	r3, r7, r4
 8000346:	2200      	movs	r2, #0
 8000348:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034a:	193b      	adds	r3, r7, r4
 800034c:	0018      	movs	r0, r3
 800034e:	f002 fc1b 	bl	8002b88 <HAL_RCCEx_PeriphCLKConfig>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 8000356:	f000 fb2c 	bl	80009b2 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800035a:	4b2d      	ldr	r3, [pc, #180]	@ (8000410 <HAL_ADC_MspInit+0x104>)
 800035c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800035e:	4b2c      	ldr	r3, [pc, #176]	@ (8000410 <HAL_ADC_MspInit+0x104>)
 8000360:	2180      	movs	r1, #128	@ 0x80
 8000362:	0349      	lsls	r1, r1, #13
 8000364:	430a      	orrs	r2, r1
 8000366:	641a      	str	r2, [r3, #64]	@ 0x40
 8000368:	4b29      	ldr	r3, [pc, #164]	@ (8000410 <HAL_ADC_MspInit+0x104>)
 800036a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800036c:	2380      	movs	r3, #128	@ 0x80
 800036e:	035b      	lsls	r3, r3, #13
 8000370:	4013      	ands	r3, r2
 8000372:	613b      	str	r3, [r7, #16]
 8000374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000376:	4b26      	ldr	r3, [pc, #152]	@ (8000410 <HAL_ADC_MspInit+0x104>)
 8000378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800037a:	4b25      	ldr	r3, [pc, #148]	@ (8000410 <HAL_ADC_MspInit+0x104>)
 800037c:	2104      	movs	r1, #4
 800037e:	430a      	orrs	r2, r1
 8000380:	635a      	str	r2, [r3, #52]	@ 0x34
 8000382:	4b23      	ldr	r3, [pc, #140]	@ (8000410 <HAL_ADC_MspInit+0x104>)
 8000384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000386:	2204      	movs	r2, #4
 8000388:	4013      	ands	r3, r2
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN11
    PC5     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = JOYSTICK_X_Pin|JOYSTICK_Y_Pin;
 800038e:	2134      	movs	r1, #52	@ 0x34
 8000390:	187b      	adds	r3, r7, r1
 8000392:	2230      	movs	r2, #48	@ 0x30
 8000394:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000396:	187b      	adds	r3, r7, r1
 8000398:	2203      	movs	r2, #3
 800039a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039c:	187b      	adds	r3, r7, r1
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000414 <HAL_ADC_MspInit+0x108>)
 80003a6:	0019      	movs	r1, r3
 80003a8:	0010      	movs	r0, r2
 80003aa:	f001 fe51 	bl	8002050 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80003ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000418 <HAL_ADC_MspInit+0x10c>)
 80003b0:	4a1a      	ldr	r2, [pc, #104]	@ (800041c <HAL_ADC_MspInit+0x110>)
 80003b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80003b4:	4b18      	ldr	r3, [pc, #96]	@ (8000418 <HAL_ADC_MspInit+0x10c>)
 80003b6:	2205      	movs	r2, #5
 80003b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80003ba:	4b17      	ldr	r3, [pc, #92]	@ (8000418 <HAL_ADC_MspInit+0x10c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80003c0:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <HAL_ADC_MspInit+0x10c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80003c6:	4b14      	ldr	r3, [pc, #80]	@ (8000418 <HAL_ADC_MspInit+0x10c>)
 80003c8:	2280      	movs	r2, #128	@ 0x80
 80003ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80003cc:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <HAL_ADC_MspInit+0x10c>)
 80003ce:	2280      	movs	r2, #128	@ 0x80
 80003d0:	0052      	lsls	r2, r2, #1
 80003d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80003d4:	4b10      	ldr	r3, [pc, #64]	@ (8000418 <HAL_ADC_MspInit+0x10c>)
 80003d6:	2280      	movs	r2, #128	@ 0x80
 80003d8:	00d2      	lsls	r2, r2, #3
 80003da:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80003dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000418 <HAL_ADC_MspInit+0x10c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80003e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000418 <HAL_ADC_MspInit+0x10c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80003e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <HAL_ADC_MspInit+0x10c>)
 80003ea:	0018      	movs	r0, r3
 80003ec:	f001 fbdc 	bl	8001ba8 <HAL_DMA_Init>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 80003f4:	f000 fadd 	bl	80009b2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a07      	ldr	r2, [pc, #28]	@ (8000418 <HAL_ADC_MspInit+0x10c>)
 80003fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80003fe:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <HAL_ADC_MspInit+0x10c>)
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000404:	46c0      	nop			@ (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	b013      	add	sp, #76	@ 0x4c
 800040a:	bd90      	pop	{r4, r7, pc}
 800040c:	40012400 	.word	0x40012400
 8000410:	40021000 	.word	0x40021000
 8000414:	50000800 	.word	0x50000800
 8000418:	200000bc 	.word	0x200000bc
 800041c:	40020008 	.word	0x40020008

08000420 <app_main>:

void button_task_execute(void);
void blinky_task_execute(void);

void app_main(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
	// Initialise and start timer.
	uint32_t ticks;
	buttonTaskNextRun = HAL_GetTick() + BUTTON_TASK_PERIOD_TICKS;
 8000426:	f000 fc69 	bl	8000cfc <HAL_GetTick>
 800042a:	0003      	movs	r3, r0
 800042c:	330a      	adds	r3, #10
 800042e:	001a      	movs	r2, r3
 8000430:	4b20      	ldr	r3, [pc, #128]	@ (80004b4 <app_main+0x94>)
 8000432:	601a      	str	r2, [r3, #0]
	blinkyTaskNextRun = HAL_GetTick() + BLINKY_TASK_PERIOD_TICKS;
 8000434:	f000 fc62 	bl	8000cfc <HAL_GetTick>
 8000438:	0003      	movs	r3, r0
 800043a:	33f5      	adds	r3, #245	@ 0xf5
 800043c:	33ff      	adds	r3, #255	@ 0xff
 800043e:	001a      	movs	r2, r3
 8000440:	4b1d      	ldr	r3, [pc, #116]	@ (80004b8 <app_main+0x98>)
 8000442:	601a      	str	r2, [r3, #0]
	joystickTaskNextRun = HAL_GetTick() + JOYSTICK_TASK_PERIOD_TICKS;
 8000444:	f000 fc5a 	bl	8000cfc <HAL_GetTick>
 8000448:	0003      	movs	r3, r0
 800044a:	33f5      	adds	r3, #245	@ 0xf5
 800044c:	33ff      	adds	r3, #255	@ 0xff
 800044e:	001a      	movs	r2, r3
 8000450:	4b1a      	ldr	r3, [pc, #104]	@ (80004bc <app_main+0x9c>)
 8000452:	601a      	str	r2, [r3, #0]

	// Initialise tasks.
	buttons_task_init();
 8000454:	f000 fb63 	bl	8000b1e <buttons_task_init>

	// Periodically execute tasks at the frequency defined above.
	while(1)
	{
		ticks = HAL_GetTick();
 8000458:	f000 fc50 	bl	8000cfc <HAL_GetTick>
 800045c:	0003      	movs	r3, r0
 800045e:	607b      	str	r3, [r7, #4]

		if(ticks > buttonTaskNextRun)
 8000460:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <app_main+0x94>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	429a      	cmp	r2, r3
 8000468:	d907      	bls.n	800047a <app_main+0x5a>
		{
		  buttons_task_execute();
 800046a:	f000 fb68 	bl	8000b3e <buttons_task_execute>
		  buttonTaskNextRun += BUTTON_TASK_PERIOD_TICKS;
 800046e:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <app_main+0x94>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	330a      	adds	r3, #10
 8000474:	001a      	movs	r2, r3
 8000476:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <app_main+0x94>)
 8000478:	601a      	str	r2, [r3, #0]
		}

		if (ticks > blinkyTaskNextRun)
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <app_main+0x98>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	429a      	cmp	r2, r3
 8000482:	d908      	bls.n	8000496 <app_main+0x76>
		{
		  blinky_task_execute();
 8000484:	f000 fb40 	bl	8000b08 <blinky_task_execute>
		  blinkyTaskNextRun += BLINKY_TASK_PERIOD_TICKS;
 8000488:	4b0b      	ldr	r3, [pc, #44]	@ (80004b8 <app_main+0x98>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	33f5      	adds	r3, #245	@ 0xf5
 800048e:	33ff      	adds	r3, #255	@ 0xff
 8000490:	001a      	movs	r2, r3
 8000492:	4b09      	ldr	r3, [pc, #36]	@ (80004b8 <app_main+0x98>)
 8000494:	601a      	str	r2, [r3, #0]
		}

		if (ticks > joystickTaskNextRun)
 8000496:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <app_main+0x9c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	429a      	cmp	r2, r3
 800049e:	d9db      	bls.n	8000458 <app_main+0x38>
		{
		  joystick_task_execute();
 80004a0:	f000 fb78 	bl	8000b94 <joystick_task_execute>
		  joystickTaskNextRun += JOYSTICK_TASK_PERIOD_TICKS;
 80004a4:	4b05      	ldr	r3, [pc, #20]	@ (80004bc <app_main+0x9c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	33f5      	adds	r3, #245	@ 0xf5
 80004aa:	33ff      	adds	r3, #255	@ 0xff
 80004ac:	001a      	movs	r2, r3
 80004ae:	4b03      	ldr	r3, [pc, #12]	@ (80004bc <app_main+0x9c>)
 80004b0:	601a      	str	r2, [r3, #0]
		ticks = HAL_GetTick();
 80004b2:	e7d1      	b.n	8000458 <app_main+0x38>
 80004b4:	20000118 	.word	0x20000118
 80004b8:	2000011c 	.word	0x2000011c
 80004bc:	20000120 	.word	0x20000120

080004c0 <buttons_init>:
};

// *******************************************************
// buttons_init: Initialise the variables associated with the set of buttons.
void buttons_init (void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	e029      	b.n	8000520 <buttons_init+0x60>
	{
		buttons[i].state = buttons[i].normalState;
 80004cc:	4918      	ldr	r1, [pc, #96]	@ (8000530 <buttons_init+0x70>)
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	0013      	movs	r3, r2
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	189b      	adds	r3, r3, r2
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	18cb      	adds	r3, r1, r3
 80004da:	3306      	adds	r3, #6
 80004dc:	7818      	ldrb	r0, [r3, #0]
 80004de:	4914      	ldr	r1, [pc, #80]	@ (8000530 <buttons_init+0x70>)
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	0013      	movs	r3, r2
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	189b      	adds	r3, r3, r2
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	18cb      	adds	r3, r1, r3
 80004ec:	3307      	adds	r3, #7
 80004ee:	1c02      	adds	r2, r0, #0
 80004f0:	701a      	strb	r2, [r3, #0]
		buttons[i].newStateCount = 0;
 80004f2:	490f      	ldr	r1, [pc, #60]	@ (8000530 <buttons_init+0x70>)
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	0013      	movs	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	189b      	adds	r3, r3, r2
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	18cb      	adds	r3, r1, r3
 8000500:	3308      	adds	r3, #8
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
		buttons[i].hasChanged = false;
 8000506:	490a      	ldr	r1, [pc, #40]	@ (8000530 <buttons_init+0x70>)
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	0013      	movs	r3, r2
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	189b      	adds	r3, r3, r2
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	18cb      	adds	r3, r1, r3
 8000514:	3309      	adds	r3, #9
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BUTTONS; i++)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3301      	adds	r3, #1
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b03      	cmp	r3, #3
 8000524:	ddd2      	ble.n	80004cc <buttons_init+0xc>
	}
}
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	46c0      	nop			@ (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000000 	.word	0x20000000

08000534 <buttons_update>:
// Debouncing algorithm: A finite state machine (FSM) is associated with each button.
// A state change can be declared only after NUM_BUT_POLLS consecutive polls have
// read the pin in the opposite condition, before the state changes and
// a flag is set. Set NUM_BUT_POLLS according to the polling rate.
void buttons_update (void)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
	// Iterate through the buttons, updating button variables as required
	for (int i = 0; i < NUM_BUTTONS; i++)
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	e06f      	b.n	8000620 <buttons_update+0xec>
	{
		// Read the pin value
		GPIO_PinState rawState = HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin);
 8000540:	493b      	ldr	r1, [pc, #236]	@ (8000630 <buttons_update+0xfc>)
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	0013      	movs	r3, r2
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	189b      	adds	r3, r3, r2
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	5858      	ldr	r0, [r3, r1]
 800054e:	4938      	ldr	r1, [pc, #224]	@ (8000630 <buttons_update+0xfc>)
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	0013      	movs	r3, r2
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	189b      	adds	r3, r3, r2
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	18cb      	adds	r3, r1, r3
 800055c:	3304      	adds	r3, #4
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	1cfc      	adds	r4, r7, #3
 8000562:	0019      	movs	r1, r3
 8000564:	f001 fee6 	bl	8002334 <HAL_GPIO_ReadPin>
 8000568:	0003      	movs	r3, r0
 800056a:	7023      	strb	r3, [r4, #0]

		// If reading is different from last confirmed state, increment counter
        if (rawState != buttons[i].state)
 800056c:	4930      	ldr	r1, [pc, #192]	@ (8000630 <buttons_update+0xfc>)
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	0013      	movs	r3, r2
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	189b      	adds	r3, r3, r2
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	18cb      	adds	r3, r1, r3
 800057a:	3307      	adds	r3, #7
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	1cfa      	adds	r2, r7, #3
 8000580:	7812      	ldrb	r2, [r2, #0]
 8000582:	429a      	cmp	r2, r3
 8000584:	d03f      	beq.n	8000606 <buttons_update+0xd2>
        {
        	buttons[i].newStateCount++;
 8000586:	492a      	ldr	r1, [pc, #168]	@ (8000630 <buttons_update+0xfc>)
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	0013      	movs	r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	189b      	adds	r3, r3, r2
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	18cb      	adds	r3, r1, r3
 8000594:	3308      	adds	r3, #8
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	b2d8      	uxtb	r0, r3
 800059c:	4924      	ldr	r1, [pc, #144]	@ (8000630 <buttons_update+0xfc>)
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	0013      	movs	r3, r2
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	189b      	adds	r3, r3, r2
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	18cb      	adds	r3, r1, r3
 80005aa:	3308      	adds	r3, #8
 80005ac:	1c02      	adds	r2, r0, #0
 80005ae:	701a      	strb	r2, [r3, #0]

        	// If count exceeds poll count, confirm change of state
        	if (buttons[i].newStateCount >= NUM_BUT_POLLS)
 80005b0:	491f      	ldr	r1, [pc, #124]	@ (8000630 <buttons_update+0xfc>)
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	0013      	movs	r3, r2
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	189b      	adds	r3, r3, r2
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	18cb      	adds	r3, r1, r3
 80005be:	3308      	adds	r3, #8
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d929      	bls.n	800061a <buttons_update+0xe6>
        	{
        		buttons[i].state = rawState;
 80005c6:	491a      	ldr	r1, [pc, #104]	@ (8000630 <buttons_update+0xfc>)
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	0013      	movs	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	189b      	adds	r3, r3, r2
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	18cb      	adds	r3, r1, r3
 80005d4:	3307      	adds	r3, #7
 80005d6:	1cfa      	adds	r2, r7, #3
 80005d8:	7812      	ldrb	r2, [r2, #0]
 80005da:	701a      	strb	r2, [r3, #0]
        		buttons[i].hasChanged = true;	// Reset by call to buttons_checkButton()
 80005dc:	4914      	ldr	r1, [pc, #80]	@ (8000630 <buttons_update+0xfc>)
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	0013      	movs	r3, r2
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	189b      	adds	r3, r3, r2
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	18cb      	adds	r3, r1, r3
 80005ea:	3309      	adds	r3, #9
 80005ec:	2201      	movs	r2, #1
 80005ee:	701a      	strb	r2, [r3, #0]
        		buttons[i].newStateCount = 0;
 80005f0:	490f      	ldr	r1, [pc, #60]	@ (8000630 <buttons_update+0xfc>)
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	0013      	movs	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	189b      	adds	r3, r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	18cb      	adds	r3, r1, r3
 80005fe:	3308      	adds	r3, #8
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
 8000604:	e009      	b.n	800061a <buttons_update+0xe6>
        	}
        }
        else
        {
        	buttons[i].newStateCount = 0;
 8000606:	490a      	ldr	r1, [pc, #40]	@ (8000630 <buttons_update+0xfc>)
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	0013      	movs	r3, r2
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	189b      	adds	r3, r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	18cb      	adds	r3, r1, r3
 8000614:	3308      	adds	r3, #8
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BUTTONS; i++)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3301      	adds	r3, #1
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b03      	cmp	r3, #3
 8000624:	dd8c      	ble.n	8000540 <buttons_update+0xc>
        }
	}
}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	46c0      	nop			@ (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b003      	add	sp, #12
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	20000000 	.word	0x20000000

08000634 <buttons_checkButton>:
// *******************************************************
// buttons_checkButton: Function returns the new button logical state if the button
// logical state (PUSHED or RELEASED) has changed since the last call,
// otherwise returns NO_CHANGE.
buttonState_t buttons_checkButton (buttonName_t butName)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	0002      	movs	r2, r0
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	701a      	strb	r2, [r3, #0]
	if (buttons[butName].hasChanged)
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	781a      	ldrb	r2, [r3, #0]
 8000644:	4919      	ldr	r1, [pc, #100]	@ (80006ac <buttons_checkButton+0x78>)
 8000646:	0013      	movs	r3, r2
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	189b      	adds	r3, r3, r2
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	18cb      	adds	r3, r1, r3
 8000650:	3309      	adds	r3, #9
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d024      	beq.n	80006a2 <buttons_checkButton+0x6e>
	{
		buttons[butName].hasChanged = false;
 8000658:	1dfb      	adds	r3, r7, #7
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	4913      	ldr	r1, [pc, #76]	@ (80006ac <buttons_checkButton+0x78>)
 800065e:	0013      	movs	r3, r2
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	189b      	adds	r3, r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	18cb      	adds	r3, r1, r3
 8000668:	3309      	adds	r3, #9
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
		if (buttons[butName].state == buttons[butName].normalState)
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	781a      	ldrb	r2, [r3, #0]
 8000672:	490e      	ldr	r1, [pc, #56]	@ (80006ac <buttons_checkButton+0x78>)
 8000674:	0013      	movs	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	189b      	adds	r3, r3, r2
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	18cb      	adds	r3, r1, r3
 800067e:	3307      	adds	r3, #7
 8000680:	7819      	ldrb	r1, [r3, #0]
 8000682:	1dfb      	adds	r3, r7, #7
 8000684:	781a      	ldrb	r2, [r3, #0]
 8000686:	4809      	ldr	r0, [pc, #36]	@ (80006ac <buttons_checkButton+0x78>)
 8000688:	0013      	movs	r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	189b      	adds	r3, r3, r2
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	18c3      	adds	r3, r0, r3
 8000692:	3306      	adds	r3, #6
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	4299      	cmp	r1, r3
 8000698:	d101      	bne.n	800069e <buttons_checkButton+0x6a>
			return RELEASED;
 800069a:	2300      	movs	r3, #0
 800069c:	e002      	b.n	80006a4 <buttons_checkButton+0x70>
		else
			return PUSHED;
 800069e:	2301      	movs	r3, #1
 80006a0:	e000      	b.n	80006a4 <buttons_checkButton+0x70>
	}
	return NO_CHANGE;
 80006a2:	2302      	movs	r3, #2
}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b002      	add	sp, #8
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000000 	.word	0x20000000

080006b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_DMA_Init+0x38>)
 80006b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006ba:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <MX_DMA_Init+0x38>)
 80006bc:	2101      	movs	r1, #1
 80006be:	430a      	orrs	r2, r1
 80006c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_DMA_Init+0x38>)
 80006c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006c6:	2201      	movs	r2, #1
 80006c8:	4013      	ands	r3, r2
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	2009      	movs	r0, #9
 80006d4:	f001 fa36 	bl	8001b44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006d8:	2009      	movs	r0, #9
 80006da:	f001 fa48 	bl	8001b6e <HAL_NVIC_EnableIRQ>

}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b002      	add	sp, #8
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	40021000 	.word	0x40021000

080006ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b08b      	sub	sp, #44	@ 0x2c
 80006f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	2414      	movs	r4, #20
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	0018      	movs	r0, r3
 80006f8:	2314      	movs	r3, #20
 80006fa:	001a      	movs	r2, r3
 80006fc:	2100      	movs	r1, #0
 80006fe:	f002 fb3f 	bl	8002d80 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b79      	ldr	r3, [pc, #484]	@ (80008e8 <MX_GPIO_Init+0x1fc>)
 8000704:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000706:	4b78      	ldr	r3, [pc, #480]	@ (80008e8 <MX_GPIO_Init+0x1fc>)
 8000708:	2104      	movs	r1, #4
 800070a:	430a      	orrs	r2, r1
 800070c:	635a      	str	r2, [r3, #52]	@ 0x34
 800070e:	4b76      	ldr	r3, [pc, #472]	@ (80008e8 <MX_GPIO_Init+0x1fc>)
 8000710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000712:	2204      	movs	r2, #4
 8000714:	4013      	ands	r3, r2
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071a:	4b73      	ldr	r3, [pc, #460]	@ (80008e8 <MX_GPIO_Init+0x1fc>)
 800071c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800071e:	4b72      	ldr	r3, [pc, #456]	@ (80008e8 <MX_GPIO_Init+0x1fc>)
 8000720:	2120      	movs	r1, #32
 8000722:	430a      	orrs	r2, r1
 8000724:	635a      	str	r2, [r3, #52]	@ 0x34
 8000726:	4b70      	ldr	r3, [pc, #448]	@ (80008e8 <MX_GPIO_Init+0x1fc>)
 8000728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800072a:	2220      	movs	r2, #32
 800072c:	4013      	ands	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b6d      	ldr	r3, [pc, #436]	@ (80008e8 <MX_GPIO_Init+0x1fc>)
 8000734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000736:	4b6c      	ldr	r3, [pc, #432]	@ (80008e8 <MX_GPIO_Init+0x1fc>)
 8000738:	2101      	movs	r1, #1
 800073a:	430a      	orrs	r2, r1
 800073c:	635a      	str	r2, [r3, #52]	@ 0x34
 800073e:	4b6a      	ldr	r3, [pc, #424]	@ (80008e8 <MX_GPIO_Init+0x1fc>)
 8000740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000742:	2201      	movs	r2, #1
 8000744:	4013      	ands	r3, r2
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b67      	ldr	r3, [pc, #412]	@ (80008e8 <MX_GPIO_Init+0x1fc>)
 800074c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800074e:	4b66      	ldr	r3, [pc, #408]	@ (80008e8 <MX_GPIO_Init+0x1fc>)
 8000750:	2102      	movs	r1, #2
 8000752:	430a      	orrs	r2, r1
 8000754:	635a      	str	r2, [r3, #52]	@ 0x34
 8000756:	4b64      	ldr	r3, [pc, #400]	@ (80008e8 <MX_GPIO_Init+0x1fc>)
 8000758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800075a:	2202      	movs	r2, #2
 800075c:	4013      	ands	r3, r2
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000762:	4b61      	ldr	r3, [pc, #388]	@ (80008e8 <MX_GPIO_Init+0x1fc>)
 8000764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000766:	4b60      	ldr	r3, [pc, #384]	@ (80008e8 <MX_GPIO_Init+0x1fc>)
 8000768:	2108      	movs	r1, #8
 800076a:	430a      	orrs	r2, r1
 800076c:	635a      	str	r2, [r3, #52]	@ 0x34
 800076e:	4b5e      	ldr	r3, [pc, #376]	@ (80008e8 <MX_GPIO_Init+0x1fc>)
 8000770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000772:	2208      	movs	r2, #8
 8000774:	4013      	ands	r3, r2
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB_DS4_Pin|RGB_DS2_Pin|RGB_DS3_Pin, GPIO_PIN_SET);
 800077a:	495c      	ldr	r1, [pc, #368]	@ (80008ec <MX_GPIO_Init+0x200>)
 800077c:	4b5c      	ldr	r3, [pc, #368]	@ (80008f0 <MX_GPIO_Init+0x204>)
 800077e:	2201      	movs	r2, #1
 8000780:	0018      	movs	r0, r3
 8000782:	f001 fdf4 	bl	800236e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_DS1_GPIO_Port, RGB_DS1_Pin, GPIO_PIN_SET);
 8000786:	4b5b      	ldr	r3, [pc, #364]	@ (80008f4 <MX_GPIO_Init+0x208>)
 8000788:	2201      	movs	r2, #1
 800078a:	2108      	movs	r1, #8
 800078c:	0018      	movs	r0, r3
 800078e:	f001 fdee 	bl	800236e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NUCLEO_LD1_GPIO_Port, NUCLEO_LD1_Pin, GPIO_PIN_RESET);
 8000792:	23a0      	movs	r3, #160	@ 0xa0
 8000794:	05db      	lsls	r3, r3, #23
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	0018      	movs	r0, r3
 800079c:	f001 fde7 	bl	800236e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NUCLEO_LD2_GPIO_Port, NUCLEO_LD2_Pin, GPIO_PIN_RESET);
 80007a0:	2380      	movs	r3, #128	@ 0x80
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4852      	ldr	r0, [pc, #328]	@ (80008f0 <MX_GPIO_Init+0x204>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	0019      	movs	r1, r3
 80007aa:	f001 fde0 	bl	800236e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin, GPIO_PIN_RESET);
 80007ae:	4b52      	ldr	r3, [pc, #328]	@ (80008f8 <MX_GPIO_Init+0x20c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	211c      	movs	r1, #28
 80007b4:	0018      	movs	r0, r3
 80007b6:	f001 fdda 	bl	800236e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	4a4f      	ldr	r2, [pc, #316]	@ (80008fc <MX_GPIO_Init+0x210>)
 80007be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	2202      	movs	r2, #2
 80007ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	4a48      	ldr	r2, [pc, #288]	@ (80008f0 <MX_GPIO_Init+0x204>)
 80007d0:	0019      	movs	r1, r3
 80007d2:	0010      	movs	r0, r2
 80007d4:	f001 fc3c 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RGB_DS4_Pin|RGB_DS2_Pin|RGB_DS3_Pin|NUCLEO_LD2_Pin;
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	4a49      	ldr	r2, [pc, #292]	@ (8000900 <MX_GPIO_Init+0x214>)
 80007dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2201      	movs	r2, #1
 80007e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	4a3f      	ldr	r2, [pc, #252]	@ (80008f0 <MX_GPIO_Init+0x204>)
 80007f4:	0019      	movs	r1, r3
 80007f6:	0010      	movs	r0, r2
 80007f8:	f001 fc2a 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW4_Pin;
 80007fc:	0021      	movs	r1, r4
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2280      	movs	r2, #128	@ 0x80
 8000802:	0192      	lsls	r2, r2, #6
 8000804:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000806:	000c      	movs	r4, r1
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2201      	movs	r2, #1
 8000812:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW4_GPIO_Port, &GPIO_InitStruct);
 8000814:	193b      	adds	r3, r7, r4
 8000816:	4a36      	ldr	r2, [pc, #216]	@ (80008f0 <MX_GPIO_Init+0x204>)
 8000818:	0019      	movs	r1, r3
 800081a:	0010      	movs	r0, r2
 800081c:	f001 fc18 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RGB_DS1_Pin;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2208      	movs	r2, #8
 8000824:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	193b      	adds	r3, r7, r4
 8000828:	2201      	movs	r2, #1
 800082a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RGB_DS1_GPIO_Port, &GPIO_InitStruct);
 8000838:	193b      	adds	r3, r7, r4
 800083a:	4a2e      	ldr	r2, [pc, #184]	@ (80008f4 <MX_GPIO_Init+0x208>)
 800083c:	0019      	movs	r1, r3
 800083e:	0010      	movs	r0, r2
 8000840:	f001 fc06 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUCLEO_LD1_Pin;
 8000844:	193b      	adds	r3, r7, r4
 8000846:	2220      	movs	r2, #32
 8000848:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	193b      	adds	r3, r7, r4
 800084c:	2201      	movs	r2, #1
 800084e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	193b      	adds	r3, r7, r4
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NUCLEO_LD1_GPIO_Port, &GPIO_InitStruct);
 800085c:	193a      	adds	r2, r7, r4
 800085e:	23a0      	movs	r3, #160	@ 0xa0
 8000860:	05db      	lsls	r3, r3, #23
 8000862:	0011      	movs	r1, r2
 8000864:	0018      	movs	r0, r3
 8000866:	f001 fbf3 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOYSTICK_CLICK_Pin;
 800086a:	193b      	adds	r3, r7, r4
 800086c:	2202      	movs	r2, #2
 800086e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	2202      	movs	r2, #2
 800087a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(JOYSTICK_CLICK_GPIO_Port, &GPIO_InitStruct);
 800087c:	193b      	adds	r3, r7, r4
 800087e:	4a21      	ldr	r2, [pc, #132]	@ (8000904 <MX_GPIO_Init+0x218>)
 8000880:	0019      	movs	r1, r3
 8000882:	0010      	movs	r0, r2
 8000884:	f001 fbe4 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin;
 8000888:	193b      	adds	r3, r7, r4
 800088a:	221c      	movs	r2, #28
 800088c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2201      	movs	r2, #1
 8000892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	4a15      	ldr	r2, [pc, #84]	@ (80008f8 <MX_GPIO_Init+0x20c>)
 80008a4:	0019      	movs	r1, r3
 80008a6:	0010      	movs	r0, r2
 80008a8:	f001 fbd2 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW3_Pin;
 80008ac:	0021      	movs	r1, r4
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2280      	movs	r2, #128	@ 0x80
 80008b2:	00d2      	lsls	r2, r2, #3
 80008b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	4a13      	ldr	r2, [pc, #76]	@ (8000908 <MX_GPIO_Init+0x21c>)
 80008ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2202      	movs	r2, #2
 80008c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <MX_GPIO_Init+0x204>)
 80008c6:	0019      	movs	r1, r3
 80008c8:	0010      	movs	r0, r2
 80008ca:	f001 fbc1 	bl	8002050 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2007      	movs	r0, #7
 80008d4:	f001 f936 	bl	8001b44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80008d8:	2007      	movs	r0, #7
 80008da:	f001 f948 	bl	8001b6e <HAL_NVIC_EnableIRQ>

}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b00b      	add	sp, #44	@ 0x2c
 80008e4:	bd90      	pop	{r4, r7, pc}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	40021000 	.word	0x40021000
 80008ec:	00001044 	.word	0x00001044
 80008f0:	50000800 	.word	0x50000800
 80008f4:	50001400 	.word	0x50001400
 80008f8:	50000c00 	.word	0x50000c00
 80008fc:	00000802 	.word	0x00000802
 8000900:	00001244 	.word	0x00001244
 8000904:	50000400 	.word	0x50000400
 8000908:	10110000 	.word	0x10110000

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000910:	f000 f981 	bl	8000c16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000914:	f000 f809 	bl	800092a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000918:	f7ff fee8 	bl	80006ec <MX_GPIO_Init>
  MX_DMA_Init();
 800091c:	f7ff fec8 	bl	80006b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000920:	f7ff fc7e 	bl	8000220 <MX_ADC1_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  app_main();
 8000924:	f7ff fd7c 	bl	8000420 <app_main>
 8000928:	e7fc      	b.n	8000924 <main+0x18>

0800092a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092a:	b590      	push	{r4, r7, lr}
 800092c:	b08f      	sub	sp, #60	@ 0x3c
 800092e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000930:	2418      	movs	r4, #24
 8000932:	193b      	adds	r3, r7, r4
 8000934:	0018      	movs	r0, r3
 8000936:	2320      	movs	r3, #32
 8000938:	001a      	movs	r2, r3
 800093a:	2100      	movs	r1, #0
 800093c:	f002 fa20 	bl	8002d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	0018      	movs	r0, r3
 8000944:	2314      	movs	r3, #20
 8000946:	001a      	movs	r2, r3
 8000948:	2100      	movs	r1, #0
 800094a:	f002 fa19 	bl	8002d80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800094e:	193b      	adds	r3, r7, r4
 8000950:	2202      	movs	r2, #2
 8000952:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	2280      	movs	r2, #128	@ 0x80
 8000958:	0052      	lsls	r2, r2, #1
 800095a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2280      	movs	r2, #128	@ 0x80
 8000960:	0152      	lsls	r2, r2, #5
 8000962:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000964:	193b      	adds	r3, r7, r4
 8000966:	2240      	movs	r2, #64	@ 0x40
 8000968:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096a:	193b      	adds	r3, r7, r4
 800096c:	0018      	movs	r0, r3
 800096e:	f001 fd75 	bl	800245c <HAL_RCC_OscConfig>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000976:	f000 f81c 	bl	80009b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2100      	movs	r1, #0
 800099c:	0018      	movs	r0, r3
 800099e:	f001 ff83 	bl	80028a8 <HAL_RCC_ClockConfig>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0x80>
  {
    Error_Handler();
 80009a6:	f000 f804 	bl	80009b2 <Error_Handler>
  }
}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b00f      	add	sp, #60	@ 0x3c
 80009b0:	bd90      	pop	{r4, r7, pc}

080009b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b6:	b672      	cpsid	i
}
 80009b8:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ba:	46c0      	nop			@ (mov r8, r8)
 80009bc:	e7fd      	b.n	80009ba <Error_Handler+0x8>
	...

080009c0 <rgb_colour_on>:
	GPIO_PinState state = RGB_LEDS[led].active_high ? GPIO_PIN_SET : GPIO_PIN_RESET;
	HAL_GPIO_WritePin(RGB_LEDS[led].port, RGB_LEDS[led].pin, state);
}

void rgb_colour_on(rgb_colour_t colour)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	0002      	movs	r2, r0
 80009c8:	1dfb      	adds	r3, r7, #7
 80009ca:	701a      	strb	r2, [r3, #0]
	GPIO_PinState state = RGB_COLOURS[colour].active_high ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80009cc:	1dfb      	adds	r3, r7, #7
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4a0e      	ldr	r2, [pc, #56]	@ (8000a0c <rgb_colour_on+0x4c>)
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	18d3      	adds	r3, r2, r3
 80009d6:	3306      	adds	r3, #6
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	240f      	movs	r4, #15
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RGB_COLOURS[colour].port, RGB_COLOURS[colour].pin, state);
 80009e0:	1dfb      	adds	r3, r7, #7
 80009e2:	781a      	ldrb	r2, [r3, #0]
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <rgb_colour_on+0x4c>)
 80009e6:	00d2      	lsls	r2, r2, #3
 80009e8:	58d0      	ldr	r0, [r2, r3]
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4a07      	ldr	r2, [pc, #28]	@ (8000a0c <rgb_colour_on+0x4c>)
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	18d3      	adds	r3, r2, r3
 80009f4:	3304      	adds	r3, #4
 80009f6:	8819      	ldrh	r1, [r3, #0]
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	001a      	movs	r2, r3
 80009fe:	f001 fcb6 	bl	800236e <HAL_GPIO_WritePin>
}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b005      	add	sp, #20
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	08002e10 	.word	0x08002e10

08000a10 <rgb_led_toggle>:
	GPIO_PinState state = RGB_COLOURS[colour].active_high ? GPIO_PIN_RESET : GPIO_PIN_SET;
	HAL_GPIO_WritePin(RGB_COLOURS[colour].port, RGB_COLOURS[colour].pin, state);
}

void rgb_led_toggle(rgb_led_t led)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	0002      	movs	r2, r0
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(RGB_LEDS[led].port, RGB_LEDS[led].pin);
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781a      	ldrb	r2, [r3, #0]
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <rgb_led_toggle+0x34>)
 8000a22:	00d2      	lsls	r2, r2, #3
 8000a24:	58d0      	ldr	r0, [r2, r3]
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	4a06      	ldr	r2, [pc, #24]	@ (8000a44 <rgb_led_toggle+0x34>)
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	18d3      	adds	r3, r2, r3
 8000a30:	3304      	adds	r3, #4
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	0019      	movs	r1, r3
 8000a36:	f001 fcb7 	bl	80023a8 <HAL_GPIO_TogglePin>
}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	08002df0 	.word	0x08002df0

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	430a      	orrs	r2, r1
 8000a58:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4013      	ands	r3, r2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a6c:	2180      	movs	r1, #128	@ 0x80
 8000a6e:	0549      	lsls	r1, r1, #21
 8000a70:	430a      	orrs	r2, r1
 8000a72:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a74:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a78:	2380      	movs	r3, #128	@ 0x80
 8000a7a:	055b      	lsls	r3, r3, #21
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	40021000 	.word	0x40021000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	46c0      	nop			@ (mov r8, r8)
 8000a96:	e7fd      	b.n	8000a94 <NMI_Handler+0x4>

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	46c0      	nop			@ (mov r8, r8)
 8000a9e:	e7fd      	b.n	8000a9c <HardFault_Handler+0x4>

08000aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab8:	f000 f90e 	bl	8000cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abc:	46c0      	nop			@ (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 8000ac6:	2380      	movs	r3, #128	@ 0x80
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 fc88 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000adc:	4b03      	ldr	r3, [pc, #12]	@ (8000aec <DMA1_Channel1_IRQHandler+0x14>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f001 f974 	bl	8001dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ae4:	46c0      	nop			@ (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	200000bc 	.word	0x200000bc

08000af0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000af4:	4b03      	ldr	r3, [pc, #12]	@ (8000b04 <SystemInit+0x14>)
 8000af6:	2280      	movs	r2, #128	@ 0x80
 8000af8:	0512      	lsls	r2, r2, #20
 8000afa:	609a      	str	r2, [r3, #8]
#endif
}
 8000afc:	46c0      	nop			@ (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <blinky_task_execute>:
#include "task_blinky.h"
#include "gpio.h"

void blinky_task_execute(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	// Toggle LD1
	HAL_GPIO_TogglePin(NUCLEO_LD1_GPIO_Port, NUCLEO_LD1_Pin);
 8000b0c:	23a0      	movs	r3, #160	@ 0xa0
 8000b0e:	05db      	lsls	r3, r3, #23
 8000b10:	2120      	movs	r1, #32
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 fc48 	bl	80023a8 <HAL_GPIO_TogglePin>
}
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <buttons_task_init>:
#include "task_buttons.h"
#include "gpio.h"
#include "buttons.h"
#include "rgb.h"

void buttons_task_init(void) {
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
	// Initialise the upstream button driver, enable all RGB LED colour channels.
	buttons_init();
 8000b22:	f7ff fccd 	bl	80004c0 <buttons_init>
	rgb_colour_on(RGB_RED);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff ff4a 	bl	80009c0 <rgb_colour_on>
	rgb_colour_on(RGB_GREEN);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f7ff ff47 	bl	80009c0 <rgb_colour_on>
	rgb_colour_on(RGB_BLUE);
 8000b32:	2002      	movs	r0, #2
 8000b34:	f7ff ff44 	bl	80009c0 <rgb_colour_on>
}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <buttons_task_execute>:

void buttons_task_execute(void) {
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
	// Update the RGB LEDs depending on which button is pressed.
	buttons_update();
 8000b42:	f7ff fcf7 	bl	8000534 <buttons_update>

	if (buttons_checkButton(UP) == PUSHED) {
 8000b46:	2000      	movs	r0, #0
 8000b48:	f7ff fd74 	bl	8000634 <buttons_checkButton>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d102      	bne.n	8000b58 <buttons_task_execute+0x1a>
		rgb_led_toggle(RGB_UP);
 8000b52:	2002      	movs	r0, #2
 8000b54:	f7ff ff5c 	bl	8000a10 <rgb_led_toggle>
	}

	if (buttons_checkButton(DOWN) == PUSHED) {
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff fd6b 	bl	8000634 <buttons_checkButton>
 8000b5e:	0003      	movs	r3, r0
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d102      	bne.n	8000b6a <buttons_task_execute+0x2c>
		rgb_led_toggle(RGB_DOWN);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f7ff ff53 	bl	8000a10 <rgb_led_toggle>
	}

	if (buttons_checkButton(LEFT) == PUSHED) {
 8000b6a:	2002      	movs	r0, #2
 8000b6c:	f7ff fd62 	bl	8000634 <buttons_checkButton>
 8000b70:	0003      	movs	r3, r0
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d102      	bne.n	8000b7c <buttons_task_execute+0x3e>
		rgb_led_toggle(RGB_LEFT);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f7ff ff4a 	bl	8000a10 <rgb_led_toggle>
	}

	if (buttons_checkButton(RIGHT) == PUSHED) {
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f7ff fd59 	bl	8000634 <buttons_checkButton>
 8000b82:	0003      	movs	r3, r0
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d102      	bne.n	8000b8e <buttons_task_execute+0x50>
		rgb_led_toggle(RGB_RIGHT);
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f7ff ff41 	bl	8000a10 <rgb_led_toggle>
	}
}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <joystick_task_execute>:
#include "adc.h"
#include "task_joystick.h"

static uint16_t raw_adc[2];

void joystick_task_execute(void) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	// Update the ADC values of the JoyStick X and Y axis inputs
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)raw_adc, 2);
 8000b98:	4904      	ldr	r1, [pc, #16]	@ (8000bac <joystick_task_execute+0x18>)
 8000b9a:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <joystick_task_execute+0x1c>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f000 fba4 	bl	80012ec <HAL_ADC_Start_DMA>
}
 8000ba4:	46c0      	nop			@ (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	20000124 	.word	0x20000124
 8000bb0:	20000058 	.word	0x20000058

08000bb4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

}
 8000bbc:	46c0      	nop			@ (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b002      	add	sp, #8
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc4:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bc8:	f7ff ff92 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bcc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bce:	e003      	b.n	8000bd8 <LoopCopyDataInit>

08000bd0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000bd2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bd4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bd6:	3104      	adds	r1, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bd8:	480a      	ldr	r0, [pc, #40]	@ (8000c04 <LoopForever+0xa>)
  ldr r3, =_edata
 8000bda:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <LoopForever+0xe>)
  adds r2, r0, r1
 8000bdc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bde:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000be0:	d3f6      	bcc.n	8000bd0 <CopyDataInit>
  ldr r2, =_sbss
 8000be2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <LoopForever+0x12>)
  b LoopFillZerobss
 8000be4:	e002      	b.n	8000bec <LoopFillZerobss>

08000be6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  str  r3, [r2]
 8000be8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bea:	3204      	adds	r2, #4

08000bec <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <LoopForever+0x16>)
  cmp r2, r3
 8000bee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bf0:	d3f9      	bcc.n	8000be6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000bf2:	f002 f8cd 	bl	8002d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bf6:	f7ff fe89 	bl	800090c <main>

08000bfa <LoopForever>:

LoopForever:
    b LoopForever
 8000bfa:	e7fe      	b.n	8000bfa <LoopForever>
  ldr   r0, =_estack
 8000bfc:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8000c00:	08002e70 	.word	0x08002e70
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c08:	2000003c 	.word	0x2000003c
  ldr r2, =_sbss
 8000c0c:	2000003c 	.word	0x2000003c
  ldr r3, = _ebss
 8000c10:	2000012c 	.word	0x2000012c

08000c14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC1_IRQHandler>

08000c16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c22:	2003      	movs	r0, #3
 8000c24:	f000 f80e 	bl	8000c44 <HAL_InitTick>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d003      	beq.n	8000c34 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
 8000c32:	e001      	b.n	8000c38 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c34:	f7ff ff08 	bl	8000a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	781b      	ldrb	r3, [r3, #0]
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b002      	add	sp, #8
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000c54:	4b1d      	ldr	r3, [pc, #116]	@ (8000ccc <HAL_InitTick+0x88>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d02b      	beq.n	8000cb4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <HAL_InitTick+0x8c>)
 8000c5e:	681c      	ldr	r4, [r3, #0]
 8000c60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <HAL_InitTick+0x88>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	0019      	movs	r1, r3
 8000c66:	23fa      	movs	r3, #250	@ 0xfa
 8000c68:	0098      	lsls	r0, r3, #2
 8000c6a:	f7ff fa4d 	bl	8000108 <__udivsi3>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	0019      	movs	r1, r3
 8000c72:	0020      	movs	r0, r4
 8000c74:	f7ff fa48 	bl	8000108 <__udivsi3>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 ff87 	bl	8001b8e <HAL_SYSTICK_Config>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d112      	bne.n	8000caa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	d80a      	bhi.n	8000ca0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	425b      	negs	r3, r3
 8000c90:	2200      	movs	r2, #0
 8000c92:	0018      	movs	r0, r3
 8000c94:	f000 ff56 	bl	8001b44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c98:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <HAL_InitTick+0x90>)
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	e00d      	b.n	8000cbc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e008      	b.n	8000cbc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000caa:	230f      	movs	r3, #15
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	e003      	b.n	8000cbc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	781b      	ldrb	r3, [r3, #0]
}
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b005      	add	sp, #20
 8000cc8:	bd90      	pop	{r4, r7, pc}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	20000038 	.word	0x20000038
 8000cd0:	20000030 	.word	0x20000030
 8000cd4:	20000034 	.word	0x20000034

08000cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <HAL_IncTick+0x1c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <HAL_IncTick+0x20>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	18d2      	adds	r2, r2, r3
 8000ce8:	4b03      	ldr	r3, [pc, #12]	@ (8000cf8 <HAL_IncTick+0x20>)
 8000cea:	601a      	str	r2, [r3, #0]
}
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	20000038 	.word	0x20000038
 8000cf8:	20000128 	.word	0x20000128

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b02      	ldr	r3, [pc, #8]	@ (8000d0c <HAL_GetTick+0x10>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	0018      	movs	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	20000128 	.word	0x20000128

08000d10 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000d20:	401a      	ands	r2, r3
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	431a      	orrs	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	601a      	str	r2, [r3, #0]
}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	ff3fffff 	.word	0xff3fffff

08000d38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	23c0      	movs	r3, #192	@ 0xc0
 8000d46:	041b      	lsls	r3, r3, #16
 8000d48:	4013      	ands	r3, r2
}
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b002      	add	sp, #8
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	2104      	movs	r1, #4
 8000d66:	400a      	ands	r2, r1
 8000d68:	2107      	movs	r1, #7
 8000d6a:	4091      	lsls	r1, r2
 8000d6c:	000a      	movs	r2, r1
 8000d6e:	43d2      	mvns	r2, r2
 8000d70:	401a      	ands	r2, r3
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	2104      	movs	r1, #4
 8000d76:	400b      	ands	r3, r1
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	4099      	lsls	r1, r3
 8000d7c:	000b      	movs	r3, r1
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000d84:	46c0      	nop			@ (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b004      	add	sp, #16
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	400a      	ands	r2, r1
 8000da0:	2107      	movs	r1, #7
 8000da2:	4091      	lsls	r1, r2
 8000da4:	000a      	movs	r2, r1
 8000da6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2104      	movs	r1, #4
 8000dac:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000dae:	40da      	lsrs	r2, r3
 8000db0:	0013      	movs	r3, r2
}
 8000db2:	0018      	movs	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b002      	add	sp, #8
 8000db8:	bd80      	pop	{r7, pc}

08000dba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	23c0      	movs	r3, #192	@ 0xc0
 8000dc8:	011b      	lsls	r3, r3, #4
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b002      	add	sp, #8
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dec:	68ba      	ldr	r2, [r7, #8]
 8000dee:	211f      	movs	r1, #31
 8000df0:	400a      	ands	r2, r1
 8000df2:	210f      	movs	r1, #15
 8000df4:	4091      	lsls	r1, r2
 8000df6:	000a      	movs	r2, r1
 8000df8:	43d2      	mvns	r2, r2
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	0e9b      	lsrs	r3, r3, #26
 8000e00:	210f      	movs	r1, #15
 8000e02:	4019      	ands	r1, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	201f      	movs	r0, #31
 8000e08:	4003      	ands	r3, r0
 8000e0a:	4099      	lsls	r1, r3
 8000e0c:	000b      	movs	r3, r1
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e14:	46c0      	nop			@ (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b004      	add	sp, #16
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	025b      	lsls	r3, r3, #9
 8000e2e:	0a5b      	lsrs	r3, r3, #9
 8000e30:	431a      	orrs	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	0252      	lsls	r2, r2, #9
 8000e50:	0a52      	lsrs	r2, r2, #9
 8000e52:	43d2      	mvns	r2, r2
 8000e54:	401a      	ands	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	68ba      	ldr	r2, [r7, #8]
 8000e76:	0212      	lsls	r2, r2, #8
 8000e78:	43d2      	mvns	r2, r2
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	400b      	ands	r3, r1
 8000e84:	4904      	ldr	r1, [pc, #16]	@ (8000e98 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000e86:	400b      	ands	r3, r1
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b004      	add	sp, #16
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	7fffff00 	.word	0x7fffff00

08000e9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	4a05      	ldr	r2, [pc, #20]	@ (8000ec0 <LL_ADC_EnableInternalRegulator+0x24>)
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2280      	movs	r2, #128	@ 0x80
 8000eae:	0552      	lsls	r2, r2, #21
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b002      	add	sp, #8
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	6fffffe8 	.word	0x6fffffe8

08000ec4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	2380      	movs	r3, #128	@ 0x80
 8000ed2:	055b      	lsls	r3, r3, #21
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	2380      	movs	r3, #128	@ 0x80
 8000ed8:	055b      	lsls	r3, r3, #21
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d101      	bne.n	8000ee2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd80      	pop	{r7, pc}

08000eec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <LL_ADC_Enable+0x20>)
 8000efa:	4013      	ands	r3, r2
 8000efc:	2201      	movs	r2, #1
 8000efe:	431a      	orrs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f04:	46c0      	nop			@ (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b002      	add	sp, #8
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	7fffffe8 	.word	0x7fffffe8

08000f10 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <LL_ADC_Disable+0x20>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2202      	movs	r2, #2
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	7fffffe8 	.word	0x7fffffe8

08000f34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2201      	movs	r2, #1
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d101      	bne.n	8000f4c <LL_ADC_IsEnabled+0x18>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e000      	b.n	8000f4e <LL_ADC_IsEnabled+0x1a>
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	0018      	movs	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b002      	add	sp, #8
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <LL_ADC_REG_StartConversion+0x20>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	2204      	movs	r2, #4
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f70:	46c0      	nop			@ (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b002      	add	sp, #8
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	7fffffe8 	.word	0x7fffffe8

08000f7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	2204      	movs	r2, #4
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d101      	bne.n	8000f94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f90:	2301      	movs	r3, #1
 8000f92:	e000      	b.n	8000f96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	0018      	movs	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b002      	add	sp, #8
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa8:	231f      	movs	r3, #31
 8000faa:	18fb      	adds	r3, r7, r3
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e17e      	b.n	80012c4 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10a      	bne.n	8000fe4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff f99b 	bl	800030c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2254      	movs	r2, #84	@ 0x54
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f7ff ff6b 	bl	8000ec4 <LL_ADC_IsInternalRegulatorEnabled>
 8000fee:	1e03      	subs	r3, r0, #0
 8000ff0:	d114      	bne.n	800101c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f7ff ff50 	bl	8000e9c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000ffc:	4bb3      	ldr	r3, [pc, #716]	@ (80012cc <HAL_ADC_Init+0x32c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	49b3      	ldr	r1, [pc, #716]	@ (80012d0 <HAL_ADC_Init+0x330>)
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff f880 	bl	8000108 <__udivsi3>
 8001008:	0003      	movs	r3, r0
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800100e:	e002      	b.n	8001016 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3b01      	subs	r3, #1
 8001014:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f9      	bne.n	8001010 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff ff4f 	bl	8000ec4 <LL_ADC_IsInternalRegulatorEnabled>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d10f      	bne.n	800104a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102e:	2210      	movs	r2, #16
 8001030:	431a      	orrs	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800103a:	2201      	movs	r2, #1
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001042:	231f      	movs	r3, #31
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	0018      	movs	r0, r3
 8001050:	f7ff ff94 	bl	8000f7c <LL_ADC_REG_IsConversionOngoing>
 8001054:	0003      	movs	r3, r0
 8001056:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105c:	2210      	movs	r2, #16
 800105e:	4013      	ands	r3, r2
 8001060:	d000      	beq.n	8001064 <HAL_ADC_Init+0xc4>
 8001062:	e122      	b.n	80012aa <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d000      	beq.n	800106c <HAL_ADC_Init+0xcc>
 800106a:	e11e      	b.n	80012aa <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001070:	4a98      	ldr	r2, [pc, #608]	@ (80012d4 <HAL_ADC_Init+0x334>)
 8001072:	4013      	ands	r3, r2
 8001074:	2202      	movs	r2, #2
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff ff57 	bl	8000f34 <LL_ADC_IsEnabled>
 8001086:	1e03      	subs	r3, r0, #0
 8001088:	d000      	beq.n	800108c <HAL_ADC_Init+0xec>
 800108a:	e0ad      	b.n	80011e8 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7e1b      	ldrb	r3, [r3, #24]
 8001094:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001096:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7e5b      	ldrb	r3, [r3, #25]
 800109c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800109e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7e9b      	ldrb	r3, [r3, #26]
 80010a4:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80010a6:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <HAL_ADC_Init+0x116>
 80010b0:	2380      	movs	r3, #128	@ 0x80
 80010b2:	015b      	lsls	r3, r3, #5
 80010b4:	e000      	b.n	80010b8 <HAL_ADC_Init+0x118>
 80010b6:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010b8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010be:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	da04      	bge.n	80010d2 <HAL_ADC_Init+0x132>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	085b      	lsrs	r3, r3, #1
 80010d0:	e001      	b.n	80010d6 <HAL_ADC_Init+0x136>
 80010d2:	2380      	movs	r3, #128	@ 0x80
 80010d4:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80010d6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	212c      	movs	r1, #44	@ 0x2c
 80010dc:	5c5b      	ldrb	r3, [r3, r1]
 80010de:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010e0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2220      	movs	r2, #32
 80010ec:	5c9b      	ldrb	r3, [r3, r2]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d115      	bne.n	800111e <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7e9b      	ldrb	r3, [r3, #26]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d105      	bne.n	8001106 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	0252      	lsls	r2, r2, #9
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	e00b      	b.n	800111e <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110a:	2220      	movs	r2, #32
 800110c:	431a      	orrs	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001116:	2201      	movs	r2, #1
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00a      	beq.n	800113c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800112a:	23e0      	movs	r3, #224	@ 0xe0
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001134:	4313      	orrs	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	4a65      	ldr	r2, [pc, #404]	@ (80012d8 <HAL_ADC_Init+0x338>)
 8001144:	4013      	ands	r3, r2
 8001146:	0019      	movs	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	430a      	orrs	r2, r1
 8001150:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	0f9b      	lsrs	r3, r3, #30
 8001158:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800115e:	4313      	orrs	r3, r2
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	4313      	orrs	r3, r2
 8001164:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	223c      	movs	r2, #60	@ 0x3c
 800116a:	5c9b      	ldrb	r3, [r3, r2]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d111      	bne.n	8001194 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	0f9b      	lsrs	r3, r3, #30
 8001176:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800117c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001182:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001188:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	4313      	orrs	r3, r2
 800118e:	2201      	movs	r2, #1
 8001190:	4313      	orrs	r3, r2
 8001192:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	4a50      	ldr	r2, [pc, #320]	@ (80012dc <HAL_ADC_Init+0x33c>)
 800119c:	4013      	ands	r3, r2
 800119e:	0019      	movs	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	23c0      	movs	r3, #192	@ 0xc0
 80011b0:	061b      	lsls	r3, r3, #24
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d018      	beq.n	80011e8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	05db      	lsls	r3, r3, #23
 80011be:	429a      	cmp	r2, r3
 80011c0:	d012      	beq.n	80011e8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011c6:	2380      	movs	r3, #128	@ 0x80
 80011c8:	061b      	lsls	r3, r3, #24
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d00c      	beq.n	80011e8 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80011ce:	4b44      	ldr	r3, [pc, #272]	@ (80012e0 <HAL_ADC_Init+0x340>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a44      	ldr	r2, [pc, #272]	@ (80012e4 <HAL_ADC_Init+0x344>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	0019      	movs	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	23f0      	movs	r3, #240	@ 0xf0
 80011de:	039b      	lsls	r3, r3, #14
 80011e0:	401a      	ands	r2, r3
 80011e2:	4b3f      	ldr	r3, [pc, #252]	@ (80012e0 <HAL_ADC_Init+0x340>)
 80011e4:	430a      	orrs	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011f0:	001a      	movs	r2, r3
 80011f2:	2100      	movs	r1, #0
 80011f4:	f7ff fdad 	bl	8000d52 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001200:	4939      	ldr	r1, [pc, #228]	@ (80012e8 <HAL_ADC_Init+0x348>)
 8001202:	001a      	movs	r2, r3
 8001204:	f7ff fda5 	bl	8000d52 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d109      	bne.n	8001224 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2110      	movs	r1, #16
 800121c:	4249      	negs	r1, r1
 800121e:	430a      	orrs	r2, r1
 8001220:	629a      	str	r2, [r3, #40]	@ 0x28
 8001222:	e018      	b.n	8001256 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	2380      	movs	r3, #128	@ 0x80
 800122a:	039b      	lsls	r3, r3, #14
 800122c:	429a      	cmp	r2, r3
 800122e:	d112      	bne.n	8001256 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	3b01      	subs	r3, #1
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	221c      	movs	r2, #28
 8001240:	4013      	ands	r3, r2
 8001242:	2210      	movs	r2, #16
 8001244:	4252      	negs	r2, r2
 8001246:	409a      	lsls	r2, r3
 8001248:	0011      	movs	r1, r2
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2100      	movs	r1, #0
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff fd95 	bl	8000d8c <LL_ADC_GetSamplingTimeCommonChannels>
 8001262:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001268:	429a      	cmp	r2, r3
 800126a:	d10b      	bne.n	8001284 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001276:	2203      	movs	r2, #3
 8001278:	4393      	bics	r3, r2
 800127a:	2201      	movs	r2, #1
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001282:	e01c      	b.n	80012be <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001288:	2212      	movs	r2, #18
 800128a:	4393      	bics	r3, r2
 800128c:	2210      	movs	r2, #16
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001298:	2201      	movs	r2, #1
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80012a0:	231f      	movs	r3, #31
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80012a8:	e009      	b.n	80012be <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ae:	2210      	movs	r2, #16
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80012b6:	231f      	movs	r3, #31
 80012b8:	18fb      	adds	r3, r7, r3
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80012be:	231f      	movs	r3, #31
 80012c0:	18fb      	adds	r3, r7, r3
 80012c2:	781b      	ldrb	r3, [r3, #0]
}
 80012c4:	0018      	movs	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b008      	add	sp, #32
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000030 	.word	0x20000030
 80012d0:	00030d40 	.word	0x00030d40
 80012d4:	fffffefd 	.word	0xfffffefd
 80012d8:	ffde0201 	.word	0xffde0201
 80012dc:	1ffffc02 	.word	0x1ffffc02
 80012e0:	40012708 	.word	0x40012708
 80012e4:	ffc3ffff 	.word	0xffc3ffff
 80012e8:	7fffff04 	.word	0x7fffff04

080012ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff fe3d 	bl	8000f7c <LL_ADC_REG_IsConversionOngoing>
 8001302:	1e03      	subs	r3, r0, #0
 8001304:	d16c      	bne.n	80013e0 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2254      	movs	r2, #84	@ 0x54
 800130a:	5c9b      	ldrb	r3, [r3, r2]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <HAL_ADC_Start_DMA+0x28>
 8001310:	2302      	movs	r3, #2
 8001312:	e06c      	b.n	80013ee <HAL_ADC_Start_DMA+0x102>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2254      	movs	r2, #84	@ 0x54
 8001318:	2101      	movs	r1, #1
 800131a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	2201      	movs	r2, #1
 8001324:	4013      	ands	r3, r2
 8001326:	d113      	bne.n	8001350 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	0018      	movs	r0, r3
 800132e:	f7ff fe01 	bl	8000f34 <LL_ADC_IsEnabled>
 8001332:	1e03      	subs	r3, r0, #0
 8001334:	d004      	beq.n	8001340 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	0018      	movs	r0, r3
 800133c:	f7ff fde8 	bl	8000f10 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2101      	movs	r1, #1
 800134c:	430a      	orrs	r2, r1
 800134e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001350:	2517      	movs	r5, #23
 8001352:	197c      	adds	r4, r7, r5
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	0018      	movs	r0, r3
 8001358:	f000 fa3c 	bl	80017d4 <ADC_Enable>
 800135c:	0003      	movs	r3, r0
 800135e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001360:	002c      	movs	r4, r5
 8001362:	193b      	adds	r3, r7, r4
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d13e      	bne.n	80013e8 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136e:	4a22      	ldr	r2, [pc, #136]	@ (80013f8 <HAL_ADC_Start_DMA+0x10c>)
 8001370:	4013      	ands	r3, r2
 8001372:	2280      	movs	r2, #128	@ 0x80
 8001374:	0052      	lsls	r2, r2, #1
 8001376:	431a      	orrs	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001386:	4a1d      	ldr	r2, [pc, #116]	@ (80013fc <HAL_ADC_Start_DMA+0x110>)
 8001388:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800138e:	4a1c      	ldr	r2, [pc, #112]	@ (8001400 <HAL_ADC_Start_DMA+0x114>)
 8001390:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001396:	4a1b      	ldr	r2, [pc, #108]	@ (8001404 <HAL_ADC_Start_DMA+0x118>)
 8001398:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	221c      	movs	r2, #28
 80013a0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2254      	movs	r2, #84	@ 0x54
 80013a6:	2100      	movs	r1, #0
 80013a8:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2110      	movs	r1, #16
 80013b6:	430a      	orrs	r2, r1
 80013b8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3340      	adds	r3, #64	@ 0x40
 80013c4:	0019      	movs	r1, r3
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	193c      	adds	r4, r7, r4
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f000 fc76 	bl	8001cbc <HAL_DMA_Start_IT>
 80013d0:	0003      	movs	r3, r0
 80013d2:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	0018      	movs	r0, r3
 80013da:	f7ff fdbd 	bl	8000f58 <LL_ADC_REG_StartConversion>
 80013de:	e003      	b.n	80013e8 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013e0:	2317      	movs	r3, #23
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	2202      	movs	r2, #2
 80013e6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80013e8:	2317      	movs	r3, #23
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	781b      	ldrb	r3, [r3, #0]
}
 80013ee:	0018      	movs	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b006      	add	sp, #24
 80013f4:	bdb0      	pop	{r4, r5, r7, pc}
 80013f6:	46c0      	nop			@ (mov r8, r8)
 80013f8:	fffff0fe 	.word	0xfffff0fe
 80013fc:	080018d1 	.word	0x080018d1
 8001400:	08001999 	.word	0x08001999
 8001404:	080019b7 	.word	0x080019b7

08001408 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001410:	46c0      	nop			@ (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	b002      	add	sp, #8
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001420:	46c0      	nop			@ (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	b002      	add	sp, #8
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001432:	2317      	movs	r3, #23
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2254      	movs	r2, #84	@ 0x54
 8001442:	5c9b      	ldrb	r3, [r3, r2]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d101      	bne.n	800144c <HAL_ADC_ConfigChannel+0x24>
 8001448:	2302      	movs	r3, #2
 800144a:	e1be      	b.n	80017ca <HAL_ADC_ConfigChannel+0x3a2>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2254      	movs	r2, #84	@ 0x54
 8001450:	2101      	movs	r1, #1
 8001452:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	0018      	movs	r0, r3
 800145a:	f7ff fd8f 	bl	8000f7c <LL_ADC_REG_IsConversionOngoing>
 800145e:	1e03      	subs	r3, r0, #0
 8001460:	d000      	beq.n	8001464 <HAL_ADC_ConfigChannel+0x3c>
 8001462:	e1a1      	b.n	80017a8 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d100      	bne.n	800146e <HAL_ADC_ConfigChannel+0x46>
 800146c:	e152      	b.n	8001714 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691a      	ldr	r2, [r3, #16]
 8001472:	2380      	movs	r3, #128	@ 0x80
 8001474:	061b      	lsls	r3, r3, #24
 8001476:	429a      	cmp	r2, r3
 8001478:	d004      	beq.n	8001484 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800147e:	4ac2      	ldr	r2, [pc, #776]	@ (8001788 <HAL_ADC_ConfigChannel+0x360>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d108      	bne.n	8001496 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	0019      	movs	r1, r3
 800148e:	0010      	movs	r0, r2
 8001490:	f7ff fcc4 	bl	8000e1c <LL_ADC_REG_SetSequencerChAdd>
 8001494:	e0ed      	b.n	8001672 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	211f      	movs	r1, #31
 80014a0:	400b      	ands	r3, r1
 80014a2:	210f      	movs	r1, #15
 80014a4:	4099      	lsls	r1, r3
 80014a6:	000b      	movs	r3, r1
 80014a8:	43db      	mvns	r3, r3
 80014aa:	4013      	ands	r3, r2
 80014ac:	0019      	movs	r1, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	025b      	lsls	r3, r3, #9
 80014b4:	0a5b      	lsrs	r3, r3, #9
 80014b6:	d105      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x9c>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	0e9b      	lsrs	r3, r3, #26
 80014be:	221f      	movs	r2, #31
 80014c0:	4013      	ands	r3, r2
 80014c2:	e0bc      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2201      	movs	r2, #1
 80014ca:	4013      	ands	r3, r2
 80014cc:	d000      	beq.n	80014d0 <HAL_ADC_ConfigChannel+0xa8>
 80014ce:	e0b5      	b.n	800163c <HAL_ADC_ConfigChannel+0x214>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2202      	movs	r2, #2
 80014d6:	4013      	ands	r3, r2
 80014d8:	d000      	beq.n	80014dc <HAL_ADC_ConfigChannel+0xb4>
 80014da:	e0ad      	b.n	8001638 <HAL_ADC_ConfigChannel+0x210>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2204      	movs	r2, #4
 80014e2:	4013      	ands	r3, r2
 80014e4:	d000      	beq.n	80014e8 <HAL_ADC_ConfigChannel+0xc0>
 80014e6:	e0a5      	b.n	8001634 <HAL_ADC_ConfigChannel+0x20c>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2208      	movs	r2, #8
 80014ee:	4013      	ands	r3, r2
 80014f0:	d000      	beq.n	80014f4 <HAL_ADC_ConfigChannel+0xcc>
 80014f2:	e09d      	b.n	8001630 <HAL_ADC_ConfigChannel+0x208>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2210      	movs	r2, #16
 80014fa:	4013      	ands	r3, r2
 80014fc:	d000      	beq.n	8001500 <HAL_ADC_ConfigChannel+0xd8>
 80014fe:	e095      	b.n	800162c <HAL_ADC_ConfigChannel+0x204>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2220      	movs	r2, #32
 8001506:	4013      	ands	r3, r2
 8001508:	d000      	beq.n	800150c <HAL_ADC_ConfigChannel+0xe4>
 800150a:	e08d      	b.n	8001628 <HAL_ADC_ConfigChannel+0x200>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2240      	movs	r2, #64	@ 0x40
 8001512:	4013      	ands	r3, r2
 8001514:	d000      	beq.n	8001518 <HAL_ADC_ConfigChannel+0xf0>
 8001516:	e085      	b.n	8001624 <HAL_ADC_ConfigChannel+0x1fc>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	4013      	ands	r3, r2
 8001520:	d000      	beq.n	8001524 <HAL_ADC_ConfigChannel+0xfc>
 8001522:	e07d      	b.n	8001620 <HAL_ADC_ConfigChannel+0x1f8>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	2380      	movs	r3, #128	@ 0x80
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4013      	ands	r3, r2
 800152e:	d000      	beq.n	8001532 <HAL_ADC_ConfigChannel+0x10a>
 8001530:	e074      	b.n	800161c <HAL_ADC_ConfigChannel+0x1f4>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	2380      	movs	r3, #128	@ 0x80
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4013      	ands	r3, r2
 800153c:	d000      	beq.n	8001540 <HAL_ADC_ConfigChannel+0x118>
 800153e:	e06b      	b.n	8001618 <HAL_ADC_ConfigChannel+0x1f0>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	@ 0x80
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4013      	ands	r3, r2
 800154a:	d000      	beq.n	800154e <HAL_ADC_ConfigChannel+0x126>
 800154c:	e062      	b.n	8001614 <HAL_ADC_ConfigChannel+0x1ec>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	2380      	movs	r3, #128	@ 0x80
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	4013      	ands	r3, r2
 8001558:	d000      	beq.n	800155c <HAL_ADC_ConfigChannel+0x134>
 800155a:	e059      	b.n	8001610 <HAL_ADC_ConfigChannel+0x1e8>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2380      	movs	r3, #128	@ 0x80
 8001562:	015b      	lsls	r3, r3, #5
 8001564:	4013      	ands	r3, r2
 8001566:	d151      	bne.n	800160c <HAL_ADC_ConfigChannel+0x1e4>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	019b      	lsls	r3, r3, #6
 8001570:	4013      	ands	r3, r2
 8001572:	d149      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x1e0>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	@ 0x80
 800157a:	01db      	lsls	r3, r3, #7
 800157c:	4013      	ands	r3, r2
 800157e:	d141      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x1dc>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	4013      	ands	r3, r2
 800158a:	d139      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x1d8>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2380      	movs	r3, #128	@ 0x80
 8001592:	025b      	lsls	r3, r3, #9
 8001594:	4013      	ands	r3, r2
 8001596:	d131      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x1d4>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2380      	movs	r3, #128	@ 0x80
 800159e:	029b      	lsls	r3, r3, #10
 80015a0:	4013      	ands	r3, r2
 80015a2:	d129      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x1d0>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	2380      	movs	r3, #128	@ 0x80
 80015aa:	02db      	lsls	r3, r3, #11
 80015ac:	4013      	ands	r3, r2
 80015ae:	d121      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x1cc>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	2380      	movs	r3, #128	@ 0x80
 80015b6:	031b      	lsls	r3, r3, #12
 80015b8:	4013      	ands	r3, r2
 80015ba:	d119      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x1c8>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2380      	movs	r3, #128	@ 0x80
 80015c2:	035b      	lsls	r3, r3, #13
 80015c4:	4013      	ands	r3, r2
 80015c6:	d111      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1c4>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2380      	movs	r3, #128	@ 0x80
 80015ce:	039b      	lsls	r3, r3, #14
 80015d0:	4013      	ands	r3, r2
 80015d2:	d109      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x1c0>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2380      	movs	r3, #128	@ 0x80
 80015da:	03db      	lsls	r3, r3, #15
 80015dc:	4013      	ands	r3, r2
 80015de:	d001      	beq.n	80015e4 <HAL_ADC_ConfigChannel+0x1bc>
 80015e0:	2316      	movs	r3, #22
 80015e2:	e02c      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 80015e4:	2300      	movs	r3, #0
 80015e6:	e02a      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 80015e8:	2315      	movs	r3, #21
 80015ea:	e028      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 80015ec:	2314      	movs	r3, #20
 80015ee:	e026      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 80015f0:	2313      	movs	r3, #19
 80015f2:	e024      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 80015f4:	2312      	movs	r3, #18
 80015f6:	e022      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 80015f8:	2311      	movs	r3, #17
 80015fa:	e020      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 80015fc:	2310      	movs	r3, #16
 80015fe:	e01e      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 8001600:	230f      	movs	r3, #15
 8001602:	e01c      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 8001604:	230e      	movs	r3, #14
 8001606:	e01a      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 8001608:	230d      	movs	r3, #13
 800160a:	e018      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 800160c:	230c      	movs	r3, #12
 800160e:	e016      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 8001610:	230b      	movs	r3, #11
 8001612:	e014      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 8001614:	230a      	movs	r3, #10
 8001616:	e012      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 8001618:	2309      	movs	r3, #9
 800161a:	e010      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 800161c:	2308      	movs	r3, #8
 800161e:	e00e      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 8001620:	2307      	movs	r3, #7
 8001622:	e00c      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 8001624:	2306      	movs	r3, #6
 8001626:	e00a      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 8001628:	2305      	movs	r3, #5
 800162a:	e008      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 800162c:	2304      	movs	r3, #4
 800162e:	e006      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 8001630:	2303      	movs	r3, #3
 8001632:	e004      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 8001634:	2302      	movs	r3, #2
 8001636:	e002      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <HAL_ADC_ConfigChannel+0x216>
 800163c:	2300      	movs	r3, #0
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	6852      	ldr	r2, [r2, #4]
 8001642:	201f      	movs	r0, #31
 8001644:	4002      	ands	r2, r0
 8001646:	4093      	lsls	r3, r2
 8001648:	000a      	movs	r2, r1
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	429a      	cmp	r2, r3
 800165e:	d808      	bhi.n	8001672 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	001a      	movs	r2, r3
 800166e:	f7ff fbb5 	bl	8000ddc <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	6819      	ldr	r1, [r3, #0]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	001a      	movs	r2, r3
 8001680:	f7ff fbf0 	bl	8000e64 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db00      	blt.n	800168e <HAL_ADC_ConfigChannel+0x266>
 800168c:	e096      	b.n	80017bc <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800168e:	4b3f      	ldr	r3, [pc, #252]	@ (800178c <HAL_ADC_ConfigChannel+0x364>)
 8001690:	0018      	movs	r0, r3
 8001692:	f7ff fb51 	bl	8000d38 <LL_ADC_GetCommonPathInternalCh>
 8001696:	0003      	movs	r3, r0
 8001698:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a3c      	ldr	r2, [pc, #240]	@ (8001790 <HAL_ADC_ConfigChannel+0x368>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d123      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	041b      	lsls	r3, r3, #16
 80016aa:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016ac:	d11e      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2280      	movs	r2, #128	@ 0x80
 80016b2:	0412      	lsls	r2, r2, #16
 80016b4:	4313      	orrs	r3, r2
 80016b6:	4a35      	ldr	r2, [pc, #212]	@ (800178c <HAL_ADC_ConfigChannel+0x364>)
 80016b8:	0019      	movs	r1, r3
 80016ba:	0010      	movs	r0, r2
 80016bc:	f7ff fb28 	bl	8000d10 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80016c0:	4b34      	ldr	r3, [pc, #208]	@ (8001794 <HAL_ADC_ConfigChannel+0x36c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4934      	ldr	r1, [pc, #208]	@ (8001798 <HAL_ADC_ConfigChannel+0x370>)
 80016c6:	0018      	movs	r0, r3
 80016c8:	f7fe fd1e 	bl	8000108 <__udivsi3>
 80016cc:	0003      	movs	r3, r0
 80016ce:	001a      	movs	r2, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	189b      	adds	r3, r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	3301      	adds	r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016dc:	e002      	b.n	80016e4 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f9      	bne.n	80016de <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016ea:	e067      	b.n	80017bc <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a2a      	ldr	r2, [pc, #168]	@ (800179c <HAL_ADC_ConfigChannel+0x374>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d162      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	2380      	movs	r3, #128	@ 0x80
 80016fa:	03db      	lsls	r3, r3, #15
 80016fc:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80016fe:	d15d      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	2280      	movs	r2, #128	@ 0x80
 8001704:	03d2      	lsls	r2, r2, #15
 8001706:	4313      	orrs	r3, r2
 8001708:	4a20      	ldr	r2, [pc, #128]	@ (800178c <HAL_ADC_ConfigChannel+0x364>)
 800170a:	0019      	movs	r1, r3
 800170c:	0010      	movs	r0, r2
 800170e:	f7ff faff 	bl	8000d10 <LL_ADC_SetCommonPathInternalCh>
 8001712:	e053      	b.n	80017bc <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	2380      	movs	r3, #128	@ 0x80
 800171a:	061b      	lsls	r3, r3, #24
 800171c:	429a      	cmp	r2, r3
 800171e:	d004      	beq.n	800172a <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001724:	4a18      	ldr	r2, [pc, #96]	@ (8001788 <HAL_ADC_ConfigChannel+0x360>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d107      	bne.n	800173a <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	0019      	movs	r1, r3
 8001734:	0010      	movs	r0, r2
 8001736:	f7ff fb82 	bl	8000e3e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	da3c      	bge.n	80017bc <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <HAL_ADC_ConfigChannel+0x364>)
 8001744:	0018      	movs	r0, r3
 8001746:	f7ff faf7 	bl	8000d38 <LL_ADC_GetCommonPathInternalCh>
 800174a:	0003      	movs	r3, r0
 800174c:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a0f      	ldr	r2, [pc, #60]	@ (8001790 <HAL_ADC_ConfigChannel+0x368>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d108      	bne.n	800176a <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4a11      	ldr	r2, [pc, #68]	@ (80017a0 <HAL_ADC_ConfigChannel+0x378>)
 800175c:	4013      	ands	r3, r2
 800175e:	4a0b      	ldr	r2, [pc, #44]	@ (800178c <HAL_ADC_ConfigChannel+0x364>)
 8001760:	0019      	movs	r1, r3
 8001762:	0010      	movs	r0, r2
 8001764:	f7ff fad4 	bl	8000d10 <LL_ADC_SetCommonPathInternalCh>
 8001768:	e028      	b.n	80017bc <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a0b      	ldr	r2, [pc, #44]	@ (800179c <HAL_ADC_ConfigChannel+0x374>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d123      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4a0b      	ldr	r2, [pc, #44]	@ (80017a4 <HAL_ADC_ConfigChannel+0x37c>)
 8001778:	4013      	ands	r3, r2
 800177a:	4a04      	ldr	r2, [pc, #16]	@ (800178c <HAL_ADC_ConfigChannel+0x364>)
 800177c:	0019      	movs	r1, r3
 800177e:	0010      	movs	r0, r2
 8001780:	f7ff fac6 	bl	8000d10 <LL_ADC_SetCommonPathInternalCh>
 8001784:	e01a      	b.n	80017bc <HAL_ADC_ConfigChannel+0x394>
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	80000004 	.word	0x80000004
 800178c:	40012708 	.word	0x40012708
 8001790:	a4000200 	.word	0xa4000200
 8001794:	20000030 	.word	0x20000030
 8001798:	00030d40 	.word	0x00030d40
 800179c:	a8000400 	.word	0xa8000400
 80017a0:	ff7fffff 	.word	0xff7fffff
 80017a4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ac:	2220      	movs	r2, #32
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80017b4:	2317      	movs	r3, #23
 80017b6:	18fb      	adds	r3, r7, r3
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2254      	movs	r2, #84	@ 0x54
 80017c0:	2100      	movs	r1, #0
 80017c2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80017c4:	2317      	movs	r3, #23
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	781b      	ldrb	r3, [r3, #0]
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b006      	add	sp, #24
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			@ (mov r8, r8)

080017d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff fba5 	bl	8000f34 <LL_ADC_IsEnabled>
 80017ea:	1e03      	subs	r3, r0, #0
 80017ec:	d162      	bne.n	80018b4 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4a32      	ldr	r2, [pc, #200]	@ (80018c0 <ADC_Enable+0xec>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	d00d      	beq.n	8001816 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fe:	2210      	movs	r2, #16
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800180a:	2201      	movs	r2, #1
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e04f      	b.n	80018b6 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	0018      	movs	r0, r3
 800181c:	f7ff fb66 	bl	8000eec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001820:	4b28      	ldr	r3, [pc, #160]	@ (80018c4 <ADC_Enable+0xf0>)
 8001822:	0018      	movs	r0, r3
 8001824:	f7ff fa88 	bl	8000d38 <LL_ADC_GetCommonPathInternalCh>
 8001828:	0002      	movs	r2, r0
 800182a:	2380      	movs	r3, #128	@ 0x80
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	4013      	ands	r3, r2
 8001830:	d00f      	beq.n	8001852 <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001832:	4b25      	ldr	r3, [pc, #148]	@ (80018c8 <ADC_Enable+0xf4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4925      	ldr	r1, [pc, #148]	@ (80018cc <ADC_Enable+0xf8>)
 8001838:	0018      	movs	r0, r3
 800183a:	f7fe fc65 	bl	8000108 <__udivsi3>
 800183e:	0003      	movs	r3, r0
 8001840:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001842:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001844:	e002      	b.n	800184c <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	3b01      	subs	r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f9      	bne.n	8001846 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7e5b      	ldrb	r3, [r3, #25]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d02c      	beq.n	80018b4 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800185a:	f7ff fa4f 	bl	8000cfc <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001862:	e020      	b.n	80018a6 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	0018      	movs	r0, r3
 800186a:	f7ff fb63 	bl	8000f34 <LL_ADC_IsEnabled>
 800186e:	1e03      	subs	r3, r0, #0
 8001870:	d104      	bne.n	800187c <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	0018      	movs	r0, r3
 8001878:	f7ff fb38 	bl	8000eec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800187c:	f7ff fa3e 	bl	8000cfc <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d90d      	bls.n	80018a6 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188e:	2210      	movs	r2, #16
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800189a:	2201      	movs	r2, #1
 800189c:	431a      	orrs	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e007      	b.n	80018b6 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2201      	movs	r2, #1
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d1d7      	bne.n	8001864 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	0018      	movs	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b004      	add	sp, #16
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	80000017 	.word	0x80000017
 80018c4:	40012708 	.word	0x40012708
 80018c8:	20000030 	.word	0x20000030
 80018cc:	00030d40 	.word	0x00030d40

080018d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e2:	2250      	movs	r2, #80	@ 0x50
 80018e4:	4013      	ands	r3, r2
 80018e6:	d141      	bne.n	800196c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ec:	2280      	movs	r2, #128	@ 0x80
 80018ee:	0092      	lsls	r2, r2, #2
 80018f0:	431a      	orrs	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	0018      	movs	r0, r3
 80018fc:	f7ff fa5d 	bl	8000dba <LL_ADC_REG_IsTriggerSourceSWStart>
 8001900:	1e03      	subs	r3, r0, #0
 8001902:	d02e      	beq.n	8001962 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	7e9b      	ldrb	r3, [r3, #26]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d12a      	bne.n	8001962 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2208      	movs	r2, #8
 8001914:	4013      	ands	r3, r2
 8001916:	2b08      	cmp	r3, #8
 8001918:	d123      	bne.n	8001962 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	0018      	movs	r0, r3
 8001920:	f7ff fb2c 	bl	8000f7c <LL_ADC_REG_IsConversionOngoing>
 8001924:	1e03      	subs	r3, r0, #0
 8001926:	d110      	bne.n	800194a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	210c      	movs	r1, #12
 8001934:	438a      	bics	r2, r1
 8001936:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193c:	4a15      	ldr	r2, [pc, #84]	@ (8001994 <ADC_DMAConvCplt+0xc4>)
 800193e:	4013      	ands	r3, r2
 8001940:	2201      	movs	r2, #1
 8001942:	431a      	orrs	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	659a      	str	r2, [r3, #88]	@ 0x58
 8001948:	e00b      	b.n	8001962 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194e:	2220      	movs	r2, #32
 8001950:	431a      	orrs	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800195a:	2201      	movs	r2, #1
 800195c:	431a      	orrs	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff f925 	bl	8000bb4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800196a:	e00f      	b.n	800198c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001970:	2210      	movs	r2, #16
 8001972:	4013      	ands	r3, r2
 8001974:	d004      	beq.n	8001980 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	0018      	movs	r0, r3
 800197a:	f7ff fd4d 	bl	8001418 <HAL_ADC_ErrorCallback>
}
 800197e:	e005      	b.n	800198c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	0010      	movs	r0, r2
 800198a:	4798      	blx	r3
}
 800198c:	46c0      	nop			@ (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b004      	add	sp, #16
 8001992:	bd80      	pop	{r7, pc}
 8001994:	fffffefe 	.word	0xfffffefe

08001998 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7ff fd2d 	bl	8001408 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b004      	add	sp, #16
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c8:	2240      	movs	r2, #64	@ 0x40
 80019ca:	431a      	orrs	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d4:	2204      	movs	r2, #4
 80019d6:	431a      	orrs	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	0018      	movs	r0, r3
 80019e0:	f7ff fd1a 	bl	8001418 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019e4:	46c0      	nop			@ (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b004      	add	sp, #16
 80019ea:	bd80      	pop	{r7, pc}

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	0002      	movs	r2, r0
 80019f4:	1dfb      	adds	r3, r7, #7
 80019f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	1dfb      	adds	r3, r7, #7
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80019fe:	d809      	bhi.n	8001a14 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a00:	1dfb      	adds	r3, r7, #7
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	001a      	movs	r2, r3
 8001a06:	231f      	movs	r3, #31
 8001a08:	401a      	ands	r2, r3
 8001a0a:	4b04      	ldr	r3, [pc, #16]	@ (8001a1c <__NVIC_EnableIRQ+0x30>)
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	4091      	lsls	r1, r2
 8001a10:	000a      	movs	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001a14:	46c0      	nop			@ (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b002      	add	sp, #8
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	0002      	movs	r2, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	1dfb      	adds	r3, r7, #7
 8001a2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	1dfb      	adds	r3, r7, #7
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a34:	d828      	bhi.n	8001a88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a36:	4a2f      	ldr	r2, [pc, #188]	@ (8001af4 <__NVIC_SetPriority+0xd4>)
 8001a38:	1dfb      	adds	r3, r7, #7
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	33c0      	adds	r3, #192	@ 0xc0
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	589b      	ldr	r3, [r3, r2]
 8001a46:	1dfa      	adds	r2, r7, #7
 8001a48:	7812      	ldrb	r2, [r2, #0]
 8001a4a:	0011      	movs	r1, r2
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	400a      	ands	r2, r1
 8001a50:	00d2      	lsls	r2, r2, #3
 8001a52:	21ff      	movs	r1, #255	@ 0xff
 8001a54:	4091      	lsls	r1, r2
 8001a56:	000a      	movs	r2, r1
 8001a58:	43d2      	mvns	r2, r2
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	019b      	lsls	r3, r3, #6
 8001a62:	22ff      	movs	r2, #255	@ 0xff
 8001a64:	401a      	ands	r2, r3
 8001a66:	1dfb      	adds	r3, r7, #7
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	4003      	ands	r3, r0
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a74:	481f      	ldr	r0, [pc, #124]	@ (8001af4 <__NVIC_SetPriority+0xd4>)
 8001a76:	1dfb      	adds	r3, r7, #7
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	33c0      	adds	r3, #192	@ 0xc0
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a86:	e031      	b.n	8001aec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a88:	4a1b      	ldr	r2, [pc, #108]	@ (8001af8 <__NVIC_SetPriority+0xd8>)
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	0019      	movs	r1, r3
 8001a90:	230f      	movs	r3, #15
 8001a92:	400b      	ands	r3, r1
 8001a94:	3b08      	subs	r3, #8
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3306      	adds	r3, #6
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	18d3      	adds	r3, r2, r3
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	1dfa      	adds	r2, r7, #7
 8001aa4:	7812      	ldrb	r2, [r2, #0]
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	400a      	ands	r2, r1
 8001aac:	00d2      	lsls	r2, r2, #3
 8001aae:	21ff      	movs	r1, #255	@ 0xff
 8001ab0:	4091      	lsls	r1, r2
 8001ab2:	000a      	movs	r2, r1
 8001ab4:	43d2      	mvns	r2, r2
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	019b      	lsls	r3, r3, #6
 8001abe:	22ff      	movs	r2, #255	@ 0xff
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	1dfb      	adds	r3, r7, #7
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	2303      	movs	r3, #3
 8001aca:	4003      	ands	r3, r0
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ad0:	4809      	ldr	r0, [pc, #36]	@ (8001af8 <__NVIC_SetPriority+0xd8>)
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	001c      	movs	r4, r3
 8001ad8:	230f      	movs	r3, #15
 8001ada:	4023      	ands	r3, r4
 8001adc:	3b08      	subs	r3, #8
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	3306      	adds	r3, #6
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	18c3      	adds	r3, r0, r3
 8001ae8:	3304      	adds	r3, #4
 8001aea:	601a      	str	r2, [r3, #0]
}
 8001aec:	46c0      	nop			@ (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b003      	add	sp, #12
 8001af2:	bd90      	pop	{r4, r7, pc}
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	1e5a      	subs	r2, r3, #1
 8001b08:	2380      	movs	r3, #128	@ 0x80
 8001b0a:	045b      	lsls	r3, r3, #17
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d301      	bcc.n	8001b14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b10:	2301      	movs	r3, #1
 8001b12:	e010      	b.n	8001b36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b14:	4b0a      	ldr	r3, [pc, #40]	@ (8001b40 <SysTick_Config+0x44>)
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	3a01      	subs	r2, #1
 8001b1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	425b      	negs	r3, r3
 8001b20:	2103      	movs	r1, #3
 8001b22:	0018      	movs	r0, r3
 8001b24:	f7ff ff7c 	bl	8001a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b28:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <SysTick_Config+0x44>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2e:	4b04      	ldr	r3, [pc, #16]	@ (8001b40 <SysTick_Config+0x44>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	0018      	movs	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b002      	add	sp, #8
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	210f      	movs	r1, #15
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	1c02      	adds	r2, r0, #0
 8001b54:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	187b      	adds	r3, r7, r1
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b25b      	sxtb	r3, r3
 8001b5e:	0011      	movs	r1, r2
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7ff ff5d 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b66:	46c0      	nop			@ (mov r8, r8)
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b004      	add	sp, #16
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	0002      	movs	r2, r0
 8001b76:	1dfb      	adds	r3, r7, #7
 8001b78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7a:	1dfb      	adds	r3, r7, #7
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b25b      	sxtb	r3, r3
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7ff ff33 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b86:	46c0      	nop			@ (mov r8, r8)
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b002      	add	sp, #8
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7ff ffaf 	bl	8001afc <SysTick_Config>
 8001b9e:	0003      	movs	r3, r0
}
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b002      	add	sp, #8
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e077      	b.n	8001caa <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a3d      	ldr	r2, [pc, #244]	@ (8001cb4 <HAL_DMA_Init+0x10c>)
 8001bc0:	4694      	mov	ip, r2
 8001bc2:	4463      	add	r3, ip
 8001bc4:	2114      	movs	r1, #20
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f7fe fa9e 	bl	8000108 <__udivsi3>
 8001bcc:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8001bce:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2225      	movs	r2, #37	@ 0x25
 8001bd8:	2102      	movs	r1, #2
 8001bda:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4934      	ldr	r1, [pc, #208]	@ (8001cb8 <HAL_DMA_Init+0x110>)
 8001be8:	400a      	ands	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6819      	ldr	r1, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	0018      	movs	r0, r3
 8001c26:	f000 f9c3 	bl	8001fb0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	2380      	movs	r3, #128	@ 0x80
 8001c30:	01db      	lsls	r3, r3, #7
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d102      	bne.n	8001c3c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c44:	21ff      	movs	r1, #255	@ 0xff
 8001c46:	400a      	ands	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001c52:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d011      	beq.n	8001c80 <HAL_DMA_Init+0xd8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d80d      	bhi.n	8001c80 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	0018      	movs	r0, r3
 8001c68:	f000 f9ce 	bl	8002008 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	e008      	b.n	8001c92 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2225      	movs	r2, #37	@ 0x25
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2224      	movs	r2, #36	@ 0x24
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	0018      	movs	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b002      	add	sp, #8
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	bffdfff8 	.word	0xbffdfff8
 8001cb8:	ffff800f 	.word	0xffff800f

08001cbc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cca:	2317      	movs	r3, #23
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2224      	movs	r2, #36	@ 0x24
 8001cd6:	5c9b      	ldrb	r3, [r3, r2]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_DMA_Start_IT+0x24>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e070      	b.n	8001dc2 <HAL_DMA_Start_IT+0x106>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2224      	movs	r2, #36	@ 0x24
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2225      	movs	r2, #37	@ 0x25
 8001cec:	5c9b      	ldrb	r3, [r3, r2]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d157      	bne.n	8001da4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2225      	movs	r2, #37	@ 0x25
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	438a      	bics	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	68b9      	ldr	r1, [r7, #8]
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 f909 	bl	8001f30 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d008      	beq.n	8001d38 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	210e      	movs	r1, #14
 8001d32:	430a      	orrs	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	e00f      	b.n	8001d58 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2104      	movs	r1, #4
 8001d44:	438a      	bics	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	210a      	movs	r1, #10
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	2380      	movs	r3, #128	@ 0x80
 8001d60:	025b      	lsls	r3, r3, #9
 8001d62:	4013      	ands	r3, r2
 8001d64:	d008      	beq.n	8001d78 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d70:	2180      	movs	r1, #128	@ 0x80
 8001d72:	0049      	lsls	r1, r1, #1
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d8a:	2180      	movs	r1, #128	@ 0x80
 8001d8c:	0049      	lsls	r1, r1, #1
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	e007      	b.n	8001db4 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2224      	movs	r2, #36	@ 0x24
 8001da8:	2100      	movs	r1, #0
 8001daa:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001dac:	2317      	movs	r3, #23
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	2202      	movs	r2, #2
 8001db2:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2224      	movs	r2, #36	@ 0x24
 8001db8:	2100      	movs	r1, #0
 8001dba:	5499      	strb	r1, [r3, r2]

  return status;
 8001dbc:	2317      	movs	r3, #23
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	781b      	ldrb	r3, [r3, #0]
}
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b006      	add	sp, #24
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8001dd4:	4b55      	ldr	r3, [pc, #340]	@ (8001f2c <HAL_DMA_IRQHandler+0x160>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	221c      	movs	r2, #28
 8001de8:	4013      	ands	r3, r2
 8001dea:	2204      	movs	r2, #4
 8001dec:	409a      	lsls	r2, r3
 8001dee:	0013      	movs	r3, r2
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4013      	ands	r3, r2
 8001df4:	d027      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x7a>
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2204      	movs	r2, #4
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d023      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2220      	movs	r2, #32
 8001e06:	4013      	ands	r3, r2
 8001e08:	d107      	bne.n	8001e1a <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2104      	movs	r1, #4
 8001e16:	438a      	bics	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8001e1a:	4b44      	ldr	r3, [pc, #272]	@ (8001f2c <HAL_DMA_IRQHandler+0x160>)
 8001e1c:	6859      	ldr	r1, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	221c      	movs	r2, #28
 8001e24:	4013      	ands	r3, r2
 8001e26:	2204      	movs	r2, #4
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	4b40      	ldr	r3, [pc, #256]	@ (8001f2c <HAL_DMA_IRQHandler+0x160>)
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d100      	bne.n	8001e3a <HAL_DMA_IRQHandler+0x6e>
 8001e38:	e073      	b.n	8001f22 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	0010      	movs	r0, r2
 8001e42:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001e44:	e06d      	b.n	8001f22 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	221c      	movs	r2, #28
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2202      	movs	r2, #2
 8001e50:	409a      	lsls	r2, r3
 8001e52:	0013      	movs	r3, r2
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4013      	ands	r3, r2
 8001e58:	d02e      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0xec>
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d02a      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d10b      	bne.n	8001e86 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	210a      	movs	r1, #10
 8001e7a:	438a      	bics	r2, r1
 8001e7c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2225      	movs	r2, #37	@ 0x25
 8001e82:	2101      	movs	r1, #1
 8001e84:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8001e86:	4b29      	ldr	r3, [pc, #164]	@ (8001f2c <HAL_DMA_IRQHandler+0x160>)
 8001e88:	6859      	ldr	r1, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	221c      	movs	r2, #28
 8001e90:	4013      	ands	r3, r2
 8001e92:	2202      	movs	r2, #2
 8001e94:	409a      	lsls	r2, r3
 8001e96:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <HAL_DMA_IRQHandler+0x160>)
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2224      	movs	r2, #36	@ 0x24
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d03a      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	0010      	movs	r0, r2
 8001eb4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001eb6:	e034      	b.n	8001f22 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebc:	221c      	movs	r2, #28
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	0013      	movs	r3, r2
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d02b      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x158>
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2208      	movs	r2, #8
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d027      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	210e      	movs	r1, #14
 8001ee0:	438a      	bics	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001ee4:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <HAL_DMA_IRQHandler+0x160>)
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	221c      	movs	r2, #28
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8001f2c <HAL_DMA_IRQHandler+0x160>)
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2225      	movs	r2, #37	@ 0x25
 8001f04:	2101      	movs	r1, #1
 8001f06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2224      	movs	r2, #36	@ 0x24
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	0010      	movs	r0, r2
 8001f20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f22:	46c0      	nop			@ (mov r8, r8)
 8001f24:	46c0      	nop			@ (mov r8, r8)
}
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b004      	add	sp, #16
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40020000 	.word	0x40020000

08001f30 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f46:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d004      	beq.n	8001f5a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001f58:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001f5a:	4b14      	ldr	r3, [pc, #80]	@ (8001fac <DMA_SetConfig+0x7c>)
 8001f5c:	6859      	ldr	r1, [r3, #4]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	221c      	movs	r2, #28
 8001f64:	4013      	ands	r3, r2
 8001f66:	2201      	movs	r2, #1
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <DMA_SetConfig+0x7c>)
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d108      	bne.n	8001f92 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f90:	e007      	b.n	8001fa2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	60da      	str	r2, [r3, #12]
}
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b004      	add	sp, #16
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	40020000 	.word	0x40020000

08001fb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	001a      	movs	r2, r3
 8001fbe:	23ff      	movs	r3, #255	@ 0xff
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	3b08      	subs	r3, #8
 8001fc4:	2114      	movs	r1, #20
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f7fe f89e 	bl	8000108 <__udivsi3>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002000 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001fd8:	4694      	mov	ip, r2
 8001fda:	4463      	add	r3, ip
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	001a      	movs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a07      	ldr	r2, [pc, #28]	@ (8002004 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001fe8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	221c      	movs	r2, #28
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001ff8:	46c0      	nop			@ (mov r8, r8)
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b004      	add	sp, #16
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	10008200 	.word	0x10008200
 8002004:	40020880 	.word	0x40020880

08002008 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	22ff      	movs	r2, #255	@ 0xff
 8002016:	4013      	ands	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4a0a      	ldr	r2, [pc, #40]	@ (8002048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800201e:	4694      	mov	ip, r2
 8002020:	4463      	add	r3, ip
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	001a      	movs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a07      	ldr	r2, [pc, #28]	@ (800204c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800202e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3b01      	subs	r3, #1
 8002034:	2203      	movs	r2, #3
 8002036:	4013      	ands	r3, r2
 8002038:	2201      	movs	r2, #1
 800203a:	409a      	lsls	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002040:	46c0      	nop			@ (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b004      	add	sp, #16
 8002046:	bd80      	pop	{r7, pc}
 8002048:	1000823f 	.word	0x1000823f
 800204c:	40020940 	.word	0x40020940

08002050 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800205e:	e153      	b.n	8002308 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4091      	lsls	r1, r2
 800206a:	000a      	movs	r2, r1
 800206c:	4013      	ands	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d100      	bne.n	8002078 <HAL_GPIO_Init+0x28>
 8002076:	e144      	b.n	8002302 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x38>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b12      	cmp	r3, #18
 8002086:	d125      	bne.n	80020d4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	08da      	lsrs	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3208      	adds	r2, #8
 8002090:	0092      	lsls	r2, r2, #2
 8002092:	58d3      	ldr	r3, [r2, r3]
 8002094:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2207      	movs	r2, #7
 800209a:	4013      	ands	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	220f      	movs	r2, #15
 80020a0:	409a      	lsls	r2, r3
 80020a2:	0013      	movs	r3, r2
 80020a4:	43da      	mvns	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	4013      	ands	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	220f      	movs	r2, #15
 80020b2:	401a      	ands	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	2107      	movs	r1, #7
 80020b8:	400b      	ands	r3, r1
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	409a      	lsls	r2, r3
 80020be:	0013      	movs	r3, r2
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	0092      	lsls	r2, r2, #2
 80020d0:	6979      	ldr	r1, [r7, #20]
 80020d2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	409a      	lsls	r2, r3
 80020e2:	0013      	movs	r3, r2
 80020e4:	43da      	mvns	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	4013      	ands	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2203      	movs	r2, #3
 80020f2:	401a      	ands	r2, r3
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	409a      	lsls	r2, r3
 80020fa:	0013      	movs	r3, r2
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	4313      	orrs	r3, r2
 8002100:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d00b      	beq.n	8002128 <HAL_GPIO_Init+0xd8>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d007      	beq.n	8002128 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800211c:	2b11      	cmp	r3, #17
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b12      	cmp	r3, #18
 8002126:	d130      	bne.n	800218a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	409a      	lsls	r2, r3
 8002136:	0013      	movs	r3, r2
 8002138:	43da      	mvns	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	4013      	ands	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	409a      	lsls	r2, r3
 800214a:	0013      	movs	r3, r2
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800215e:	2201      	movs	r2, #1
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	409a      	lsls	r2, r3
 8002164:	0013      	movs	r3, r2
 8002166:	43da      	mvns	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	4013      	ands	r3, r2
 800216c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	2201      	movs	r2, #1
 8002176:	401a      	ands	r2, r3
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	409a      	lsls	r2, r3
 800217c:	0013      	movs	r3, r2
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4313      	orrs	r3, r2
 8002182:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d017      	beq.n	80021c2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	2203      	movs	r2, #3
 800219e:	409a      	lsls	r2, r3
 80021a0:	0013      	movs	r3, r2
 80021a2:	43da      	mvns	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	4013      	ands	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	409a      	lsls	r2, r3
 80021b4:	0013      	movs	r3, r2
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	2380      	movs	r3, #128	@ 0x80
 80021c8:	055b      	lsls	r3, r3, #21
 80021ca:	4013      	ands	r3, r2
 80021cc:	d100      	bne.n	80021d0 <HAL_GPIO_Init+0x180>
 80021ce:	e098      	b.n	8002302 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80021d0:	4a53      	ldr	r2, [pc, #332]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3318      	adds	r3, #24
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	589b      	ldr	r3, [r3, r2]
 80021dc:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2203      	movs	r2, #3
 80021e2:	4013      	ands	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	220f      	movs	r2, #15
 80021e8:	409a      	lsls	r2, r3
 80021ea:	0013      	movs	r3, r2
 80021ec:	43da      	mvns	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	4013      	ands	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	23a0      	movs	r3, #160	@ 0xa0
 80021f8:	05db      	lsls	r3, r3, #23
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d019      	beq.n	8002232 <HAL_GPIO_Init+0x1e2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a48      	ldr	r2, [pc, #288]	@ (8002324 <HAL_GPIO_Init+0x2d4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d013      	beq.n	800222e <HAL_GPIO_Init+0x1de>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a47      	ldr	r2, [pc, #284]	@ (8002328 <HAL_GPIO_Init+0x2d8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00d      	beq.n	800222a <HAL_GPIO_Init+0x1da>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a46      	ldr	r2, [pc, #280]	@ (800232c <HAL_GPIO_Init+0x2dc>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d007      	beq.n	8002226 <HAL_GPIO_Init+0x1d6>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a45      	ldr	r2, [pc, #276]	@ (8002330 <HAL_GPIO_Init+0x2e0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d101      	bne.n	8002222 <HAL_GPIO_Init+0x1d2>
 800221e:	2305      	movs	r3, #5
 8002220:	e008      	b.n	8002234 <HAL_GPIO_Init+0x1e4>
 8002222:	2306      	movs	r3, #6
 8002224:	e006      	b.n	8002234 <HAL_GPIO_Init+0x1e4>
 8002226:	2303      	movs	r3, #3
 8002228:	e004      	b.n	8002234 <HAL_GPIO_Init+0x1e4>
 800222a:	2302      	movs	r3, #2
 800222c:	e002      	b.n	8002234 <HAL_GPIO_Init+0x1e4>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_GPIO_Init+0x1e4>
 8002232:	2300      	movs	r3, #0
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	2103      	movs	r1, #3
 8002238:	400a      	ands	r2, r1
 800223a:	00d2      	lsls	r2, r2, #3
 800223c:	4093      	lsls	r3, r2
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4313      	orrs	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002244:	4936      	ldr	r1, [pc, #216]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	3318      	adds	r3, #24
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002252:	4a33      	ldr	r2, [pc, #204]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 8002254:	2380      	movs	r3, #128	@ 0x80
 8002256:	58d3      	ldr	r3, [r2, r3]
 8002258:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	43da      	mvns	r2, r3
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	4013      	ands	r3, r2
 8002262:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	2380      	movs	r3, #128	@ 0x80
 800226a:	025b      	lsls	r3, r3, #9
 800226c:	4013      	ands	r3, r2
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002278:	4929      	ldr	r1, [pc, #164]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 800227a:	2280      	movs	r2, #128	@ 0x80
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002280:	4a27      	ldr	r2, [pc, #156]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 8002282:	2384      	movs	r3, #132	@ 0x84
 8002284:	58d3      	ldr	r3, [r2, r3]
 8002286:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	43da      	mvns	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	4013      	ands	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	2380      	movs	r3, #128	@ 0x80
 8002298:	029b      	lsls	r3, r3, #10
 800229a:	4013      	ands	r3, r2
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80022a6:	491e      	ldr	r1, [pc, #120]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022a8:	2284      	movs	r2, #132	@ 0x84
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80022ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	43da      	mvns	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	4013      	ands	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	2380      	movs	r3, #128	@ 0x80
 80022c4:	035b      	lsls	r3, r3, #13
 80022c6:	4013      	ands	r3, r2
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80022d2:	4b13      	ldr	r3, [pc, #76]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80022d8:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	43da      	mvns	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	4013      	ands	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	2380      	movs	r3, #128	@ 0x80
 80022ee:	039b      	lsls	r3, r3, #14
 80022f0:	4013      	ands	r3, r2
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80022fc:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <HAL_GPIO_Init+0x2d0>)
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	3301      	adds	r3, #1
 8002306:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	40da      	lsrs	r2, r3
 8002310:	1e13      	subs	r3, r2, #0
 8002312:	d000      	beq.n	8002316 <HAL_GPIO_Init+0x2c6>
 8002314:	e6a4      	b.n	8002060 <HAL_GPIO_Init+0x10>
  }
}
 8002316:	46c0      	nop			@ (mov r8, r8)
 8002318:	46c0      	nop			@ (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	b006      	add	sp, #24
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021800 	.word	0x40021800
 8002324:	50000400 	.word	0x50000400
 8002328:	50000800 	.word	0x50000800
 800232c:	50000c00 	.word	0x50000c00
 8002330:	50001400 	.word	0x50001400

08002334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	000a      	movs	r2, r1
 800233e:	1cbb      	adds	r3, r7, #2
 8002340:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	1cba      	adds	r2, r7, #2
 8002348:	8812      	ldrh	r2, [r2, #0]
 800234a:	4013      	ands	r3, r2
 800234c:	d004      	beq.n	8002358 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800234e:	230f      	movs	r3, #15
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	e003      	b.n	8002360 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002358:	230f      	movs	r3, #15
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002360:	230f      	movs	r3, #15
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	781b      	ldrb	r3, [r3, #0]
}
 8002366:	0018      	movs	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	b004      	add	sp, #16
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	0008      	movs	r0, r1
 8002378:	0011      	movs	r1, r2
 800237a:	1cbb      	adds	r3, r7, #2
 800237c:	1c02      	adds	r2, r0, #0
 800237e:	801a      	strh	r2, [r3, #0]
 8002380:	1c7b      	adds	r3, r7, #1
 8002382:	1c0a      	adds	r2, r1, #0
 8002384:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002386:	1c7b      	adds	r3, r7, #1
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d004      	beq.n	8002398 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800238e:	1cbb      	adds	r3, r7, #2
 8002390:	881a      	ldrh	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002396:	e003      	b.n	80023a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002398:	1cbb      	adds	r3, r7, #2
 800239a:	881a      	ldrh	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023a0:	46c0      	nop			@ (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	000a      	movs	r2, r1
 80023b2:	1cbb      	adds	r3, r7, #2
 80023b4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023bc:	1cbb      	adds	r3, r7, #2
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4013      	ands	r3, r2
 80023c4:	041a      	lsls	r2, r3, #16
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	1cb9      	adds	r1, r7, #2
 80023cc:	8809      	ldrh	r1, [r1, #0]
 80023ce:	400b      	ands	r3, r1
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	619a      	str	r2, [r3, #24]
}
 80023d6:	46c0      	nop			@ (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b004      	add	sp, #16
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	0002      	movs	r2, r0
 80023e8:	1dbb      	adds	r3, r7, #6
 80023ea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80023ec:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	1dba      	adds	r2, r7, #6
 80023f2:	8812      	ldrh	r2, [r2, #0]
 80023f4:	4013      	ands	r3, r2
 80023f6:	d008      	beq.n	800240a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80023f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002430 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80023fa:	1dba      	adds	r2, r7, #6
 80023fc:	8812      	ldrh	r2, [r2, #0]
 80023fe:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002400:	1dbb      	adds	r3, r7, #6
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	0018      	movs	r0, r3
 8002406:	f000 f815 	bl	8002434 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800240a:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	1dba      	adds	r2, r7, #6
 8002410:	8812      	ldrh	r2, [r2, #0]
 8002412:	4013      	ands	r3, r2
 8002414:	d008      	beq.n	8002428 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002416:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002418:	1dba      	adds	r2, r7, #6
 800241a:	8812      	ldrh	r2, [r2, #0]
 800241c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800241e:	1dbb      	adds	r3, r7, #6
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	0018      	movs	r0, r3
 8002424:	f000 f810 	bl	8002448 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002428:	46c0      	nop			@ (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	b002      	add	sp, #8
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021800 	.word	0x40021800

08002434 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	0002      	movs	r2, r0
 800243c:	1dbb      	adds	r3, r7, #6
 800243e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002440:	46c0      	nop			@ (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b002      	add	sp, #8
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	0002      	movs	r2, r0
 8002450:	1dbb      	adds	r3, r7, #6
 8002452:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002454:	46c0      	nop			@ (mov r8, r8)
 8002456:	46bd      	mov	sp, r7
 8002458:	b002      	add	sp, #8
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e20f      	b.n	800288e <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2201      	movs	r2, #1
 8002474:	4013      	ands	r3, r2
 8002476:	d100      	bne.n	800247a <HAL_RCC_OscConfig+0x1e>
 8002478:	e069      	b.n	800254e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800247a:	4bc8      	ldr	r3, [pc, #800]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2238      	movs	r2, #56	@ 0x38
 8002480:	4013      	ands	r3, r2
 8002482:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b08      	cmp	r3, #8
 8002488:	d105      	bne.n	8002496 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d15d      	bne.n	800254e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e1fb      	b.n	800288e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	025b      	lsls	r3, r3, #9
 800249e:	429a      	cmp	r2, r3
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_OscConfig+0x56>
 80024a2:	4bbe      	ldr	r3, [pc, #760]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	4bbd      	ldr	r3, [pc, #756]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80024a8:	2180      	movs	r1, #128	@ 0x80
 80024aa:	0249      	lsls	r1, r1, #9
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	e020      	b.n	80024f4 <HAL_RCC_OscConfig+0x98>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	23a0      	movs	r3, #160	@ 0xa0
 80024b8:	02db      	lsls	r3, r3, #11
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d10e      	bne.n	80024dc <HAL_RCC_OscConfig+0x80>
 80024be:	4bb7      	ldr	r3, [pc, #732]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4bb6      	ldr	r3, [pc, #728]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80024c4:	2180      	movs	r1, #128	@ 0x80
 80024c6:	02c9      	lsls	r1, r1, #11
 80024c8:	430a      	orrs	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	4bb3      	ldr	r3, [pc, #716]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4bb2      	ldr	r3, [pc, #712]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80024d2:	2180      	movs	r1, #128	@ 0x80
 80024d4:	0249      	lsls	r1, r1, #9
 80024d6:	430a      	orrs	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	e00b      	b.n	80024f4 <HAL_RCC_OscConfig+0x98>
 80024dc:	4baf      	ldr	r3, [pc, #700]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4bae      	ldr	r3, [pc, #696]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80024e2:	49af      	ldr	r1, [pc, #700]	@ (80027a0 <HAL_RCC_OscConfig+0x344>)
 80024e4:	400a      	ands	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	4bac      	ldr	r3, [pc, #688]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4bab      	ldr	r3, [pc, #684]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80024ee:	49ad      	ldr	r1, [pc, #692]	@ (80027a4 <HAL_RCC_OscConfig+0x348>)
 80024f0:	400a      	ands	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d014      	beq.n	8002526 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7fe fbfe 	bl	8000cfc <HAL_GetTick>
 8002500:	0003      	movs	r3, r0
 8002502:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002506:	f7fe fbf9 	bl	8000cfc <HAL_GetTick>
 800250a:	0002      	movs	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b64      	cmp	r3, #100	@ 0x64
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e1ba      	b.n	800288e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002518:	4ba0      	ldr	r3, [pc, #640]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2380      	movs	r3, #128	@ 0x80
 800251e:	029b      	lsls	r3, r3, #10
 8002520:	4013      	ands	r3, r2
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0xaa>
 8002524:	e013      	b.n	800254e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7fe fbe9 	bl	8000cfc <HAL_GetTick>
 800252a:	0003      	movs	r3, r0
 800252c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002530:	f7fe fbe4 	bl	8000cfc <HAL_GetTick>
 8002534:	0002      	movs	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	@ 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1a5      	b.n	800288e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002542:	4b96      	ldr	r3, [pc, #600]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	2380      	movs	r3, #128	@ 0x80
 8002548:	029b      	lsls	r3, r3, #10
 800254a:	4013      	ands	r3, r2
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2202      	movs	r2, #2
 8002554:	4013      	ands	r3, r2
 8002556:	d100      	bne.n	800255a <HAL_RCC_OscConfig+0xfe>
 8002558:	e086      	b.n	8002668 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800255a:	4b90      	ldr	r3, [pc, #576]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2238      	movs	r2, #56	@ 0x38
 8002560:	4013      	ands	r3, r2
 8002562:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d12f      	bne.n	80025ca <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e18b      	b.n	800288e <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	4b89      	ldr	r3, [pc, #548]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4a8b      	ldr	r2, [pc, #556]	@ (80027a8 <HAL_RCC_OscConfig+0x34c>)
 800257c:	4013      	ands	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	021a      	lsls	r2, r3, #8
 8002586:	4b85      	ldr	r3, [pc, #532]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 8002588:	430a      	orrs	r2, r1
 800258a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d112      	bne.n	80025b8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002592:	4b82      	ldr	r3, [pc, #520]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a85      	ldr	r2, [pc, #532]	@ (80027ac <HAL_RCC_OscConfig+0x350>)
 8002598:	4013      	ands	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	4b7e      	ldr	r3, [pc, #504]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80025a2:	430a      	orrs	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80025a6:	4b7d      	ldr	r3, [pc, #500]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	0adb      	lsrs	r3, r3, #11
 80025ac:	2207      	movs	r2, #7
 80025ae:	4013      	ands	r3, r2
 80025b0:	4a7f      	ldr	r2, [pc, #508]	@ (80027b0 <HAL_RCC_OscConfig+0x354>)
 80025b2:	40da      	lsrs	r2, r3
 80025b4:	4b7f      	ldr	r3, [pc, #508]	@ (80027b4 <HAL_RCC_OscConfig+0x358>)
 80025b6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025b8:	4b7f      	ldr	r3, [pc, #508]	@ (80027b8 <HAL_RCC_OscConfig+0x35c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	0018      	movs	r0, r3
 80025be:	f7fe fb41 	bl	8000c44 <HAL_InitTick>
 80025c2:	1e03      	subs	r3, r0, #0
 80025c4:	d050      	beq.n	8002668 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e161      	b.n	800288e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d030      	beq.n	8002634 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025d2:	4b72      	ldr	r3, [pc, #456]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a75      	ldr	r2, [pc, #468]	@ (80027ac <HAL_RCC_OscConfig+0x350>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	4b6e      	ldr	r3, [pc, #440]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80025e6:	4b6d      	ldr	r3, [pc, #436]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4b6c      	ldr	r3, [pc, #432]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80025ec:	2180      	movs	r1, #128	@ 0x80
 80025ee:	0049      	lsls	r1, r1, #1
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe fb82 	bl	8000cfc <HAL_GetTick>
 80025f8:	0003      	movs	r3, r0
 80025fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80025fe:	f7fe fb7d 	bl	8000cfc <HAL_GetTick>
 8002602:	0002      	movs	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e13e      	b.n	800288e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002610:	4b62      	ldr	r3, [pc, #392]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	@ 0x80
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4013      	ands	r3, r2
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261c:	4b5f      	ldr	r3, [pc, #380]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4a61      	ldr	r2, [pc, #388]	@ (80027a8 <HAL_RCC_OscConfig+0x34c>)
 8002622:	4013      	ands	r3, r2
 8002624:	0019      	movs	r1, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	021a      	lsls	r2, r3, #8
 800262c:	4b5b      	ldr	r3, [pc, #364]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 800262e:	430a      	orrs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	e019      	b.n	8002668 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002634:	4b59      	ldr	r3, [pc, #356]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b58      	ldr	r3, [pc, #352]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 800263a:	4960      	ldr	r1, [pc, #384]	@ (80027bc <HAL_RCC_OscConfig+0x360>)
 800263c:	400a      	ands	r2, r1
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe fb5c 	bl	8000cfc <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800264a:	f7fe fb57 	bl	8000cfc <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e118      	b.n	800288e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800265c:	4b4f      	ldr	r3, [pc, #316]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	@ 0x80
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4013      	ands	r3, r2
 8002666:	d1f0      	bne.n	800264a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2208      	movs	r2, #8
 800266e:	4013      	ands	r3, r2
 8002670:	d042      	beq.n	80026f8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002672:	4b4a      	ldr	r3, [pc, #296]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2238      	movs	r2, #56	@ 0x38
 8002678:	4013      	ands	r3, r2
 800267a:	2b18      	cmp	r3, #24
 800267c:	d105      	bne.n	800268a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d138      	bne.n	80026f8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e101      	b.n	800288e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d019      	beq.n	80026c6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002692:	4b42      	ldr	r3, [pc, #264]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 8002694:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002696:	4b41      	ldr	r3, [pc, #260]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 8002698:	2101      	movs	r1, #1
 800269a:	430a      	orrs	r2, r1
 800269c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269e:	f7fe fb2d 	bl	8000cfc <HAL_GetTick>
 80026a2:	0003      	movs	r3, r0
 80026a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80026a8:	f7fe fb28 	bl	8000cfc <HAL_GetTick>
 80026ac:	0002      	movs	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e0e9      	b.n	800288e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80026ba:	4b38      	ldr	r3, [pc, #224]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80026bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026be:	2202      	movs	r2, #2
 80026c0:	4013      	ands	r3, r2
 80026c2:	d0f1      	beq.n	80026a8 <HAL_RCC_OscConfig+0x24c>
 80026c4:	e018      	b.n	80026f8 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80026c6:	4b35      	ldr	r3, [pc, #212]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80026c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026ca:	4b34      	ldr	r3, [pc, #208]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80026cc:	2101      	movs	r1, #1
 80026ce:	438a      	bics	r2, r1
 80026d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d2:	f7fe fb13 	bl	8000cfc <HAL_GetTick>
 80026d6:	0003      	movs	r3, r0
 80026d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80026dc:	f7fe fb0e 	bl	8000cfc <HAL_GetTick>
 80026e0:	0002      	movs	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e0cf      	b.n	800288e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80026ee:	4b2b      	ldr	r3, [pc, #172]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 80026f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f2:	2202      	movs	r2, #2
 80026f4:	4013      	ands	r3, r2
 80026f6:	d1f1      	bne.n	80026dc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2204      	movs	r2, #4
 80026fe:	4013      	ands	r3, r2
 8002700:	d100      	bne.n	8002704 <HAL_RCC_OscConfig+0x2a8>
 8002702:	e084      	b.n	800280e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002704:	230f      	movs	r3, #15
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800270c:	4b23      	ldr	r3, [pc, #140]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2238      	movs	r2, #56	@ 0x38
 8002712:	4013      	ands	r3, r2
 8002714:	2b20      	cmp	r3, #32
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d000      	beq.n	8002722 <HAL_RCC_OscConfig+0x2c6>
 8002720:	e075      	b.n	800280e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e0b3      	b.n	800288e <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d106      	bne.n	800273c <HAL_RCC_OscConfig+0x2e0>
 800272e:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 8002730:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002732:	4b1a      	ldr	r3, [pc, #104]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 8002734:	2101      	movs	r1, #1
 8002736:	430a      	orrs	r2, r1
 8002738:	65da      	str	r2, [r3, #92]	@ 0x5c
 800273a:	e01c      	b.n	8002776 <HAL_RCC_OscConfig+0x31a>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b05      	cmp	r3, #5
 8002742:	d10c      	bne.n	800275e <HAL_RCC_OscConfig+0x302>
 8002744:	4b15      	ldr	r3, [pc, #84]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 8002746:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002748:	4b14      	ldr	r3, [pc, #80]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 800274a:	2104      	movs	r1, #4
 800274c:	430a      	orrs	r2, r1
 800274e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002750:	4b12      	ldr	r3, [pc, #72]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 8002752:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002754:	4b11      	ldr	r3, [pc, #68]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 8002756:	2101      	movs	r1, #1
 8002758:	430a      	orrs	r2, r1
 800275a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800275c:	e00b      	b.n	8002776 <HAL_RCC_OscConfig+0x31a>
 800275e:	4b0f      	ldr	r3, [pc, #60]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 8002760:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002762:	4b0e      	ldr	r3, [pc, #56]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 8002764:	2101      	movs	r1, #1
 8002766:	438a      	bics	r2, r1
 8002768:	65da      	str	r2, [r3, #92]	@ 0x5c
 800276a:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 800276c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800276e:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <HAL_RCC_OscConfig+0x340>)
 8002770:	2104      	movs	r1, #4
 8002772:	438a      	bics	r2, r1
 8002774:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d028      	beq.n	80027d0 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7fe fabd 	bl	8000cfc <HAL_GetTick>
 8002782:	0003      	movs	r3, r0
 8002784:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002786:	e01d      	b.n	80027c4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002788:	f7fe fab8 	bl	8000cfc <HAL_GetTick>
 800278c:	0002      	movs	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	4a0b      	ldr	r2, [pc, #44]	@ (80027c0 <HAL_RCC_OscConfig+0x364>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d915      	bls.n	80027c4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e078      	b.n	800288e <HAL_RCC_OscConfig+0x432>
 800279c:	40021000 	.word	0x40021000
 80027a0:	fffeffff 	.word	0xfffeffff
 80027a4:	fffbffff 	.word	0xfffbffff
 80027a8:	ffff80ff 	.word	0xffff80ff
 80027ac:	ffffc7ff 	.word	0xffffc7ff
 80027b0:	02dc6c00 	.word	0x02dc6c00
 80027b4:	20000030 	.word	0x20000030
 80027b8:	20000034 	.word	0x20000034
 80027bc:	fffffeff 	.word	0xfffffeff
 80027c0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80027c4:	4b34      	ldr	r3, [pc, #208]	@ (8002898 <HAL_RCC_OscConfig+0x43c>)
 80027c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c8:	2202      	movs	r2, #2
 80027ca:	4013      	ands	r3, r2
 80027cc:	d0dc      	beq.n	8002788 <HAL_RCC_OscConfig+0x32c>
 80027ce:	e013      	b.n	80027f8 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe fa94 	bl	8000cfc <HAL_GetTick>
 80027d4:	0003      	movs	r3, r0
 80027d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80027d8:	e009      	b.n	80027ee <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7fe fa8f 	bl	8000cfc <HAL_GetTick>
 80027de:	0002      	movs	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	4a2d      	ldr	r2, [pc, #180]	@ (800289c <HAL_RCC_OscConfig+0x440>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e04f      	b.n	800288e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80027ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002898 <HAL_RCC_OscConfig+0x43c>)
 80027f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f2:	2202      	movs	r2, #2
 80027f4:	4013      	ands	r3, r2
 80027f6:	d1f0      	bne.n	80027da <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80027f8:	230f      	movs	r3, #15
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d105      	bne.n	800280e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002802:	4b25      	ldr	r3, [pc, #148]	@ (8002898 <HAL_RCC_OscConfig+0x43c>)
 8002804:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002806:	4b24      	ldr	r3, [pc, #144]	@ (8002898 <HAL_RCC_OscConfig+0x43c>)
 8002808:	4925      	ldr	r1, [pc, #148]	@ (80028a0 <HAL_RCC_OscConfig+0x444>)
 800280a:	400a      	ands	r2, r1
 800280c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2210      	movs	r2, #16
 8002814:	4013      	ands	r3, r2
 8002816:	d039      	beq.n	800288c <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01b      	beq.n	8002858 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002820:	4b1d      	ldr	r3, [pc, #116]	@ (8002898 <HAL_RCC_OscConfig+0x43c>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4b1c      	ldr	r3, [pc, #112]	@ (8002898 <HAL_RCC_OscConfig+0x43c>)
 8002826:	2180      	movs	r1, #128	@ 0x80
 8002828:	03c9      	lsls	r1, r1, #15
 800282a:	430a      	orrs	r2, r1
 800282c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282e:	f7fe fa65 	bl	8000cfc <HAL_GetTick>
 8002832:	0003      	movs	r3, r0
 8002834:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002838:	f7fe fa60 	bl	8000cfc <HAL_GetTick>
 800283c:	0002      	movs	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e021      	b.n	800288e <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800284a:	4b13      	ldr	r3, [pc, #76]	@ (8002898 <HAL_RCC_OscConfig+0x43c>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	2380      	movs	r3, #128	@ 0x80
 8002850:	041b      	lsls	r3, r3, #16
 8002852:	4013      	ands	r3, r2
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x3dc>
 8002856:	e019      	b.n	800288c <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002858:	4b0f      	ldr	r3, [pc, #60]	@ (8002898 <HAL_RCC_OscConfig+0x43c>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b0e      	ldr	r3, [pc, #56]	@ (8002898 <HAL_RCC_OscConfig+0x43c>)
 800285e:	4911      	ldr	r1, [pc, #68]	@ (80028a4 <HAL_RCC_OscConfig+0x448>)
 8002860:	400a      	ands	r2, r1
 8002862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fe fa4a 	bl	8000cfc <HAL_GetTick>
 8002868:	0003      	movs	r3, r0
 800286a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800286e:	f7fe fa45 	bl	8000cfc <HAL_GetTick>
 8002872:	0002      	movs	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e006      	b.n	800288e <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8002880:	4b05      	ldr	r3, [pc, #20]	@ (8002898 <HAL_RCC_OscConfig+0x43c>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	2380      	movs	r3, #128	@ 0x80
 8002886:	041b      	lsls	r3, r3, #16
 8002888:	4013      	ands	r3, r2
 800288a:	d1f0      	bne.n	800286e <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	b006      	add	sp, #24
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	40021000 	.word	0x40021000
 800289c:	00001388 	.word	0x00001388
 80028a0:	efffffff 	.word	0xefffffff
 80028a4:	ffbfffff 	.word	0xffbfffff

080028a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0f6      	b.n	8002aaa <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028bc:	4b7d      	ldr	r3, [pc, #500]	@ (8002ab4 <HAL_RCC_ClockConfig+0x20c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2207      	movs	r2, #7
 80028c2:	4013      	ands	r3, r2
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d91e      	bls.n	8002908 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b7a      	ldr	r3, [pc, #488]	@ (8002ab4 <HAL_RCC_ClockConfig+0x20c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2207      	movs	r2, #7
 80028d0:	4393      	bics	r3, r2
 80028d2:	0019      	movs	r1, r3
 80028d4:	4b77      	ldr	r3, [pc, #476]	@ (8002ab4 <HAL_RCC_ClockConfig+0x20c>)
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028dc:	f7fe fa0e 	bl	8000cfc <HAL_GetTick>
 80028e0:	0003      	movs	r3, r0
 80028e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028e4:	e009      	b.n	80028fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80028e6:	f7fe fa09 	bl	8000cfc <HAL_GetTick>
 80028ea:	0002      	movs	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	4a71      	ldr	r2, [pc, #452]	@ (8002ab8 <HAL_RCC_ClockConfig+0x210>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e0d7      	b.n	8002aaa <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028fa:	4b6e      	ldr	r3, [pc, #440]	@ (8002ab4 <HAL_RCC_ClockConfig+0x20c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2207      	movs	r2, #7
 8002900:	4013      	ands	r3, r2
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d1ee      	bne.n	80028e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2202      	movs	r2, #2
 800290e:	4013      	ands	r3, r2
 8002910:	d017      	beq.n	8002942 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2204      	movs	r2, #4
 8002918:	4013      	ands	r3, r2
 800291a:	d008      	beq.n	800292e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800291c:	4b67      	ldr	r3, [pc, #412]	@ (8002abc <HAL_RCC_ClockConfig+0x214>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4a67      	ldr	r2, [pc, #412]	@ (8002ac0 <HAL_RCC_ClockConfig+0x218>)
 8002922:	401a      	ands	r2, r3
 8002924:	4b65      	ldr	r3, [pc, #404]	@ (8002abc <HAL_RCC_ClockConfig+0x214>)
 8002926:	21b0      	movs	r1, #176	@ 0xb0
 8002928:	0109      	lsls	r1, r1, #4
 800292a:	430a      	orrs	r2, r1
 800292c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800292e:	4b63      	ldr	r3, [pc, #396]	@ (8002abc <HAL_RCC_ClockConfig+0x214>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	4a64      	ldr	r2, [pc, #400]	@ (8002ac4 <HAL_RCC_ClockConfig+0x21c>)
 8002934:	4013      	ands	r3, r2
 8002936:	0019      	movs	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	4b5f      	ldr	r3, [pc, #380]	@ (8002abc <HAL_RCC_ClockConfig+0x214>)
 800293e:	430a      	orrs	r2, r1
 8002940:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2201      	movs	r2, #1
 8002948:	4013      	ands	r3, r2
 800294a:	d100      	bne.n	800294e <HAL_RCC_ClockConfig+0xa6>
 800294c:	e061      	b.n	8002a12 <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800294e:	4b5b      	ldr	r3, [pc, #364]	@ (8002abc <HAL_RCC_ClockConfig+0x214>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	221c      	movs	r2, #28
 8002954:	4393      	bics	r3, r2
 8002956:	0019      	movs	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	4b57      	ldr	r3, [pc, #348]	@ (8002abc <HAL_RCC_ClockConfig+0x214>)
 800295e:	430a      	orrs	r2, r1
 8002960:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800296a:	4b54      	ldr	r3, [pc, #336]	@ (8002abc <HAL_RCC_ClockConfig+0x214>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	2380      	movs	r3, #128	@ 0x80
 8002970:	029b      	lsls	r3, r3, #10
 8002972:	4013      	ands	r3, r2
 8002974:	d12b      	bne.n	80029ce <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e097      	b.n	8002aaa <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002982:	4b4e      	ldr	r3, [pc, #312]	@ (8002abc <HAL_RCC_ClockConfig+0x214>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	2380      	movs	r3, #128	@ 0x80
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4013      	ands	r3, r2
 800298c:	d11f      	bne.n	80029ce <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e08b      	b.n	8002aaa <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800299a:	4b48      	ldr	r3, [pc, #288]	@ (8002abc <HAL_RCC_ClockConfig+0x214>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	2380      	movs	r3, #128	@ 0x80
 80029a0:	041b      	lsls	r3, r3, #16
 80029a2:	4013      	ands	r3, r2
 80029a4:	d113      	bne.n	80029ce <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e07f      	b.n	8002aaa <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d106      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80029b2:	4b42      	ldr	r3, [pc, #264]	@ (8002abc <HAL_RCC_ClockConfig+0x214>)
 80029b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b6:	2202      	movs	r2, #2
 80029b8:	4013      	ands	r3, r2
 80029ba:	d108      	bne.n	80029ce <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e074      	b.n	8002aaa <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80029c0:	4b3e      	ldr	r3, [pc, #248]	@ (8002abc <HAL_RCC_ClockConfig+0x214>)
 80029c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c4:	2202      	movs	r2, #2
 80029c6:	4013      	ands	r3, r2
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e06d      	b.n	8002aaa <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029ce:	4b3b      	ldr	r3, [pc, #236]	@ (8002abc <HAL_RCC_ClockConfig+0x214>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2207      	movs	r2, #7
 80029d4:	4393      	bics	r3, r2
 80029d6:	0019      	movs	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	4b37      	ldr	r3, [pc, #220]	@ (8002abc <HAL_RCC_ClockConfig+0x214>)
 80029de:	430a      	orrs	r2, r1
 80029e0:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e2:	f7fe f98b 	bl	8000cfc <HAL_GetTick>
 80029e6:	0003      	movs	r3, r0
 80029e8:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	e009      	b.n	8002a00 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80029ec:	f7fe f986 	bl	8000cfc <HAL_GetTick>
 80029f0:	0002      	movs	r2, r0
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	4a30      	ldr	r2, [pc, #192]	@ (8002ab8 <HAL_RCC_ClockConfig+0x210>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e054      	b.n	8002aaa <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a00:	4b2e      	ldr	r3, [pc, #184]	@ (8002abc <HAL_RCC_ClockConfig+0x214>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2238      	movs	r2, #56	@ 0x38
 8002a06:	401a      	ands	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d1ec      	bne.n	80029ec <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a12:	4b28      	ldr	r3, [pc, #160]	@ (8002ab4 <HAL_RCC_ClockConfig+0x20c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2207      	movs	r2, #7
 8002a18:	4013      	ands	r3, r2
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d21e      	bcs.n	8002a5e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a20:	4b24      	ldr	r3, [pc, #144]	@ (8002ab4 <HAL_RCC_ClockConfig+0x20c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2207      	movs	r2, #7
 8002a26:	4393      	bics	r3, r2
 8002a28:	0019      	movs	r1, r3
 8002a2a:	4b22      	ldr	r3, [pc, #136]	@ (8002ab4 <HAL_RCC_ClockConfig+0x20c>)
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a32:	f7fe f963 	bl	8000cfc <HAL_GetTick>
 8002a36:	0003      	movs	r3, r0
 8002a38:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a3a:	e009      	b.n	8002a50 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3c:	f7fe f95e 	bl	8000cfc <HAL_GetTick>
 8002a40:	0002      	movs	r2, r0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	4a1c      	ldr	r2, [pc, #112]	@ (8002ab8 <HAL_RCC_ClockConfig+0x210>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e02c      	b.n	8002aaa <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a50:	4b18      	ldr	r3, [pc, #96]	@ (8002ab4 <HAL_RCC_ClockConfig+0x20c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2207      	movs	r2, #7
 8002a56:	4013      	ands	r3, r2
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d1ee      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2204      	movs	r2, #4
 8002a64:	4013      	ands	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a68:	4b14      	ldr	r3, [pc, #80]	@ (8002abc <HAL_RCC_ClockConfig+0x214>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4a16      	ldr	r2, [pc, #88]	@ (8002ac8 <HAL_RCC_ClockConfig+0x220>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	4b11      	ldr	r3, [pc, #68]	@ (8002abc <HAL_RCC_ClockConfig+0x214>)
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002a7c:	f000 f82c 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002a80:	0001      	movs	r1, r0
 8002a82:	4b0e      	ldr	r3, [pc, #56]	@ (8002abc <HAL_RCC_ClockConfig+0x214>)
 8002a84:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	220f      	movs	r2, #15
 8002a8a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002acc <HAL_RCC_ClockConfig+0x224>)
 8002a8e:	0092      	lsls	r2, r2, #2
 8002a90:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a92:	221f      	movs	r2, #31
 8002a94:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002a96:	000a      	movs	r2, r1
 8002a98:	40da      	lsrs	r2, r3
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <HAL_RCC_ClockConfig+0x228>)
 8002a9c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad4 <HAL_RCC_ClockConfig+0x22c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f7fe f8ce 	bl	8000c44 <HAL_InitTick>
 8002aa8:	0003      	movs	r3, r0
}
 8002aaa:	0018      	movs	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b004      	add	sp, #16
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			@ (mov r8, r8)
 8002ab4:	40022000 	.word	0x40022000
 8002ab8:	00001388 	.word	0x00001388
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	ffff84ff 	.word	0xffff84ff
 8002ac4:	fffff0ff 	.word	0xfffff0ff
 8002ac8:	ffff8fff 	.word	0xffff8fff
 8002acc:	08002e28 	.word	0x08002e28
 8002ad0:	20000030 	.word	0x20000030
 8002ad4:	20000034 	.word	0x20000034

08002ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8002ade:	4b27      	ldr	r3, [pc, #156]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	2207      	movs	r2, #7
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	3301      	adds	r3, #1
 8002aea:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002aec:	4b23      	ldr	r3, [pc, #140]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2238      	movs	r2, #56	@ 0x38
 8002af2:	4013      	ands	r3, r2
 8002af4:	d10f      	bne.n	8002b16 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002af6:	4b21      	ldr	r3, [pc, #132]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	0adb      	lsrs	r3, r3, #11
 8002afc:	2207      	movs	r2, #7
 8002afe:	4013      	ands	r3, r2
 8002b00:	2201      	movs	r2, #1
 8002b02:	409a      	lsls	r2, r3
 8002b04:	0013      	movs	r3, r2
 8002b06:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	481d      	ldr	r0, [pc, #116]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002b0c:	f7fd fafc 	bl	8000108 <__udivsi3>
 8002b10:	0003      	movs	r3, r0
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	e027      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b16:	4b19      	ldr	r3, [pc, #100]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2238      	movs	r2, #56	@ 0x38
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d102      	bne.n	8002b28 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b22:	4b18      	ldr	r3, [pc, #96]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0xac>)
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	e01e      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002b28:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2238      	movs	r2, #56	@ 0x38
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d103      	bne.n	8002b3c <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b34:	2380      	movs	r3, #128	@ 0x80
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2238      	movs	r2, #56	@ 0x38
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b18      	cmp	r3, #24
 8002b46:	d103      	bne.n	8002b50 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b48:	23fa      	movs	r3, #250	@ 0xfa
 8002b4a:	01db      	lsls	r3, r3, #7
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8002b50:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2238      	movs	r2, #56	@ 0x38
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b10      	cmp	r3, #16
 8002b5a:	d102      	bne.n	8002b62 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8002b5c:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	e001      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7fd facd 	bl	8000108 <__udivsi3>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002b72:	68fb      	ldr	r3, [r7, #12]
}
 8002b74:	0018      	movs	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b004      	add	sp, #16
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	02dc6c00 	.word	0x02dc6c00
 8002b84:	007a1200 	.word	0x007a1200

08002b88 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002b90:	2313      	movs	r3, #19
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b98:	2312      	movs	r3, #18
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2240      	movs	r2, #64	@ 0x40
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d100      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002baa:	e079      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bac:	2011      	movs	r0, #17
 8002bae:	183b      	adds	r3, r7, r0
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bb8:	2380      	movs	r3, #128	@ 0x80
 8002bba:	055b      	lsls	r3, r3, #21
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d110      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc0:	4b67      	ldr	r3, [pc, #412]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bc4:	4b66      	ldr	r3, [pc, #408]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bc6:	2180      	movs	r1, #128	@ 0x80
 8002bc8:	0549      	lsls	r1, r1, #21
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bce:	4b64      	ldr	r3, [pc, #400]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bd2:	2380      	movs	r3, #128	@ 0x80
 8002bd4:	055b      	lsls	r3, r3, #21
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bdc:	183b      	adds	r3, r7, r0
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002be2:	4b5f      	ldr	r3, [pc, #380]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002be4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002be6:	23c0      	movs	r3, #192	@ 0xc0
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4013      	ands	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d019      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d014      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002bfe:	4b58      	ldr	r3, [pc, #352]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c02:	4a58      	ldr	r2, [pc, #352]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c08:	4b55      	ldr	r3, [pc, #340]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c0c:	4b54      	ldr	r3, [pc, #336]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c0e:	2180      	movs	r1, #128	@ 0x80
 8002c10:	0249      	lsls	r1, r1, #9
 8002c12:	430a      	orrs	r2, r1
 8002c14:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c16:	4b52      	ldr	r3, [pc, #328]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c1a:	4b51      	ldr	r3, [pc, #324]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c1c:	4952      	ldr	r1, [pc, #328]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c1e:	400a      	ands	r2, r1
 8002c20:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002c22:	4b4f      	ldr	r3, [pc, #316]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d016      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c30:	f7fe f864 	bl	8000cfc <HAL_GetTick>
 8002c34:	0003      	movs	r3, r0
 8002c36:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002c38:	e00c      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3a:	f7fe f85f 	bl	8000cfc <HAL_GetTick>
 8002c3e:	0002      	movs	r2, r0
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	4a49      	ldr	r2, [pc, #292]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d904      	bls.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8002c4a:	2313      	movs	r3, #19
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	2203      	movs	r2, #3
 8002c50:	701a      	strb	r2, [r3, #0]
          break;
 8002c52:	e004      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002c54:	4b42      	ldr	r3, [pc, #264]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c58:	2202      	movs	r2, #2
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d0ed      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8002c5e:	2313      	movs	r3, #19
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10a      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c68:	4b3d      	ldr	r3, [pc, #244]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6c:	4a3d      	ldr	r2, [pc, #244]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	0019      	movs	r1, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69da      	ldr	r2, [r3, #28]
 8002c76:	4b3a      	ldr	r3, [pc, #232]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c7c:	e005      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7e:	2312      	movs	r3, #18
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	2213      	movs	r2, #19
 8002c84:	18ba      	adds	r2, r7, r2
 8002c86:	7812      	ldrb	r2, [r2, #0]
 8002c88:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c8a:	2311      	movs	r3, #17
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d105      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c94:	4b32      	ldr	r3, [pc, #200]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c98:	4b31      	ldr	r3, [pc, #196]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c9a:	4935      	ldr	r1, [pc, #212]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d009      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002caa:	4b2d      	ldr	r3, [pc, #180]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cae:	2203      	movs	r2, #3
 8002cb0:	4393      	bics	r3, r2
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	4b29      	ldr	r3, [pc, #164]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d009      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cc8:	4b25      	ldr	r3, [pc, #148]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ccc:	4a29      	ldr	r2, [pc, #164]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	0019      	movs	r1, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	4b22      	ldr	r3, [pc, #136]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d008      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	0899      	lsrs	r1, r3, #2
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699a      	ldr	r2, [r3, #24]
 8002cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2208      	movs	r2, #8
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d009      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d02:	4b17      	ldr	r3, [pc, #92]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d06:	4a1c      	ldr	r2, [pc, #112]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d12:	430a      	orrs	r2, r1
 8002d14:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d009      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002d20:	4b0f      	ldr	r3, [pc, #60]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d24:	4a15      	ldr	r2, [pc, #84]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	0019      	movs	r1, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d30:	430a      	orrs	r2, r1
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2280      	movs	r2, #128	@ 0x80
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002d3e:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	22e0      	movs	r2, #224	@ 0xe0
 8002d44:	4393      	bics	r3, r2
 8002d46:	0019      	movs	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	4b04      	ldr	r3, [pc, #16]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002d52:	2312      	movs	r3, #18
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	781b      	ldrb	r3, [r3, #0]
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b006      	add	sp, #24
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40021000 	.word	0x40021000
 8002d64:	fffffcff 	.word	0xfffffcff
 8002d68:	fffeffff 	.word	0xfffeffff
 8002d6c:	00001388 	.word	0x00001388
 8002d70:	efffffff 	.word	0xefffffff
 8002d74:	ffffcfff 	.word	0xffffcfff
 8002d78:	ffffefff 	.word	0xffffefff
 8002d7c:	ffff3fff 	.word	0xffff3fff

08002d80 <memset>:
 8002d80:	0003      	movs	r3, r0
 8002d82:	1882      	adds	r2, r0, r2
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d100      	bne.n	8002d8a <memset+0xa>
 8002d88:	4770      	bx	lr
 8002d8a:	7019      	strb	r1, [r3, #0]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	e7f9      	b.n	8002d84 <memset+0x4>

08002d90 <__libc_init_array>:
 8002d90:	b570      	push	{r4, r5, r6, lr}
 8002d92:	2600      	movs	r6, #0
 8002d94:	4c0c      	ldr	r4, [pc, #48]	@ (8002dc8 <__libc_init_array+0x38>)
 8002d96:	4d0d      	ldr	r5, [pc, #52]	@ (8002dcc <__libc_init_array+0x3c>)
 8002d98:	1b64      	subs	r4, r4, r5
 8002d9a:	10a4      	asrs	r4, r4, #2
 8002d9c:	42a6      	cmp	r6, r4
 8002d9e:	d109      	bne.n	8002db4 <__libc_init_array+0x24>
 8002da0:	2600      	movs	r6, #0
 8002da2:	f000 f819 	bl	8002dd8 <_init>
 8002da6:	4c0a      	ldr	r4, [pc, #40]	@ (8002dd0 <__libc_init_array+0x40>)
 8002da8:	4d0a      	ldr	r5, [pc, #40]	@ (8002dd4 <__libc_init_array+0x44>)
 8002daa:	1b64      	subs	r4, r4, r5
 8002dac:	10a4      	asrs	r4, r4, #2
 8002dae:	42a6      	cmp	r6, r4
 8002db0:	d105      	bne.n	8002dbe <__libc_init_array+0x2e>
 8002db2:	bd70      	pop	{r4, r5, r6, pc}
 8002db4:	00b3      	lsls	r3, r6, #2
 8002db6:	58eb      	ldr	r3, [r5, r3]
 8002db8:	4798      	blx	r3
 8002dba:	3601      	adds	r6, #1
 8002dbc:	e7ee      	b.n	8002d9c <__libc_init_array+0xc>
 8002dbe:	00b3      	lsls	r3, r6, #2
 8002dc0:	58eb      	ldr	r3, [r5, r3]
 8002dc2:	4798      	blx	r3
 8002dc4:	3601      	adds	r6, #1
 8002dc6:	e7f2      	b.n	8002dae <__libc_init_array+0x1e>
 8002dc8:	08002e68 	.word	0x08002e68
 8002dcc:	08002e68 	.word	0x08002e68
 8002dd0:	08002e6c 	.word	0x08002e6c
 8002dd4:	08002e68 	.word	0x08002e68

08002dd8 <_init>:
 8002dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dda:	46c0      	nop			@ (mov r8, r8)
 8002ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dde:	bc08      	pop	{r3}
 8002de0:	469e      	mov	lr, r3
 8002de2:	4770      	bx	lr

08002de4 <_fini>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	46c0      	nop			@ (mov r8, r8)
 8002de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dea:	bc08      	pop	{r3}
 8002dec:	469e      	mov	lr, r3
 8002dee:	4770      	bx	lr
