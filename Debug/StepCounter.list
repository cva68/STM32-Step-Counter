
StepCounter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f74  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e0  08008034  08008034  00009034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008914  08008914  0000a08c  2**0
                  CONTENTS
  4 .ARM          00000000  08008914  08008914  0000a08c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008914  08008914  0000a08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008914  08008914  00009914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008918  08008918  00009918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800891c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d8  2000008c  080089a8  0000a08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000864  080089a8  0000a864  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f21  00000000  00000000  0000a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fd5  00000000  00000000  00022fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  00026fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001101  00000000  00000000  000285b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3a1  00000000  00000000  000296b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000206b6  00000000  00000000  00043a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099fab  00000000  00000000  00064110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe0bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005210  00000000  00000000  000fe100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00103310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800801c 	.word	0x0800801c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	0800801c 	.word	0x0800801c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	0018      	movs	r0, r3
 8000412:	230c      	movs	r3, #12
 8000414:	001a      	movs	r2, r3
 8000416:	2100      	movs	r1, #0
 8000418:	f007 f982 	bl	8007720 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800041c:	4b31      	ldr	r3, [pc, #196]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 800041e:	4a32      	ldr	r2, [pc, #200]	@ (80004e8 <MX_ADC1_Init+0xe0>)
 8000420:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000422:	4b30      	ldr	r3, [pc, #192]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000424:	22c0      	movs	r2, #192	@ 0xc0
 8000426:	0612      	lsls	r2, r2, #24
 8000428:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800042a:	4b2e      	ldr	r3, [pc, #184]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000430:	4b2c      	ldr	r3, [pc, #176]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000436:	4b2b      	ldr	r3, [pc, #172]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000438:	2280      	movs	r2, #128	@ 0x80
 800043a:	0612      	lsls	r2, r2, #24
 800043c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800043e:	4b29      	ldr	r3, [pc, #164]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000440:	2204      	movs	r2, #4
 8000442:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000444:	4b27      	ldr	r3, [pc, #156]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000446:	2200      	movs	r2, #0
 8000448:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800044a:	4b26      	ldr	r3, [pc, #152]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 800044c:	2200      	movs	r2, #0
 800044e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000450:	4b24      	ldr	r3, [pc, #144]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000452:	2200      	movs	r2, #0
 8000454:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 8000456:	4b23      	ldr	r3, [pc, #140]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000458:	2200      	movs	r2, #0
 800045a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800045c:	4b21      	ldr	r3, [pc, #132]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 800045e:	2220      	movs	r2, #32
 8000460:	2100      	movs	r1, #0
 8000462:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000464:	4b1f      	ldr	r3, [pc, #124]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000466:	2200      	movs	r2, #0
 8000468:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800046a:	4b1e      	ldr	r3, [pc, #120]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 800046c:	2200      	movs	r2, #0
 800046e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000470:	4b1c      	ldr	r3, [pc, #112]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000472:	222c      	movs	r2, #44	@ 0x2c
 8000474:	2100      	movs	r1, #0
 8000476:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000478:	4b1a      	ldr	r3, [pc, #104]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 800047a:	2200      	movs	r2, #0
 800047c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800047e:	4b19      	ldr	r3, [pc, #100]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000480:	2200      	movs	r2, #0
 8000482:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000484:	4b17      	ldr	r3, [pc, #92]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000486:	223c      	movs	r2, #60	@ 0x3c
 8000488:	2100      	movs	r1, #0
 800048a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800048c:	4b15      	ldr	r3, [pc, #84]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 800048e:	2200      	movs	r2, #0
 8000490:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000492:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000494:	0018      	movs	r0, r3
 8000496:	f001 fc45 	bl	8001d24 <HAL_ADC_Init>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800049e:	f000 fc9a 	bl	8000dd6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4a11      	ldr	r2, [pc, #68]	@ (80004ec <MX_ADC1_Init+0xe4>)
 80004a6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2201      	movs	r2, #1
 80004ac:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ae:	1d3a      	adds	r2, r7, #4
 80004b0:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 80004b2:	0011      	movs	r1, r2
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 fe79 	bl	80021ac <HAL_ADC_ConfigChannel>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80004be:	f000 fc8a 	bl	8000dd6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4a0a      	ldr	r2, [pc, #40]	@ (80004f0 <MX_ADC1_Init+0xe8>)
 80004c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c8:	1d3a      	adds	r2, r7, #4
 80004ca:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 80004cc:	0011      	movs	r1, r2
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 fe6c 	bl	80021ac <HAL_ADC_ConfigChannel>
 80004d4:	1e03      	subs	r3, r0, #0
 80004d6:	d001      	beq.n	80004dc <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80004d8:	f000 fc7d 	bl	8000dd6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004dc:	46c0      	nop			@ (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	b004      	add	sp, #16
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	200000a8 	.word	0x200000a8
 80004e8:	40012400 	.word	0x40012400
 80004ec:	2c000800 	.word	0x2c000800
 80004f0:	30001000 	.word	0x30001000

080004f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b093      	sub	sp, #76	@ 0x4c
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fc:	2334      	movs	r3, #52	@ 0x34
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	0018      	movs	r0, r3
 8000502:	2314      	movs	r3, #20
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f007 f90a 	bl	8007720 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050c:	2414      	movs	r4, #20
 800050e:	193b      	adds	r3, r7, r4
 8000510:	0018      	movs	r0, r3
 8000512:	2320      	movs	r3, #32
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f007 f902 	bl	8007720 <memset>
  if(adcHandle->Instance==ADC1)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a34      	ldr	r2, [pc, #208]	@ (80005f4 <HAL_ADC_MspInit+0x100>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d162      	bne.n	80005ec <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2220      	movs	r2, #32
 800052a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000532:	193b      	adds	r3, r7, r4
 8000534:	0018      	movs	r0, r3
 8000536:	f005 fc1b 	bl	8005d70 <HAL_RCCEx_PeriphCLKConfig>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 800053e:	f000 fc4a 	bl	8000dd6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000542:	4b2d      	ldr	r3, [pc, #180]	@ (80005f8 <HAL_ADC_MspInit+0x104>)
 8000544:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000546:	4b2c      	ldr	r3, [pc, #176]	@ (80005f8 <HAL_ADC_MspInit+0x104>)
 8000548:	2180      	movs	r1, #128	@ 0x80
 800054a:	0349      	lsls	r1, r1, #13
 800054c:	430a      	orrs	r2, r1
 800054e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000550:	4b29      	ldr	r3, [pc, #164]	@ (80005f8 <HAL_ADC_MspInit+0x104>)
 8000552:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000554:	2380      	movs	r3, #128	@ 0x80
 8000556:	035b      	lsls	r3, r3, #13
 8000558:	4013      	ands	r3, r2
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800055e:	4b26      	ldr	r3, [pc, #152]	@ (80005f8 <HAL_ADC_MspInit+0x104>)
 8000560:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000562:	4b25      	ldr	r3, [pc, #148]	@ (80005f8 <HAL_ADC_MspInit+0x104>)
 8000564:	2104      	movs	r1, #4
 8000566:	430a      	orrs	r2, r1
 8000568:	635a      	str	r2, [r3, #52]	@ 0x34
 800056a:	4b23      	ldr	r3, [pc, #140]	@ (80005f8 <HAL_ADC_MspInit+0x104>)
 800056c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800056e:	2204      	movs	r2, #4
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN11
    PC5     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = JOYSTICK_X_Pin|JOYSTICK_Y_Pin;
 8000576:	2134      	movs	r1, #52	@ 0x34
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2230      	movs	r2, #48	@ 0x30
 800057c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2203      	movs	r2, #3
 8000582:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800058a:	187b      	adds	r3, r7, r1
 800058c:	4a1b      	ldr	r2, [pc, #108]	@ (80005fc <HAL_ADC_MspInit+0x108>)
 800058e:	0019      	movs	r1, r3
 8000590:	0010      	movs	r0, r2
 8000592:	f002 fca5 	bl	8002ee0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000596:	4b1a      	ldr	r3, [pc, #104]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 8000598:	4a1a      	ldr	r2, [pc, #104]	@ (8000604 <HAL_ADC_MspInit+0x110>)
 800059a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800059c:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 800059e:	2205      	movs	r2, #5
 80005a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005a2:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005a8:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005ae:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005b0:	2280      	movs	r2, #128	@ 0x80
 80005b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	0052      	lsls	r2, r2, #1
 80005ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005bc:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005be:	2280      	movs	r2, #128	@ 0x80
 80005c0:	00d2      	lsls	r2, r2, #3
 80005c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80005c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f002 f9aa 	bl	800292c <HAL_DMA_Init>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 80005dc:	f000 fbfb 	bl	8000dd6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a07      	ldr	r2, [pc, #28]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005ec:	46c0      	nop			@ (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b013      	add	sp, #76	@ 0x4c
 80005f2:	bd90      	pop	{r4, r7, pc}
 80005f4:	40012400 	.word	0x40012400
 80005f8:	40021000 	.word	0x40021000
 80005fc:	50000800 	.word	0x50000800
 8000600:	2000010c 	.word	0x2000010c
 8000604:	40020008 	.word	0x40020008

08000608 <app_main>:
void button_task_execute(void);
void blinky_task_execute(void);
void display_task_execute(void);

void app_main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
	// Initialise and start timer.
	uint32_t ticks;
	buttonTaskNextRun = HAL_GetTick() + BUTTON_TASK_PERIOD_TICKS;
 800060e:	f001 fa13 	bl	8001a38 <HAL_GetTick>
 8000612:	0003      	movs	r3, r0
 8000614:	330a      	adds	r3, #10
 8000616:	001a      	movs	r2, r3
 8000618:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <app_main+0xc0>)
 800061a:	601a      	str	r2, [r3, #0]
	blinkyTaskNextRun = HAL_GetTick() + BLINKY_TASK_PERIOD_TICKS;
 800061c:	f001 fa0c 	bl	8001a38 <HAL_GetTick>
 8000620:	0003      	movs	r3, r0
 8000622:	33f5      	adds	r3, #245	@ 0xf5
 8000624:	33ff      	adds	r3, #255	@ 0xff
 8000626:	001a      	movs	r2, r3
 8000628:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <app_main+0xc4>)
 800062a:	601a      	str	r2, [r3, #0]
	joystickTaskNextRun = HAL_GetTick() + JOYSTICK_TASK_PERIOD_TICKS;
 800062c:	f001 fa04 	bl	8001a38 <HAL_GetTick>
 8000630:	0003      	movs	r3, r0
 8000632:	33f5      	adds	r3, #245	@ 0xf5
 8000634:	33ff      	adds	r3, #255	@ 0xff
 8000636:	001a      	movs	r2, r3
 8000638:	4b25      	ldr	r3, [pc, #148]	@ (80006d0 <app_main+0xc8>)
 800063a:	601a      	str	r2, [r3, #0]
	displayTaskNextRun = HAL_GetTick() + DISPLAY_TASK_PERIOD_TICKS;
 800063c:	f001 f9fc 	bl	8001a38 <HAL_GetTick>
 8000640:	0003      	movs	r3, r0
 8000642:	33fa      	adds	r3, #250	@ 0xfa
 8000644:	001a      	movs	r2, r3
 8000646:	4b23      	ldr	r3, [pc, #140]	@ (80006d4 <app_main+0xcc>)
 8000648:	601a      	str	r2, [r3, #0]

	// Initialise tasks.
	buttons_task_init();
 800064a:	f000 ff6b 	bl	8001524 <buttons_task_init>
	display_task_init();
 800064e:	f000 ffa3 	bl	8001598 <display_task_init>


	// Periodically execute tasks at the frequency defined above.
	while(1)
	{
		ticks = HAL_GetTick();
 8000652:	f001 f9f1 	bl	8001a38 <HAL_GetTick>
 8000656:	0003      	movs	r3, r0
 8000658:	607b      	str	r3, [r7, #4]

		if(ticks > buttonTaskNextRun)
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <app_main+0xc0>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	429a      	cmp	r2, r3
 8000662:	d907      	bls.n	8000674 <app_main+0x6c>
		{
		  buttons_task_execute();
 8000664:	f000 ff76 	bl	8001554 <buttons_task_execute>
		  buttonTaskNextRun += BUTTON_TASK_PERIOD_TICKS;
 8000668:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <app_main+0xc0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	330a      	adds	r3, #10
 800066e:	001a      	movs	r2, r3
 8000670:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <app_main+0xc0>)
 8000672:	601a      	str	r2, [r3, #0]
		}

		if (ticks > blinkyTaskNextRun)
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <app_main+0xc4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	429a      	cmp	r2, r3
 800067c:	d908      	bls.n	8000690 <app_main+0x88>
		{
		  blinky_task_execute();
 800067e:	f000 ff45 	bl	800150c <blinky_task_execute>
		  blinkyTaskNextRun += BLINKY_TASK_PERIOD_TICKS;
 8000682:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <app_main+0xc4>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	33f5      	adds	r3, #245	@ 0xf5
 8000688:	33ff      	adds	r3, #255	@ 0xff
 800068a:	001a      	movs	r2, r3
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <app_main+0xc4>)
 800068e:	601a      	str	r2, [r3, #0]
		}

		if (ticks > joystickTaskNextRun)
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <app_main+0xc8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	429a      	cmp	r2, r3
 8000698:	d908      	bls.n	80006ac <app_main+0xa4>
		{
		  joystick_task_execute();
 800069a:	f000 ffd7 	bl	800164c <joystick_task_execute>
		  joystickTaskNextRun += JOYSTICK_TASK_PERIOD_TICKS;
 800069e:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <app_main+0xc8>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	33f5      	adds	r3, #245	@ 0xf5
 80006a4:	33ff      	adds	r3, #255	@ 0xff
 80006a6:	001a      	movs	r2, r3
 80006a8:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <app_main+0xc8>)
 80006aa:	601a      	str	r2, [r3, #0]
		}

		if (ticks > displayTaskNextRun)
 80006ac:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <app_main+0xcc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d9cd      	bls.n	8000652 <app_main+0x4a>
		{
			display_task_execute();
 80006b6:	f000 ff7b 	bl	80015b0 <display_task_execute>
			displayTaskNextRun += DISPLAY_TASK_PERIOD_TICKS;
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <app_main+0xcc>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	33fa      	adds	r3, #250	@ 0xfa
 80006c0:	001a      	movs	r2, r3
 80006c2:	4b04      	ldr	r3, [pc, #16]	@ (80006d4 <app_main+0xcc>)
 80006c4:	601a      	str	r2, [r3, #0]
		ticks = HAL_GetTick();
 80006c6:	e7c4      	b.n	8000652 <app_main+0x4a>
 80006c8:	20000168 	.word	0x20000168
 80006cc:	2000016c 	.word	0x2000016c
 80006d0:	20000170 	.word	0x20000170
 80006d4:	20000174 	.word	0x20000174

080006d8 <buttons_init>:
};

// *******************************************************
// buttons_init: Initialise the variables associated with the set of buttons.
void buttons_init (void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	e029      	b.n	8000738 <buttons_init+0x60>
	{
		buttons[i].state = buttons[i].normalState;
 80006e4:	4918      	ldr	r1, [pc, #96]	@ (8000748 <buttons_init+0x70>)
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	0013      	movs	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	189b      	adds	r3, r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	18cb      	adds	r3, r1, r3
 80006f2:	3306      	adds	r3, #6
 80006f4:	7818      	ldrb	r0, [r3, #0]
 80006f6:	4914      	ldr	r1, [pc, #80]	@ (8000748 <buttons_init+0x70>)
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	0013      	movs	r3, r2
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	189b      	adds	r3, r3, r2
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	18cb      	adds	r3, r1, r3
 8000704:	3307      	adds	r3, #7
 8000706:	1c02      	adds	r2, r0, #0
 8000708:	701a      	strb	r2, [r3, #0]
		buttons[i].newStateCount = 0;
 800070a:	490f      	ldr	r1, [pc, #60]	@ (8000748 <buttons_init+0x70>)
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	0013      	movs	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	189b      	adds	r3, r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	18cb      	adds	r3, r1, r3
 8000718:	3308      	adds	r3, #8
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
		buttons[i].hasChanged = false;
 800071e:	490a      	ldr	r1, [pc, #40]	@ (8000748 <buttons_init+0x70>)
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	0013      	movs	r3, r2
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	189b      	adds	r3, r3, r2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	18cb      	adds	r3, r1, r3
 800072c:	3309      	adds	r3, #9
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BUTTONS; i++)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	3301      	adds	r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b03      	cmp	r3, #3
 800073c:	ddd2      	ble.n	80006e4 <buttons_init+0xc>
	}
}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b002      	add	sp, #8
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000000 	.word	0x20000000

0800074c <buttons_update>:
// Debouncing algorithm: A finite state machine (FSM) is associated with each button.
// A state change can be declared only after NUM_BUT_POLLS consecutive polls have
// read the pin in the opposite condition, before the state changes and
// a flag is set. Set NUM_BUT_POLLS according to the polling rate.
void buttons_update (void)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
	// Iterate through the buttons, updating button variables as required
	for (int i = 0; i < NUM_BUTTONS; i++)
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	e06f      	b.n	8000838 <buttons_update+0xec>
	{
		// Read the pin value
		GPIO_PinState rawState = HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin);
 8000758:	493b      	ldr	r1, [pc, #236]	@ (8000848 <buttons_update+0xfc>)
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	0013      	movs	r3, r2
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	189b      	adds	r3, r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	5858      	ldr	r0, [r3, r1]
 8000766:	4938      	ldr	r1, [pc, #224]	@ (8000848 <buttons_update+0xfc>)
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	0013      	movs	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	189b      	adds	r3, r3, r2
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	18cb      	adds	r3, r1, r3
 8000774:	3304      	adds	r3, #4
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	1cfc      	adds	r4, r7, #3
 800077a:	0019      	movs	r1, r3
 800077c:	f002 fd22 	bl	80031c4 <HAL_GPIO_ReadPin>
 8000780:	0003      	movs	r3, r0
 8000782:	7023      	strb	r3, [r4, #0]

		// If reading is different from last confirmed state, increment counter
        if (rawState != buttons[i].state)
 8000784:	4930      	ldr	r1, [pc, #192]	@ (8000848 <buttons_update+0xfc>)
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	0013      	movs	r3, r2
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	189b      	adds	r3, r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	18cb      	adds	r3, r1, r3
 8000792:	3307      	adds	r3, #7
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	1cfa      	adds	r2, r7, #3
 8000798:	7812      	ldrb	r2, [r2, #0]
 800079a:	429a      	cmp	r2, r3
 800079c:	d03f      	beq.n	800081e <buttons_update+0xd2>
        {
        	buttons[i].newStateCount++;
 800079e:	492a      	ldr	r1, [pc, #168]	@ (8000848 <buttons_update+0xfc>)
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	0013      	movs	r3, r2
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	189b      	adds	r3, r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	18cb      	adds	r3, r1, r3
 80007ac:	3308      	adds	r3, #8
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	b2d8      	uxtb	r0, r3
 80007b4:	4924      	ldr	r1, [pc, #144]	@ (8000848 <buttons_update+0xfc>)
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	0013      	movs	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	189b      	adds	r3, r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	18cb      	adds	r3, r1, r3
 80007c2:	3308      	adds	r3, #8
 80007c4:	1c02      	adds	r2, r0, #0
 80007c6:	701a      	strb	r2, [r3, #0]

        	// If count exceeds poll count, confirm change of state
        	if (buttons[i].newStateCount >= NUM_BUT_POLLS)
 80007c8:	491f      	ldr	r1, [pc, #124]	@ (8000848 <buttons_update+0xfc>)
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	0013      	movs	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	189b      	adds	r3, r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	18cb      	adds	r3, r1, r3
 80007d6:	3308      	adds	r3, #8
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b02      	cmp	r3, #2
 80007dc:	d929      	bls.n	8000832 <buttons_update+0xe6>
        	{
        		buttons[i].state = rawState;
 80007de:	491a      	ldr	r1, [pc, #104]	@ (8000848 <buttons_update+0xfc>)
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	0013      	movs	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	189b      	adds	r3, r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	18cb      	adds	r3, r1, r3
 80007ec:	3307      	adds	r3, #7
 80007ee:	1cfa      	adds	r2, r7, #3
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	701a      	strb	r2, [r3, #0]
        		buttons[i].hasChanged = true;	// Reset by call to buttons_checkButton()
 80007f4:	4914      	ldr	r1, [pc, #80]	@ (8000848 <buttons_update+0xfc>)
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	0013      	movs	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	189b      	adds	r3, r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	18cb      	adds	r3, r1, r3
 8000802:	3309      	adds	r3, #9
 8000804:	2201      	movs	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
        		buttons[i].newStateCount = 0;
 8000808:	490f      	ldr	r1, [pc, #60]	@ (8000848 <buttons_update+0xfc>)
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	0013      	movs	r3, r2
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	189b      	adds	r3, r3, r2
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	18cb      	adds	r3, r1, r3
 8000816:	3308      	adds	r3, #8
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
 800081c:	e009      	b.n	8000832 <buttons_update+0xe6>
        	}
        }
        else
        {
        	buttons[i].newStateCount = 0;
 800081e:	490a      	ldr	r1, [pc, #40]	@ (8000848 <buttons_update+0xfc>)
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	0013      	movs	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	189b      	adds	r3, r3, r2
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	18cb      	adds	r3, r1, r3
 800082c:	3308      	adds	r3, #8
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BUTTONS; i++)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3301      	adds	r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b03      	cmp	r3, #3
 800083c:	dd8c      	ble.n	8000758 <buttons_update+0xc>
        }
	}
}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	46c0      	nop			@ (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	b003      	add	sp, #12
 8000846:	bd90      	pop	{r4, r7, pc}
 8000848:	20000000 	.word	0x20000000

0800084c <buttons_checkButton>:
// *******************************************************
// buttons_checkButton: Function returns the new button logical state if the button
// logical state (PUSHED or RELEASED) has changed since the last call,
// otherwise returns NO_CHANGE.
buttonState_t buttons_checkButton (buttonName_t butName)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	0002      	movs	r2, r0
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	701a      	strb	r2, [r3, #0]
	if (buttons[butName].hasChanged)
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	781a      	ldrb	r2, [r3, #0]
 800085c:	4919      	ldr	r1, [pc, #100]	@ (80008c4 <buttons_checkButton+0x78>)
 800085e:	0013      	movs	r3, r2
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	189b      	adds	r3, r3, r2
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	18cb      	adds	r3, r1, r3
 8000868:	3309      	adds	r3, #9
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d024      	beq.n	80008ba <buttons_checkButton+0x6e>
	{
		buttons[butName].hasChanged = false;
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	781a      	ldrb	r2, [r3, #0]
 8000874:	4913      	ldr	r1, [pc, #76]	@ (80008c4 <buttons_checkButton+0x78>)
 8000876:	0013      	movs	r3, r2
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	189b      	adds	r3, r3, r2
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	18cb      	adds	r3, r1, r3
 8000880:	3309      	adds	r3, #9
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
		if (buttons[butName].state == buttons[butName].normalState)
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	490e      	ldr	r1, [pc, #56]	@ (80008c4 <buttons_checkButton+0x78>)
 800088c:	0013      	movs	r3, r2
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	189b      	adds	r3, r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	18cb      	adds	r3, r1, r3
 8000896:	3307      	adds	r3, #7
 8000898:	7819      	ldrb	r1, [r3, #0]
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	781a      	ldrb	r2, [r3, #0]
 800089e:	4809      	ldr	r0, [pc, #36]	@ (80008c4 <buttons_checkButton+0x78>)
 80008a0:	0013      	movs	r3, r2
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	189b      	adds	r3, r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	18c3      	adds	r3, r0, r3
 80008aa:	3306      	adds	r3, #6
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d101      	bne.n	80008b6 <buttons_checkButton+0x6a>
			return RELEASED;
 80008b2:	2300      	movs	r3, #0
 80008b4:	e002      	b.n	80008bc <buttons_checkButton+0x70>
		else
			return PUSHED;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e000      	b.n	80008bc <buttons_checkButton+0x70>
	}
	return NO_CHANGE;
 80008ba:	2302      	movs	r3, #2
}
 80008bc:	0018      	movs	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	b002      	add	sp, #8
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000000 	.word	0x20000000

080008c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ce:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <MX_DMA_Init+0x48>)
 80008d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80008d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_DMA_Init+0x48>)
 80008d4:	2101      	movs	r1, #1
 80008d6:	430a      	orrs	r2, r1
 80008d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80008da:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <MX_DMA_Init+0x48>)
 80008dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008de:	2201      	movs	r2, #1
 80008e0:	4013      	ands	r3, r2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	2009      	movs	r0, #9
 80008ec:	f001 ffec 	bl	80028c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008f0:	2009      	movs	r0, #9
 80008f2:	f001 fffe 	bl	80028f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2100      	movs	r1, #0
 80008fa:	200a      	movs	r0, #10
 80008fc:	f001 ffe4 	bl	80028c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000900:	200a      	movs	r0, #10
 8000902:	f001 fff6 	bl	80028f2 <HAL_NVIC_EnableIRQ>

}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b002      	add	sp, #8
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	40021000 	.word	0x40021000

08000914 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b08b      	sub	sp, #44	@ 0x2c
 8000918:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	2414      	movs	r4, #20
 800091c:	193b      	adds	r3, r7, r4
 800091e:	0018      	movs	r0, r3
 8000920:	2314      	movs	r3, #20
 8000922:	001a      	movs	r2, r3
 8000924:	2100      	movs	r1, #0
 8000926:	f006 fefb 	bl	8007720 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b79      	ldr	r3, [pc, #484]	@ (8000b10 <MX_GPIO_Init+0x1fc>)
 800092c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800092e:	4b78      	ldr	r3, [pc, #480]	@ (8000b10 <MX_GPIO_Init+0x1fc>)
 8000930:	2104      	movs	r1, #4
 8000932:	430a      	orrs	r2, r1
 8000934:	635a      	str	r2, [r3, #52]	@ 0x34
 8000936:	4b76      	ldr	r3, [pc, #472]	@ (8000b10 <MX_GPIO_Init+0x1fc>)
 8000938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800093a:	2204      	movs	r2, #4
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000942:	4b73      	ldr	r3, [pc, #460]	@ (8000b10 <MX_GPIO_Init+0x1fc>)
 8000944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000946:	4b72      	ldr	r3, [pc, #456]	@ (8000b10 <MX_GPIO_Init+0x1fc>)
 8000948:	2120      	movs	r1, #32
 800094a:	430a      	orrs	r2, r1
 800094c:	635a      	str	r2, [r3, #52]	@ 0x34
 800094e:	4b70      	ldr	r3, [pc, #448]	@ (8000b10 <MX_GPIO_Init+0x1fc>)
 8000950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000952:	2220      	movs	r2, #32
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b6d      	ldr	r3, [pc, #436]	@ (8000b10 <MX_GPIO_Init+0x1fc>)
 800095c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800095e:	4b6c      	ldr	r3, [pc, #432]	@ (8000b10 <MX_GPIO_Init+0x1fc>)
 8000960:	2101      	movs	r1, #1
 8000962:	430a      	orrs	r2, r1
 8000964:	635a      	str	r2, [r3, #52]	@ 0x34
 8000966:	4b6a      	ldr	r3, [pc, #424]	@ (8000b10 <MX_GPIO_Init+0x1fc>)
 8000968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800096a:	2201      	movs	r2, #1
 800096c:	4013      	ands	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b67      	ldr	r3, [pc, #412]	@ (8000b10 <MX_GPIO_Init+0x1fc>)
 8000974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000976:	4b66      	ldr	r3, [pc, #408]	@ (8000b10 <MX_GPIO_Init+0x1fc>)
 8000978:	2102      	movs	r1, #2
 800097a:	430a      	orrs	r2, r1
 800097c:	635a      	str	r2, [r3, #52]	@ 0x34
 800097e:	4b64      	ldr	r3, [pc, #400]	@ (8000b10 <MX_GPIO_Init+0x1fc>)
 8000980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000982:	2202      	movs	r2, #2
 8000984:	4013      	ands	r3, r2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	4b61      	ldr	r3, [pc, #388]	@ (8000b10 <MX_GPIO_Init+0x1fc>)
 800098c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800098e:	4b60      	ldr	r3, [pc, #384]	@ (8000b10 <MX_GPIO_Init+0x1fc>)
 8000990:	2108      	movs	r1, #8
 8000992:	430a      	orrs	r2, r1
 8000994:	635a      	str	r2, [r3, #52]	@ 0x34
 8000996:	4b5e      	ldr	r3, [pc, #376]	@ (8000b10 <MX_GPIO_Init+0x1fc>)
 8000998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800099a:	2208      	movs	r2, #8
 800099c:	4013      	ands	r3, r2
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB_DS4_Pin|RGB_DS2_Pin, GPIO_PIN_SET);
 80009a2:	495c      	ldr	r1, [pc, #368]	@ (8000b14 <MX_GPIO_Init+0x200>)
 80009a4:	4b5c      	ldr	r3, [pc, #368]	@ (8000b18 <MX_GPIO_Init+0x204>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	0018      	movs	r0, r3
 80009aa:	f002 fc28 	bl	80031fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_DS1_GPIO_Port, RGB_DS1_Pin, GPIO_PIN_SET);
 80009ae:	4b5b      	ldr	r3, [pc, #364]	@ (8000b1c <MX_GPIO_Init+0x208>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	2108      	movs	r1, #8
 80009b4:	0018      	movs	r0, r3
 80009b6:	f002 fc22 	bl	80031fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NUCLEO_LD1_GPIO_Port, NUCLEO_LD1_Pin, GPIO_PIN_RESET);
 80009ba:	23a0      	movs	r3, #160	@ 0xa0
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	2200      	movs	r2, #0
 80009c0:	2120      	movs	r1, #32
 80009c2:	0018      	movs	r0, r3
 80009c4:	f002 fc1b 	bl	80031fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NUCLEO_LD2_GPIO_Port, NUCLEO_LD2_Pin, GPIO_PIN_RESET);
 80009c8:	2380      	movs	r3, #128	@ 0x80
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4852      	ldr	r0, [pc, #328]	@ (8000b18 <MX_GPIO_Init+0x204>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	0019      	movs	r1, r3
 80009d2:	f002 fc14 	bl	80031fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin, GPIO_PIN_RESET);
 80009d6:	4b52      	ldr	r3, [pc, #328]	@ (8000b20 <MX_GPIO_Init+0x20c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	211c      	movs	r1, #28
 80009dc:	0018      	movs	r0, r3
 80009de:	f002 fc0e 	bl	80031fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	4a4f      	ldr	r2, [pc, #316]	@ (8000b24 <MX_GPIO_Init+0x210>)
 80009e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	2200      	movs	r2, #0
 80009ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2202      	movs	r2, #2
 80009f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	4a48      	ldr	r2, [pc, #288]	@ (8000b18 <MX_GPIO_Init+0x204>)
 80009f8:	0019      	movs	r1, r3
 80009fa:	0010      	movs	r0, r2
 80009fc:	f002 fa70 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RGB_DS4_Pin|RGB_DS2_Pin|NUCLEO_LD2_Pin;
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	4a49      	ldr	r2, [pc, #292]	@ (8000b28 <MX_GPIO_Init+0x214>)
 8000a04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	193b      	adds	r3, r7, r4
 8000a08:	2201      	movs	r2, #1
 8000a0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	4a3f      	ldr	r2, [pc, #252]	@ (8000b18 <MX_GPIO_Init+0x204>)
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	0010      	movs	r0, r2
 8000a20:	f002 fa5e 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW4_Pin;
 8000a24:	0021      	movs	r1, r4
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2280      	movs	r2, #128	@ 0x80
 8000a2a:	0192      	lsls	r2, r2, #6
 8000a2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2e:	000c      	movs	r4, r1
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2201      	movs	r2, #1
 8000a3a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW4_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	4a36      	ldr	r2, [pc, #216]	@ (8000b18 <MX_GPIO_Init+0x204>)
 8000a40:	0019      	movs	r1, r3
 8000a42:	0010      	movs	r0, r2
 8000a44:	f002 fa4c 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RGB_DS1_Pin;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2201      	movs	r2, #1
 8000a52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RGB_DS1_GPIO_Port, &GPIO_InitStruct);
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	4a2e      	ldr	r2, [pc, #184]	@ (8000b1c <MX_GPIO_Init+0x208>)
 8000a64:	0019      	movs	r1, r3
 8000a66:	0010      	movs	r0, r2
 8000a68:	f002 fa3a 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUCLEO_LD1_Pin;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2220      	movs	r2, #32
 8000a70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2201      	movs	r2, #1
 8000a76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NUCLEO_LD1_GPIO_Port, &GPIO_InitStruct);
 8000a84:	193a      	adds	r2, r7, r4
 8000a86:	23a0      	movs	r3, #160	@ 0xa0
 8000a88:	05db      	lsls	r3, r3, #23
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f002 fa27 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOYSTICK_CLICK_Pin;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2202      	movs	r2, #2
 8000a96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(JOYSTICK_CLICK_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	4a21      	ldr	r2, [pc, #132]	@ (8000b2c <MX_GPIO_Init+0x218>)
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	0010      	movs	r0, r2
 8000aac:	f002 fa18 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin;
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	221c      	movs	r2, #28
 8000ab4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	2201      	movs	r2, #1
 8000aba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	4a15      	ldr	r2, [pc, #84]	@ (8000b20 <MX_GPIO_Init+0x20c>)
 8000acc:	0019      	movs	r1, r3
 8000ace:	0010      	movs	r0, r2
 8000ad0:	f002 fa06 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8000ad4:	0021      	movs	r1, r4
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2280      	movs	r2, #128	@ 0x80
 8000ada:	00d2      	lsls	r2, r2, #3
 8000adc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	4a13      	ldr	r2, [pc, #76]	@ (8000b30 <MX_GPIO_Init+0x21c>)
 8000ae2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <MX_GPIO_Init+0x204>)
 8000aee:	0019      	movs	r1, r3
 8000af0:	0010      	movs	r0, r2
 8000af2:	f002 f9f5 	bl	8002ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	2007      	movs	r0, #7
 8000afc:	f001 fee4 	bl	80028c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000b00:	2007      	movs	r0, #7
 8000b02:	f001 fef6 	bl	80028f2 <HAL_NVIC_EnableIRQ>

}
 8000b06:	46c0      	nop			@ (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b00b      	add	sp, #44	@ 0x2c
 8000b0c:	bd90      	pop	{r4, r7, pc}
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	40021000 	.word	0x40021000
 8000b14:	00001004 	.word	0x00001004
 8000b18:	50000800 	.word	0x50000800
 8000b1c:	50001400 	.word	0x50001400
 8000b20:	50000c00 	.word	0x50000c00
 8000b24:	00000802 	.word	0x00000802
 8000b28:	00001204 	.word	0x00001204
 8000b2c:	50000400 	.word	0x50000400
 8000b30:	10110000 	.word	0x10110000

08000b34 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <MX_I2C1_Init+0x74>)
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000bac <MX_I2C1_Init+0x78>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <MX_I2C1_Init+0x74>)
 8000b40:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb0 <MX_I2C1_Init+0x7c>)
 8000b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <MX_I2C1_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <MX_I2C1_Init+0x74>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b50:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <MX_I2C1_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b56:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <MX_I2C1_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <MX_I2C1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <MX_I2C1_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <MX_I2C1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <MX_I2C1_Init+0x74>)
 8000b70:	0018      	movs	r0, r3
 8000b72:	f002 fbbb 	bl	80032ec <HAL_I2C_Init>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d001      	beq.n	8000b7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b7a:	f000 f92c 	bl	8000dd6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <MX_I2C1_Init+0x74>)
 8000b80:	2100      	movs	r1, #0
 8000b82:	0018      	movs	r0, r3
 8000b84:	f004 fc90 	bl	80054a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b88:	1e03      	subs	r3, r0, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b8c:	f000 f923 	bl	8000dd6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b90:	4b05      	ldr	r3, [pc, #20]	@ (8000ba8 <MX_I2C1_Init+0x74>)
 8000b92:	2100      	movs	r1, #0
 8000b94:	0018      	movs	r0, r3
 8000b96:	f004 fcd3 	bl	8005540 <HAL_I2CEx_ConfigDigitalFilter>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b9e:	f000 f91a 	bl	8000dd6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000178 	.word	0x20000178
 8000bac:	40005400 	.word	0x40005400
 8000bb0:	00402d41 	.word	0x00402d41

08000bb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b093      	sub	sp, #76	@ 0x4c
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	2334      	movs	r3, #52	@ 0x34
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	2314      	movs	r3, #20
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	f006 fdaa 	bl	8007720 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bcc:	2414      	movs	r4, #20
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	2320      	movs	r3, #32
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f006 fda2 	bl	8007720 <memset>
  if(i2cHandle->Instance==I2C1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a3b      	ldr	r2, [pc, #236]	@ (8000cd0 <HAL_I2C_MspInit+0x11c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d16f      	bne.n	8000cc6 <HAL_I2C_MspInit+0x112>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	2202      	movs	r2, #2
 8000bea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f005 f8bb 	bl	8005d70 <HAL_RCCEx_PeriphCLKConfig>
 8000bfa:	1e03      	subs	r3, r0, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bfe:	f000 f8ea 	bl	8000dd6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b34      	ldr	r3, [pc, #208]	@ (8000cd4 <HAL_I2C_MspInit+0x120>)
 8000c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c06:	4b33      	ldr	r3, [pc, #204]	@ (8000cd4 <HAL_I2C_MspInit+0x120>)
 8000c08:	2102      	movs	r1, #2
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c0e:	4b31      	ldr	r3, [pc, #196]	@ (8000cd4 <HAL_I2C_MspInit+0x120>)
 8000c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c12:	2202      	movs	r2, #2
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c1a:	2134      	movs	r1, #52	@ 0x34
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	22c0      	movs	r2, #192	@ 0xc0
 8000c20:	0092      	lsls	r2, r2, #2
 8000c22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2212      	movs	r2, #18
 8000c28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2206      	movs	r2, #6
 8000c3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	4a26      	ldr	r2, [pc, #152]	@ (8000cd8 <HAL_I2C_MspInit+0x124>)
 8000c40:	0019      	movs	r1, r3
 8000c42:	0010      	movs	r0, r2
 8000c44:	f002 f94c 	bl	8002ee0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c48:	4b22      	ldr	r3, [pc, #136]	@ (8000cd4 <HAL_I2C_MspInit+0x120>)
 8000c4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c4c:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <HAL_I2C_MspInit+0x120>)
 8000c4e:	2180      	movs	r1, #128	@ 0x80
 8000c50:	0389      	lsls	r1, r1, #14
 8000c52:	430a      	orrs	r2, r1
 8000c54:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c56:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <HAL_I2C_MspInit+0x120>)
 8000c58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c5a:	2380      	movs	r3, #128	@ 0x80
 8000c5c:	039b      	lsls	r3, r3, #14
 8000c5e:	4013      	ands	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <HAL_I2C_MspInit+0x128>)
 8000c66:	4a1e      	ldr	r2, [pc, #120]	@ (8000ce0 <HAL_I2C_MspInit+0x12c>)
 8000c68:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <HAL_I2C_MspInit+0x128>)
 8000c6c:	220b      	movs	r2, #11
 8000c6e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <HAL_I2C_MspInit+0x128>)
 8000c72:	2210      	movs	r2, #16
 8000c74:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <HAL_I2C_MspInit+0x128>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <HAL_I2C_MspInit+0x128>)
 8000c7e:	2280      	movs	r2, #128	@ 0x80
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c82:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <HAL_I2C_MspInit+0x128>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <HAL_I2C_MspInit+0x128>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <HAL_I2C_MspInit+0x128>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <HAL_I2C_MspInit+0x128>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <HAL_I2C_MspInit+0x128>)
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f001 fe45 	bl	800292c <HAL_DMA_Init>
 8000ca2:	1e03      	subs	r3, r0, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_I2C_MspInit+0xf6>
    {
      Error_Handler();
 8000ca6:	f000 f896 	bl	8000dd6 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a0b      	ldr	r2, [pc, #44]	@ (8000cdc <HAL_I2C_MspInit+0x128>)
 8000cae:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <HAL_I2C_MspInit+0x128>)
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2017      	movs	r0, #23
 8000cbc:	f001 fe04 	bl	80028c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000cc0:	2017      	movs	r0, #23
 8000cc2:	f001 fe16 	bl	80028f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cc6:	46c0      	nop			@ (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b013      	add	sp, #76	@ 0x4c
 8000ccc:	bd90      	pop	{r4, r7, pc}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	40005400 	.word	0x40005400
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	50000400 	.word	0x50000400
 8000cdc:	200001cc 	.word	0x200001cc
 8000ce0:	4002001c 	.word	0x4002001c

08000ce4 <update_joystick>:
#include "joystick.h"

static uint16_t raw_adc[2];


void update_joystick(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	// Update the ADC values of the JoyStick X and Y axis inputs
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)raw_adc, 2);
 8000ce8:	4904      	ldr	r1, [pc, #16]	@ (8000cfc <update_joystick+0x18>)
 8000cea:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <update_joystick+0x1c>)
 8000cec:	2202      	movs	r2, #2
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f001 f9be 	bl	8002070 <HAL_ADC_Start_DMA>
}
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	20000228 	.word	0x20000228
 8000d00:	200000a8 	.word	0x200000a8

08000d04 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

}
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b002      	add	sp, #8
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <get_raw_values>:

uint16_t* get_raw_values(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	return raw_adc;
 8000d18:	4b01      	ldr	r3, [pc, #4]	@ (8000d20 <get_raw_values+0xc>)
}
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000228 	.word	0x20000228

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d28:	f000 fe13 	bl	8001952 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2c:	f000 f80f 	bl	8000d4e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d30:	f7ff fdf0 	bl	8000914 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d34:	f7ff fdc8 	bl	80008c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d38:	f7ff fb66 	bl	8000408 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d3c:	f7ff fefa 	bl	8000b34 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000d40:	f000 fd46 	bl	80017d0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d44:	f000 fc8a 	bl	800165c <MX_TIM2_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  app_main();
 8000d48:	f7ff fc5e 	bl	8000608 <app_main>
 8000d4c:	e7fc      	b.n	8000d48 <main+0x24>

08000d4e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d4e:	b590      	push	{r4, r7, lr}
 8000d50:	b08f      	sub	sp, #60	@ 0x3c
 8000d52:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d54:	2418      	movs	r4, #24
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	0018      	movs	r0, r3
 8000d5a:	2320      	movs	r3, #32
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	2100      	movs	r1, #0
 8000d60:	f006 fcde 	bl	8007720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	0018      	movs	r0, r3
 8000d68:	2314      	movs	r3, #20
 8000d6a:	001a      	movs	r2, r3
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	f006 fcd7 	bl	8007720 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d72:	193b      	adds	r3, r7, r4
 8000d74:	2202      	movs	r2, #2
 8000d76:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d78:	193b      	adds	r3, r7, r4
 8000d7a:	2280      	movs	r2, #128	@ 0x80
 8000d7c:	0052      	lsls	r2, r2, #1
 8000d7e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000d80:	193b      	adds	r3, r7, r4
 8000d82:	2280      	movs	r2, #128	@ 0x80
 8000d84:	0152      	lsls	r2, r2, #5
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	2240      	movs	r2, #64	@ 0x40
 8000d8c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	0018      	movs	r0, r3
 8000d92:	f004 fc21 	bl	80055d8 <HAL_RCC_OscConfig>
 8000d96:	1e03      	subs	r3, r0, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d9a:	f000 f81c 	bl	8000dd6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f004 fe2f 	bl	8005a24 <HAL_RCC_ClockConfig>
 8000dc6:	1e03      	subs	r3, r0, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000dca:	f000 f804 	bl	8000dd6 <Error_Handler>
  }
}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b00f      	add	sp, #60	@ 0x3c
 8000dd4:	bd90      	pop	{r4, r7, pc}

08000dd6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dda:	b672      	cpsid	i
}
 8000ddc:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	e7fd      	b.n	8000dde <Error_Handler+0x8>
	...

08000de4 <rgb_colour_on>:
	GPIO_PinState state = RGB_LEDS[led].active_high ? GPIO_PIN_SET : GPIO_PIN_RESET;
	HAL_GPIO_WritePin(RGB_LEDS[led].port, RGB_LEDS[led].pin, state);
}

void rgb_colour_on(rgb_colour_t colour)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	0002      	movs	r2, r0
 8000dec:	1dfb      	adds	r3, r7, #7
 8000dee:	701a      	strb	r2, [r3, #0]
	GPIO_PinState state = RGB_COLOURS[colour].active_high ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000df0:	1dfb      	adds	r3, r7, #7
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4a0e      	ldr	r2, [pc, #56]	@ (8000e30 <rgb_colour_on+0x4c>)
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	18d3      	adds	r3, r2, r3
 8000dfa:	3306      	adds	r3, #6
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	240f      	movs	r4, #15
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RGB_COLOURS[colour].port, RGB_COLOURS[colour].pin, state);
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	781a      	ldrb	r2, [r3, #0]
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <rgb_colour_on+0x4c>)
 8000e0a:	00d2      	lsls	r2, r2, #3
 8000e0c:	58d0      	ldr	r0, [r2, r3]
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	4a07      	ldr	r2, [pc, #28]	@ (8000e30 <rgb_colour_on+0x4c>)
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	18d3      	adds	r3, r2, r3
 8000e18:	3304      	adds	r3, #4
 8000e1a:	8819      	ldrh	r1, [r3, #0]
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	001a      	movs	r2, r3
 8000e22:	f002 f9ec 	bl	80031fe <HAL_GPIO_WritePin>
}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b005      	add	sp, #20
 8000e2c:	bd90      	pop	{r4, r7, pc}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	08008074 	.word	0x08008074

08000e34 <rgb_led_toggle>:
	GPIO_PinState state = RGB_COLOURS[colour].active_high ? GPIO_PIN_RESET : GPIO_PIN_SET;
	HAL_GPIO_WritePin(RGB_COLOURS[colour].port, RGB_COLOURS[colour].pin, state);
}

void rgb_led_toggle(rgb_led_t led)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(RGB_LEDS[led].port, RGB_LEDS[led].pin);
 8000e40:	1dfb      	adds	r3, r7, #7
 8000e42:	781a      	ldrb	r2, [r3, #0]
 8000e44:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <rgb_led_toggle+0x34>)
 8000e46:	00d2      	lsls	r2, r2, #3
 8000e48:	58d0      	ldr	r0, [r2, r3]
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	4a06      	ldr	r2, [pc, #24]	@ (8000e68 <rgb_led_toggle+0x34>)
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	18d3      	adds	r3, r2, r3
 8000e54:	3304      	adds	r3, #4
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	0019      	movs	r1, r3
 8000e5a:	f002 f9ed 	bl	8003238 <HAL_GPIO_TogglePin>
}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	08008054 	.word	0x08008054

08000e6c <ssd1306_Reset>:

#if defined(SSD1306_USE_I2C)

static uint8_t updateScreenPageIndex = 0;

void ssd1306_Reset(void) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af04      	add	r7, sp, #16
 8000e7e:	0002      	movs	r2, r0
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000e84:	4808      	ldr	r0, [pc, #32]	@ (8000ea8 <ssd1306_WriteCommand+0x30>)
 8000e86:	2301      	movs	r3, #1
 8000e88:	425b      	negs	r3, r3
 8000e8a:	9302      	str	r3, [sp, #8]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	1dfb      	adds	r3, r7, #7
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	2301      	movs	r3, #1
 8000e96:	2200      	movs	r2, #0
 8000e98:	2178      	movs	r1, #120	@ 0x78
 8000e9a:	f002 facd 	bl	8003438 <HAL_I2C_Mem_Write>
}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b002      	add	sp, #8
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	20000178 	.word	0x20000178

08000eac <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	4806      	ldr	r0, [pc, #24]	@ (8000ed4 <ssd1306_WriteData+0x28>)
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	2240      	movs	r2, #64	@ 0x40
 8000ec6:	2178      	movs	r1, #120	@ 0x78
 8000ec8:	f002 fbe4 	bl	8003694 <HAL_I2C_Mem_Write_DMA>
}
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000178 	.word	0x20000178

08000ed8 <ssd1306_UpdatePage>:

void ssd1306_UpdatePage(uint8_t pageIndex) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	0002      	movs	r2, r0
 8000ee0:	1dfb      	adds	r3, r7, #7
 8000ee2:	701a      	strb	r2, [r3, #0]
	ssd1306_WriteCommand(0xB0 + pageIndex); // Set the current RAM page address.
 8000ee4:	1dfb      	adds	r3, r7, #7
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	3b50      	subs	r3, #80	@ 0x50
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff ffc3 	bl	8000e78 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff ffc0 	bl	8000e78 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000ef8:	2010      	movs	r0, #16
 8000efa:	f7ff ffbd 	bl	8000e78 <ssd1306_WriteCommand>
	ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*pageIndex],SSD1306_WIDTH);
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	01da      	lsls	r2, r3, #7
 8000f04:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <ssd1306_UpdatePage+0x40>)
 8000f06:	18d3      	adds	r3, r2, r3
 8000f08:	2180      	movs	r1, #128	@ 0x80
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f7ff ffce 	bl	8000eac <ssd1306_WriteData>
}
 8000f10:	46c0      	nop			@ (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b002      	add	sp, #8
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2000022c 	.word	0x2000022c

08000f1c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages

	updateScreenPageIndex = 0;
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <ssd1306_UpdateScreen+0x1c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
	ssd1306_UpdatePage(updateScreenPageIndex);
 8000f26:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <ssd1306_UpdateScreen+0x1c>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f7ff ffd4 	bl	8000ed8 <ssd1306_UpdatePage>
}
 8000f30:	46c0      	nop			@ (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	20000632 	.word	0x20000632

08000f3c <HAL_I2C_MemTxCpltCallback>:

/* Gets called by HAL when the entire buffer (i.e. one page) is transmitted through DMA */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	if (hi2c == &SSD1306_I2C_PORT)
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <HAL_I2C_MemTxCpltCallback+0x38>)
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d10e      	bne.n	8000f6a <HAL_I2C_MemTxCpltCallback+0x2e>
	{
		updateScreenPageIndex++;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <HAL_I2C_MemTxCpltCallback+0x3c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	3301      	adds	r3, #1
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <HAL_I2C_MemTxCpltCallback+0x3c>)
 8000f56:	701a      	strb	r2, [r3, #0]
		if (updateScreenPageIndex < SSD1306_HEIGHT/8)
 8000f58:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <HAL_I2C_MemTxCpltCallback+0x3c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b07      	cmp	r3, #7
 8000f5e:	d804      	bhi.n	8000f6a <HAL_I2C_MemTxCpltCallback+0x2e>
		{
			ssd1306_UpdatePage(updateScreenPageIndex);
 8000f60:	4b05      	ldr	r3, [pc, #20]	@ (8000f78 <HAL_I2C_MemTxCpltCallback+0x3c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff ffb7 	bl	8000ed8 <ssd1306_UpdatePage>
		}
	}
}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	20000178 	.word	0x20000178
 8000f78:	20000632 	.word	0x20000632

08000f7c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000f80:	f7ff ff74 	bl	8000e6c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000f84:	2064      	movs	r0, #100	@ 0x64
 8000f86:	f000 fd61 	bl	8001a4c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 f9de 	bl	800134c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000f90:	2020      	movs	r0, #32
 8000f92:	f7ff ff71 	bl	8000e78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff ff6e 	bl	8000e78 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f9c:	20b0      	movs	r0, #176	@ 0xb0
 8000f9e:	f7ff ff6b 	bl	8000e78 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8000fa2:	20c0      	movs	r0, #192	@ 0xc0
 8000fa4:	f7ff ff68 	bl	8000e78 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff ff65 	bl	8000e78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000fae:	2010      	movs	r0, #16
 8000fb0:	f7ff ff62 	bl	8000e78 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000fb4:	2040      	movs	r0, #64	@ 0x40
 8000fb6:	f7ff ff5f 	bl	8000e78 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000fba:	20ff      	movs	r0, #255	@ 0xff
 8000fbc:	f000 f9ae 	bl	800131c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8000fc0:	20a0      	movs	r0, #160	@ 0xa0
 8000fc2:	f7ff ff59 	bl	8000e78 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000fc6:	20a6      	movs	r0, #166	@ 0xa6
 8000fc8:	f7ff ff56 	bl	8000e78 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000fcc:	20a8      	movs	r0, #168	@ 0xa8
 8000fce:	f7ff ff53 	bl	8000e78 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000fd2:	203f      	movs	r0, #63	@ 0x3f
 8000fd4:	f7ff ff50 	bl	8000e78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000fd8:	20a4      	movs	r0, #164	@ 0xa4
 8000fda:	f7ff ff4d 	bl	8000e78 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000fde:	20d3      	movs	r0, #211	@ 0xd3
 8000fe0:	f7ff ff4a 	bl	8000e78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f7ff ff47 	bl	8000e78 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000fea:	20d5      	movs	r0, #213	@ 0xd5
 8000fec:	f7ff ff44 	bl	8000e78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000ff0:	20f0      	movs	r0, #240	@ 0xf0
 8000ff2:	f7ff ff41 	bl	8000e78 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000ff6:	20d9      	movs	r0, #217	@ 0xd9
 8000ff8:	f7ff ff3e 	bl	8000e78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000ffc:	2022      	movs	r0, #34	@ 0x22
 8000ffe:	f7ff ff3b 	bl	8000e78 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001002:	20da      	movs	r0, #218	@ 0xda
 8001004:	f7ff ff38 	bl	8000e78 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001008:	2012      	movs	r0, #18
 800100a:	f7ff ff35 	bl	8000e78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800100e:	20db      	movs	r0, #219	@ 0xdb
 8001010:	f7ff ff32 	bl	8000e78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001014:	2020      	movs	r0, #32
 8001016:	f7ff ff2f 	bl	8000e78 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800101a:	208d      	movs	r0, #141	@ 0x8d
 800101c:	f7ff ff2c 	bl	8000e78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001020:	2014      	movs	r0, #20
 8001022:	f7ff ff29 	bl	8000e78 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001026:	2001      	movs	r0, #1
 8001028:	f000 f990 	bl	800134c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800102c:	2000      	movs	r0, #0
 800102e:	f000 f811 	bl	8001054 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001032:	f7ff ff73 	bl	8000f1c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <ssd1306_Init+0xd4>)
 8001038:	2200      	movs	r2, #0
 800103a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800103c:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <ssd1306_Init+0xd4>)
 800103e:	2200      	movs	r2, #0
 8001040:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001042:	4b03      	ldr	r3, [pc, #12]	@ (8001050 <ssd1306_Init+0xd4>)
 8001044:	2201      	movs	r2, #1
 8001046:	711a      	strb	r2, [r3, #4]
}
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	2000062c 	.word	0x2000062c

08001054 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	0002      	movs	r2, r0
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001060:	1dfb      	adds	r3, r7, #7
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <ssd1306_Fill+0x18>
 8001068:	2300      	movs	r3, #0
 800106a:	e000      	b.n	800106e <ssd1306_Fill+0x1a>
 800106c:	23ff      	movs	r3, #255	@ 0xff
 800106e:	2280      	movs	r2, #128	@ 0x80
 8001070:	00d2      	lsls	r2, r2, #3
 8001072:	4804      	ldr	r0, [pc, #16]	@ (8001084 <ssd1306_Fill+0x30>)
 8001074:	0019      	movs	r1, r3
 8001076:	f006 fb53 	bl	8007720 <memset>
}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b002      	add	sp, #8
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			@ (mov r8, r8)
 8001084:	2000022c 	.word	0x2000022c

08001088 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	0004      	movs	r4, r0
 8001090:	0008      	movs	r0, r1
 8001092:	0011      	movs	r1, r2
 8001094:	1dfb      	adds	r3, r7, #7
 8001096:	1c22      	adds	r2, r4, #0
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	1dbb      	adds	r3, r7, #6
 800109c:	1c02      	adds	r2, r0, #0
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	1d7b      	adds	r3, r7, #5
 80010a2:	1c0a      	adds	r2, r1, #0
 80010a4:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db47      	blt.n	8001140 <ssd1306_DrawPixel+0xb8>
 80010b0:	1dbb      	adds	r3, r7, #6
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80010b6:	d843      	bhi.n	8001140 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80010b8:	1d7b      	adds	r3, r7, #5
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d11e      	bne.n	80010fe <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	1dbb      	adds	r3, r7, #6
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	08db      	lsrs	r3, r3, #3
 80010ca:	b2d8      	uxtb	r0, r3
 80010cc:	0003      	movs	r3, r0
 80010ce:	01db      	lsls	r3, r3, #7
 80010d0:	18d3      	adds	r3, r2, r3
 80010d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001148 <ssd1306_DrawPixel+0xc0>)
 80010d4:	5cd3      	ldrb	r3, [r2, r3]
 80010d6:	b25a      	sxtb	r2, r3
 80010d8:	1dbb      	adds	r3, r7, #6
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2107      	movs	r1, #7
 80010de:	400b      	ands	r3, r1
 80010e0:	2101      	movs	r1, #1
 80010e2:	4099      	lsls	r1, r3
 80010e4:	000b      	movs	r3, r1
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b259      	sxtb	r1, r3
 80010ec:	1dfb      	adds	r3, r7, #7
 80010ee:	781a      	ldrb	r2, [r3, #0]
 80010f0:	0003      	movs	r3, r0
 80010f2:	01db      	lsls	r3, r3, #7
 80010f4:	18d3      	adds	r3, r2, r3
 80010f6:	b2c9      	uxtb	r1, r1
 80010f8:	4a13      	ldr	r2, [pc, #76]	@ (8001148 <ssd1306_DrawPixel+0xc0>)
 80010fa:	54d1      	strb	r1, [r2, r3]
 80010fc:	e021      	b.n	8001142 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	781a      	ldrb	r2, [r3, #0]
 8001102:	1dbb      	adds	r3, r7, #6
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	b2d8      	uxtb	r0, r3
 800110a:	0003      	movs	r3, r0
 800110c:	01db      	lsls	r3, r3, #7
 800110e:	18d3      	adds	r3, r2, r3
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <ssd1306_DrawPixel+0xc0>)
 8001112:	5cd3      	ldrb	r3, [r2, r3]
 8001114:	b25b      	sxtb	r3, r3
 8001116:	1dba      	adds	r2, r7, #6
 8001118:	7812      	ldrb	r2, [r2, #0]
 800111a:	2107      	movs	r1, #7
 800111c:	400a      	ands	r2, r1
 800111e:	2101      	movs	r1, #1
 8001120:	4091      	lsls	r1, r2
 8001122:	000a      	movs	r2, r1
 8001124:	b252      	sxtb	r2, r2
 8001126:	43d2      	mvns	r2, r2
 8001128:	b252      	sxtb	r2, r2
 800112a:	4013      	ands	r3, r2
 800112c:	b259      	sxtb	r1, r3
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	781a      	ldrb	r2, [r3, #0]
 8001132:	0003      	movs	r3, r0
 8001134:	01db      	lsls	r3, r3, #7
 8001136:	18d3      	adds	r3, r2, r3
 8001138:	b2c9      	uxtb	r1, r1
 800113a:	4a03      	ldr	r2, [pc, #12]	@ (8001148 <ssd1306_DrawPixel+0xc0>)
 800113c:	54d1      	strb	r1, [r2, r3]
 800113e:	e000      	b.n	8001142 <ssd1306_DrawPixel+0xba>
        return;
 8001140:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001142:	46bd      	mov	sp, r7
 8001144:	b003      	add	sp, #12
 8001146:	bd90      	pop	{r4, r7, pc}
 8001148:	2000022c 	.word	0x2000022c

0800114c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b089      	sub	sp, #36	@ 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	0004      	movs	r4, r0
 8001154:	0038      	movs	r0, r7
 8001156:	6001      	str	r1, [r0, #0]
 8001158:	6042      	str	r2, [r0, #4]
 800115a:	6083      	str	r3, [r0, #8]
 800115c:	210f      	movs	r1, #15
 800115e:	187b      	adds	r3, r7, r1
 8001160:	1c22      	adds	r2, r4, #0
 8001162:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001164:	000a      	movs	r2, r1
 8001166:	18bb      	adds	r3, r7, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b1f      	cmp	r3, #31
 800116c:	d903      	bls.n	8001176 <ssd1306_WriteChar+0x2a>
 800116e:	18bb      	adds	r3, r7, r2
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b7e      	cmp	r3, #126	@ 0x7e
 8001174:	d901      	bls.n	800117a <ssd1306_WriteChar+0x2e>
        return 0;
 8001176:	2300      	movs	r3, #0
 8001178:	e084      	b.n	8001284 <ssd1306_WriteChar+0x138>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800117a:	4b44      	ldr	r3, [pc, #272]	@ (800128c <ssd1306_WriteChar+0x140>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	001a      	movs	r2, r3
 8001180:	003b      	movs	r3, r7
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	18d3      	adds	r3, r2, r3
 8001186:	2b80      	cmp	r3, #128	@ 0x80
 8001188:	dc07      	bgt.n	800119a <ssd1306_WriteChar+0x4e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800118a:	4b40      	ldr	r3, [pc, #256]	@ (800128c <ssd1306_WriteChar+0x140>)
 800118c:	885b      	ldrh	r3, [r3, #2]
 800118e:	001a      	movs	r2, r3
 8001190:	003b      	movs	r3, r7
 8001192:	785b      	ldrb	r3, [r3, #1]
 8001194:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001196:	2b40      	cmp	r3, #64	@ 0x40
 8001198:	dd01      	ble.n	800119e <ssd1306_WriteChar+0x52>
    {
        // Not enough space on current line
        return 0;
 800119a:	2300      	movs	r3, #0
 800119c:	e072      	b.n	8001284 <ssd1306_WriteChar+0x138>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
 80011a2:	e051      	b.n	8001248 <ssd1306_WriteChar+0xfc>
        b = Font.data[(ch - 32) * Font.height + i];
 80011a4:	003b      	movs	r3, r7
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	230f      	movs	r3, #15
 80011aa:	18fb      	adds	r3, r7, r3
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	3b20      	subs	r3, #32
 80011b0:	0039      	movs	r1, r7
 80011b2:	7849      	ldrb	r1, [r1, #1]
 80011b4:	434b      	muls	r3, r1
 80011b6:	0019      	movs	r1, r3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	18cb      	adds	r3, r1, r3
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	18d3      	adds	r3, r2, r3
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
 80011c8:	e035      	b.n	8001236 <ssd1306_WriteChar+0xea>
            if((b << j) & 0x8000)  {
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	409a      	lsls	r2, r3
 80011d0:	2380      	movs	r3, #128	@ 0x80
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	4013      	ands	r3, r2
 80011d6:	d014      	beq.n	8001202 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80011d8:	4b2c      	ldr	r3, [pc, #176]	@ (800128c <ssd1306_WriteChar+0x140>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	18d3      	adds	r3, r2, r3
 80011e4:	b2d8      	uxtb	r0, r3
 80011e6:	4b29      	ldr	r3, [pc, #164]	@ (800128c <ssd1306_WriteChar+0x140>)
 80011e8:	885b      	ldrh	r3, [r3, #2]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	18d3      	adds	r3, r2, r3
 80011f2:	b2d9      	uxtb	r1, r3
 80011f4:	2330      	movs	r3, #48	@ 0x30
 80011f6:	18fb      	adds	r3, r7, r3
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	001a      	movs	r2, r3
 80011fc:	f7ff ff44 	bl	8001088 <ssd1306_DrawPixel>
 8001200:	e016      	b.n	8001230 <ssd1306_WriteChar+0xe4>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001202:	4b22      	ldr	r3, [pc, #136]	@ (800128c <ssd1306_WriteChar+0x140>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	18d3      	adds	r3, r2, r3
 800120e:	b2d8      	uxtb	r0, r3
 8001210:	4b1e      	ldr	r3, [pc, #120]	@ (800128c <ssd1306_WriteChar+0x140>)
 8001212:	885b      	ldrh	r3, [r3, #2]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	18d3      	adds	r3, r2, r3
 800121c:	b2d9      	uxtb	r1, r3
 800121e:	2330      	movs	r3, #48	@ 0x30
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	425a      	negs	r2, r3
 8001226:	4153      	adcs	r3, r2
 8001228:	b2db      	uxtb	r3, r3
 800122a:	001a      	movs	r2, r3
 800122c:	f7ff ff2c 	bl	8001088 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	3301      	adds	r3, #1
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	003b      	movs	r3, r7
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	001a      	movs	r2, r3
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	4293      	cmp	r3, r2
 8001240:	d3c3      	bcc.n	80011ca <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3301      	adds	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	003b      	movs	r3, r7
 800124a:	785b      	ldrb	r3, [r3, #1]
 800124c:	001a      	movs	r2, r3
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	4293      	cmp	r3, r2
 8001252:	d3a7      	bcc.n	80011a4 <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001254:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <ssd1306_WriteChar+0x140>)
 8001256:	881a      	ldrh	r2, [r3, #0]
 8001258:	003b      	movs	r3, r7
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d008      	beq.n	8001272 <ssd1306_WriteChar+0x126>
 8001260:	003b      	movs	r3, r7
 8001262:	6899      	ldr	r1, [r3, #8]
 8001264:	230f      	movs	r3, #15
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	3b20      	subs	r3, #32
 800126c:	18cb      	adds	r3, r1, r3
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	e001      	b.n	8001276 <ssd1306_WriteChar+0x12a>
 8001272:	003b      	movs	r3, r7
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	189b      	adds	r3, r3, r2
 8001278:	b29a      	uxth	r2, r3
 800127a:	4b04      	ldr	r3, [pc, #16]	@ (800128c <ssd1306_WriteChar+0x140>)
 800127c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800127e:	230f      	movs	r3, #15
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	781b      	ldrb	r3, [r3, #0]
}
 8001284:	0018      	movs	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	b009      	add	sp, #36	@ 0x24
 800128a:	bd90      	pop	{r4, r7, pc}
 800128c:	2000062c 	.word	0x2000062c

08001290 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af02      	add	r7, sp, #8
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	0038      	movs	r0, r7
 800129a:	6001      	str	r1, [r0, #0]
 800129c:	6042      	str	r2, [r0, #4]
 800129e:	6083      	str	r3, [r0, #8]
    while (*str) {
 80012a0:	e017      	b.n	80012d2 <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	7818      	ldrb	r0, [r3, #0]
 80012a6:	003b      	movs	r3, r7
 80012a8:	2218      	movs	r2, #24
 80012aa:	18ba      	adds	r2, r7, r2
 80012ac:	7812      	ldrb	r2, [r2, #0]
 80012ae:	9200      	str	r2, [sp, #0]
 80012b0:	6819      	ldr	r1, [r3, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f7ff ff49 	bl	800114c <ssd1306_WriteChar>
 80012ba:	0003      	movs	r3, r0
 80012bc:	001a      	movs	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d002      	beq.n	80012cc <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	e008      	b.n	80012de <ssd1306_WriteString+0x4e>
        }
        str++;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3301      	adds	r3, #1
 80012d0:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1e3      	bne.n	80012a2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	781b      	ldrb	r3, [r3, #0]
}
 80012de:	0018      	movs	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b004      	add	sp, #16
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	0002      	movs	r2, r0
 80012f0:	1dfb      	adds	r3, r7, #7
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	1dbb      	adds	r3, r7, #6
 80012f6:	1c0a      	adds	r2, r1, #0
 80012f8:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	b29a      	uxth	r2, r3
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <ssd1306_SetCursor+0x30>)
 8001302:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001304:	1dbb      	adds	r3, r7, #6
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b29a      	uxth	r2, r3
 800130a:	4b03      	ldr	r3, [pc, #12]	@ (8001318 <ssd1306_SetCursor+0x30>)
 800130c:	805a      	strh	r2, [r3, #2]
}
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	46bd      	mov	sp, r7
 8001312:	b002      	add	sp, #8
 8001314:	bd80      	pop	{r7, pc}
 8001316:	46c0      	nop			@ (mov r8, r8)
 8001318:	2000062c 	.word	0x2000062c

0800131c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	0002      	movs	r2, r0
 8001324:	1dfb      	adds	r3, r7, #7
 8001326:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001328:	210f      	movs	r1, #15
 800132a:	187b      	adds	r3, r7, r1
 800132c:	2281      	movs	r2, #129	@ 0x81
 800132e:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001330:	187b      	adds	r3, r7, r1
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	0018      	movs	r0, r3
 8001336:	f7ff fd9f 	bl	8000e78 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	0018      	movs	r0, r3
 8001340:	f7ff fd9a 	bl	8000e78 <ssd1306_WriteCommand>
}
 8001344:	46c0      	nop			@ (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b004      	add	sp, #16
 800134a:	bd80      	pop	{r7, pc}

0800134c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	0002      	movs	r2, r0
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d007      	beq.n	8001370 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8001360:	230f      	movs	r3, #15
 8001362:	18fb      	adds	r3, r7, r3
 8001364:	22af      	movs	r2, #175	@ 0xaf
 8001366:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8001368:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <ssd1306_SetDisplayOn+0x48>)
 800136a:	2201      	movs	r2, #1
 800136c:	715a      	strb	r2, [r3, #5]
 800136e:	e006      	b.n	800137e <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8001370:	230f      	movs	r3, #15
 8001372:	18fb      	adds	r3, r7, r3
 8001374:	22ae      	movs	r2, #174	@ 0xae
 8001376:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <ssd1306_SetDisplayOn+0x48>)
 800137a:	2200      	movs	r2, #0
 800137c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800137e:	230f      	movs	r3, #15
 8001380:	18fb      	adds	r3, r7, r3
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff fd77 	bl	8000e78 <ssd1306_WriteCommand>
}
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b004      	add	sp, #16
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	2000062c 	.word	0x2000062c

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <HAL_MspInit+0x44>)
 80013a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <HAL_MspInit+0x44>)
 80013a4:	2101      	movs	r1, #1
 80013a6:	430a      	orrs	r2, r1
 80013a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80013aa:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <HAL_MspInit+0x44>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	2201      	movs	r2, #1
 80013b0:	4013      	ands	r3, r2
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <HAL_MspInit+0x44>)
 80013b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013ba:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <HAL_MspInit+0x44>)
 80013bc:	2180      	movs	r1, #128	@ 0x80
 80013be:	0549      	lsls	r1, r1, #21
 80013c0:	430a      	orrs	r2, r1
 80013c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <HAL_MspInit+0x44>)
 80013c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013c8:	2380      	movs	r3, #128	@ 0x80
 80013ca:	055b      	lsls	r3, r3, #21
 80013cc:	4013      	ands	r3, r2
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d2:	46c0      	nop			@ (mov r8, r8)
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b002      	add	sp, #8
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			@ (mov r8, r8)
 80013dc:	40021000 	.word	0x40021000

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e4:	46c0      	nop			@ (mov r8, r8)
 80013e6:	e7fd      	b.n	80013e4 <NMI_Handler+0x4>

080013e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ec:	46c0      	nop			@ (mov r8, r8)
 80013ee:	e7fd      	b.n	80013ec <HardFault_Handler+0x4>

080013f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f4:	46c0      	nop			@ (mov r8, r8)
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fe:	46c0      	nop			@ (mov r8, r8)
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001408:	f000 fb04 	bl	8001a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140c:	46c0      	nop			@ (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 8001416:	2380      	movs	r3, #128	@ 0x80
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	0018      	movs	r0, r3
 800141c:	f001 ff28 	bl	8003270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001420:	46c0      	nop			@ (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800142c:	4b03      	ldr	r3, [pc, #12]	@ (800143c <DMA1_Channel1_IRQHandler+0x14>)
 800142e:	0018      	movs	r0, r3
 8001430:	f001 fc08 	bl	8002c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001434:	46c0      	nop			@ (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	2000010c 	.word	0x2000010c

08001440 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001444:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001446:	0018      	movs	r0, r3
 8001448:	f001 fbfc 	bl	8002c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800144c:	46c0      	nop			@ (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	200001cc 	.word	0x200001cc

08001458 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800145c:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <I2C1_IRQHandler+0x2c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	699a      	ldr	r2, [r3, #24]
 8001462:	23e0      	movs	r3, #224	@ 0xe0
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4013      	ands	r3, r2
 8001468:	d004      	beq.n	8001474 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800146a:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <I2C1_IRQHandler+0x2c>)
 800146c:	0018      	movs	r0, r3
 800146e:	f002 fa2d 	bl	80038cc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001472:	e003      	b.n	800147c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001474:	4b03      	ldr	r3, [pc, #12]	@ (8001484 <I2C1_IRQHandler+0x2c>)
 8001476:	0018      	movs	r0, r3
 8001478:	f002 fa0e 	bl	8003898 <HAL_I2C_EV_IRQHandler>
}
 800147c:	46c0      	nop			@ (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			@ (mov r8, r8)
 8001484:	20000178 	.word	0x20000178

08001488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001490:	4a14      	ldr	r2, [pc, #80]	@ (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800149c:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	18d3      	adds	r3, r2, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b8:	f006 f93a 	bl	8007730 <__errno>
 80014bc:	0003      	movs	r3, r0
 80014be:	220c      	movs	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	425b      	negs	r3, r3
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ce:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	18d2      	adds	r2, r2, r3
 80014d6:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <_sbrk+0x64>)
 80014d8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	0018      	movs	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	b006      	add	sp, #24
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20006000 	.word	0x20006000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	20000634 	.word	0x20000634
 80014f0:	20000868 	.word	0x20000868

080014f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <SystemInit+0x14>)
 80014fa:	2280      	movs	r2, #128	@ 0x80
 80014fc:	0512      	lsls	r2, r2, #20
 80014fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001500:	46c0      	nop			@ (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <blinky_task_execute>:
#include "task_blinky.h"
#include "gpio.h"

void blinky_task_execute(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	// Toggle LD1
	HAL_GPIO_TogglePin(NUCLEO_LD1_GPIO_Port, NUCLEO_LD1_Pin);
 8001510:	23a0      	movs	r3, #160	@ 0xa0
 8001512:	05db      	lsls	r3, r3, #23
 8001514:	2120      	movs	r1, #32
 8001516:	0018      	movs	r0, r3
 8001518:	f001 fe8e 	bl	8003238 <HAL_GPIO_TogglePin>
}
 800151c:	46c0      	nop			@ (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <buttons_task_init>:
#include "gpio.h"
#include "buttons.h"
#include "rgb.h"
#include "tim.h"

void buttons_task_init(void) {
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	// Initialise the upstream button driver, enable all RGB LED colour channels.
	buttons_init();
 8001528:	f7ff f8d6 	bl	80006d8 <buttons_init>
	rgb_colour_on(RGB_RED);
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff fc59 	bl	8000de4 <rgb_colour_on>
	rgb_colour_on(RGB_GREEN);
 8001532:	2001      	movs	r0, #1
 8001534:	f7ff fc56 	bl	8000de4 <rgb_colour_on>
	rgb_colour_on(RGB_BLUE);
 8001538:	2002      	movs	r0, #2
 800153a:	f7ff fc53 	bl	8000de4 <rgb_colour_on>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800153e:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <buttons_task_init+0x2c>)
 8001540:	2108      	movs	r1, #8
 8001542:	0018      	movs	r0, r3
 8001544:	f004 fd68 	bl	8006018 <HAL_TIM_PWM_Start>
}
 8001548:	46c0      	nop			@ (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			@ (mov r8, r8)
 8001550:	20000638 	.word	0x20000638

08001554 <buttons_task_execute>:

void buttons_task_execute(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	// Update the RGB LEDs depending on which button is pressed.
	buttons_update();
 8001558:	f7ff f8f8 	bl	800074c <buttons_update>

	//if (buttons_checkButton(UP) == PUSHED) {
	//	rgb_led_toggle(RGB_UP);
	//}

	if (buttons_checkButton(DOWN) == PUSHED) {
 800155c:	2001      	movs	r0, #1
 800155e:	f7ff f975 	bl	800084c <buttons_checkButton>
 8001562:	0003      	movs	r3, r0
 8001564:	2b01      	cmp	r3, #1
 8001566:	d102      	bne.n	800156e <buttons_task_execute+0x1a>
		rgb_led_toggle(RGB_DOWN);
 8001568:	2003      	movs	r0, #3
 800156a:	f7ff fc63 	bl	8000e34 <rgb_led_toggle>
	}

	if (buttons_checkButton(LEFT) == PUSHED) {
 800156e:	2002      	movs	r0, #2
 8001570:	f7ff f96c 	bl	800084c <buttons_checkButton>
 8001574:	0003      	movs	r3, r0
 8001576:	2b01      	cmp	r3, #1
 8001578:	d102      	bne.n	8001580 <buttons_task_execute+0x2c>
		rgb_led_toggle(RGB_LEFT);
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff fc5a 	bl	8000e34 <rgb_led_toggle>
	}

	if (buttons_checkButton(RIGHT) == PUSHED) {
 8001580:	2003      	movs	r0, #3
 8001582:	f7ff f963 	bl	800084c <buttons_checkButton>
 8001586:	0003      	movs	r3, r0
 8001588:	2b01      	cmp	r3, #1
 800158a:	d102      	bne.n	8001592 <buttons_task_execute+0x3e>
		rgb_led_toggle(RGB_RIGHT);
 800158c:	2001      	movs	r0, #1
 800158e:	f7ff fc51 	bl	8000e34 <rgb_led_toggle>
	}
}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <display_task_init>:

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

void display_task_init(void) {
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	ssd1306_Init();
 800159c:	f7ff fcee 	bl	8000f7c <ssd1306_Init>
	ssd1306_SetCursor(0, 0);
 80015a0:	2100      	movs	r1, #0
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff fea0 	bl	80012e8 <ssd1306_SetCursor>
}
 80015a8:	46c0      	nop			@ (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <display_task_execute>:

void display_task_execute(void) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af02      	add	r7, sp, #8
	uint16_t *raw_adc = get_raw_values();
 80015b6:	f7ff fbad 	bl	8000d14 <get_raw_values>
 80015ba:	0003      	movs	r3, r0
 80015bc:	617b      	str	r3, [r7, #20]
	char result[14] = "";
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	3304      	adds	r3, #4
 80015c6:	220a      	movs	r2, #10
 80015c8:	2100      	movs	r1, #0
 80015ca:	0018      	movs	r0, r3
 80015cc:	f006 f8a8 	bl	8007720 <memset>
	snprintf(result, 12, "%u,%u\r\n", raw_adc[0], raw_adc[1]);
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	0019      	movs	r1, r3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3302      	adds	r3, #2
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	4a16      	ldr	r2, [pc, #88]	@ (8001638 <display_task_execute+0x88>)
 80015de:	1d38      	adds	r0, r7, #4
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	000b      	movs	r3, r1
 80015e4:	210c      	movs	r1, #12
 80015e6:	f006 f867 	bl	80076b8 <sniprintf>

	ssd1306_SetCursor(0,0);
 80015ea:	2100      	movs	r1, #0
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fe7b 	bl	80012e8 <ssd1306_SetCursor>
	ssd1306_WriteString("                    ", Font_7x10, White);
 80015f2:	4b12      	ldr	r3, [pc, #72]	@ (800163c <display_task_execute+0x8c>)
 80015f4:	4812      	ldr	r0, [pc, #72]	@ (8001640 <display_task_execute+0x90>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	9200      	str	r2, [sp, #0]
 80015fa:	6819      	ldr	r1, [r3, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f7ff fe46 	bl	8001290 <ssd1306_WriteString>
	ssd1306_SetCursor(0,0);
 8001604:	2100      	movs	r1, #0
 8001606:	2000      	movs	r0, #0
 8001608:	f7ff fe6e 	bl	80012e8 <ssd1306_SetCursor>
	ssd1306_WriteString(result, Font_7x10, White);
 800160c:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <display_task_execute+0x8c>)
 800160e:	1d38      	adds	r0, r7, #4
 8001610:	2201      	movs	r2, #1
 8001612:	9200      	str	r2, [sp, #0]
 8001614:	6819      	ldr	r1, [r3, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f7ff fe39 	bl	8001290 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800161e:	f7ff fc7d 	bl	8000f1c <ssd1306_UpdateScreen>
	HAL_UART_Transmit(&huart2, &result, 12, 10000);
 8001622:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <display_task_execute+0x94>)
 8001624:	1d39      	adds	r1, r7, #4
 8001626:	4808      	ldr	r0, [pc, #32]	@ (8001648 <display_task_execute+0x98>)
 8001628:	220c      	movs	r2, #12
 800162a:	f005 fad5 	bl	8006bd8 <HAL_UART_Transmit>
}
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	b006      	add	sp, #24
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	08008034 	.word	0x08008034
 800163c:	080087f8 	.word	0x080087f8
 8001640:	0800803c 	.word	0x0800803c
 8001644:	00002710 	.word	0x00002710
 8001648:	20000684 	.word	0x20000684

0800164c <joystick_task_execute>:

#include "adc.h"
#include "task_joystick.h"
#include "joystick.h"

void joystick_task_execute(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	// Update the ADC values of the JoyStick X and Y axis inputs
	update_joystick();
 8001650:	f7ff fb48 	bl	8000ce4 <update_joystick>
}
 8001654:	46c0      	nop			@ (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	@ 0x28
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001662:	231c      	movs	r3, #28
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	0018      	movs	r0, r3
 8001668:	230c      	movs	r3, #12
 800166a:	001a      	movs	r2, r3
 800166c:	2100      	movs	r1, #0
 800166e:	f006 f857 	bl	8007720 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001672:	003b      	movs	r3, r7
 8001674:	0018      	movs	r0, r3
 8001676:	231c      	movs	r3, #28
 8001678:	001a      	movs	r2, r3
 800167a:	2100      	movs	r1, #0
 800167c:	f006 f850 	bl	8007720 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001680:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <MX_TIM2_Init+0xb8>)
 8001682:	2280      	movs	r2, #128	@ 0x80
 8001684:	05d2      	lsls	r2, r2, #23
 8001686:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001688:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <MX_TIM2_Init+0xb8>)
 800168a:	2200      	movs	r2, #0
 800168c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168e:	4b21      	ldr	r3, [pc, #132]	@ (8001714 <MX_TIM2_Init+0xb8>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 8001694:	4b1f      	ldr	r3, [pc, #124]	@ (8001714 <MX_TIM2_Init+0xb8>)
 8001696:	4a20      	ldr	r2, [pc, #128]	@ (8001718 <MX_TIM2_Init+0xbc>)
 8001698:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169a:	4b1e      	ldr	r3, [pc, #120]	@ (8001714 <MX_TIM2_Init+0xb8>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <MX_TIM2_Init+0xb8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <MX_TIM2_Init+0xb8>)
 80016a8:	0018      	movs	r0, r3
 80016aa:	f004 fc5d 	bl	8005f68 <HAL_TIM_PWM_Init>
 80016ae:	1e03      	subs	r3, r0, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80016b2:	f7ff fb90 	bl	8000dd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b6:	211c      	movs	r1, #28
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c4:	187a      	adds	r2, r7, r1
 80016c6:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <MX_TIM2_Init+0xb8>)
 80016c8:	0011      	movs	r1, r2
 80016ca:	0018      	movs	r0, r3
 80016cc:	f005 f9c6 	bl	8006a5c <HAL_TIMEx_MasterConfigSynchronization>
 80016d0:	1e03      	subs	r3, r0, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80016d4:	f7ff fb7f 	bl	8000dd6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d8:	003b      	movs	r3, r7
 80016da:	2260      	movs	r2, #96	@ 0x60
 80016dc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 15000;
 80016de:	003b      	movs	r3, r7
 80016e0:	4a0e      	ldr	r2, [pc, #56]	@ (800171c <MX_TIM2_Init+0xc0>)
 80016e2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80016e4:	003b      	movs	r3, r7
 80016e6:	2202      	movs	r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ea:	003b      	movs	r3, r7
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016f0:	0039      	movs	r1, r7
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <MX_TIM2_Init+0xb8>)
 80016f4:	2208      	movs	r2, #8
 80016f6:	0018      	movs	r0, r3
 80016f8:	f004 fd6c 	bl	80061d4 <HAL_TIM_PWM_ConfigChannel>
 80016fc:	1e03      	subs	r3, r0, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001700:	f7ff fb69 	bl	8000dd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <MX_TIM2_Init+0xb8>)
 8001706:	0018      	movs	r0, r3
 8001708:	f000 f826 	bl	8001758 <HAL_TIM_MspPostInit>

}
 800170c:	46c0      	nop			@ (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b00a      	add	sp, #40	@ 0x28
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000638 	.word	0x20000638
 8001718:	000186a0 	.word	0x000186a0
 800171c:	00003a98 	.word	0x00003a98

08001720 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	@ 0x80
 800172e:	05db      	lsls	r3, r3, #23
 8001730:	429a      	cmp	r2, r3
 8001732:	d10b      	bne.n	800174c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001734:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <HAL_TIM_PWM_MspInit+0x34>)
 8001736:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_TIM_PWM_MspInit+0x34>)
 800173a:	2101      	movs	r1, #1
 800173c:	430a      	orrs	r2, r1
 800173e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001740:	4b04      	ldr	r3, [pc, #16]	@ (8001754 <HAL_TIM_PWM_MspInit+0x34>)
 8001742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001744:	2201      	movs	r2, #1
 8001746:	4013      	ands	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800174c:	46c0      	nop			@ (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b004      	add	sp, #16
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000

08001758 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b089      	sub	sp, #36	@ 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	240c      	movs	r4, #12
 8001762:	193b      	adds	r3, r7, r4
 8001764:	0018      	movs	r0, r3
 8001766:	2314      	movs	r3, #20
 8001768:	001a      	movs	r2, r3
 800176a:	2100      	movs	r1, #0
 800176c:	f005 ffd8 	bl	8007720 <memset>
  if(timHandle->Instance==TIM2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	@ 0x80
 8001776:	05db      	lsls	r3, r3, #23
 8001778:	429a      	cmp	r2, r3
 800177a:	d121      	bne.n	80017c0 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <HAL_TIM_MspPostInit+0x70>)
 800177e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001780:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <HAL_TIM_MspPostInit+0x70>)
 8001782:	2104      	movs	r1, #4
 8001784:	430a      	orrs	r2, r1
 8001786:	635a      	str	r2, [r3, #52]	@ 0x34
 8001788:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <HAL_TIM_MspPostInit+0x70>)
 800178a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800178c:	2204      	movs	r2, #4
 800178e:	4013      	ands	r3, r2
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001794:	0021      	movs	r1, r4
 8001796:	187b      	adds	r3, r7, r1
 8001798:	2240      	movs	r2, #64	@ 0x40
 800179a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	187b      	adds	r3, r7, r1
 800179e:	2202      	movs	r2, #2
 80017a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM2;
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	2203      	movs	r2, #3
 80017b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b4:	187b      	adds	r3, r7, r1
 80017b6:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <HAL_TIM_MspPostInit+0x74>)
 80017b8:	0019      	movs	r1, r3
 80017ba:	0010      	movs	r0, r2
 80017bc:	f001 fb90 	bl	8002ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017c0:	46c0      	nop			@ (mov r8, r8)
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b009      	add	sp, #36	@ 0x24
 80017c6:	bd90      	pop	{r4, r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	50000800 	.word	0x50000800

080017d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d4:	4b23      	ldr	r3, [pc, #140]	@ (8001864 <MX_USART2_UART_Init+0x94>)
 80017d6:	4a24      	ldr	r2, [pc, #144]	@ (8001868 <MX_USART2_UART_Init+0x98>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017da:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <MX_USART2_UART_Init+0x94>)
 80017dc:	22e1      	movs	r2, #225	@ 0xe1
 80017de:	0252      	lsls	r2, r2, #9
 80017e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b20      	ldr	r3, [pc, #128]	@ (8001864 <MX_USART2_UART_Init+0x94>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001864 <MX_USART2_UART_Init+0x94>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001864 <MX_USART2_UART_Init+0x94>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001864 <MX_USART2_UART_Init+0x94>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001864 <MX_USART2_UART_Init+0x94>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <MX_USART2_UART_Init+0x94>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001806:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <MX_USART2_UART_Init+0x94>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800180c:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <MX_USART2_UART_Init+0x94>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001812:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <MX_USART2_UART_Init+0x94>)
 8001814:	2200      	movs	r2, #0
 8001816:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <MX_USART2_UART_Init+0x94>)
 800181a:	0018      	movs	r0, r3
 800181c:	f005 f986 	bl	8006b2c <HAL_UART_Init>
 8001820:	1e03      	subs	r3, r0, #0
 8001822:	d001      	beq.n	8001828 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001824:	f7ff fad7 	bl	8000dd6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001828:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <MX_USART2_UART_Init+0x94>)
 800182a:	2100      	movs	r1, #0
 800182c:	0018      	movs	r0, r3
 800182e:	f005 fe63 	bl	80074f8 <HAL_UARTEx_SetTxFifoThreshold>
 8001832:	1e03      	subs	r3, r0, #0
 8001834:	d001      	beq.n	800183a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001836:	f7ff face 	bl	8000dd6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800183a:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <MX_USART2_UART_Init+0x94>)
 800183c:	2100      	movs	r1, #0
 800183e:	0018      	movs	r0, r3
 8001840:	f005 fe9a 	bl	8007578 <HAL_UARTEx_SetRxFifoThreshold>
 8001844:	1e03      	subs	r3, r0, #0
 8001846:	d001      	beq.n	800184c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001848:	f7ff fac5 	bl	8000dd6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800184c:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <MX_USART2_UART_Init+0x94>)
 800184e:	0018      	movs	r0, r3
 8001850:	f005 fe18 	bl	8007484 <HAL_UARTEx_DisableFifoMode>
 8001854:	1e03      	subs	r3, r0, #0
 8001856:	d001      	beq.n	800185c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001858:	f7ff fabd 	bl	8000dd6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800185c:	46c0      	nop			@ (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	46c0      	nop			@ (mov r8, r8)
 8001864:	20000684 	.word	0x20000684
 8001868:	40004400 	.word	0x40004400

0800186c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b08b      	sub	sp, #44	@ 0x2c
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	2414      	movs	r4, #20
 8001876:	193b      	adds	r3, r7, r4
 8001878:	0018      	movs	r0, r3
 800187a:	2314      	movs	r3, #20
 800187c:	001a      	movs	r2, r3
 800187e:	2100      	movs	r1, #0
 8001880:	f005 ff4e 	bl	8007720 <memset>
  if(uartHandle->Instance==USART2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1b      	ldr	r2, [pc, #108]	@ (80018f8 <HAL_UART_MspInit+0x8c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d130      	bne.n	80018f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800188e:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <HAL_UART_MspInit+0x90>)
 8001890:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001892:	4b1a      	ldr	r3, [pc, #104]	@ (80018fc <HAL_UART_MspInit+0x90>)
 8001894:	2180      	movs	r1, #128	@ 0x80
 8001896:	0289      	lsls	r1, r1, #10
 8001898:	430a      	orrs	r2, r1
 800189a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <HAL_UART_MspInit+0x90>)
 800189e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018a0:	2380      	movs	r3, #128	@ 0x80
 80018a2:	029b      	lsls	r3, r3, #10
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <HAL_UART_MspInit+0x90>)
 80018ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018ae:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <HAL_UART_MspInit+0x90>)
 80018b0:	2101      	movs	r1, #1
 80018b2:	430a      	orrs	r2, r1
 80018b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80018b6:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <HAL_UART_MspInit+0x90>)
 80018b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ba:	2201      	movs	r2, #1
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018c2:	0021      	movs	r1, r4
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	220c      	movs	r2, #12
 80018c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	2202      	movs	r2, #2
 80018ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	187b      	adds	r3, r7, r1
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	2201      	movs	r2, #1
 80018e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	187a      	adds	r2, r7, r1
 80018e4:	23a0      	movs	r3, #160	@ 0xa0
 80018e6:	05db      	lsls	r3, r3, #23
 80018e8:	0011      	movs	r1, r2
 80018ea:	0018      	movs	r0, r3
 80018ec:	f001 faf8 	bl	8002ee0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018f0:	46c0      	nop			@ (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b00b      	add	sp, #44	@ 0x2c
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	40004400 	.word	0x40004400
 80018fc:	40021000 	.word	0x40021000

08001900 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001900:	480d      	ldr	r0, [pc, #52]	@ (8001938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001902:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001904:	f7ff fdf6 	bl	80014f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001908:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800190a:	e003      	b.n	8001914 <LoopCopyDataInit>

0800190c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800190e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001910:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001912:	3104      	adds	r1, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001914:	480a      	ldr	r0, [pc, #40]	@ (8001940 <LoopForever+0xa>)
  ldr r3, =_edata
 8001916:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <LoopForever+0xe>)
  adds r2, r0, r1
 8001918:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800191a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800191c:	d3f6      	bcc.n	800190c <CopyDataInit>
  ldr r2, =_sbss
 800191e:	4a0a      	ldr	r2, [pc, #40]	@ (8001948 <LoopForever+0x12>)
  b LoopFillZerobss
 8001920:	e002      	b.n	8001928 <LoopFillZerobss>

08001922 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  str  r3, [r2]
 8001924:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001926:	3204      	adds	r2, #4

08001928 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001928:	4b08      	ldr	r3, [pc, #32]	@ (800194c <LoopForever+0x16>)
  cmp r2, r3
 800192a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800192c:	d3f9      	bcc.n	8001922 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800192e:	f005 ff05 	bl	800773c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001932:	f7ff f9f7 	bl	8000d24 <main>

08001936 <LoopForever>:

LoopForever:
    b LoopForever
 8001936:	e7fe      	b.n	8001936 <LoopForever>
  ldr   r0, =_estack
 8001938:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 800193c:	0800891c 	.word	0x0800891c
  ldr r0, =_sdata
 8001940:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001944:	2000008c 	.word	0x2000008c
  ldr r2, =_sbss
 8001948:	2000008c 	.word	0x2000008c
  ldr r3, = _ebss
 800194c:	20000864 	.word	0x20000864

08001950 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC1_IRQHandler>

08001952 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001958:	1dfb      	adds	r3, r7, #7
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800195e:	2003      	movs	r0, #3
 8001960:	f000 f80e 	bl	8001980 <HAL_InitTick>
 8001964:	1e03      	subs	r3, r0, #0
 8001966:	d003      	beq.n	8001970 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001968:	1dfb      	adds	r3, r7, #7
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	e001      	b.n	8001974 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001970:	f7ff fd12 	bl	8001398 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001974:	1dfb      	adds	r3, r7, #7
 8001976:	781b      	ldrb	r3, [r3, #0]
}
 8001978:	0018      	movs	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	b002      	add	sp, #8
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001988:	230f      	movs	r3, #15
 800198a:	18fb      	adds	r3, r7, r3
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001990:	4b1d      	ldr	r3, [pc, #116]	@ (8001a08 <HAL_InitTick+0x88>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d02b      	beq.n	80019f0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001998:	4b1c      	ldr	r3, [pc, #112]	@ (8001a0c <HAL_InitTick+0x8c>)
 800199a:	681c      	ldr	r4, [r3, #0]
 800199c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <HAL_InitTick+0x88>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	0019      	movs	r1, r3
 80019a2:	23fa      	movs	r3, #250	@ 0xfa
 80019a4:	0098      	lsls	r0, r3, #2
 80019a6:	f7fe fbb9 	bl	800011c <__udivsi3>
 80019aa:	0003      	movs	r3, r0
 80019ac:	0019      	movs	r1, r3
 80019ae:	0020      	movs	r0, r4
 80019b0:	f7fe fbb4 	bl	800011c <__udivsi3>
 80019b4:	0003      	movs	r3, r0
 80019b6:	0018      	movs	r0, r3
 80019b8:	f000 ffab 	bl	8002912 <HAL_SYSTICK_Config>
 80019bc:	1e03      	subs	r3, r0, #0
 80019be:	d112      	bne.n	80019e6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d80a      	bhi.n	80019dc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	2301      	movs	r3, #1
 80019ca:	425b      	negs	r3, r3
 80019cc:	2200      	movs	r2, #0
 80019ce:	0018      	movs	r0, r3
 80019d0:	f000 ff7a 	bl	80028c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <HAL_InitTick+0x90>)
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	e00d      	b.n	80019f8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80019dc:	230f      	movs	r3, #15
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
 80019e4:	e008      	b.n	80019f8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019e6:	230f      	movs	r3, #15
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	e003      	b.n	80019f8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019f0:	230f      	movs	r3, #15
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80019f8:	230f      	movs	r3, #15
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	781b      	ldrb	r3, [r3, #0]
}
 80019fe:	0018      	movs	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b005      	add	sp, #20
 8001a04:	bd90      	pop	{r4, r7, pc}
 8001a06:	46c0      	nop			@ (mov r8, r8)
 8001a08:	20000038 	.word	0x20000038
 8001a0c:	20000030 	.word	0x20000030
 8001a10:	20000034 	.word	0x20000034

08001a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <HAL_IncTick+0x1c>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	001a      	movs	r2, r3
 8001a1e:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_IncTick+0x20>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	18d2      	adds	r2, r2, r3
 8001a24:	4b03      	ldr	r3, [pc, #12]	@ (8001a34 <HAL_IncTick+0x20>)
 8001a26:	601a      	str	r2, [r3, #0]
}
 8001a28:	46c0      	nop			@ (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	20000038 	.word	0x20000038
 8001a34:	20000718 	.word	0x20000718

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b02      	ldr	r3, [pc, #8]	@ (8001a48 <HAL_GetTick+0x10>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			@ (mov r8, r8)
 8001a48:	20000718 	.word	0x20000718

08001a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff fff0 	bl	8001a38 <HAL_GetTick>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3301      	adds	r3, #1
 8001a64:	d005      	beq.n	8001a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a66:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <HAL_Delay+0x44>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	001a      	movs	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	189b      	adds	r3, r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	f7ff ffe0 	bl	8001a38 <HAL_GetTick>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d8f7      	bhi.n	8001a74 <HAL_Delay+0x28>
  {
  }
}
 8001a84:	46c0      	nop			@ (mov r8, r8)
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b004      	add	sp, #16
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	20000038 	.word	0x20000038

08001a94 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a05      	ldr	r2, [pc, #20]	@ (8001ab8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001aa4:	401a      	ands	r2, r3
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	601a      	str	r2, [r3, #0]
}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b002      	add	sp, #8
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	ff3fffff 	.word	0xff3fffff

08001abc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	23c0      	movs	r3, #192	@ 0xc0
 8001aca:	041b      	lsls	r3, r3, #16
 8001acc:	4013      	ands	r3, r2
}
 8001ace:	0018      	movs	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b002      	add	sp, #8
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	2104      	movs	r1, #4
 8001aea:	400a      	ands	r2, r1
 8001aec:	2107      	movs	r1, #7
 8001aee:	4091      	lsls	r1, r2
 8001af0:	000a      	movs	r2, r1
 8001af2:	43d2      	mvns	r2, r2
 8001af4:	401a      	ands	r2, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2104      	movs	r1, #4
 8001afa:	400b      	ands	r3, r1
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4099      	lsls	r1, r3
 8001b00:	000b      	movs	r3, r1
 8001b02:	431a      	orrs	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001b08:	46c0      	nop			@ (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b004      	add	sp, #16
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	2104      	movs	r1, #4
 8001b22:	400a      	ands	r2, r1
 8001b24:	2107      	movs	r1, #7
 8001b26:	4091      	lsls	r1, r2
 8001b28:	000a      	movs	r2, r1
 8001b2a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2104      	movs	r1, #4
 8001b30:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001b32:	40da      	lsrs	r2, r3
 8001b34:	0013      	movs	r3, r2
}
 8001b36:	0018      	movs	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b002      	add	sp, #8
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	23c0      	movs	r3, #192	@ 0xc0
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d101      	bne.n	8001b56 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	0018      	movs	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b002      	add	sp, #8
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	211f      	movs	r1, #31
 8001b74:	400a      	ands	r2, r1
 8001b76:	210f      	movs	r1, #15
 8001b78:	4091      	lsls	r1, r2
 8001b7a:	000a      	movs	r2, r1
 8001b7c:	43d2      	mvns	r2, r2
 8001b7e:	401a      	ands	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	0e9b      	lsrs	r3, r3, #26
 8001b84:	210f      	movs	r1, #15
 8001b86:	4019      	ands	r1, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	201f      	movs	r0, #31
 8001b8c:	4003      	ands	r3, r0
 8001b8e:	4099      	lsls	r1, r3
 8001b90:	000b      	movs	r3, r1
 8001b92:	431a      	orrs	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b98:	46c0      	nop			@ (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b004      	add	sp, #16
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	025b      	lsls	r3, r3, #9
 8001bb2:	0a5b      	lsrs	r3, r3, #9
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b002      	add	sp, #8
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	0252      	lsls	r2, r2, #9
 8001bd4:	0a52      	lsrs	r2, r2, #9
 8001bd6:	43d2      	mvns	r2, r2
 8001bd8:	401a      	ands	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bde:	46c0      	nop			@ (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b002      	add	sp, #8
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	0212      	lsls	r2, r2, #8
 8001bfc:	43d2      	mvns	r2, r2
 8001bfe:	401a      	ands	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	400b      	ands	r3, r1
 8001c08:	4904      	ldr	r1, [pc, #16]	@ (8001c1c <LL_ADC_SetChannelSamplingTime+0x34>)
 8001c0a:	400b      	ands	r3, r1
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001c12:	46c0      	nop			@ (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b004      	add	sp, #16
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			@ (mov r8, r8)
 8001c1c:	7fffff00 	.word	0x7fffff00

08001c20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4a05      	ldr	r2, [pc, #20]	@ (8001c44 <LL_ADC_EnableInternalRegulator+0x24>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2280      	movs	r2, #128	@ 0x80
 8001c32:	0552      	lsls	r2, r2, #21
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c3a:	46c0      	nop			@ (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b002      	add	sp, #8
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			@ (mov r8, r8)
 8001c44:	6fffffe8 	.word	0x6fffffe8

08001c48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	2380      	movs	r3, #128	@ 0x80
 8001c56:	055b      	lsls	r3, r3, #21
 8001c58:	401a      	ands	r2, r3
 8001c5a:	2380      	movs	r3, #128	@ 0x80
 8001c5c:	055b      	lsls	r3, r3, #21
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d101      	bne.n	8001c66 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b002      	add	sp, #8
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a04      	ldr	r2, [pc, #16]	@ (8001c90 <LL_ADC_Enable+0x20>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2201      	movs	r2, #1
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c88:	46c0      	nop			@ (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b002      	add	sp, #8
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	7fffffe8 	.word	0x7fffffe8

08001c94 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a04      	ldr	r2, [pc, #16]	@ (8001cb4 <LL_ADC_Disable+0x20>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001cac:	46c0      	nop			@ (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b002      	add	sp, #8
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	7fffffe8 	.word	0x7fffffe8

08001cb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <LL_ADC_IsEnabled+0x18>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <LL_ADC_IsEnabled+0x1a>
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b002      	add	sp, #8
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a04      	ldr	r2, [pc, #16]	@ (8001cfc <LL_ADC_REG_StartConversion+0x20>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	2204      	movs	r2, #4
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cf4:	46c0      	nop			@ (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	7fffffe8 	.word	0x7fffffe8

08001d00 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d101      	bne.n	8001d18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b002      	add	sp, #8
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d2c:	231f      	movs	r3, #31
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e17e      	b.n	8002048 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10a      	bne.n	8001d68 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	0018      	movs	r0, r3
 8001d56:	f7fe fbcd 	bl	80004f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2254      	movs	r2, #84	@ 0x54
 8001d64:	2100      	movs	r1, #0
 8001d66:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff ff6b 	bl	8001c48 <LL_ADC_IsInternalRegulatorEnabled>
 8001d72:	1e03      	subs	r3, r0, #0
 8001d74:	d114      	bne.n	8001da0 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f7ff ff50 	bl	8001c20 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d80:	4bb3      	ldr	r3, [pc, #716]	@ (8002050 <HAL_ADC_Init+0x32c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	49b3      	ldr	r1, [pc, #716]	@ (8002054 <HAL_ADC_Init+0x330>)
 8001d86:	0018      	movs	r0, r3
 8001d88:	f7fe f9c8 	bl	800011c <__udivsi3>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d92:	e002      	b.n	8001d9a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f9      	bne.n	8001d94 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0018      	movs	r0, r3
 8001da6:	f7ff ff4f 	bl	8001c48 <LL_ADC_IsInternalRegulatorEnabled>
 8001daa:	1e03      	subs	r3, r0, #0
 8001dac:	d10f      	bne.n	8001dce <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db2:	2210      	movs	r2, #16
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001dc6:	231f      	movs	r3, #31
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f7ff ff94 	bl	8001d00 <LL_ADC_REG_IsConversionOngoing>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de0:	2210      	movs	r2, #16
 8001de2:	4013      	ands	r3, r2
 8001de4:	d000      	beq.n	8001de8 <HAL_ADC_Init+0xc4>
 8001de6:	e122      	b.n	800202e <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d000      	beq.n	8001df0 <HAL_ADC_Init+0xcc>
 8001dee:	e11e      	b.n	800202e <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df4:	4a98      	ldr	r2, [pc, #608]	@ (8002058 <HAL_ADC_Init+0x334>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	2202      	movs	r2, #2
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	0018      	movs	r0, r3
 8001e06:	f7ff ff57 	bl	8001cb8 <LL_ADC_IsEnabled>
 8001e0a:	1e03      	subs	r3, r0, #0
 8001e0c:	d000      	beq.n	8001e10 <HAL_ADC_Init+0xec>
 8001e0e:	e0ad      	b.n	8001f6c <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7e1b      	ldrb	r3, [r3, #24]
 8001e18:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001e1a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7e5b      	ldrb	r3, [r3, #25]
 8001e20:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001e22:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7e9b      	ldrb	r3, [r3, #26]
 8001e28:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001e2a:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <HAL_ADC_Init+0x116>
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	015b      	lsls	r3, r3, #5
 8001e38:	e000      	b.n	8001e3c <HAL_ADC_Init+0x118>
 8001e3a:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001e3c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001e42:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	da04      	bge.n	8001e56 <HAL_ADC_Init+0x132>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	e001      	b.n	8001e5a <HAL_ADC_Init+0x136>
 8001e56:	2380      	movs	r3, #128	@ 0x80
 8001e58:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001e5a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	212c      	movs	r1, #44	@ 0x2c
 8001e60:	5c5b      	ldrb	r3, [r3, r1]
 8001e62:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001e64:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	5c9b      	ldrb	r3, [r3, r2]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d115      	bne.n	8001ea2 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7e9b      	ldrb	r3, [r3, #26]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d105      	bne.n	8001e8a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	2280      	movs	r2, #128	@ 0x80
 8001e82:	0252      	lsls	r2, r2, #9
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	e00b      	b.n	8001ea2 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8e:	2220      	movs	r2, #32
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001eae:	23e0      	movs	r3, #224	@ 0xe0
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	4a65      	ldr	r2, [pc, #404]	@ (800205c <HAL_ADC_Init+0x338>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	0019      	movs	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	0f9b      	lsrs	r3, r3, #30
 8001edc:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	223c      	movs	r2, #60	@ 0x3c
 8001eee:	5c9b      	ldrb	r3, [r3, r2]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d111      	bne.n	8001f18 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	0f9b      	lsrs	r3, r3, #30
 8001efa:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f00:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001f06:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001f0c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	2201      	movs	r2, #1
 8001f14:	4313      	orrs	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	4a50      	ldr	r2, [pc, #320]	@ (8002060 <HAL_ADC_Init+0x33c>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	23c0      	movs	r3, #192	@ 0xc0
 8001f34:	061b      	lsls	r3, r3, #24
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d018      	beq.n	8001f6c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001f3e:	2380      	movs	r3, #128	@ 0x80
 8001f40:	05db      	lsls	r3, r3, #23
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d012      	beq.n	8001f6c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001f4a:	2380      	movs	r3, #128	@ 0x80
 8001f4c:	061b      	lsls	r3, r3, #24
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d00c      	beq.n	8001f6c <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001f52:	4b44      	ldr	r3, [pc, #272]	@ (8002064 <HAL_ADC_Init+0x340>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a44      	ldr	r2, [pc, #272]	@ (8002068 <HAL_ADC_Init+0x344>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	23f0      	movs	r3, #240	@ 0xf0
 8001f62:	039b      	lsls	r3, r3, #14
 8001f64:	401a      	ands	r2, r3
 8001f66:	4b3f      	ldr	r3, [pc, #252]	@ (8002064 <HAL_ADC_Init+0x340>)
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f74:	001a      	movs	r2, r3
 8001f76:	2100      	movs	r1, #0
 8001f78:	f7ff fdad 	bl	8001ad6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f84:	4939      	ldr	r1, [pc, #228]	@ (800206c <HAL_ADC_Init+0x348>)
 8001f86:	001a      	movs	r2, r3
 8001f88:	f7ff fda5 	bl	8001ad6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d109      	bne.n	8001fa8 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2110      	movs	r1, #16
 8001fa0:	4249      	negs	r1, r1
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fa6:	e018      	b.n	8001fda <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	2380      	movs	r3, #128	@ 0x80
 8001fae:	039b      	lsls	r3, r3, #14
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d112      	bne.n	8001fda <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	221c      	movs	r2, #28
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2210      	movs	r2, #16
 8001fc8:	4252      	negs	r2, r2
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	0011      	movs	r1, r2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2100      	movs	r1, #0
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7ff fd95 	bl	8001b10 <LL_ADC_GetSamplingTimeCommonChannels>
 8001fe6:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d10b      	bne.n	8002008 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	4393      	bics	r3, r2
 8001ffe:	2201      	movs	r2, #1
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002006:	e01c      	b.n	8002042 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200c:	2212      	movs	r2, #18
 800200e:	4393      	bics	r3, r2
 8002010:	2210      	movs	r2, #16
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201c:	2201      	movs	r2, #1
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002024:	231f      	movs	r3, #31
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800202c:	e009      	b.n	8002042 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002032:	2210      	movs	r2, #16
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800203a:	231f      	movs	r3, #31
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002042:	231f      	movs	r3, #31
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	781b      	ldrb	r3, [r3, #0]
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b008      	add	sp, #32
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000030 	.word	0x20000030
 8002054:	00030d40 	.word	0x00030d40
 8002058:	fffffefd 	.word	0xfffffefd
 800205c:	ffde0201 	.word	0xffde0201
 8002060:	1ffffc02 	.word	0x1ffffc02
 8002064:	40012708 	.word	0x40012708
 8002068:	ffc3ffff 	.word	0xffc3ffff
 800206c:	7fffff04 	.word	0x7fffff04

08002070 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002070:	b5b0      	push	{r4, r5, r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0018      	movs	r0, r3
 8002082:	f7ff fe3d 	bl	8001d00 <LL_ADC_REG_IsConversionOngoing>
 8002086:	1e03      	subs	r3, r0, #0
 8002088:	d16c      	bne.n	8002164 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2254      	movs	r2, #84	@ 0x54
 800208e:	5c9b      	ldrb	r3, [r3, r2]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_ADC_Start_DMA+0x28>
 8002094:	2302      	movs	r3, #2
 8002096:	e06c      	b.n	8002172 <HAL_ADC_Start_DMA+0x102>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2254      	movs	r2, #84	@ 0x54
 800209c:	2101      	movs	r1, #1
 800209e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	2201      	movs	r2, #1
 80020a8:	4013      	ands	r3, r2
 80020aa:	d113      	bne.n	80020d4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff fe01 	bl	8001cb8 <LL_ADC_IsEnabled>
 80020b6:	1e03      	subs	r3, r0, #0
 80020b8:	d004      	beq.n	80020c4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	0018      	movs	r0, r3
 80020c0:	f7ff fde8 	bl	8001c94 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2101      	movs	r1, #1
 80020d0:	430a      	orrs	r2, r1
 80020d2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020d4:	2517      	movs	r5, #23
 80020d6:	197c      	adds	r4, r7, r5
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	0018      	movs	r0, r3
 80020dc:	f000 fa3c 	bl	8002558 <ADC_Enable>
 80020e0:	0003      	movs	r3, r0
 80020e2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020e4:	002c      	movs	r4, r5
 80020e6:	193b      	adds	r3, r7, r4
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d13e      	bne.n	800216c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	4a22      	ldr	r2, [pc, #136]	@ (800217c <HAL_ADC_Start_DMA+0x10c>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	2280      	movs	r2, #128	@ 0x80
 80020f8:	0052      	lsls	r2, r2, #1
 80020fa:	431a      	orrs	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800210a:	4a1d      	ldr	r2, [pc, #116]	@ (8002180 <HAL_ADC_Start_DMA+0x110>)
 800210c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002112:	4a1c      	ldr	r2, [pc, #112]	@ (8002184 <HAL_ADC_Start_DMA+0x114>)
 8002114:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800211a:	4a1b      	ldr	r2, [pc, #108]	@ (8002188 <HAL_ADC_Start_DMA+0x118>)
 800211c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	221c      	movs	r2, #28
 8002124:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2254      	movs	r2, #84	@ 0x54
 800212a:	2100      	movs	r1, #0
 800212c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2110      	movs	r1, #16
 800213a:	430a      	orrs	r2, r1
 800213c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3340      	adds	r3, #64	@ 0x40
 8002148:	0019      	movs	r1, r3
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	193c      	adds	r4, r7, r4
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f000 fc76 	bl	8002a40 <HAL_DMA_Start_IT>
 8002154:	0003      	movs	r3, r0
 8002156:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0018      	movs	r0, r3
 800215e:	f7ff fdbd 	bl	8001cdc <LL_ADC_REG_StartConversion>
 8002162:	e003      	b.n	800216c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002164:	2317      	movs	r3, #23
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	2202      	movs	r2, #2
 800216a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800216c:	2317      	movs	r3, #23
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	781b      	ldrb	r3, [r3, #0]
}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	b006      	add	sp, #24
 8002178:	bdb0      	pop	{r4, r5, r7, pc}
 800217a:	46c0      	nop			@ (mov r8, r8)
 800217c:	fffff0fe 	.word	0xfffff0fe
 8002180:	08002655 	.word	0x08002655
 8002184:	0800271d 	.word	0x0800271d
 8002188:	0800273b 	.word	0x0800273b

0800218c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002194:	46c0      	nop			@ (mov r8, r8)
 8002196:	46bd      	mov	sp, r7
 8002198:	b002      	add	sp, #8
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021a4:	46c0      	nop			@ (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b002      	add	sp, #8
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b6:	2317      	movs	r3, #23
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2254      	movs	r2, #84	@ 0x54
 80021c6:	5c9b      	ldrb	r3, [r3, r2]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x24>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e1be      	b.n	800254e <HAL_ADC_ConfigChannel+0x3a2>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2254      	movs	r2, #84	@ 0x54
 80021d4:	2101      	movs	r1, #1
 80021d6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	0018      	movs	r0, r3
 80021de:	f7ff fd8f 	bl	8001d00 <LL_ADC_REG_IsConversionOngoing>
 80021e2:	1e03      	subs	r3, r0, #0
 80021e4:	d000      	beq.n	80021e8 <HAL_ADC_ConfigChannel+0x3c>
 80021e6:	e1a1      	b.n	800252c <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d100      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x46>
 80021f0:	e152      	b.n	8002498 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	2380      	movs	r3, #128	@ 0x80
 80021f8:	061b      	lsls	r3, r3, #24
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d004      	beq.n	8002208 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002202:	4ac2      	ldr	r2, [pc, #776]	@ (800250c <HAL_ADC_ConfigChannel+0x360>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d108      	bne.n	800221a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	0019      	movs	r1, r3
 8002212:	0010      	movs	r0, r2
 8002214:	f7ff fcc4 	bl	8001ba0 <LL_ADC_REG_SetSequencerChAdd>
 8002218:	e0ed      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	211f      	movs	r1, #31
 8002224:	400b      	ands	r3, r1
 8002226:	210f      	movs	r1, #15
 8002228:	4099      	lsls	r1, r3
 800222a:	000b      	movs	r3, r1
 800222c:	43db      	mvns	r3, r3
 800222e:	4013      	ands	r3, r2
 8002230:	0019      	movs	r1, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	025b      	lsls	r3, r3, #9
 8002238:	0a5b      	lsrs	r3, r3, #9
 800223a:	d105      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x9c>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	0e9b      	lsrs	r3, r3, #26
 8002242:	221f      	movs	r2, #31
 8002244:	4013      	ands	r3, r2
 8002246:	e0bc      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2201      	movs	r2, #1
 800224e:	4013      	ands	r3, r2
 8002250:	d000      	beq.n	8002254 <HAL_ADC_ConfigChannel+0xa8>
 8002252:	e0b5      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x214>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2202      	movs	r2, #2
 800225a:	4013      	ands	r3, r2
 800225c:	d000      	beq.n	8002260 <HAL_ADC_ConfigChannel+0xb4>
 800225e:	e0ad      	b.n	80023bc <HAL_ADC_ConfigChannel+0x210>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2204      	movs	r2, #4
 8002266:	4013      	ands	r3, r2
 8002268:	d000      	beq.n	800226c <HAL_ADC_ConfigChannel+0xc0>
 800226a:	e0a5      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x20c>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2208      	movs	r2, #8
 8002272:	4013      	ands	r3, r2
 8002274:	d000      	beq.n	8002278 <HAL_ADC_ConfigChannel+0xcc>
 8002276:	e09d      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x208>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2210      	movs	r2, #16
 800227e:	4013      	ands	r3, r2
 8002280:	d000      	beq.n	8002284 <HAL_ADC_ConfigChannel+0xd8>
 8002282:	e095      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x204>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2220      	movs	r2, #32
 800228a:	4013      	ands	r3, r2
 800228c:	d000      	beq.n	8002290 <HAL_ADC_ConfigChannel+0xe4>
 800228e:	e08d      	b.n	80023ac <HAL_ADC_ConfigChannel+0x200>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2240      	movs	r2, #64	@ 0x40
 8002296:	4013      	ands	r3, r2
 8002298:	d000      	beq.n	800229c <HAL_ADC_ConfigChannel+0xf0>
 800229a:	e085      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x1fc>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2280      	movs	r2, #128	@ 0x80
 80022a2:	4013      	ands	r3, r2
 80022a4:	d000      	beq.n	80022a8 <HAL_ADC_ConfigChannel+0xfc>
 80022a6:	e07d      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x1f8>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2380      	movs	r3, #128	@ 0x80
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4013      	ands	r3, r2
 80022b2:	d000      	beq.n	80022b6 <HAL_ADC_ConfigChannel+0x10a>
 80022b4:	e074      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x1f4>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	2380      	movs	r3, #128	@ 0x80
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4013      	ands	r3, r2
 80022c0:	d000      	beq.n	80022c4 <HAL_ADC_ConfigChannel+0x118>
 80022c2:	e06b      	b.n	800239c <HAL_ADC_ConfigChannel+0x1f0>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	@ 0x80
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4013      	ands	r3, r2
 80022ce:	d000      	beq.n	80022d2 <HAL_ADC_ConfigChannel+0x126>
 80022d0:	e062      	b.n	8002398 <HAL_ADC_ConfigChannel+0x1ec>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	2380      	movs	r3, #128	@ 0x80
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	4013      	ands	r3, r2
 80022dc:	d000      	beq.n	80022e0 <HAL_ADC_ConfigChannel+0x134>
 80022de:	e059      	b.n	8002394 <HAL_ADC_ConfigChannel+0x1e8>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	015b      	lsls	r3, r3, #5
 80022e8:	4013      	ands	r3, r2
 80022ea:	d151      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x1e4>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	2380      	movs	r3, #128	@ 0x80
 80022f2:	019b      	lsls	r3, r3, #6
 80022f4:	4013      	ands	r3, r2
 80022f6:	d149      	bne.n	800238c <HAL_ADC_ConfigChannel+0x1e0>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	2380      	movs	r3, #128	@ 0x80
 80022fe:	01db      	lsls	r3, r3, #7
 8002300:	4013      	ands	r3, r2
 8002302:	d141      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x1dc>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	2380      	movs	r3, #128	@ 0x80
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	4013      	ands	r3, r2
 800230e:	d139      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1d8>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	025b      	lsls	r3, r3, #9
 8002318:	4013      	ands	r3, r2
 800231a:	d131      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x1d4>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	029b      	lsls	r3, r3, #10
 8002324:	4013      	ands	r3, r2
 8002326:	d129      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1d0>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	2380      	movs	r3, #128	@ 0x80
 800232e:	02db      	lsls	r3, r3, #11
 8002330:	4013      	ands	r3, r2
 8002332:	d121      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x1cc>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	2380      	movs	r3, #128	@ 0x80
 800233a:	031b      	lsls	r3, r3, #12
 800233c:	4013      	ands	r3, r2
 800233e:	d119      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1c8>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	@ 0x80
 8002346:	035b      	lsls	r3, r3, #13
 8002348:	4013      	ands	r3, r2
 800234a:	d111      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1c4>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2380      	movs	r3, #128	@ 0x80
 8002352:	039b      	lsls	r3, r3, #14
 8002354:	4013      	ands	r3, r2
 8002356:	d109      	bne.n	800236c <HAL_ADC_ConfigChannel+0x1c0>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	2380      	movs	r3, #128	@ 0x80
 800235e:	03db      	lsls	r3, r3, #15
 8002360:	4013      	ands	r3, r2
 8002362:	d001      	beq.n	8002368 <HAL_ADC_ConfigChannel+0x1bc>
 8002364:	2316      	movs	r3, #22
 8002366:	e02c      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 8002368:	2300      	movs	r3, #0
 800236a:	e02a      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 800236c:	2315      	movs	r3, #21
 800236e:	e028      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 8002370:	2314      	movs	r3, #20
 8002372:	e026      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 8002374:	2313      	movs	r3, #19
 8002376:	e024      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 8002378:	2312      	movs	r3, #18
 800237a:	e022      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 800237c:	2311      	movs	r3, #17
 800237e:	e020      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 8002380:	2310      	movs	r3, #16
 8002382:	e01e      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 8002384:	230f      	movs	r3, #15
 8002386:	e01c      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 8002388:	230e      	movs	r3, #14
 800238a:	e01a      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 800238c:	230d      	movs	r3, #13
 800238e:	e018      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 8002390:	230c      	movs	r3, #12
 8002392:	e016      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 8002394:	230b      	movs	r3, #11
 8002396:	e014      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 8002398:	230a      	movs	r3, #10
 800239a:	e012      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 800239c:	2309      	movs	r3, #9
 800239e:	e010      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 80023a0:	2308      	movs	r3, #8
 80023a2:	e00e      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 80023a4:	2307      	movs	r3, #7
 80023a6:	e00c      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 80023a8:	2306      	movs	r3, #6
 80023aa:	e00a      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 80023ac:	2305      	movs	r3, #5
 80023ae:	e008      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 80023b0:	2304      	movs	r3, #4
 80023b2:	e006      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 80023b4:	2303      	movs	r3, #3
 80023b6:	e004      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e002      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x216>
 80023c0:	2300      	movs	r3, #0
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	6852      	ldr	r2, [r2, #4]
 80023c6:	201f      	movs	r0, #31
 80023c8:	4002      	ands	r2, r0
 80023ca:	4093      	lsls	r3, r2
 80023cc:	000a      	movs	r2, r1
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d808      	bhi.n	80023f6 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	001a      	movs	r2, r3
 80023f2:	f7ff fbb5 	bl	8001b60 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6819      	ldr	r1, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	001a      	movs	r2, r3
 8002404:	f7ff fbf0 	bl	8001be8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	db00      	blt.n	8002412 <HAL_ADC_ConfigChannel+0x266>
 8002410:	e096      	b.n	8002540 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002412:	4b3f      	ldr	r3, [pc, #252]	@ (8002510 <HAL_ADC_ConfigChannel+0x364>)
 8002414:	0018      	movs	r0, r3
 8002416:	f7ff fb51 	bl	8001abc <LL_ADC_GetCommonPathInternalCh>
 800241a:	0003      	movs	r3, r0
 800241c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a3c      	ldr	r2, [pc, #240]	@ (8002514 <HAL_ADC_ConfigChannel+0x368>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d123      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	2380      	movs	r3, #128	@ 0x80
 800242c:	041b      	lsls	r3, r3, #16
 800242e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002430:	d11e      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2280      	movs	r2, #128	@ 0x80
 8002436:	0412      	lsls	r2, r2, #16
 8002438:	4313      	orrs	r3, r2
 800243a:	4a35      	ldr	r2, [pc, #212]	@ (8002510 <HAL_ADC_ConfigChannel+0x364>)
 800243c:	0019      	movs	r1, r3
 800243e:	0010      	movs	r0, r2
 8002440:	f7ff fb28 	bl	8001a94 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002444:	4b34      	ldr	r3, [pc, #208]	@ (8002518 <HAL_ADC_ConfigChannel+0x36c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4934      	ldr	r1, [pc, #208]	@ (800251c <HAL_ADC_ConfigChannel+0x370>)
 800244a:	0018      	movs	r0, r3
 800244c:	f7fd fe66 	bl	800011c <__udivsi3>
 8002450:	0003      	movs	r3, r0
 8002452:	001a      	movs	r2, r3
 8002454:	0013      	movs	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	189b      	adds	r3, r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	3301      	adds	r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002460:	e002      	b.n	8002468 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3b01      	subs	r3, #1
 8002466:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f9      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800246e:	e067      	b.n	8002540 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a2a      	ldr	r2, [pc, #168]	@ (8002520 <HAL_ADC_ConfigChannel+0x374>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d162      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	2380      	movs	r3, #128	@ 0x80
 800247e:	03db      	lsls	r3, r3, #15
 8002480:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002482:	d15d      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	2280      	movs	r2, #128	@ 0x80
 8002488:	03d2      	lsls	r2, r2, #15
 800248a:	4313      	orrs	r3, r2
 800248c:	4a20      	ldr	r2, [pc, #128]	@ (8002510 <HAL_ADC_ConfigChannel+0x364>)
 800248e:	0019      	movs	r1, r3
 8002490:	0010      	movs	r0, r2
 8002492:	f7ff faff 	bl	8001a94 <LL_ADC_SetCommonPathInternalCh>
 8002496:	e053      	b.n	8002540 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	2380      	movs	r3, #128	@ 0x80
 800249e:	061b      	lsls	r3, r3, #24
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d004      	beq.n	80024ae <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80024a8:	4a18      	ldr	r2, [pc, #96]	@ (800250c <HAL_ADC_ConfigChannel+0x360>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d107      	bne.n	80024be <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0019      	movs	r1, r3
 80024b8:	0010      	movs	r0, r2
 80024ba:	f7ff fb82 	bl	8001bc2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	da3c      	bge.n	8002540 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024c6:	4b12      	ldr	r3, [pc, #72]	@ (8002510 <HAL_ADC_ConfigChannel+0x364>)
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7ff faf7 	bl	8001abc <LL_ADC_GetCommonPathInternalCh>
 80024ce:	0003      	movs	r3, r0
 80024d0:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002514 <HAL_ADC_ConfigChannel+0x368>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d108      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4a11      	ldr	r2, [pc, #68]	@ (8002524 <HAL_ADC_ConfigChannel+0x378>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002510 <HAL_ADC_ConfigChannel+0x364>)
 80024e4:	0019      	movs	r1, r3
 80024e6:	0010      	movs	r0, r2
 80024e8:	f7ff fad4 	bl	8001a94 <LL_ADC_SetCommonPathInternalCh>
 80024ec:	e028      	b.n	8002540 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a0b      	ldr	r2, [pc, #44]	@ (8002520 <HAL_ADC_ConfigChannel+0x374>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d123      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002528 <HAL_ADC_ConfigChannel+0x37c>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	4a04      	ldr	r2, [pc, #16]	@ (8002510 <HAL_ADC_ConfigChannel+0x364>)
 8002500:	0019      	movs	r1, r3
 8002502:	0010      	movs	r0, r2
 8002504:	f7ff fac6 	bl	8001a94 <LL_ADC_SetCommonPathInternalCh>
 8002508:	e01a      	b.n	8002540 <HAL_ADC_ConfigChannel+0x394>
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	80000004 	.word	0x80000004
 8002510:	40012708 	.word	0x40012708
 8002514:	a4000200 	.word	0xa4000200
 8002518:	20000030 	.word	0x20000030
 800251c:	00030d40 	.word	0x00030d40
 8002520:	a8000400 	.word	0xa8000400
 8002524:	ff7fffff 	.word	0xff7fffff
 8002528:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002530:	2220      	movs	r2, #32
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002538:	2317      	movs	r3, #23
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2254      	movs	r2, #84	@ 0x54
 8002544:	2100      	movs	r1, #0
 8002546:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002548:	2317      	movs	r3, #23
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	781b      	ldrb	r3, [r3, #0]
}
 800254e:	0018      	movs	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	b006      	add	sp, #24
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			@ (mov r8, r8)

08002558 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	0018      	movs	r0, r3
 800256a:	f7ff fba5 	bl	8001cb8 <LL_ADC_IsEnabled>
 800256e:	1e03      	subs	r3, r0, #0
 8002570:	d162      	bne.n	8002638 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	4a32      	ldr	r2, [pc, #200]	@ (8002644 <ADC_Enable+0xec>)
 800257a:	4013      	ands	r3, r2
 800257c:	d00d      	beq.n	800259a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002582:	2210      	movs	r2, #16
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258e:	2201      	movs	r2, #1
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e04f      	b.n	800263a <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0018      	movs	r0, r3
 80025a0:	f7ff fb66 	bl	8001c70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80025a4:	4b28      	ldr	r3, [pc, #160]	@ (8002648 <ADC_Enable+0xf0>)
 80025a6:	0018      	movs	r0, r3
 80025a8:	f7ff fa88 	bl	8001abc <LL_ADC_GetCommonPathInternalCh>
 80025ac:	0002      	movs	r2, r0
 80025ae:	2380      	movs	r3, #128	@ 0x80
 80025b0:	041b      	lsls	r3, r3, #16
 80025b2:	4013      	ands	r3, r2
 80025b4:	d00f      	beq.n	80025d6 <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025b6:	4b25      	ldr	r3, [pc, #148]	@ (800264c <ADC_Enable+0xf4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4925      	ldr	r1, [pc, #148]	@ (8002650 <ADC_Enable+0xf8>)
 80025bc:	0018      	movs	r0, r3
 80025be:	f7fd fdad 	bl	800011c <__udivsi3>
 80025c2:	0003      	movs	r3, r0
 80025c4:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80025c6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80025c8:	e002      	b.n	80025d0 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f9      	bne.n	80025ca <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7e5b      	ldrb	r3, [r3, #25]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d02c      	beq.n	8002638 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80025de:	f7ff fa2b 	bl	8001a38 <HAL_GetTick>
 80025e2:	0003      	movs	r3, r0
 80025e4:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025e6:	e020      	b.n	800262a <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0018      	movs	r0, r3
 80025ee:	f7ff fb63 	bl	8001cb8 <LL_ADC_IsEnabled>
 80025f2:	1e03      	subs	r3, r0, #0
 80025f4:	d104      	bne.n	8002600 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7ff fb38 	bl	8001c70 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002600:	f7ff fa1a 	bl	8001a38 <HAL_GetTick>
 8002604:	0002      	movs	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d90d      	bls.n	800262a <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002612:	2210      	movs	r2, #16
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261e:	2201      	movs	r2, #1
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e007      	b.n	800263a <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2201      	movs	r2, #1
 8002632:	4013      	ands	r3, r2
 8002634:	2b01      	cmp	r3, #1
 8002636:	d1d7      	bne.n	80025e8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	0018      	movs	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	b004      	add	sp, #16
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	80000017 	.word	0x80000017
 8002648:	40012708 	.word	0x40012708
 800264c:	20000030 	.word	0x20000030
 8002650:	00030d40 	.word	0x00030d40

08002654 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002660:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002666:	2250      	movs	r2, #80	@ 0x50
 8002668:	4013      	ands	r3, r2
 800266a:	d141      	bne.n	80026f0 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002670:	2280      	movs	r2, #128	@ 0x80
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	431a      	orrs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	0018      	movs	r0, r3
 8002680:	f7ff fa5d 	bl	8001b3e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002684:	1e03      	subs	r3, r0, #0
 8002686:	d02e      	beq.n	80026e6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	7e9b      	ldrb	r3, [r3, #26]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d12a      	bne.n	80026e6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2208      	movs	r2, #8
 8002698:	4013      	ands	r3, r2
 800269a:	2b08      	cmp	r3, #8
 800269c:	d123      	bne.n	80026e6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	0018      	movs	r0, r3
 80026a4:	f7ff fb2c 	bl	8001d00 <LL_ADC_REG_IsConversionOngoing>
 80026a8:	1e03      	subs	r3, r0, #0
 80026aa:	d110      	bne.n	80026ce <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	210c      	movs	r1, #12
 80026b8:	438a      	bics	r2, r1
 80026ba:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c0:	4a15      	ldr	r2, [pc, #84]	@ (8002718 <ADC_DMAConvCplt+0xc4>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	2201      	movs	r2, #1
 80026c6:	431a      	orrs	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80026cc:	e00b      	b.n	80026e6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d2:	2220      	movs	r2, #32
 80026d4:	431a      	orrs	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026de:	2201      	movs	r2, #1
 80026e0:	431a      	orrs	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f7fe fb0b 	bl	8000d04 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026ee:	e00f      	b.n	8002710 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f4:	2210      	movs	r2, #16
 80026f6:	4013      	ands	r3, r2
 80026f8:	d004      	beq.n	8002704 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff fd4d 	bl	800219c <HAL_ADC_ErrorCallback>
}
 8002702:	e005      	b.n	8002710 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	0010      	movs	r0, r2
 800270e:	4798      	blx	r3
}
 8002710:	46c0      	nop			@ (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b004      	add	sp, #16
 8002716:	bd80      	pop	{r7, pc}
 8002718:	fffffefe 	.word	0xfffffefe

0800271c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002728:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	0018      	movs	r0, r3
 800272e:	f7ff fd2d 	bl	800218c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002732:	46c0      	nop			@ (mov r8, r8)
 8002734:	46bd      	mov	sp, r7
 8002736:	b004      	add	sp, #16
 8002738:	bd80      	pop	{r7, pc}

0800273a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002746:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274c:	2240      	movs	r2, #64	@ 0x40
 800274e:	431a      	orrs	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002758:	2204      	movs	r2, #4
 800275a:	431a      	orrs	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	0018      	movs	r0, r3
 8002764:	f7ff fd1a 	bl	800219c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002768:	46c0      	nop			@ (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b004      	add	sp, #16
 800276e:	bd80      	pop	{r7, pc}

08002770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	0002      	movs	r2, r0
 8002778:	1dfb      	adds	r3, r7, #7
 800277a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800277c:	1dfb      	adds	r3, r7, #7
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b7f      	cmp	r3, #127	@ 0x7f
 8002782:	d809      	bhi.n	8002798 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002784:	1dfb      	adds	r3, r7, #7
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	001a      	movs	r2, r3
 800278a:	231f      	movs	r3, #31
 800278c:	401a      	ands	r2, r3
 800278e:	4b04      	ldr	r3, [pc, #16]	@ (80027a0 <__NVIC_EnableIRQ+0x30>)
 8002790:	2101      	movs	r1, #1
 8002792:	4091      	lsls	r1, r2
 8002794:	000a      	movs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002798:	46c0      	nop			@ (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	b002      	add	sp, #8
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	e000e100 	.word	0xe000e100

080027a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	0002      	movs	r2, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	1dfb      	adds	r3, r7, #7
 80027b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80027b8:	d828      	bhi.n	800280c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002878 <__NVIC_SetPriority+0xd4>)
 80027bc:	1dfb      	adds	r3, r7, #7
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	33c0      	adds	r3, #192	@ 0xc0
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	589b      	ldr	r3, [r3, r2]
 80027ca:	1dfa      	adds	r2, r7, #7
 80027cc:	7812      	ldrb	r2, [r2, #0]
 80027ce:	0011      	movs	r1, r2
 80027d0:	2203      	movs	r2, #3
 80027d2:	400a      	ands	r2, r1
 80027d4:	00d2      	lsls	r2, r2, #3
 80027d6:	21ff      	movs	r1, #255	@ 0xff
 80027d8:	4091      	lsls	r1, r2
 80027da:	000a      	movs	r2, r1
 80027dc:	43d2      	mvns	r2, r2
 80027de:	401a      	ands	r2, r3
 80027e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	22ff      	movs	r2, #255	@ 0xff
 80027e8:	401a      	ands	r2, r3
 80027ea:	1dfb      	adds	r3, r7, #7
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	0018      	movs	r0, r3
 80027f0:	2303      	movs	r3, #3
 80027f2:	4003      	ands	r3, r0
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027f8:	481f      	ldr	r0, [pc, #124]	@ (8002878 <__NVIC_SetPriority+0xd4>)
 80027fa:	1dfb      	adds	r3, r7, #7
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	089b      	lsrs	r3, r3, #2
 8002802:	430a      	orrs	r2, r1
 8002804:	33c0      	adds	r3, #192	@ 0xc0
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800280a:	e031      	b.n	8002870 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800280c:	4a1b      	ldr	r2, [pc, #108]	@ (800287c <__NVIC_SetPriority+0xd8>)
 800280e:	1dfb      	adds	r3, r7, #7
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	0019      	movs	r1, r3
 8002814:	230f      	movs	r3, #15
 8002816:	400b      	ands	r3, r1
 8002818:	3b08      	subs	r3, #8
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3306      	adds	r3, #6
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	18d3      	adds	r3, r2, r3
 8002822:	3304      	adds	r3, #4
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	1dfa      	adds	r2, r7, #7
 8002828:	7812      	ldrb	r2, [r2, #0]
 800282a:	0011      	movs	r1, r2
 800282c:	2203      	movs	r2, #3
 800282e:	400a      	ands	r2, r1
 8002830:	00d2      	lsls	r2, r2, #3
 8002832:	21ff      	movs	r1, #255	@ 0xff
 8002834:	4091      	lsls	r1, r2
 8002836:	000a      	movs	r2, r1
 8002838:	43d2      	mvns	r2, r2
 800283a:	401a      	ands	r2, r3
 800283c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	019b      	lsls	r3, r3, #6
 8002842:	22ff      	movs	r2, #255	@ 0xff
 8002844:	401a      	ands	r2, r3
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	0018      	movs	r0, r3
 800284c:	2303      	movs	r3, #3
 800284e:	4003      	ands	r3, r0
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002854:	4809      	ldr	r0, [pc, #36]	@ (800287c <__NVIC_SetPriority+0xd8>)
 8002856:	1dfb      	adds	r3, r7, #7
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	001c      	movs	r4, r3
 800285c:	230f      	movs	r3, #15
 800285e:	4023      	ands	r3, r4
 8002860:	3b08      	subs	r3, #8
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	430a      	orrs	r2, r1
 8002866:	3306      	adds	r3, #6
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	18c3      	adds	r3, r0, r3
 800286c:	3304      	adds	r3, #4
 800286e:	601a      	str	r2, [r3, #0]
}
 8002870:	46c0      	nop			@ (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	b003      	add	sp, #12
 8002876:	bd90      	pop	{r4, r7, pc}
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	1e5a      	subs	r2, r3, #1
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	045b      	lsls	r3, r3, #17
 8002890:	429a      	cmp	r2, r3
 8002892:	d301      	bcc.n	8002898 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002894:	2301      	movs	r3, #1
 8002896:	e010      	b.n	80028ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002898:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <SysTick_Config+0x44>)
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	3a01      	subs	r2, #1
 800289e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a0:	2301      	movs	r3, #1
 80028a2:	425b      	negs	r3, r3
 80028a4:	2103      	movs	r1, #3
 80028a6:	0018      	movs	r0, r3
 80028a8:	f7ff ff7c 	bl	80027a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ac:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <SysTick_Config+0x44>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b2:	4b04      	ldr	r3, [pc, #16]	@ (80028c4 <SysTick_Config+0x44>)
 80028b4:	2207      	movs	r2, #7
 80028b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	0018      	movs	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	b002      	add	sp, #8
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	e000e010 	.word	0xe000e010

080028c8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	210f      	movs	r1, #15
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	1c02      	adds	r2, r0, #0
 80028d8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	187b      	adds	r3, r7, r1
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	b25b      	sxtb	r3, r3
 80028e2:	0011      	movs	r1, r2
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7ff ff5d 	bl	80027a4 <__NVIC_SetPriority>
}
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b004      	add	sp, #16
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	0002      	movs	r2, r0
 80028fa:	1dfb      	adds	r3, r7, #7
 80028fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028fe:	1dfb      	adds	r3, r7, #7
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b25b      	sxtb	r3, r3
 8002904:	0018      	movs	r0, r3
 8002906:	f7ff ff33 	bl	8002770 <__NVIC_EnableIRQ>
}
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b002      	add	sp, #8
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	0018      	movs	r0, r3
 800291e:	f7ff ffaf 	bl	8002880 <SysTick_Config>
 8002922:	0003      	movs	r3, r0
}
 8002924:	0018      	movs	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	b002      	add	sp, #8
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e077      	b.n	8002a2e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a3d      	ldr	r2, [pc, #244]	@ (8002a38 <HAL_DMA_Init+0x10c>)
 8002944:	4694      	mov	ip, r2
 8002946:	4463      	add	r3, ip
 8002948:	2114      	movs	r1, #20
 800294a:	0018      	movs	r0, r3
 800294c:	f7fd fbe6 	bl	800011c <__udivsi3>
 8002950:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002952:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2225      	movs	r2, #37	@ 0x25
 800295c:	2102      	movs	r1, #2
 800295e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4934      	ldr	r1, [pc, #208]	@ (8002a3c <HAL_DMA_Init+0x110>)
 800296c:	400a      	ands	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6819      	ldr	r1, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f000 fa49 	bl	8002e40 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	01db      	lsls	r3, r3, #7
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d102      	bne.n	80029c0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c8:	21ff      	movs	r1, #255	@ 0xff
 80029ca:	400a      	ands	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80029d6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d011      	beq.n	8002a04 <HAL_DMA_Init+0xd8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d80d      	bhi.n	8002a04 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 fa54 	bl	8002e98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	e008      	b.n	8002a16 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2225      	movs	r2, #37	@ 0x25
 8002a20:	2101      	movs	r1, #1
 8002a22:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2224      	movs	r2, #36	@ 0x24
 8002a28:	2100      	movs	r1, #0
 8002a2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	0018      	movs	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b002      	add	sp, #8
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	46c0      	nop			@ (mov r8, r8)
 8002a38:	bffdfff8 	.word	0xbffdfff8
 8002a3c:	ffff800f 	.word	0xffff800f

08002a40 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4e:	2317      	movs	r3, #23
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2224      	movs	r2, #36	@ 0x24
 8002a5a:	5c9b      	ldrb	r3, [r3, r2]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_DMA_Start_IT+0x24>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e070      	b.n	8002b46 <HAL_DMA_Start_IT+0x106>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2224      	movs	r2, #36	@ 0x24
 8002a68:	2101      	movs	r1, #1
 8002a6a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2225      	movs	r2, #37	@ 0x25
 8002a70:	5c9b      	ldrb	r3, [r3, r2]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d157      	bne.n	8002b28 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2225      	movs	r2, #37	@ 0x25
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2101      	movs	r1, #1
 8002a92:	438a      	bics	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 f98f 	bl	8002dc0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d008      	beq.n	8002abc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	210e      	movs	r1, #14
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	e00f      	b.n	8002adc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2104      	movs	r1, #4
 8002ac8:	438a      	bics	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	210a      	movs	r1, #10
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	2380      	movs	r3, #128	@ 0x80
 8002ae4:	025b      	lsls	r3, r3, #9
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d008      	beq.n	8002afc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af4:	2180      	movs	r1, #128	@ 0x80
 8002af6:	0049      	lsls	r1, r1, #1
 8002af8:	430a      	orrs	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b0e:	2180      	movs	r1, #128	@ 0x80
 8002b10:	0049      	lsls	r1, r1, #1
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2101      	movs	r1, #1
 8002b22:	430a      	orrs	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e007      	b.n	8002b38 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2224      	movs	r2, #36	@ 0x24
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b30:	2317      	movs	r3, #23
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	2202      	movs	r2, #2
 8002b36:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2224      	movs	r2, #36	@ 0x24
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	5499      	strb	r1, [r3, r2]

  return status;
 8002b40:	2317      	movs	r3, #23
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	781b      	ldrb	r3, [r3, #0]
}
 8002b46:	0018      	movs	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b006      	add	sp, #24
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b58:	230f      	movs	r3, #15
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2224      	movs	r2, #36	@ 0x24
 8002b64:	2100      	movs	r1, #0
 8002b66:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2224      	movs	r2, #36	@ 0x24
 8002b6c:	5c9b      	ldrb	r3, [r3, r2]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_DMA_Abort_IT+0x26>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e05e      	b.n	8002c34 <HAL_DMA_Abort_IT+0xe4>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2224      	movs	r2, #36	@ 0x24
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2225      	movs	r2, #37	@ 0x25
 8002b82:	5c9b      	ldrb	r3, [r3, r2]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d007      	beq.n	8002b9a <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002b90:	230f      	movs	r3, #15
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
 8002b98:	e049      	b.n	8002c2e <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	210e      	movs	r1, #14
 8002ba6:	438a      	bics	r2, r1
 8002ba8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	438a      	bics	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc4:	491d      	ldr	r1, [pc, #116]	@ (8002c3c <HAL_DMA_Abort_IT+0xec>)
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8002bca:	4b1d      	ldr	r3, [pc, #116]	@ (8002c40 <HAL_DMA_Abort_IT+0xf0>)
 8002bcc:	6859      	ldr	r1, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	221c      	movs	r2, #28
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	4b19      	ldr	r3, [pc, #100]	@ (8002c40 <HAL_DMA_Abort_IT+0xf0>)
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002be8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00c      	beq.n	8002c0c <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bfc:	490f      	ldr	r1, [pc, #60]	@ (8002c3c <HAL_DMA_Abort_IT+0xec>)
 8002bfe:	400a      	ands	r2, r1
 8002c00:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002c0a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2225      	movs	r2, #37	@ 0x25
 8002c10:	2101      	movs	r1, #1
 8002c12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2224      	movs	r2, #36	@ 0x24
 8002c18:	2100      	movs	r1, #0
 8002c1a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d004      	beq.n	8002c2e <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	0010      	movs	r0, r2
 8002c2c:	4798      	blx	r3
    }
  }
  return status;
 8002c2e:	230f      	movs	r3, #15
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	781b      	ldrb	r3, [r3, #0]
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b004      	add	sp, #16
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	fffffeff 	.word	0xfffffeff
 8002c40:	40020000 	.word	0x40020000

08002c44 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8002c4c:	4b55      	ldr	r3, [pc, #340]	@ (8002da4 <HAL_DMA_IRQHandler+0x160>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	221c      	movs	r2, #28
 8002c60:	4013      	ands	r3, r2
 8002c62:	2204      	movs	r2, #4
 8002c64:	409a      	lsls	r2, r3
 8002c66:	0013      	movs	r3, r2
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d027      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x7a>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2204      	movs	r2, #4
 8002c72:	4013      	ands	r3, r2
 8002c74:	d023      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d107      	bne.n	8002c92 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2104      	movs	r1, #4
 8002c8e:	438a      	bics	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8002c92:	4b44      	ldr	r3, [pc, #272]	@ (8002da4 <HAL_DMA_IRQHandler+0x160>)
 8002c94:	6859      	ldr	r1, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	221c      	movs	r2, #28
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	4b40      	ldr	r3, [pc, #256]	@ (8002da4 <HAL_DMA_IRQHandler+0x160>)
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d100      	bne.n	8002cb2 <HAL_DMA_IRQHandler+0x6e>
 8002cb0:	e073      	b.n	8002d9a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	0010      	movs	r0, r2
 8002cba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002cbc:	e06d      	b.n	8002d9a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	221c      	movs	r2, #28
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	0013      	movs	r3, r2
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d02e      	beq.n	8002d30 <HAL_DMA_IRQHandler+0xec>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d02a      	beq.n	8002d30 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d10b      	bne.n	8002cfe <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	210a      	movs	r1, #10
 8002cf2:	438a      	bics	r2, r1
 8002cf4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2225      	movs	r2, #37	@ 0x25
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8002cfe:	4b29      	ldr	r3, [pc, #164]	@ (8002da4 <HAL_DMA_IRQHandler+0x160>)
 8002d00:	6859      	ldr	r1, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	221c      	movs	r2, #28
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	4b25      	ldr	r3, [pc, #148]	@ (8002da4 <HAL_DMA_IRQHandler+0x160>)
 8002d10:	430a      	orrs	r2, r1
 8002d12:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2224      	movs	r2, #36	@ 0x24
 8002d18:	2100      	movs	r1, #0
 8002d1a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d03a      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	0010      	movs	r0, r2
 8002d2c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002d2e:	e034      	b.n	8002d9a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d34:	221c      	movs	r2, #28
 8002d36:	4013      	ands	r3, r2
 8002d38:	2208      	movs	r2, #8
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	0013      	movs	r3, r2
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4013      	ands	r3, r2
 8002d42:	d02b      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x158>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2208      	movs	r2, #8
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d027      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	210e      	movs	r1, #14
 8002d58:	438a      	bics	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002d5c:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <HAL_DMA_IRQHandler+0x160>)
 8002d5e:	6859      	ldr	r1, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	221c      	movs	r2, #28
 8002d66:	4013      	ands	r3, r2
 8002d68:	2201      	movs	r2, #1
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <HAL_DMA_IRQHandler+0x160>)
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2225      	movs	r2, #37	@ 0x25
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2224      	movs	r2, #36	@ 0x24
 8002d84:	2100      	movs	r1, #0
 8002d86:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	0010      	movs	r0, r2
 8002d98:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	46c0      	nop			@ (mov r8, r8)
}
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b004      	add	sp, #16
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40020000 	.word	0x40020000

08002da8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2225      	movs	r2, #37	@ 0x25
 8002db4:	5c9b      	ldrb	r3, [r3, r2]
 8002db6:	b2db      	uxtb	r3, r3
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002dd6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d004      	beq.n	8002dea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002de8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002dea:	4b14      	ldr	r3, [pc, #80]	@ (8002e3c <DMA_SetConfig+0x7c>)
 8002dec:	6859      	ldr	r1, [r3, #4]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	221c      	movs	r2, #28
 8002df4:	4013      	ands	r3, r2
 8002df6:	2201      	movs	r2, #1
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	4b10      	ldr	r3, [pc, #64]	@ (8002e3c <DMA_SetConfig+0x7c>)
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b10      	cmp	r3, #16
 8002e0e:	d108      	bne.n	8002e22 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e20:	e007      	b.n	8002e32 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	60da      	str	r2, [r3, #12]
}
 8002e32:	46c0      	nop			@ (mov r8, r8)
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b004      	add	sp, #16
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	46c0      	nop			@ (mov r8, r8)
 8002e3c:	40020000 	.word	0x40020000

08002e40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	001a      	movs	r2, r3
 8002e4e:	23ff      	movs	r3, #255	@ 0xff
 8002e50:	4013      	ands	r3, r2
 8002e52:	3b08      	subs	r3, #8
 8002e54:	2114      	movs	r1, #20
 8002e56:	0018      	movs	r0, r3
 8002e58:	f7fd f960 	bl	800011c <__udivsi3>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002e66:	4a0a      	ldr	r2, [pc, #40]	@ (8002e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002e68:	4694      	mov	ip, r2
 8002e6a:	4463      	add	r3, ip
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	001a      	movs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a07      	ldr	r2, [pc, #28]	@ (8002e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002e78:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	221c      	movs	r2, #28
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2201      	movs	r2, #1
 8002e82:	409a      	lsls	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002e88:	46c0      	nop			@ (mov r8, r8)
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b004      	add	sp, #16
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	10008200 	.word	0x10008200
 8002e94:	40020880 	.word	0x40020880

08002e98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	22ff      	movs	r2, #255	@ 0xff
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002eae:	4694      	mov	ip, r2
 8002eb0:	4463      	add	r3, ip
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	001a      	movs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a07      	ldr	r2, [pc, #28]	@ (8002edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002ebe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2201      	movs	r2, #1
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002ed0:	46c0      	nop			@ (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b004      	add	sp, #16
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	1000823f 	.word	0x1000823f
 8002edc:	40020940 	.word	0x40020940

08002ee0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002eee:	e153      	b.n	8003198 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4091      	lsls	r1, r2
 8002efa:	000a      	movs	r2, r1
 8002efc:	4013      	ands	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d100      	bne.n	8002f08 <HAL_GPIO_Init+0x28>
 8002f06:	e144      	b.n	8003192 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x38>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b12      	cmp	r3, #18
 8002f16:	d125      	bne.n	8002f64 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	08da      	lsrs	r2, r3, #3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3208      	adds	r2, #8
 8002f20:	0092      	lsls	r2, r2, #2
 8002f22:	58d3      	ldr	r3, [r2, r3]
 8002f24:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	2207      	movs	r2, #7
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	220f      	movs	r2, #15
 8002f30:	409a      	lsls	r2, r3
 8002f32:	0013      	movs	r3, r2
 8002f34:	43da      	mvns	r2, r3
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	220f      	movs	r2, #15
 8002f42:	401a      	ands	r2, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2107      	movs	r1, #7
 8002f48:	400b      	ands	r3, r1
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	0013      	movs	r3, r2
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	08da      	lsrs	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3208      	adds	r2, #8
 8002f5e:	0092      	lsls	r2, r2, #2
 8002f60:	6979      	ldr	r1, [r7, #20]
 8002f62:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2203      	movs	r2, #3
 8002f70:	409a      	lsls	r2, r3
 8002f72:	0013      	movs	r3, r2
 8002f74:	43da      	mvns	r2, r3
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2203      	movs	r2, #3
 8002f82:	401a      	ands	r2, r3
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	0013      	movs	r3, r2
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_GPIO_Init+0xd8>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d007      	beq.n	8002fb8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fac:	2b11      	cmp	r3, #17
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b12      	cmp	r3, #18
 8002fb6:	d130      	bne.n	800301a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	0013      	movs	r3, r2
 8002fc8:	43da      	mvns	r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	0013      	movs	r3, r2
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fee:	2201      	movs	r2, #1
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	0013      	movs	r3, r2
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	2201      	movs	r2, #1
 8003006:	401a      	ands	r2, r3
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	409a      	lsls	r2, r3
 800300c:	0013      	movs	r3, r2
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d017      	beq.n	8003052 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	2203      	movs	r2, #3
 800302e:	409a      	lsls	r2, r3
 8003030:	0013      	movs	r3, r2
 8003032:	43da      	mvns	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	4013      	ands	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	409a      	lsls	r2, r3
 8003044:	0013      	movs	r3, r2
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	2380      	movs	r3, #128	@ 0x80
 8003058:	055b      	lsls	r3, r3, #21
 800305a:	4013      	ands	r3, r2
 800305c:	d100      	bne.n	8003060 <HAL_GPIO_Init+0x180>
 800305e:	e098      	b.n	8003192 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003060:	4a53      	ldr	r2, [pc, #332]	@ (80031b0 <HAL_GPIO_Init+0x2d0>)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	089b      	lsrs	r3, r3, #2
 8003066:	3318      	adds	r3, #24
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	589b      	ldr	r3, [r3, r2]
 800306c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	2203      	movs	r2, #3
 8003072:	4013      	ands	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	220f      	movs	r2, #15
 8003078:	409a      	lsls	r2, r3
 800307a:	0013      	movs	r3, r2
 800307c:	43da      	mvns	r2, r3
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	4013      	ands	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	23a0      	movs	r3, #160	@ 0xa0
 8003088:	05db      	lsls	r3, r3, #23
 800308a:	429a      	cmp	r2, r3
 800308c:	d019      	beq.n	80030c2 <HAL_GPIO_Init+0x1e2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a48      	ldr	r2, [pc, #288]	@ (80031b4 <HAL_GPIO_Init+0x2d4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_GPIO_Init+0x1de>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a47      	ldr	r2, [pc, #284]	@ (80031b8 <HAL_GPIO_Init+0x2d8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00d      	beq.n	80030ba <HAL_GPIO_Init+0x1da>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a46      	ldr	r2, [pc, #280]	@ (80031bc <HAL_GPIO_Init+0x2dc>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d007      	beq.n	80030b6 <HAL_GPIO_Init+0x1d6>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a45      	ldr	r2, [pc, #276]	@ (80031c0 <HAL_GPIO_Init+0x2e0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d101      	bne.n	80030b2 <HAL_GPIO_Init+0x1d2>
 80030ae:	2305      	movs	r3, #5
 80030b0:	e008      	b.n	80030c4 <HAL_GPIO_Init+0x1e4>
 80030b2:	2306      	movs	r3, #6
 80030b4:	e006      	b.n	80030c4 <HAL_GPIO_Init+0x1e4>
 80030b6:	2303      	movs	r3, #3
 80030b8:	e004      	b.n	80030c4 <HAL_GPIO_Init+0x1e4>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e002      	b.n	80030c4 <HAL_GPIO_Init+0x1e4>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_GPIO_Init+0x1e4>
 80030c2:	2300      	movs	r3, #0
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	2103      	movs	r1, #3
 80030c8:	400a      	ands	r2, r1
 80030ca:	00d2      	lsls	r2, r2, #3
 80030cc:	4093      	lsls	r3, r2
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80030d4:	4936      	ldr	r1, [pc, #216]	@ (80031b0 <HAL_GPIO_Init+0x2d0>)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	089b      	lsrs	r3, r3, #2
 80030da:	3318      	adds	r3, #24
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80030e2:	4a33      	ldr	r2, [pc, #204]	@ (80031b0 <HAL_GPIO_Init+0x2d0>)
 80030e4:	2380      	movs	r3, #128	@ 0x80
 80030e6:	58d3      	ldr	r3, [r2, r3]
 80030e8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	43da      	mvns	r2, r3
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	4013      	ands	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	2380      	movs	r3, #128	@ 0x80
 80030fa:	025b      	lsls	r3, r3, #9
 80030fc:	4013      	ands	r3, r2
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003108:	4929      	ldr	r1, [pc, #164]	@ (80031b0 <HAL_GPIO_Init+0x2d0>)
 800310a:	2280      	movs	r2, #128	@ 0x80
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8003110:	4a27      	ldr	r2, [pc, #156]	@ (80031b0 <HAL_GPIO_Init+0x2d0>)
 8003112:	2384      	movs	r3, #132	@ 0x84
 8003114:	58d3      	ldr	r3, [r2, r3]
 8003116:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	43da      	mvns	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	4013      	ands	r3, r2
 8003120:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	2380      	movs	r3, #128	@ 0x80
 8003128:	029b      	lsls	r3, r3, #10
 800312a:	4013      	ands	r3, r2
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003136:	491e      	ldr	r1, [pc, #120]	@ (80031b0 <HAL_GPIO_Init+0x2d0>)
 8003138:	2284      	movs	r2, #132	@ 0x84
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800313e:	4b1c      	ldr	r3, [pc, #112]	@ (80031b0 <HAL_GPIO_Init+0x2d0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	43da      	mvns	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	4013      	ands	r3, r2
 800314c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	2380      	movs	r3, #128	@ 0x80
 8003154:	035b      	lsls	r3, r3, #13
 8003156:	4013      	ands	r3, r2
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003162:	4b13      	ldr	r3, [pc, #76]	@ (80031b0 <HAL_GPIO_Init+0x2d0>)
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003168:	4b11      	ldr	r3, [pc, #68]	@ (80031b0 <HAL_GPIO_Init+0x2d0>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	43da      	mvns	r2, r3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	4013      	ands	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	2380      	movs	r3, #128	@ 0x80
 800317e:	039b      	lsls	r3, r3, #14
 8003180:	4013      	ands	r3, r2
 8003182:	d003      	beq.n	800318c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800318c:	4b08      	ldr	r3, [pc, #32]	@ (80031b0 <HAL_GPIO_Init+0x2d0>)
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	3301      	adds	r3, #1
 8003196:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	40da      	lsrs	r2, r3
 80031a0:	1e13      	subs	r3, r2, #0
 80031a2:	d000      	beq.n	80031a6 <HAL_GPIO_Init+0x2c6>
 80031a4:	e6a4      	b.n	8002ef0 <HAL_GPIO_Init+0x10>
  }
}
 80031a6:	46c0      	nop			@ (mov r8, r8)
 80031a8:	46c0      	nop			@ (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b006      	add	sp, #24
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021800 	.word	0x40021800
 80031b4:	50000400 	.word	0x50000400
 80031b8:	50000800 	.word	0x50000800
 80031bc:	50000c00 	.word	0x50000c00
 80031c0:	50001400 	.word	0x50001400

080031c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	000a      	movs	r2, r1
 80031ce:	1cbb      	adds	r3, r7, #2
 80031d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	1cba      	adds	r2, r7, #2
 80031d8:	8812      	ldrh	r2, [r2, #0]
 80031da:	4013      	ands	r3, r2
 80031dc:	d004      	beq.n	80031e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80031de:	230f      	movs	r3, #15
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	2201      	movs	r2, #1
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	e003      	b.n	80031f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031e8:	230f      	movs	r3, #15
 80031ea:	18fb      	adds	r3, r7, r3
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80031f0:	230f      	movs	r3, #15
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	781b      	ldrb	r3, [r3, #0]
}
 80031f6:	0018      	movs	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b004      	add	sp, #16
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	0008      	movs	r0, r1
 8003208:	0011      	movs	r1, r2
 800320a:	1cbb      	adds	r3, r7, #2
 800320c:	1c02      	adds	r2, r0, #0
 800320e:	801a      	strh	r2, [r3, #0]
 8003210:	1c7b      	adds	r3, r7, #1
 8003212:	1c0a      	adds	r2, r1, #0
 8003214:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003216:	1c7b      	adds	r3, r7, #1
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d004      	beq.n	8003228 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800321e:	1cbb      	adds	r3, r7, #2
 8003220:	881a      	ldrh	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003226:	e003      	b.n	8003230 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003228:	1cbb      	adds	r3, r7, #2
 800322a:	881a      	ldrh	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003230:	46c0      	nop			@ (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	000a      	movs	r2, r1
 8003242:	1cbb      	adds	r3, r7, #2
 8003244:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800324c:	1cbb      	adds	r3, r7, #2
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4013      	ands	r3, r2
 8003254:	041a      	lsls	r2, r3, #16
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	43db      	mvns	r3, r3
 800325a:	1cb9      	adds	r1, r7, #2
 800325c:	8809      	ldrh	r1, [r1, #0]
 800325e:	400b      	ands	r3, r1
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	619a      	str	r2, [r3, #24]
}
 8003266:	46c0      	nop			@ (mov r8, r8)
 8003268:	46bd      	mov	sp, r7
 800326a:	b004      	add	sp, #16
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	0002      	movs	r2, r0
 8003278:	1dbb      	adds	r3, r7, #6
 800327a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800327c:	4b10      	ldr	r3, [pc, #64]	@ (80032c0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	1dba      	adds	r2, r7, #6
 8003282:	8812      	ldrh	r2, [r2, #0]
 8003284:	4013      	ands	r3, r2
 8003286:	d008      	beq.n	800329a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003288:	4b0d      	ldr	r3, [pc, #52]	@ (80032c0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800328a:	1dba      	adds	r2, r7, #6
 800328c:	8812      	ldrh	r2, [r2, #0]
 800328e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003290:	1dbb      	adds	r3, r7, #6
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	0018      	movs	r0, r3
 8003296:	f000 f815 	bl	80032c4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800329a:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	1dba      	adds	r2, r7, #6
 80032a0:	8812      	ldrh	r2, [r2, #0]
 80032a2:	4013      	ands	r3, r2
 80032a4:	d008      	beq.n	80032b8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80032a6:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80032a8:	1dba      	adds	r2, r7, #6
 80032aa:	8812      	ldrh	r2, [r2, #0]
 80032ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80032ae:	1dbb      	adds	r3, r7, #6
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 f810 	bl	80032d8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80032b8:	46c0      	nop			@ (mov r8, r8)
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b002      	add	sp, #8
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021800 	.word	0x40021800

080032c4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	0002      	movs	r2, r0
 80032cc:	1dbb      	adds	r3, r7, #6
 80032ce:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80032d0:	46c0      	nop			@ (mov r8, r8)
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b002      	add	sp, #8
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	0002      	movs	r2, r0
 80032e0:	1dbb      	adds	r3, r7, #6
 80032e2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80032e4:	46c0      	nop			@ (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b002      	add	sp, #8
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e08f      	b.n	800341e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2241      	movs	r2, #65	@ 0x41
 8003302:	5c9b      	ldrb	r3, [r3, r2]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d107      	bne.n	800331a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2240      	movs	r2, #64	@ 0x40
 800330e:	2100      	movs	r1, #0
 8003310:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	0018      	movs	r0, r3
 8003316:	f7fd fc4d 	bl	8000bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2241      	movs	r2, #65	@ 0x41
 800331e:	2124      	movs	r1, #36	@ 0x24
 8003320:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2101      	movs	r1, #1
 800332e:	438a      	bics	r2, r1
 8003330:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	493b      	ldr	r1, [pc, #236]	@ (8003428 <HAL_I2C_Init+0x13c>)
 800333c:	400a      	ands	r2, r1
 800333e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4938      	ldr	r1, [pc, #224]	@ (800342c <HAL_I2C_Init+0x140>)
 800334c:	400a      	ands	r2, r1
 800334e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d108      	bne.n	800336a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2180      	movs	r1, #128	@ 0x80
 8003362:	0209      	lsls	r1, r1, #8
 8003364:	430a      	orrs	r2, r1
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	e007      	b.n	800337a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2184      	movs	r1, #132	@ 0x84
 8003374:	0209      	lsls	r1, r1, #8
 8003376:	430a      	orrs	r2, r1
 8003378:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d109      	bne.n	8003396 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2180      	movs	r1, #128	@ 0x80
 800338e:	0109      	lsls	r1, r1, #4
 8003390:	430a      	orrs	r2, r1
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	e007      	b.n	80033a6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4923      	ldr	r1, [pc, #140]	@ (8003430 <HAL_I2C_Init+0x144>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4920      	ldr	r1, [pc, #128]	@ (8003434 <HAL_I2C_Init+0x148>)
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	491a      	ldr	r1, [pc, #104]	@ (800342c <HAL_I2C_Init+0x140>)
 80033c2:	400a      	ands	r2, r1
 80033c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69d9      	ldr	r1, [r3, #28]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1a      	ldr	r2, [r3, #32]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2101      	movs	r1, #1
 80033fc:	430a      	orrs	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2241      	movs	r2, #65	@ 0x41
 800340a:	2120      	movs	r1, #32
 800340c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2242      	movs	r2, #66	@ 0x42
 8003418:	2100      	movs	r1, #0
 800341a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	0018      	movs	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	b002      	add	sp, #8
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	f0ffffff 	.word	0xf0ffffff
 800342c:	ffff7fff 	.word	0xffff7fff
 8003430:	fffff7ff 	.word	0xfffff7ff
 8003434:	02008000 	.word	0x02008000

08003438 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b089      	sub	sp, #36	@ 0x24
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	000c      	movs	r4, r1
 8003442:	0010      	movs	r0, r2
 8003444:	0019      	movs	r1, r3
 8003446:	230a      	movs	r3, #10
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	1c22      	adds	r2, r4, #0
 800344c:	801a      	strh	r2, [r3, #0]
 800344e:	2308      	movs	r3, #8
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	1c02      	adds	r2, r0, #0
 8003454:	801a      	strh	r2, [r3, #0]
 8003456:	1dbb      	adds	r3, r7, #6
 8003458:	1c0a      	adds	r2, r1, #0
 800345a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2241      	movs	r2, #65	@ 0x41
 8003460:	5c9b      	ldrb	r3, [r3, r2]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b20      	cmp	r3, #32
 8003466:	d000      	beq.n	800346a <HAL_I2C_Mem_Write+0x32>
 8003468:	e10c      	b.n	8003684 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800346a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346c:	2b00      	cmp	r3, #0
 800346e:	d004      	beq.n	800347a <HAL_I2C_Mem_Write+0x42>
 8003470:	232c      	movs	r3, #44	@ 0x2c
 8003472:	18fb      	adds	r3, r7, r3
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2280      	movs	r2, #128	@ 0x80
 800347e:	0092      	lsls	r2, r2, #2
 8003480:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e0ff      	b.n	8003686 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2240      	movs	r2, #64	@ 0x40
 800348a:	5c9b      	ldrb	r3, [r3, r2]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_I2C_Mem_Write+0x5c>
 8003490:	2302      	movs	r3, #2
 8003492:	e0f8      	b.n	8003686 <HAL_I2C_Mem_Write+0x24e>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2240      	movs	r2, #64	@ 0x40
 8003498:	2101      	movs	r1, #1
 800349a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800349c:	f7fe facc 	bl	8001a38 <HAL_GetTick>
 80034a0:	0003      	movs	r3, r0
 80034a2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034a4:	2380      	movs	r3, #128	@ 0x80
 80034a6:	0219      	lsls	r1, r3, #8
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	2319      	movs	r3, #25
 80034b0:	2201      	movs	r2, #1
 80034b2:	f001 fcf7 	bl	8004ea4 <I2C_WaitOnFlagUntilTimeout>
 80034b6:	1e03      	subs	r3, r0, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e0e3      	b.n	8003686 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2241      	movs	r2, #65	@ 0x41
 80034c2:	2121      	movs	r1, #33	@ 0x21
 80034c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2242      	movs	r2, #66	@ 0x42
 80034ca:	2140      	movs	r1, #64	@ 0x40
 80034cc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	222c      	movs	r2, #44	@ 0x2c
 80034de:	18ba      	adds	r2, r7, r2
 80034e0:	8812      	ldrh	r2, [r2, #0]
 80034e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034ea:	1dbb      	adds	r3, r7, #6
 80034ec:	881c      	ldrh	r4, [r3, #0]
 80034ee:	2308      	movs	r3, #8
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	881a      	ldrh	r2, [r3, #0]
 80034f4:	230a      	movs	r3, #10
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	8819      	ldrh	r1, [r3, #0]
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	0023      	movs	r3, r4
 8003506:	f000 fe9b 	bl	8004240 <I2C_RequestMemoryWrite>
 800350a:	1e03      	subs	r3, r0, #0
 800350c:	d005      	beq.n	800351a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2240      	movs	r2, #64	@ 0x40
 8003512:	2100      	movs	r1, #0
 8003514:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0b5      	b.n	8003686 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800351e:	b29b      	uxth	r3, r3
 8003520:	2bff      	cmp	r3, #255	@ 0xff
 8003522:	d911      	bls.n	8003548 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	22ff      	movs	r2, #255	@ 0xff
 8003528:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352e:	b2da      	uxtb	r2, r3
 8003530:	2380      	movs	r3, #128	@ 0x80
 8003532:	045c      	lsls	r4, r3, #17
 8003534:	230a      	movs	r3, #10
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	8819      	ldrh	r1, [r3, #0]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	2300      	movs	r3, #0
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	0023      	movs	r3, r4
 8003542:	f001 fe89 	bl	8005258 <I2C_TransferConfig>
 8003546:	e012      	b.n	800356e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003556:	b2da      	uxtb	r2, r3
 8003558:	2380      	movs	r3, #128	@ 0x80
 800355a:	049c      	lsls	r4, r3, #18
 800355c:	230a      	movs	r3, #10
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	8819      	ldrh	r1, [r3, #0]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	2300      	movs	r3, #0
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	0023      	movs	r3, r4
 800356a:	f001 fe75 	bl	8005258 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	0018      	movs	r0, r3
 8003576:	f001 fced 	bl	8004f54 <I2C_WaitOnTXISFlagUntilTimeout>
 800357a:	1e03      	subs	r3, r0, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e081      	b.n	8003686 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	781a      	ldrb	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d03a      	beq.n	8003632 <HAL_I2C_Mem_Write+0x1fa>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d136      	bne.n	8003632 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	0013      	movs	r3, r2
 80035ce:	2200      	movs	r2, #0
 80035d0:	2180      	movs	r1, #128	@ 0x80
 80035d2:	f001 fc67 	bl	8004ea4 <I2C_WaitOnFlagUntilTimeout>
 80035d6:	1e03      	subs	r3, r0, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e053      	b.n	8003686 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2bff      	cmp	r3, #255	@ 0xff
 80035e6:	d911      	bls.n	800360c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	22ff      	movs	r2, #255	@ 0xff
 80035ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	2380      	movs	r3, #128	@ 0x80
 80035f6:	045c      	lsls	r4, r3, #17
 80035f8:	230a      	movs	r3, #10
 80035fa:	18fb      	adds	r3, r7, r3
 80035fc:	8819      	ldrh	r1, [r3, #0]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	2300      	movs	r3, #0
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	0023      	movs	r3, r4
 8003606:	f001 fe27 	bl	8005258 <I2C_TransferConfig>
 800360a:	e012      	b.n	8003632 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800361a:	b2da      	uxtb	r2, r3
 800361c:	2380      	movs	r3, #128	@ 0x80
 800361e:	049c      	lsls	r4, r3, #18
 8003620:	230a      	movs	r3, #10
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	8819      	ldrh	r1, [r3, #0]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	2300      	movs	r3, #0
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	0023      	movs	r3, r4
 800362e:	f001 fe13 	bl	8005258 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d198      	bne.n	800356e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	0018      	movs	r0, r3
 8003644:	f001 fccc 	bl	8004fe0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003648:	1e03      	subs	r3, r0, #0
 800364a:	d001      	beq.n	8003650 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e01a      	b.n	8003686 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2220      	movs	r2, #32
 8003656:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	490b      	ldr	r1, [pc, #44]	@ (8003690 <HAL_I2C_Mem_Write+0x258>)
 8003664:	400a      	ands	r2, r1
 8003666:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2241      	movs	r2, #65	@ 0x41
 800366c:	2120      	movs	r1, #32
 800366e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2242      	movs	r2, #66	@ 0x42
 8003674:	2100      	movs	r1, #0
 8003676:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2240      	movs	r2, #64	@ 0x40
 800367c:	2100      	movs	r1, #0
 800367e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	e000      	b.n	8003686 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003684:	2302      	movs	r3, #2
  }
}
 8003686:	0018      	movs	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	b007      	add	sp, #28
 800368c:	bd90      	pop	{r4, r7, pc}
 800368e:	46c0      	nop			@ (mov r8, r8)
 8003690:	fe00e800 	.word	0xfe00e800

08003694 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003694:	b5b0      	push	{r4, r5, r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af02      	add	r7, sp, #8
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	000c      	movs	r4, r1
 800369e:	0010      	movs	r0, r2
 80036a0:	0019      	movs	r1, r3
 80036a2:	230a      	movs	r3, #10
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	1c22      	adds	r2, r4, #0
 80036a8:	801a      	strh	r2, [r3, #0]
 80036aa:	2308      	movs	r3, #8
 80036ac:	18fb      	adds	r3, r7, r3
 80036ae:	1c02      	adds	r2, r0, #0
 80036b0:	801a      	strh	r2, [r3, #0]
 80036b2:	1dbb      	adds	r3, r7, #6
 80036b4:	1c0a      	adds	r2, r1, #0
 80036b6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2241      	movs	r2, #65	@ 0x41
 80036bc:	5c9b      	ldrb	r3, [r3, r2]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d000      	beq.n	80036c6 <HAL_I2C_Mem_Write_DMA+0x32>
 80036c4:	e0d8      	b.n	8003878 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d004      	beq.n	80036d6 <HAL_I2C_Mem_Write_DMA+0x42>
 80036cc:	232c      	movs	r3, #44	@ 0x2c
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d105      	bne.n	80036e2 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2280      	movs	r2, #128	@ 0x80
 80036da:	0092      	lsls	r2, r2, #2
 80036dc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0cb      	b.n	800387a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699a      	ldr	r2, [r3, #24]
 80036e8:	2380      	movs	r3, #128	@ 0x80
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	401a      	ands	r2, r3
 80036ee:	2380      	movs	r3, #128	@ 0x80
 80036f0:	021b      	lsls	r3, r3, #8
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d101      	bne.n	80036fa <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 80036f6:	2302      	movs	r3, #2
 80036f8:	e0bf      	b.n	800387a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2240      	movs	r2, #64	@ 0x40
 80036fe:	5c9b      	ldrb	r3, [r3, r2]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_I2C_Mem_Write_DMA+0x74>
 8003704:	2302      	movs	r3, #2
 8003706:	e0b8      	b.n	800387a <HAL_I2C_Mem_Write_DMA+0x1e6>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2240      	movs	r2, #64	@ 0x40
 800370c:	2101      	movs	r1, #1
 800370e:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2241      	movs	r2, #65	@ 0x41
 8003714:	2121      	movs	r1, #33	@ 0x21
 8003716:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2242      	movs	r2, #66	@ 0x42
 800371c:	2140      	movs	r1, #64	@ 0x40
 800371e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800372a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	222c      	movs	r2, #44	@ 0x2c
 8003730:	18ba      	adds	r2, r7, r2
 8003732:	8812      	ldrh	r2, [r2, #0]
 8003734:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4a52      	ldr	r2, [pc, #328]	@ (8003884 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 800373a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a52      	ldr	r2, [pc, #328]	@ (8003888 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8003740:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8003742:	230a      	movs	r3, #10
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	881a      	ldrh	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	2bff      	cmp	r3, #255	@ 0xff
 8003754:	d903      	bls.n	800375e <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	22ff      	movs	r2, #255	@ 0xff
 800375a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800375c:	e004      	b.n	8003768 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003768:	1dbb      	adds	r3, r7, #6
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d10b      	bne.n	8003788 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003770:	2308      	movs	r3, #8
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	b2da      	uxtb	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	4252      	negs	r2, r2
 8003784:	651a      	str	r2, [r3, #80]	@ 0x50
 8003786:	e00e      	b.n	80037a6 <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003788:	2108      	movs	r1, #8
 800378a:	187b      	adds	r3, r7, r1
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	b29b      	uxth	r3, r3
 8003792:	b2da      	uxtb	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800379a:	187b      	adds	r3, r7, r1
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	001a      	movs	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d023      	beq.n	80037f6 <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b2:	4a36      	ldr	r2, [pc, #216]	@ (800388c <HAL_I2C_Mem_Write_DMA+0x1f8>)
 80037b4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ba:	4a35      	ldr	r2, [pc, #212]	@ (8003890 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 80037bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c2:	2200      	movs	r2, #0
 80037c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ca:	2200      	movs	r2, #0
 80037cc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80037d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3328      	adds	r3, #40	@ 0x28
 80037da:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80037e0:	2517      	movs	r5, #23
 80037e2:	197c      	adds	r4, r7, r5
 80037e4:	f7ff f92c 	bl	8002a40 <HAL_DMA_Start_IT>
 80037e8:	0003      	movs	r3, r0
 80037ea:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80037ec:	197b      	adds	r3, r7, r5
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d12d      	bne.n	8003850 <HAL_I2C_Mem_Write_DMA+0x1bc>
 80037f4:	e013      	b.n	800381e <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2241      	movs	r2, #65	@ 0x41
 80037fa:	2120      	movs	r1, #32
 80037fc:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2242      	movs	r2, #66	@ 0x42
 8003802:	2100      	movs	r1, #0
 8003804:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380a:	2280      	movs	r2, #128	@ 0x80
 800380c:	431a      	orrs	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2240      	movs	r2, #64	@ 0x40
 8003816:	2100      	movs	r1, #0
 8003818:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e02d      	b.n	800387a <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800381e:	1dbb      	adds	r3, r7, #6
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	2380      	movs	r3, #128	@ 0x80
 8003826:	045c      	lsls	r4, r3, #17
 8003828:	230a      	movs	r3, #10
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	8819      	ldrh	r1, [r3, #0]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	4b18      	ldr	r3, [pc, #96]	@ (8003894 <HAL_I2C_Mem_Write_DMA+0x200>)
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	0023      	movs	r3, r4
 8003836:	f001 fd0f 	bl	8005258 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2240      	movs	r2, #64	@ 0x40
 800383e:	2100      	movs	r1, #0
 8003840:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2101      	movs	r1, #1
 8003846:	0018      	movs	r0, r3
 8003848:	f001 fd40 	bl	80052cc <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	e014      	b.n	800387a <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2241      	movs	r2, #65	@ 0x41
 8003854:	2120      	movs	r1, #32
 8003856:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2242      	movs	r2, #66	@ 0x42
 800385c:	2100      	movs	r1, #0
 800385e:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003864:	2210      	movs	r2, #16
 8003866:	431a      	orrs	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2240      	movs	r2, #64	@ 0x40
 8003870:	2100      	movs	r1, #0
 8003872:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	0018      	movs	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	b006      	add	sp, #24
 8003880:	bdb0      	pop	{r4, r5, r7, pc}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	ffff0000 	.word	0xffff0000
 8003888:	08003e19 	.word	0x08003e19
 800388c:	08004d95 	.word	0x08004d95
 8003890:	08004e35 	.word	0x08004e35
 8003894:	80002000 	.word	0x80002000

08003898 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	68f9      	ldr	r1, [r7, #12]
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
  }
}
 80038c4:	46c0      	nop			@ (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b004      	add	sp, #16
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	2380      	movs	r3, #128	@ 0x80
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	4013      	ands	r3, r2
 80038ec:	d00e      	beq.n	800390c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2280      	movs	r2, #128	@ 0x80
 80038f2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80038f4:	d00a      	beq.n	800390c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fa:	2201      	movs	r2, #1
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2280      	movs	r2, #128	@ 0x80
 8003908:	0052      	lsls	r2, r2, #1
 800390a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	2380      	movs	r3, #128	@ 0x80
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4013      	ands	r3, r2
 8003914:	d00e      	beq.n	8003934 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2280      	movs	r2, #128	@ 0x80
 800391a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800391c:	d00a      	beq.n	8003934 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003922:	2208      	movs	r2, #8
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2280      	movs	r2, #128	@ 0x80
 8003930:	00d2      	lsls	r2, r2, #3
 8003932:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	2380      	movs	r3, #128	@ 0x80
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4013      	ands	r3, r2
 800393c:	d00e      	beq.n	800395c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2280      	movs	r2, #128	@ 0x80
 8003942:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003944:	d00a      	beq.n	800395c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394a:	2202      	movs	r2, #2
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2280      	movs	r2, #128	@ 0x80
 8003958:	0092      	lsls	r2, r2, #2
 800395a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003960:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	220b      	movs	r2, #11
 8003966:	4013      	ands	r3, r2
 8003968:	d005      	beq.n	8003976 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	0011      	movs	r1, r2
 8003970:	0018      	movs	r0, r3
 8003972:	f001 f8c1 	bl	8004af8 <I2C_ITError>
  }
}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	b006      	add	sp, #24
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	46bd      	mov	sp, r7
 800398a:	b002      	add	sp, #8
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003996:	46c0      	nop			@ (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	b002      	add	sp, #8
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b002      	add	sp, #8
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b002      	add	sp, #8
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	0008      	movs	r0, r1
 80039c8:	0011      	movs	r1, r2
 80039ca:	1cfb      	adds	r3, r7, #3
 80039cc:	1c02      	adds	r2, r0, #0
 80039ce:	701a      	strb	r2, [r3, #0]
 80039d0:	003b      	movs	r3, r7
 80039d2:	1c0a      	adds	r2, r1, #0
 80039d4:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80039d6:	46c0      	nop			@ (mov r8, r8)
 80039d8:	46bd      	mov	sp, r7
 80039da:	b002      	add	sp, #8
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b002      	add	sp, #8
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b002      	add	sp, #8
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a06:	46c0      	nop			@ (mov r8, r8)
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b002      	add	sp, #8
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a16:	46c0      	nop			@ (mov r8, r8)
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	b002      	add	sp, #8
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a30:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2240      	movs	r2, #64	@ 0x40
 8003a3a:	5c9b      	ldrb	r3, [r3, r2]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <I2C_Slave_ISR_IT+0x24>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e0e7      	b.n	8003c14 <I2C_Slave_ISR_IT+0x1f4>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2240      	movs	r2, #64	@ 0x40
 8003a48:	2101      	movs	r1, #1
 8003a4a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	4013      	ands	r3, r2
 8003a52:	d00a      	beq.n	8003a6a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2220      	movs	r2, #32
 8003a58:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a5a:	d006      	beq.n	8003a6a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	0011      	movs	r1, r2
 8003a62:	0018      	movs	r0, r3
 8003a64:	f000 fe68 	bl	8004738 <I2C_ITSlaveCplt>
 8003a68:	e0cf      	b.n	8003c0a <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2210      	movs	r2, #16
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d052      	beq.n	8003b18 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2210      	movs	r2, #16
 8003a76:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a78:	d04e      	beq.n	8003b18 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d12d      	bne.n	8003ae0 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2241      	movs	r2, #65	@ 0x41
 8003a88:	5c9b      	ldrb	r3, [r3, r2]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b28      	cmp	r3, #40	@ 0x28
 8003a8e:	d10b      	bne.n	8003aa8 <I2C_Slave_ISR_IT+0x88>
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	2380      	movs	r3, #128	@ 0x80
 8003a94:	049b      	lsls	r3, r3, #18
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d106      	bne.n	8003aa8 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	0011      	movs	r1, r2
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f000 ffd1 	bl	8004a48 <I2C_ITListenCplt>
 8003aa6:	e036      	b.n	8003b16 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2241      	movs	r2, #65	@ 0x41
 8003aac:	5c9b      	ldrb	r3, [r3, r2]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b29      	cmp	r3, #41	@ 0x29
 8003ab2:	d110      	bne.n	8003ad6 <I2C_Slave_ISR_IT+0xb6>
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	4a59      	ldr	r2, [pc, #356]	@ (8003c1c <I2C_Slave_ISR_IT+0x1fc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00c      	beq.n	8003ad6 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f001 f941 	bl	8004d4e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f000 fd00 	bl	80044d4 <I2C_ITSlaveSeqCplt>
 8003ad4:	e01f      	b.n	8003b16 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2210      	movs	r2, #16
 8003adc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003ade:	e091      	b.n	8003c04 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aec:	2204      	movs	r2, #4
 8003aee:	431a      	orrs	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <I2C_Slave_ISR_IT+0xe6>
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	2380      	movs	r3, #128	@ 0x80
 8003afe:	045b      	lsls	r3, r3, #17
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d000      	beq.n	8003b06 <I2C_Slave_ISR_IT+0xe6>
 8003b04:	e07e      	b.n	8003c04 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	0011      	movs	r1, r2
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f000 fff2 	bl	8004af8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003b14:	e076      	b.n	8003c04 <I2C_Slave_ISR_IT+0x1e4>
 8003b16:	e075      	b.n	8003c04 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d02f      	beq.n	8003b80 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2204      	movs	r2, #4
 8003b24:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003b26:	d02b      	beq.n	8003b80 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d018      	beq.n	8003b64 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d14c      	bne.n	8003c08 <I2C_Slave_ISR_IT+0x1e8>
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	4a2a      	ldr	r2, [pc, #168]	@ (8003c1c <I2C_Slave_ISR_IT+0x1fc>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d048      	beq.n	8003c08 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f000 fcab 	bl	80044d4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003b7e:	e043      	b.n	8003c08 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	2208      	movs	r2, #8
 8003b84:	4013      	ands	r3, r2
 8003b86:	d00a      	beq.n	8003b9e <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b8e:	d006      	beq.n	8003b9e <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	0011      	movs	r1, r2
 8003b96:	0018      	movs	r0, r3
 8003b98:	f000 fbb6 	bl	8004308 <I2C_ITAddrCplt>
 8003b9c:	e035      	b.n	8003c0a <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d031      	beq.n	8003c0a <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003bac:	d02d      	beq.n	8003c0a <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d018      	beq.n	8003bea <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbc:	781a      	ldrb	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003be8:	e00f      	b.n	8003c0a <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	2380      	movs	r3, #128	@ 0x80
 8003bee:	045b      	lsls	r3, r3, #17
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d002      	beq.n	8003bfa <I2C_Slave_ISR_IT+0x1da>
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d107      	bne.n	8003c0a <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f000 fc69 	bl	80044d4 <I2C_ITSlaveSeqCplt>
 8003c02:	e002      	b.n	8003c0a <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8003c04:	46c0      	nop			@ (mov r8, r8)
 8003c06:	e000      	b.n	8003c0a <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8003c08:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2240      	movs	r2, #64	@ 0x40
 8003c0e:	2100      	movs	r1, #0
 8003c10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	0018      	movs	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b006      	add	sp, #24
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	ffff0000 	.word	0xffff0000

08003c20 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b089      	sub	sp, #36	@ 0x24
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2240      	movs	r2, #64	@ 0x40
 8003c30:	5c9b      	ldrb	r3, [r3, r2]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <I2C_Master_ISR_DMA+0x1a>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e0e7      	b.n	8003e0a <I2C_Master_ISR_DMA+0x1ea>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2240      	movs	r2, #64	@ 0x40
 8003c3e:	2101      	movs	r1, #1
 8003c40:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2210      	movs	r2, #16
 8003c46:	4013      	ands	r3, r2
 8003c48:	d017      	beq.n	8003c7a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2210      	movs	r2, #16
 8003c4e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c50:	d013      	beq.n	8003c7a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2210      	movs	r2, #16
 8003c58:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	2204      	movs	r2, #4
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2120      	movs	r1, #32
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f001 fb2e 	bl	80052cc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	0018      	movs	r0, r3
 8003c74:	f001 f86b 	bl	8004d4e <I2C_Flush_TXDR>
 8003c78:	e0c2      	b.n	8003e00 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2280      	movs	r2, #128	@ 0x80
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d100      	bne.n	8003c84 <I2C_Master_ISR_DMA+0x64>
 8003c82:	e07c      	b.n	8003d7e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2240      	movs	r2, #64	@ 0x40
 8003c88:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003c8a:	d100      	bne.n	8003c8e <I2C_Master_ISR_DMA+0x6e>
 8003c8c:	e077      	b.n	8003d7e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2140      	movs	r1, #64	@ 0x40
 8003c9a:	438a      	bics	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d055      	beq.n	8003d54 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	2312      	movs	r3, #18
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	0592      	lsls	r2, r2, #22
 8003cb6:	0d92      	lsrs	r2, r2, #22
 8003cb8:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2bff      	cmp	r3, #255	@ 0xff
 8003cc2:	d906      	bls.n	8003cd2 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	22ff      	movs	r2, #255	@ 0xff
 8003cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8003cca:	2380      	movs	r3, #128	@ 0x80
 8003ccc:	045b      	lsls	r3, r3, #17
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e010      	b.n	8003cf4 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce0:	4a4c      	ldr	r2, [pc, #304]	@ (8003e14 <I2C_Master_ISR_DMA+0x1f4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d003      	beq.n	8003cee <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	e002      	b.n	8003cf4 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003cee:	2380      	movs	r3, #128	@ 0x80
 8003cf0:	049b      	lsls	r3, r3, #18
 8003cf2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	697c      	ldr	r4, [r7, #20]
 8003cfc:	2312      	movs	r3, #18
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	8819      	ldrh	r1, [r3, #0]
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	2300      	movs	r3, #0
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	0023      	movs	r3, r4
 8003d0a:	f001 faa5 	bl	8005258 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2241      	movs	r2, #65	@ 0x41
 8003d24:	5c9b      	ldrb	r3, [r3, r2]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b22      	cmp	r3, #34	@ 0x22
 8003d2a:	d109      	bne.n	8003d40 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2180      	movs	r1, #128	@ 0x80
 8003d38:	0209      	lsls	r1, r1, #8
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003d3e:	e05f      	b.n	8003e00 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2180      	movs	r1, #128	@ 0x80
 8003d4c:	01c9      	lsls	r1, r1, #7
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003d52:	e055      	b.n	8003e00 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	2380      	movs	r3, #128	@ 0x80
 8003d5c:	049b      	lsls	r3, r3, #18
 8003d5e:	401a      	ands	r2, r3
 8003d60:	2380      	movs	r3, #128	@ 0x80
 8003d62:	049b      	lsls	r3, r3, #18
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d004      	beq.n	8003d72 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f000 fb70 	bl	8004450 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003d70:	e046      	b.n	8003e00 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2140      	movs	r1, #64	@ 0x40
 8003d76:	0018      	movs	r0, r3
 8003d78:	f000 febe 	bl	8004af8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003d7c:	e040      	b.n	8003e00 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2240      	movs	r2, #64	@ 0x40
 8003d82:	4013      	ands	r3, r2
 8003d84:	d02c      	beq.n	8003de0 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2240      	movs	r2, #64	@ 0x40
 8003d8a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003d8c:	d028      	beq.n	8003de0 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d11d      	bne.n	8003dd4 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	2380      	movs	r3, #128	@ 0x80
 8003da0:	049b      	lsls	r3, r3, #18
 8003da2:	401a      	ands	r2, r3
 8003da4:	2380      	movs	r3, #128	@ 0x80
 8003da6:	049b      	lsls	r3, r3, #18
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d028      	beq.n	8003dfe <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db0:	4a18      	ldr	r2, [pc, #96]	@ (8003e14 <I2C_Master_ISR_DMA+0x1f4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d109      	bne.n	8003dca <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2180      	movs	r1, #128	@ 0x80
 8003dc2:	01c9      	lsls	r1, r1, #7
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003dc8:	e019      	b.n	8003dfe <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f000 fb3f 	bl	8004450 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003dd2:	e014      	b.n	8003dfe <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2140      	movs	r1, #64	@ 0x40
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f000 fe8d 	bl	8004af8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003dde:	e00e      	b.n	8003dfe <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2220      	movs	r2, #32
 8003de4:	4013      	ands	r3, r2
 8003de6:	d00b      	beq.n	8003e00 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003dee:	d007      	beq.n	8003e00 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	0011      	movs	r1, r2
 8003df6:	0018      	movs	r0, r3
 8003df8:	f000 fbd0 	bl	800459c <I2C_ITMasterCplt>
 8003dfc:	e000      	b.n	8003e00 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8003dfe:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2240      	movs	r2, #64	@ 0x40
 8003e04:	2100      	movs	r1, #0
 8003e06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	b007      	add	sp, #28
 8003e10:	bd90      	pop	{r4, r7, pc}
 8003e12:	46c0      	nop			@ (mov r8, r8)
 8003e14:	ffff0000 	.word	0xffff0000

08003e18 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003e18:	b590      	push	{r4, r7, lr}
 8003e1a:	b089      	sub	sp, #36	@ 0x24
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003e24:	4b90      	ldr	r3, [pc, #576]	@ (8004068 <I2C_Mem_ISR_DMA+0x250>)
 8003e26:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2240      	movs	r2, #64	@ 0x40
 8003e2c:	5c9b      	ldrb	r3, [r3, r2]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <I2C_Mem_ISR_DMA+0x1e>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e113      	b.n	800405e <I2C_Mem_ISR_DMA+0x246>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2240      	movs	r2, #64	@ 0x40
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2210      	movs	r2, #16
 8003e42:	4013      	ands	r3, r2
 8003e44:	d017      	beq.n	8003e76 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2210      	movs	r2, #16
 8003e4a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003e4c:	d013      	beq.n	8003e76 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2210      	movs	r2, #16
 8003e54:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5a:	2204      	movs	r2, #4
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2120      	movs	r1, #32
 8003e66:	0018      	movs	r0, r3
 8003e68:	f001 fa30 	bl	80052cc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f000 ff6d 	bl	8004d4e <I2C_Flush_TXDR>
 8003e74:	e0ee      	b.n	8004054 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d00d      	beq.n	8003e9a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003e84:	d009      	beq.n	8003e9a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e8e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	4252      	negs	r2, r2
 8003e96:	651a      	str	r2, [r3, #80]	@ 0x50
 8003e98:	e0dc      	b.n	8004054 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2280      	movs	r2, #128	@ 0x80
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	d063      	beq.n	8003f6a <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2240      	movs	r2, #64	@ 0x40
 8003ea6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003ea8:	d05f      	beq.n	8003f6a <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2101      	movs	r1, #1
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f001 fa96 	bl	80053e0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2110      	movs	r1, #16
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f001 fa07 	bl	80052cc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d04a      	beq.n	8003f5e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2bff      	cmp	r3, #255	@ 0xff
 8003ed0:	d910      	bls.n	8003ef4 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	22ff      	movs	r2, #255	@ 0xff
 8003ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003edc:	b299      	uxth	r1, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	2380      	movs	r3, #128	@ 0x80
 8003ee6:	045b      	lsls	r3, r3, #17
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	2400      	movs	r4, #0
 8003eec:	9400      	str	r4, [sp, #0]
 8003eee:	f001 f9b3 	bl	8005258 <I2C_TransferConfig>
 8003ef2:	e011      	b.n	8003f18 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f02:	b299      	uxth	r1, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	2380      	movs	r3, #128	@ 0x80
 8003f0c:	049b      	lsls	r3, r3, #18
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	2400      	movs	r4, #0
 8003f12:	9400      	str	r4, [sp, #0]
 8003f14:	f001 f9a0 	bl	8005258 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2241      	movs	r2, #65	@ 0x41
 8003f2e:	5c9b      	ldrb	r3, [r3, r2]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b22      	cmp	r3, #34	@ 0x22
 8003f34:	d109      	bne.n	8003f4a <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2180      	movs	r1, #128	@ 0x80
 8003f42:	0209      	lsls	r1, r1, #8
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003f48:	e084      	b.n	8004054 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2180      	movs	r1, #128	@ 0x80
 8003f56:	01c9      	lsls	r1, r1, #7
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003f5c:	e07a      	b.n	8004054 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2140      	movs	r1, #64	@ 0x40
 8003f62:	0018      	movs	r0, r3
 8003f64:	f000 fdc8 	bl	8004af8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003f68:	e074      	b.n	8004054 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2240      	movs	r2, #64	@ 0x40
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d062      	beq.n	8004038 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2240      	movs	r2, #64	@ 0x40
 8003f76:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003f78:	d05e      	beq.n	8004038 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f001 fa2e 	bl	80053e0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2110      	movs	r1, #16
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f001 f99f 	bl	80052cc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2241      	movs	r2, #65	@ 0x41
 8003f92:	5c9b      	ldrb	r3, [r3, r2]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b22      	cmp	r3, #34	@ 0x22
 8003f98:	d101      	bne.n	8003f9e <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 8003f9a:	4b34      	ldr	r3, [pc, #208]	@ (800406c <I2C_Mem_ISR_DMA+0x254>)
 8003f9c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2bff      	cmp	r3, #255	@ 0xff
 8003fa6:	d911      	bls.n	8003fcc <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	22ff      	movs	r2, #255	@ 0xff
 8003fac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb2:	b299      	uxth	r1, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	2380      	movs	r3, #128	@ 0x80
 8003fbc:	045c      	lsls	r4, r3, #17
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	0023      	movs	r3, r4
 8003fc6:	f001 f947 	bl	8005258 <I2C_TransferConfig>
 8003fca:	e012      	b.n	8003ff2 <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fda:	b299      	uxth	r1, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	2380      	movs	r3, #128	@ 0x80
 8003fe4:	049c      	lsls	r4, r3, #18
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	0023      	movs	r3, r4
 8003fee:	f001 f933 	bl	8005258 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2241      	movs	r2, #65	@ 0x41
 8004008:	5c9b      	ldrb	r3, [r3, r2]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b22      	cmp	r3, #34	@ 0x22
 800400e:	d109      	bne.n	8004024 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2180      	movs	r1, #128	@ 0x80
 800401c:	0209      	lsls	r1, r1, #8
 800401e:	430a      	orrs	r2, r1
 8004020:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004022:	e017      	b.n	8004054 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2180      	movs	r1, #128	@ 0x80
 8004030:	01c9      	lsls	r1, r1, #7
 8004032:	430a      	orrs	r2, r1
 8004034:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004036:	e00d      	b.n	8004054 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2220      	movs	r2, #32
 800403c:	4013      	ands	r3, r2
 800403e:	d009      	beq.n	8004054 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004046:	d005      	beq.n	8004054 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	0011      	movs	r1, r2
 800404e:	0018      	movs	r0, r3
 8004050:	f000 faa4 	bl	800459c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2240      	movs	r2, #64	@ 0x40
 8004058:	2100      	movs	r1, #0
 800405a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	0018      	movs	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	b007      	add	sp, #28
 8004064:	bd90      	pop	{r4, r7, pc}
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	80002000 	.word	0x80002000
 800406c:	80002400 	.word	0x80002400

08004070 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2240      	movs	r2, #64	@ 0x40
 800408a:	5c9b      	ldrb	r3, [r3, r2]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <I2C_Slave_ISR_DMA+0x24>
 8004090:	2302      	movs	r3, #2
 8004092:	e0ce      	b.n	8004232 <I2C_Slave_ISR_DMA+0x1c2>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2240      	movs	r2, #64	@ 0x40
 8004098:	2101      	movs	r1, #1
 800409a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2220      	movs	r2, #32
 80040a0:	4013      	ands	r3, r2
 80040a2:	d00a      	beq.n	80040ba <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80040aa:	d006      	beq.n	80040ba <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	0011      	movs	r1, r2
 80040b2:	0018      	movs	r0, r3
 80040b4:	f000 fb40 	bl	8004738 <I2C_ITSlaveCplt>
 80040b8:	e0b6      	b.n	8004228 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2210      	movs	r2, #16
 80040be:	4013      	ands	r3, r2
 80040c0:	d100      	bne.n	80040c4 <I2C_Slave_ISR_DMA+0x54>
 80040c2:	e0a3      	b.n	800420c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2210      	movs	r2, #16
 80040c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80040ca:	d100      	bne.n	80040ce <I2C_Slave_ISR_DMA+0x5e>
 80040cc:	e09e      	b.n	800420c <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	2380      	movs	r3, #128	@ 0x80
 80040d2:	01db      	lsls	r3, r3, #7
 80040d4:	4013      	ands	r3, r2
 80040d6:	d105      	bne.n	80040e4 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	2380      	movs	r3, #128	@ 0x80
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80040e0:	d100      	bne.n	80040e4 <I2C_Slave_ISR_DMA+0x74>
 80040e2:	e08c      	b.n	80041fe <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00c      	beq.n	8004106 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	2380      	movs	r3, #128	@ 0x80
 80040f0:	021b      	lsls	r3, r3, #8
 80040f2:	4013      	ands	r3, r2
 80040f4:	d007      	beq.n	8004106 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8004102:	2301      	movs	r3, #1
 8004104:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00c      	beq.n	8004128 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	2380      	movs	r3, #128	@ 0x80
 8004112:	01db      	lsls	r3, r3, #7
 8004114:	4013      	ands	r3, r2
 8004116:	d007      	beq.n	8004128 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8004124:	2301      	movs	r3, #1
 8004126:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d12d      	bne.n	800418a <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2241      	movs	r2, #65	@ 0x41
 8004132:	5c9b      	ldrb	r3, [r3, r2]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b28      	cmp	r3, #40	@ 0x28
 8004138:	d10b      	bne.n	8004152 <I2C_Slave_ISR_DMA+0xe2>
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	2380      	movs	r3, #128	@ 0x80
 800413e:	049b      	lsls	r3, r3, #18
 8004140:	429a      	cmp	r2, r3
 8004142:	d106      	bne.n	8004152 <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	0011      	movs	r1, r2
 800414a:	0018      	movs	r0, r3
 800414c:	f000 fc7c 	bl	8004a48 <I2C_ITListenCplt>
 8004150:	e054      	b.n	80041fc <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2241      	movs	r2, #65	@ 0x41
 8004156:	5c9b      	ldrb	r3, [r3, r2]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b29      	cmp	r3, #41	@ 0x29
 800415c:	d110      	bne.n	8004180 <I2C_Slave_ISR_DMA+0x110>
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	4a36      	ldr	r2, [pc, #216]	@ (800423c <I2C_Slave_ISR_DMA+0x1cc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00c      	beq.n	8004180 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2210      	movs	r2, #16
 800416c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	0018      	movs	r0, r3
 8004172:	f000 fdec 	bl	8004d4e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	0018      	movs	r0, r3
 800417a:	f000 f9ab 	bl	80044d4 <I2C_ITSlaveSeqCplt>
 800417e:	e03d      	b.n	80041fc <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2210      	movs	r2, #16
 8004186:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004188:	e03e      	b.n	8004208 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2210      	movs	r2, #16
 8004190:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004196:	2204      	movs	r2, #4
 8004198:	431a      	orrs	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800419e:	2317      	movs	r3, #23
 80041a0:	18fb      	adds	r3, r7, r3
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	2141      	movs	r1, #65	@ 0x41
 80041a6:	5c52      	ldrb	r2, [r2, r1]
 80041a8:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d004      	beq.n	80041ba <I2C_Slave_ISR_DMA+0x14a>
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	2380      	movs	r3, #128	@ 0x80
 80041b4:	045b      	lsls	r3, r3, #17
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d126      	bne.n	8004208 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041ba:	2217      	movs	r2, #23
 80041bc:	18bb      	adds	r3, r7, r2
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b21      	cmp	r3, #33	@ 0x21
 80041c2:	d003      	beq.n	80041cc <I2C_Slave_ISR_DMA+0x15c>
 80041c4:	18bb      	adds	r3, r7, r2
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b29      	cmp	r3, #41	@ 0x29
 80041ca:	d103      	bne.n	80041d4 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2221      	movs	r2, #33	@ 0x21
 80041d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80041d2:	e00b      	b.n	80041ec <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80041d4:	2217      	movs	r2, #23
 80041d6:	18bb      	adds	r3, r7, r2
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b22      	cmp	r3, #34	@ 0x22
 80041dc:	d003      	beq.n	80041e6 <I2C_Slave_ISR_DMA+0x176>
 80041de:	18bb      	adds	r3, r7, r2
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80041e4:	d102      	bne.n	80041ec <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2222      	movs	r2, #34	@ 0x22
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	0011      	movs	r1, r2
 80041f4:	0018      	movs	r0, r3
 80041f6:	f000 fc7f 	bl	8004af8 <I2C_ITError>
      if (treatdmanack == 1U)
 80041fa:	e005      	b.n	8004208 <I2C_Slave_ISR_DMA+0x198>
 80041fc:	e004      	b.n	8004208 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2210      	movs	r2, #16
 8004204:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004206:	e00f      	b.n	8004228 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8004208:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800420a:	e00d      	b.n	8004228 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2208      	movs	r2, #8
 8004210:	4013      	ands	r3, r2
 8004212:	d009      	beq.n	8004228 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2208      	movs	r2, #8
 8004218:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800421a:	d005      	beq.n	8004228 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	0011      	movs	r1, r2
 8004222:	0018      	movs	r0, r3
 8004224:	f000 f870 	bl	8004308 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2240      	movs	r2, #64	@ 0x40
 800422c:	2100      	movs	r1, #0
 800422e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	0018      	movs	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	b008      	add	sp, #32
 8004238:	bd80      	pop	{r7, pc}
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	ffff0000 	.word	0xffff0000

08004240 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004240:	b5b0      	push	{r4, r5, r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af02      	add	r7, sp, #8
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	000c      	movs	r4, r1
 800424a:	0010      	movs	r0, r2
 800424c:	0019      	movs	r1, r3
 800424e:	250a      	movs	r5, #10
 8004250:	197b      	adds	r3, r7, r5
 8004252:	1c22      	adds	r2, r4, #0
 8004254:	801a      	strh	r2, [r3, #0]
 8004256:	2308      	movs	r3, #8
 8004258:	18fb      	adds	r3, r7, r3
 800425a:	1c02      	adds	r2, r0, #0
 800425c:	801a      	strh	r2, [r3, #0]
 800425e:	1dbb      	adds	r3, r7, #6
 8004260:	1c0a      	adds	r2, r1, #0
 8004262:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004264:	1dbb      	adds	r3, r7, #6
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	b2da      	uxtb	r2, r3
 800426a:	2380      	movs	r3, #128	@ 0x80
 800426c:	045c      	lsls	r4, r3, #17
 800426e:	197b      	adds	r3, r7, r5
 8004270:	8819      	ldrh	r1, [r3, #0]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	4b23      	ldr	r3, [pc, #140]	@ (8004304 <I2C_RequestMemoryWrite+0xc4>)
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	0023      	movs	r3, r4
 800427a:	f000 ffed 	bl	8005258 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800427e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004280:	6a39      	ldr	r1, [r7, #32]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	0018      	movs	r0, r3
 8004286:	f000 fe65 	bl	8004f54 <I2C_WaitOnTXISFlagUntilTimeout>
 800428a:	1e03      	subs	r3, r0, #0
 800428c:	d001      	beq.n	8004292 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e033      	b.n	80042fa <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004292:	1dbb      	adds	r3, r7, #6
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d107      	bne.n	80042aa <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800429a:	2308      	movs	r3, #8
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80042a8:	e019      	b.n	80042de <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042aa:	2308      	movs	r3, #8
 80042ac:	18fb      	adds	r3, r7, r3
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	0a1b      	lsrs	r3, r3, #8
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042be:	6a39      	ldr	r1, [r7, #32]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	0018      	movs	r0, r3
 80042c4:	f000 fe46 	bl	8004f54 <I2C_WaitOnTXISFlagUntilTimeout>
 80042c8:	1e03      	subs	r3, r0, #0
 80042ca:	d001      	beq.n	80042d0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e014      	b.n	80042fa <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042d0:	2308      	movs	r3, #8
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80042de:	6a3a      	ldr	r2, [r7, #32]
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	0013      	movs	r3, r2
 80042e8:	2200      	movs	r2, #0
 80042ea:	2180      	movs	r1, #128	@ 0x80
 80042ec:	f000 fdda 	bl	8004ea4 <I2C_WaitOnFlagUntilTimeout>
 80042f0:	1e03      	subs	r3, r0, #0
 80042f2:	d001      	beq.n	80042f8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	0018      	movs	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b004      	add	sp, #16
 8004300:	bdb0      	pop	{r4, r5, r7, pc}
 8004302:	46c0      	nop			@ (mov r8, r8)
 8004304:	80002000 	.word	0x80002000

08004308 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004308:	b5b0      	push	{r4, r5, r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2241      	movs	r2, #65	@ 0x41
 8004316:	5c9b      	ldrb	r3, [r3, r2]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	001a      	movs	r2, r3
 800431c:	2328      	movs	r3, #40	@ 0x28
 800431e:	4013      	ands	r3, r2
 8004320:	2b28      	cmp	r3, #40	@ 0x28
 8004322:	d000      	beq.n	8004326 <I2C_ITAddrCplt+0x1e>
 8004324:	e088      	b.n	8004438 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	b2da      	uxtb	r2, r3
 8004330:	250f      	movs	r5, #15
 8004332:	197b      	adds	r3, r7, r5
 8004334:	2101      	movs	r1, #1
 8004336:	400a      	ands	r2, r1
 8004338:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	b29a      	uxth	r2, r3
 8004344:	200c      	movs	r0, #12
 8004346:	183b      	adds	r3, r7, r0
 8004348:	21fe      	movs	r1, #254	@ 0xfe
 800434a:	400a      	ands	r2, r1
 800434c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	b29a      	uxth	r2, r3
 8004356:	240a      	movs	r4, #10
 8004358:	193b      	adds	r3, r7, r4
 800435a:	0592      	lsls	r2, r2, #22
 800435c:	0d92      	lsrs	r2, r2, #22
 800435e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	b29a      	uxth	r2, r3
 8004368:	2308      	movs	r3, #8
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	21fe      	movs	r1, #254	@ 0xfe
 800436e:	400a      	ands	r2, r1
 8004370:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d148      	bne.n	800440c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800437a:	0021      	movs	r1, r4
 800437c:	187b      	adds	r3, r7, r1
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	09db      	lsrs	r3, r3, #7
 8004382:	b29a      	uxth	r2, r3
 8004384:	183b      	adds	r3, r7, r0
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	4053      	eors	r3, r2
 800438a:	b29b      	uxth	r3, r3
 800438c:	001a      	movs	r2, r3
 800438e:	2306      	movs	r3, #6
 8004390:	4013      	ands	r3, r2
 8004392:	d120      	bne.n	80043d6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004394:	183b      	adds	r3, r7, r0
 8004396:	187a      	adds	r2, r7, r1
 8004398:	8812      	ldrh	r2, [r2, #0]
 800439a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d14c      	bne.n	8004448 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2208      	movs	r2, #8
 80043ba:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2240      	movs	r2, #64	@ 0x40
 80043c0:	2100      	movs	r1, #0
 80043c2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043c4:	183b      	adds	r3, r7, r0
 80043c6:	881a      	ldrh	r2, [r3, #0]
 80043c8:	197b      	adds	r3, r7, r5
 80043ca:	7819      	ldrb	r1, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	0018      	movs	r0, r3
 80043d0:	f7ff faf5 	bl	80039be <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80043d4:	e038      	b.n	8004448 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80043d6:	240c      	movs	r4, #12
 80043d8:	193b      	adds	r3, r7, r4
 80043da:	2208      	movs	r2, #8
 80043dc:	18ba      	adds	r2, r7, r2
 80043de:	8812      	ldrh	r2, [r2, #0]
 80043e0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80043e2:	2380      	movs	r3, #128	@ 0x80
 80043e4:	021a      	lsls	r2, r3, #8
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	0011      	movs	r1, r2
 80043ea:	0018      	movs	r0, r3
 80043ec:	f000 fff8 	bl	80053e0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2240      	movs	r2, #64	@ 0x40
 80043f4:	2100      	movs	r1, #0
 80043f6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043f8:	193b      	adds	r3, r7, r4
 80043fa:	881a      	ldrh	r2, [r3, #0]
 80043fc:	230f      	movs	r3, #15
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	7819      	ldrb	r1, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	0018      	movs	r0, r3
 8004406:	f7ff fada 	bl	80039be <HAL_I2C_AddrCallback>
}
 800440a:	e01d      	b.n	8004448 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800440c:	2380      	movs	r3, #128	@ 0x80
 800440e:	021a      	lsls	r2, r3, #8
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	0011      	movs	r1, r2
 8004414:	0018      	movs	r0, r3
 8004416:	f000 ffe3 	bl	80053e0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2240      	movs	r2, #64	@ 0x40
 800441e:	2100      	movs	r1, #0
 8004420:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004422:	230c      	movs	r3, #12
 8004424:	18fb      	adds	r3, r7, r3
 8004426:	881a      	ldrh	r2, [r3, #0]
 8004428:	230f      	movs	r3, #15
 800442a:	18fb      	adds	r3, r7, r3
 800442c:	7819      	ldrb	r1, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	0018      	movs	r0, r3
 8004432:	f7ff fac4 	bl	80039be <HAL_I2C_AddrCallback>
}
 8004436:	e007      	b.n	8004448 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2208      	movs	r2, #8
 800443e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2240      	movs	r2, #64	@ 0x40
 8004444:	2100      	movs	r1, #0
 8004446:	5499      	strb	r1, [r3, r2]
}
 8004448:	46c0      	nop			@ (mov r8, r8)
 800444a:	46bd      	mov	sp, r7
 800444c:	b004      	add	sp, #16
 800444e:	bdb0      	pop	{r4, r5, r7, pc}

08004450 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2242      	movs	r2, #66	@ 0x42
 800445c:	2100      	movs	r1, #0
 800445e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2241      	movs	r2, #65	@ 0x41
 8004464:	5c9b      	ldrb	r3, [r3, r2]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b21      	cmp	r3, #33	@ 0x21
 800446a:	d117      	bne.n	800449c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2241      	movs	r2, #65	@ 0x41
 8004470:	2120      	movs	r1, #32
 8004472:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2211      	movs	r2, #17
 8004478:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2101      	movs	r1, #1
 8004484:	0018      	movs	r0, r3
 8004486:	f000 ffab 	bl	80053e0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2240      	movs	r2, #64	@ 0x40
 800448e:	2100      	movs	r1, #0
 8004490:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	0018      	movs	r0, r3
 8004496:	f7ff fa72 	bl	800397e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800449a:	e016      	b.n	80044ca <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2241      	movs	r2, #65	@ 0x41
 80044a0:	2120      	movs	r1, #32
 80044a2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2212      	movs	r2, #18
 80044a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2102      	movs	r1, #2
 80044b4:	0018      	movs	r0, r3
 80044b6:	f000 ff93 	bl	80053e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2240      	movs	r2, #64	@ 0x40
 80044be:	2100      	movs	r1, #0
 80044c0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	0018      	movs	r0, r3
 80044c6:	f7ff fa62 	bl	800398e <HAL_I2C_MasterRxCpltCallback>
}
 80044ca:	46c0      	nop			@ (mov r8, r8)
 80044cc:	46bd      	mov	sp, r7
 80044ce:	b002      	add	sp, #8
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2242      	movs	r2, #66	@ 0x42
 80044e8:	2100      	movs	r1, #0
 80044ea:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	2380      	movs	r3, #128	@ 0x80
 80044f0:	01db      	lsls	r3, r3, #7
 80044f2:	4013      	ands	r3, r2
 80044f4:	d008      	beq.n	8004508 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4924      	ldr	r1, [pc, #144]	@ (8004594 <I2C_ITSlaveSeqCplt+0xc0>)
 8004502:	400a      	ands	r2, r1
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	e00c      	b.n	8004522 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	2380      	movs	r3, #128	@ 0x80
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	4013      	ands	r3, r2
 8004510:	d007      	beq.n	8004522 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	491e      	ldr	r1, [pc, #120]	@ (8004598 <I2C_ITSlaveSeqCplt+0xc4>)
 800451e:	400a      	ands	r2, r1
 8004520:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2241      	movs	r2, #65	@ 0x41
 8004526:	5c9b      	ldrb	r3, [r3, r2]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b29      	cmp	r3, #41	@ 0x29
 800452c:	d114      	bne.n	8004558 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2241      	movs	r2, #65	@ 0x41
 8004532:	2128      	movs	r1, #40	@ 0x28
 8004534:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2221      	movs	r2, #33	@ 0x21
 800453a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2101      	movs	r1, #1
 8004540:	0018      	movs	r0, r3
 8004542:	f000 ff4d 	bl	80053e0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2240      	movs	r2, #64	@ 0x40
 800454a:	2100      	movs	r1, #0
 800454c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	0018      	movs	r0, r3
 8004552:	f7ff fa24 	bl	800399e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004556:	e019      	b.n	800458c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2241      	movs	r2, #65	@ 0x41
 800455c:	5c9b      	ldrb	r3, [r3, r2]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b2a      	cmp	r3, #42	@ 0x2a
 8004562:	d113      	bne.n	800458c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2241      	movs	r2, #65	@ 0x41
 8004568:	2128      	movs	r1, #40	@ 0x28
 800456a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2222      	movs	r2, #34	@ 0x22
 8004570:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2102      	movs	r1, #2
 8004576:	0018      	movs	r0, r3
 8004578:	f000 ff32 	bl	80053e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2240      	movs	r2, #64	@ 0x40
 8004580:	2100      	movs	r1, #0
 8004582:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	0018      	movs	r0, r3
 8004588:	f7ff fa11 	bl	80039ae <HAL_I2C_SlaveRxCpltCallback>
}
 800458c:	46c0      	nop			@ (mov r8, r8)
 800458e:	46bd      	mov	sp, r7
 8004590:	b004      	add	sp, #16
 8004592:	bd80      	pop	{r7, pc}
 8004594:	ffffbfff 	.word	0xffffbfff
 8004598:	ffff7fff 	.word	0xffff7fff

0800459c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2220      	movs	r2, #32
 80045b0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2241      	movs	r2, #65	@ 0x41
 80045b6:	5c9b      	ldrb	r3, [r3, r2]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b21      	cmp	r3, #33	@ 0x21
 80045bc:	d108      	bne.n	80045d0 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2101      	movs	r1, #1
 80045c2:	0018      	movs	r0, r3
 80045c4:	f000 ff0c 	bl	80053e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2211      	movs	r2, #17
 80045cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80045ce:	e00d      	b.n	80045ec <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2241      	movs	r2, #65	@ 0x41
 80045d4:	5c9b      	ldrb	r3, [r3, r2]
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b22      	cmp	r3, #34	@ 0x22
 80045da:	d107      	bne.n	80045ec <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2102      	movs	r1, #2
 80045e0:	0018      	movs	r0, r3
 80045e2:	f000 fefd 	bl	80053e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2212      	movs	r2, #18
 80045ea:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	494e      	ldr	r1, [pc, #312]	@ (8004730 <I2C_ITMasterCplt+0x194>)
 80045f8:	400a      	ands	r2, r1
 80045fa:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a4b      	ldr	r2, [pc, #300]	@ (8004734 <I2C_ITMasterCplt+0x198>)
 8004606:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2210      	movs	r2, #16
 800460c:	4013      	ands	r3, r2
 800460e:	d009      	beq.n	8004624 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2210      	movs	r2, #16
 8004616:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461c:	2204      	movs	r2, #4
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2241      	movs	r2, #65	@ 0x41
 8004628:	5c9b      	ldrb	r3, [r3, r2]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b60      	cmp	r3, #96	@ 0x60
 800462e:	d109      	bne.n	8004644 <I2C_ITMasterCplt+0xa8>
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2204      	movs	r2, #4
 8004634:	4013      	ands	r3, r2
 8004636:	d005      	beq.n	8004644 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	b2db      	uxtb	r3, r3
 8004640:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004642:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	0018      	movs	r0, r3
 8004648:	f000 fb81 	bl	8004d4e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004650:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2241      	movs	r2, #65	@ 0x41
 8004656:	5c9b      	ldrb	r3, [r3, r2]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b60      	cmp	r3, #96	@ 0x60
 800465c:	d002      	beq.n	8004664 <I2C_ITMasterCplt+0xc8>
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d007      	beq.n	8004674 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	0011      	movs	r1, r2
 800466c:	0018      	movs	r0, r3
 800466e:	f000 fa43 	bl	8004af8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004672:	e058      	b.n	8004726 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2241      	movs	r2, #65	@ 0x41
 8004678:	5c9b      	ldrb	r3, [r3, r2]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b21      	cmp	r3, #33	@ 0x21
 800467e:	d126      	bne.n	80046ce <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2241      	movs	r2, #65	@ 0x41
 8004684:	2120      	movs	r1, #32
 8004686:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2242      	movs	r2, #66	@ 0x42
 8004692:	5c9b      	ldrb	r3, [r3, r2]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b40      	cmp	r3, #64	@ 0x40
 8004698:	d10c      	bne.n	80046b4 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2242      	movs	r2, #66	@ 0x42
 800469e:	2100      	movs	r1, #0
 80046a0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2240      	movs	r2, #64	@ 0x40
 80046a6:	2100      	movs	r1, #0
 80046a8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	0018      	movs	r0, r3
 80046ae:	f7fc fc45 	bl	8000f3c <HAL_I2C_MemTxCpltCallback>
}
 80046b2:	e038      	b.n	8004726 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2242      	movs	r2, #66	@ 0x42
 80046b8:	2100      	movs	r1, #0
 80046ba:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2240      	movs	r2, #64	@ 0x40
 80046c0:	2100      	movs	r1, #0
 80046c2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	0018      	movs	r0, r3
 80046c8:	f7ff f959 	bl	800397e <HAL_I2C_MasterTxCpltCallback>
}
 80046cc:	e02b      	b.n	8004726 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2241      	movs	r2, #65	@ 0x41
 80046d2:	5c9b      	ldrb	r3, [r3, r2]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b22      	cmp	r3, #34	@ 0x22
 80046d8:	d125      	bne.n	8004726 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2241      	movs	r2, #65	@ 0x41
 80046de:	2120      	movs	r1, #32
 80046e0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2242      	movs	r2, #66	@ 0x42
 80046ec:	5c9b      	ldrb	r3, [r3, r2]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b40      	cmp	r3, #64	@ 0x40
 80046f2:	d10c      	bne.n	800470e <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2242      	movs	r2, #66	@ 0x42
 80046f8:	2100      	movs	r1, #0
 80046fa:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2240      	movs	r2, #64	@ 0x40
 8004700:	2100      	movs	r1, #0
 8004702:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	0018      	movs	r0, r3
 8004708:	f7ff f971 	bl	80039ee <HAL_I2C_MemRxCpltCallback>
}
 800470c:	e00b      	b.n	8004726 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2242      	movs	r2, #66	@ 0x42
 8004712:	2100      	movs	r1, #0
 8004714:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2240      	movs	r2, #64	@ 0x40
 800471a:	2100      	movs	r1, #0
 800471c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	0018      	movs	r0, r3
 8004722:	f7ff f934 	bl	800398e <HAL_I2C_MasterRxCpltCallback>
}
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	46bd      	mov	sp, r7
 800472a:	b006      	add	sp, #24
 800472c:	bd80      	pop	{r7, pc}
 800472e:	46c0      	nop			@ (mov r8, r8)
 8004730:	fe00e800 	.word	0xfe00e800
 8004734:	ffff0000 	.word	0xffff0000

08004738 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004754:	200b      	movs	r0, #11
 8004756:	183b      	adds	r3, r7, r0
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	2141      	movs	r1, #65	@ 0x41
 800475c:	5c52      	ldrb	r2, [r2, r1]
 800475e:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2220      	movs	r2, #32
 8004766:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004768:	183b      	adds	r3, r7, r0
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b21      	cmp	r3, #33	@ 0x21
 800476e:	d003      	beq.n	8004778 <I2C_ITSlaveCplt+0x40>
 8004770:	183b      	adds	r3, r7, r0
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b29      	cmp	r3, #41	@ 0x29
 8004776:	d109      	bne.n	800478c <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004778:	4aac      	ldr	r2, [pc, #688]	@ (8004a2c <I2C_ITSlaveCplt+0x2f4>)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	0011      	movs	r1, r2
 800477e:	0018      	movs	r0, r3
 8004780:	f000 fe2e 	bl	80053e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2221      	movs	r2, #33	@ 0x21
 8004788:	631a      	str	r2, [r3, #48]	@ 0x30
 800478a:	e020      	b.n	80047ce <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800478c:	220b      	movs	r2, #11
 800478e:	18bb      	adds	r3, r7, r2
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b22      	cmp	r3, #34	@ 0x22
 8004794:	d003      	beq.n	800479e <I2C_ITSlaveCplt+0x66>
 8004796:	18bb      	adds	r3, r7, r2
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b2a      	cmp	r3, #42	@ 0x2a
 800479c:	d109      	bne.n	80047b2 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800479e:	4aa4      	ldr	r2, [pc, #656]	@ (8004a30 <I2C_ITSlaveCplt+0x2f8>)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	0011      	movs	r1, r2
 80047a4:	0018      	movs	r0, r3
 80047a6:	f000 fe1b 	bl	80053e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2222      	movs	r2, #34	@ 0x22
 80047ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80047b0:	e00d      	b.n	80047ce <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80047b2:	230b      	movs	r3, #11
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b28      	cmp	r3, #40	@ 0x28
 80047ba:	d108      	bne.n	80047ce <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80047bc:	4a9d      	ldr	r2, [pc, #628]	@ (8004a34 <I2C_ITSlaveCplt+0x2fc>)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0011      	movs	r1, r2
 80047c2:	0018      	movs	r0, r3
 80047c4:	f000 fe0c 	bl	80053e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2180      	movs	r1, #128	@ 0x80
 80047da:	0209      	lsls	r1, r1, #8
 80047dc:	430a      	orrs	r2, r1
 80047de:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4993      	ldr	r1, [pc, #588]	@ (8004a38 <I2C_ITSlaveCplt+0x300>)
 80047ec:	400a      	ands	r2, r1
 80047ee:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	0018      	movs	r0, r3
 80047f4:	f000 faab 	bl	8004d4e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	2380      	movs	r3, #128	@ 0x80
 80047fc:	01db      	lsls	r3, r3, #7
 80047fe:	4013      	ands	r3, r2
 8004800:	d013      	beq.n	800482a <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	498b      	ldr	r1, [pc, #556]	@ (8004a3c <I2C_ITSlaveCplt+0x304>)
 800480e:	400a      	ands	r2, r1
 8004810:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004816:	2b00      	cmp	r3, #0
 8004818:	d01f      	beq.n	800485a <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	b29a      	uxth	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004828:	e017      	b.n	800485a <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	2380      	movs	r3, #128	@ 0x80
 800482e:	021b      	lsls	r3, r3, #8
 8004830:	4013      	ands	r3, r2
 8004832:	d012      	beq.n	800485a <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4980      	ldr	r1, [pc, #512]	@ (8004a40 <I2C_ITSlaveCplt+0x308>)
 8004840:	400a      	ands	r2, r1
 8004842:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004848:	2b00      	cmp	r3, #0
 800484a:	d006      	beq.n	800485a <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	b29a      	uxth	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2204      	movs	r2, #4
 800485e:	4013      	ands	r3, r2
 8004860:	d020      	beq.n	80048a4 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2204      	movs	r2, #4
 8004866:	4393      	bics	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00c      	beq.n	80048a4 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b2:	2204      	movs	r2, #4
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2210      	movs	r2, #16
 80048be:	4013      	ands	r3, r2
 80048c0:	d04f      	beq.n	8004962 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2210      	movs	r2, #16
 80048c6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80048c8:	d04b      	beq.n	8004962 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d12d      	bne.n	8004930 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2241      	movs	r2, #65	@ 0x41
 80048d8:	5c9b      	ldrb	r3, [r3, r2]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b28      	cmp	r3, #40	@ 0x28
 80048de:	d10b      	bne.n	80048f8 <I2C_ITSlaveCplt+0x1c0>
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	2380      	movs	r3, #128	@ 0x80
 80048e4:	049b      	lsls	r3, r3, #18
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d106      	bne.n	80048f8 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	0011      	movs	r1, r2
 80048f0:	0018      	movs	r0, r3
 80048f2:	f000 f8a9 	bl	8004a48 <I2C_ITListenCplt>
 80048f6:	e034      	b.n	8004962 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2241      	movs	r2, #65	@ 0x41
 80048fc:	5c9b      	ldrb	r3, [r3, r2]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b29      	cmp	r3, #41	@ 0x29
 8004902:	d110      	bne.n	8004926 <I2C_ITSlaveCplt+0x1ee>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4a4f      	ldr	r2, [pc, #316]	@ (8004a44 <I2C_ITSlaveCplt+0x30c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00c      	beq.n	8004926 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2210      	movs	r2, #16
 8004912:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	0018      	movs	r0, r3
 8004918:	f000 fa19 	bl	8004d4e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	0018      	movs	r0, r3
 8004920:	f7ff fdd8 	bl	80044d4 <I2C_ITSlaveSeqCplt>
 8004924:	e01d      	b.n	8004962 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2210      	movs	r2, #16
 800492c:	61da      	str	r2, [r3, #28]
 800492e:	e018      	b.n	8004962 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2210      	movs	r2, #16
 8004936:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493c:	2204      	movs	r2, #4
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d004      	beq.n	8004954 <I2C_ITSlaveCplt+0x21c>
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	2380      	movs	r3, #128	@ 0x80
 800494e:	045b      	lsls	r3, r3, #17
 8004950:	429a      	cmp	r2, r3
 8004952:	d106      	bne.n	8004962 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	0011      	movs	r1, r2
 800495c:	0018      	movs	r0, r3
 800495e:	f000 f8cb 	bl	8004af8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2242      	movs	r2, #66	@ 0x42
 8004966:	2100      	movs	r1, #0
 8004968:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004974:	2b00      	cmp	r3, #0
 8004976:	d013      	beq.n	80049a0 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	0011      	movs	r1, r2
 8004980:	0018      	movs	r0, r3
 8004982:	f000 f8b9 	bl	8004af8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2241      	movs	r2, #65	@ 0x41
 800498a:	5c9b      	ldrb	r3, [r3, r2]
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b28      	cmp	r3, #40	@ 0x28
 8004990:	d147      	bne.n	8004a22 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	0011      	movs	r1, r2
 8004998:	0018      	movs	r0, r3
 800499a:	f000 f855 	bl	8004a48 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800499e:	e040      	b.n	8004a22 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a4:	4a27      	ldr	r2, [pc, #156]	@ (8004a44 <I2C_ITSlaveCplt+0x30c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d016      	beq.n	80049d8 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	0018      	movs	r0, r3
 80049ae:	f7ff fd91 	bl	80044d4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a23      	ldr	r2, [pc, #140]	@ (8004a44 <I2C_ITSlaveCplt+0x30c>)
 80049b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2241      	movs	r2, #65	@ 0x41
 80049bc:	2120      	movs	r1, #32
 80049be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2240      	movs	r2, #64	@ 0x40
 80049ca:	2100      	movs	r1, #0
 80049cc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	0018      	movs	r0, r3
 80049d2:	f7ff f804 	bl	80039de <HAL_I2C_ListenCpltCallback>
}
 80049d6:	e024      	b.n	8004a22 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2241      	movs	r2, #65	@ 0x41
 80049dc:	5c9b      	ldrb	r3, [r3, r2]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b22      	cmp	r3, #34	@ 0x22
 80049e2:	d10f      	bne.n	8004a04 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2241      	movs	r2, #65	@ 0x41
 80049e8:	2120      	movs	r1, #32
 80049ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2240      	movs	r2, #64	@ 0x40
 80049f6:	2100      	movs	r1, #0
 80049f8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f7fe ffd6 	bl	80039ae <HAL_I2C_SlaveRxCpltCallback>
}
 8004a02:	e00e      	b.n	8004a22 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2241      	movs	r2, #65	@ 0x41
 8004a08:	2120      	movs	r1, #32
 8004a0a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2240      	movs	r2, #64	@ 0x40
 8004a16:	2100      	movs	r1, #0
 8004a18:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7fe ffbe 	bl	800399e <HAL_I2C_SlaveTxCpltCallback>
}
 8004a22:	46c0      	nop			@ (mov r8, r8)
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b006      	add	sp, #24
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	00008001 	.word	0x00008001
 8004a30:	00008002 	.word	0x00008002
 8004a34:	00008003 	.word	0x00008003
 8004a38:	fe00e800 	.word	0xfe00e800
 8004a3c:	ffffbfff 	.word	0xffffbfff
 8004a40:	ffff7fff 	.word	0xffff7fff
 8004a44:	ffff0000 	.word	0xffff0000

08004a48 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a26      	ldr	r2, [pc, #152]	@ (8004af0 <I2C_ITListenCplt+0xa8>)
 8004a56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2241      	movs	r2, #65	@ 0x41
 8004a62:	2120      	movs	r1, #32
 8004a64:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2242      	movs	r2, #66	@ 0x42
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2204      	movs	r2, #4
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d022      	beq.n	8004ac2 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d012      	beq.n	8004ac2 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aba:	2204      	movs	r2, #4
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8004af4 <I2C_ITListenCplt+0xac>)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	0011      	movs	r1, r2
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f000 fc89 	bl	80053e0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2210      	movs	r2, #16
 8004ad4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2240      	movs	r2, #64	@ 0x40
 8004ada:	2100      	movs	r1, #0
 8004adc:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f7fe ff7c 	bl	80039de <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004ae6:	46c0      	nop			@ (mov r8, r8)
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b002      	add	sp, #8
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	46c0      	nop			@ (mov r8, r8)
 8004af0:	ffff0000 	.word	0xffff0000
 8004af4:	00008003 	.word	0x00008003

08004af8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004b02:	200f      	movs	r0, #15
 8004b04:	183b      	adds	r3, r7, r0
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	2141      	movs	r1, #65	@ 0x41
 8004b0a:	5c52      	ldrb	r2, [r2, r1]
 8004b0c:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2242      	movs	r2, #66	@ 0x42
 8004b12:	2100      	movs	r1, #0
 8004b14:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a72      	ldr	r2, [pc, #456]	@ (8004ce4 <I2C_ITError+0x1ec>)
 8004b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004b2e:	183b      	adds	r3, r7, r0
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b28      	cmp	r3, #40	@ 0x28
 8004b34:	d007      	beq.n	8004b46 <I2C_ITError+0x4e>
 8004b36:	183b      	adds	r3, r7, r0
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b29      	cmp	r3, #41	@ 0x29
 8004b3c:	d003      	beq.n	8004b46 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004b3e:	183b      	adds	r3, r7, r0
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b44:	d10c      	bne.n	8004b60 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2103      	movs	r1, #3
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f000 fc48 	bl	80053e0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2241      	movs	r2, #65	@ 0x41
 8004b54:	2128      	movs	r1, #40	@ 0x28
 8004b56:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a63      	ldr	r2, [pc, #396]	@ (8004ce8 <I2C_ITError+0x1f0>)
 8004b5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b5e:	e032      	b.n	8004bc6 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b60:	4a62      	ldr	r2, [pc, #392]	@ (8004cec <I2C_ITError+0x1f4>)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	0011      	movs	r1, r2
 8004b66:	0018      	movs	r0, r3
 8004b68:	f000 fc3a 	bl	80053e0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f000 f8ed 	bl	8004d4e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2241      	movs	r2, #65	@ 0x41
 8004b78:	5c9b      	ldrb	r3, [r3, r2]
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b60      	cmp	r3, #96	@ 0x60
 8004b7e:	d01f      	beq.n	8004bc0 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2241      	movs	r2, #65	@ 0x41
 8004b84:	2120      	movs	r1, #32
 8004b86:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	d114      	bne.n	8004bc0 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	2210      	movs	r2, #16
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b10      	cmp	r3, #16
 8004ba2:	d109      	bne.n	8004bb8 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2210      	movs	r2, #16
 8004baa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d03b      	beq.n	8004c4c <I2C_ITError+0x154>
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b11      	cmp	r3, #17
 8004bd8:	d002      	beq.n	8004be0 <I2C_ITError+0xe8>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b21      	cmp	r3, #33	@ 0x21
 8004bde:	d135      	bne.n	8004c4c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	2380      	movs	r3, #128	@ 0x80
 8004be8:	01db      	lsls	r3, r3, #7
 8004bea:	401a      	ands	r2, r3
 8004bec:	2380      	movs	r3, #128	@ 0x80
 8004bee:	01db      	lsls	r3, r3, #7
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d107      	bne.n	8004c04 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	493c      	ldr	r1, [pc, #240]	@ (8004cf0 <I2C_ITError+0x1f8>)
 8004c00:	400a      	ands	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f7fe f8cd 	bl	8002da8 <HAL_DMA_GetState>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d016      	beq.n	8004c42 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c18:	4a36      	ldr	r2, [pc, #216]	@ (8004cf4 <I2C_ITError+0x1fc>)
 8004c1a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2240      	movs	r2, #64	@ 0x40
 8004c20:	2100      	movs	r1, #0
 8004c22:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7fd ff91 	bl	8002b50 <HAL_DMA_Abort_IT>
 8004c2e:	1e03      	subs	r3, r0, #0
 8004c30:	d051      	beq.n	8004cd6 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c40:	e049      	b.n	8004cd6 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	0018      	movs	r0, r3
 8004c46:	f000 f859 	bl	8004cfc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c4a:	e044      	b.n	8004cd6 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d03b      	beq.n	8004ccc <I2C_ITError+0x1d4>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b12      	cmp	r3, #18
 8004c58:	d002      	beq.n	8004c60 <I2C_ITError+0x168>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b22      	cmp	r3, #34	@ 0x22
 8004c5e:	d135      	bne.n	8004ccc <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	2380      	movs	r3, #128	@ 0x80
 8004c68:	021b      	lsls	r3, r3, #8
 8004c6a:	401a      	ands	r2, r3
 8004c6c:	2380      	movs	r3, #128	@ 0x80
 8004c6e:	021b      	lsls	r3, r3, #8
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d107      	bne.n	8004c84 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	491e      	ldr	r1, [pc, #120]	@ (8004cf8 <I2C_ITError+0x200>)
 8004c80:	400a      	ands	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f7fe f88d 	bl	8002da8 <HAL_DMA_GetState>
 8004c8e:	0003      	movs	r3, r0
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d016      	beq.n	8004cc2 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c98:	4a16      	ldr	r2, [pc, #88]	@ (8004cf4 <I2C_ITError+0x1fc>)
 8004c9a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2240      	movs	r2, #64	@ 0x40
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f7fd ff51 	bl	8002b50 <HAL_DMA_Abort_IT>
 8004cae:	1e03      	subs	r3, r0, #0
 8004cb0:	d013      	beq.n	8004cda <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cc0:	e00b      	b.n	8004cda <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f000 f819 	bl	8004cfc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cca:	e006      	b.n	8004cda <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f000 f814 	bl	8004cfc <I2C_TreatErrorCallback>
  }
}
 8004cd4:	e002      	b.n	8004cdc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004cd6:	46c0      	nop			@ (mov r8, r8)
 8004cd8:	e000      	b.n	8004cdc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cda:	46c0      	nop			@ (mov r8, r8)
}
 8004cdc:	46c0      	nop			@ (mov r8, r8)
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	b004      	add	sp, #16
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	ffff0000 	.word	0xffff0000
 8004ce8:	08003a21 	.word	0x08003a21
 8004cec:	00008003 	.word	0x00008003
 8004cf0:	ffffbfff 	.word	0xffffbfff
 8004cf4:	08004e67 	.word	0x08004e67
 8004cf8:	ffff7fff 	.word	0xffff7fff

08004cfc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2241      	movs	r2, #65	@ 0x41
 8004d08:	5c9b      	ldrb	r3, [r3, r2]
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b60      	cmp	r3, #96	@ 0x60
 8004d0e:	d10f      	bne.n	8004d30 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2241      	movs	r2, #65	@ 0x41
 8004d14:	2120      	movs	r1, #32
 8004d16:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2240      	movs	r2, #64	@ 0x40
 8004d22:	2100      	movs	r1, #0
 8004d24:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f7fe fe70 	bl	8003a0e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d2e:	e00a      	b.n	8004d46 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2240      	movs	r2, #64	@ 0x40
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	0018      	movs	r0, r3
 8004d42:	f7fe fe5c 	bl	80039fe <HAL_I2C_ErrorCallback>
}
 8004d46:	46c0      	nop			@ (mov r8, r8)
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	b002      	add	sp, #8
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b082      	sub	sp, #8
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d103      	bne.n	8004d6c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	2201      	movs	r2, #1
 8004d74:	4013      	ands	r3, r2
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d007      	beq.n	8004d8a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699a      	ldr	r2, [r3, #24]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2101      	movs	r1, #1
 8004d86:	430a      	orrs	r2, r1
 8004d88:	619a      	str	r2, [r3, #24]
  }
}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b002      	add	sp, #8
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4920      	ldr	r1, [pc, #128]	@ (8004e30 <I2C_DMAMasterTransmitCplt+0x9c>)
 8004dae:	400a      	ands	r2, r1
 8004db0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d105      	bne.n	8004dc8 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2120      	movs	r1, #32
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f000 fa83 	bl	80052cc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004dc6:	e02e      	b.n	8004e26 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004dd0:	189a      	adds	r2, r3, r2
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2bff      	cmp	r3, #255	@ 0xff
 8004dde:	d903      	bls.n	8004de8 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	22ff      	movs	r2, #255	@ 0xff
 8004de4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004de6:	e004      	b.n	8004df2 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfa:	0019      	movs	r1, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3328      	adds	r3, #40	@ 0x28
 8004e02:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004e08:	f7fd fe1a 	bl	8002a40 <HAL_DMA_Start_IT>
 8004e0c:	1e03      	subs	r3, r0, #0
 8004e0e:	d005      	beq.n	8004e1c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2110      	movs	r1, #16
 8004e14:	0018      	movs	r0, r3
 8004e16:	f7ff fe6f 	bl	8004af8 <I2C_ITError>
}
 8004e1a:	e004      	b.n	8004e26 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2140      	movs	r1, #64	@ 0x40
 8004e20:	0018      	movs	r0, r3
 8004e22:	f000 fa53 	bl	80052cc <I2C_Enable_IRQ>
}
 8004e26:	46c0      	nop			@ (mov r8, r8)
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	b004      	add	sp, #16
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	46c0      	nop			@ (mov r8, r8)
 8004e30:	ffffbfff 	.word	0xffffbfff

08004e34 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2180      	movs	r1, #128	@ 0x80
 8004e4e:	0209      	lsls	r1, r1, #8
 8004e50:	430a      	orrs	r2, r1
 8004e52:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2110      	movs	r1, #16
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f7ff fe4d 	bl	8004af8 <I2C_ITError>
}
 8004e5e:	46c0      	nop			@ (mov r8, r8)
 8004e60:	46bd      	mov	sp, r7
 8004e62:	b004      	add	sp, #16
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e80:	2200      	movs	r2, #0
 8004e82:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e90:	2200      	movs	r2, #0
 8004e92:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	0018      	movs	r0, r3
 8004e98:	f7ff ff30 	bl	8004cfc <I2C_TreatErrorCallback>
}
 8004e9c:	46c0      	nop			@ (mov r8, r8)
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b004      	add	sp, #16
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	1dfb      	adds	r3, r7, #7
 8004eb2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eb4:	e03a      	b.n	8004f2c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f000 f8d3 	bl	8005068 <I2C_IsErrorOccurred>
 8004ec2:	1e03      	subs	r3, r0, #0
 8004ec4:	d001      	beq.n	8004eca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e040      	b.n	8004f4c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	d02d      	beq.n	8004f2c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed0:	f7fc fdb2 	bl	8001a38 <HAL_GetTick>
 8004ed4:	0002      	movs	r2, r0
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d302      	bcc.n	8004ee6 <I2C_WaitOnFlagUntilTimeout+0x42>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d122      	bne.n	8004f2c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	425a      	negs	r2, r3
 8004ef6:	4153      	adcs	r3, r2
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	001a      	movs	r2, r3
 8004efc:	1dfb      	adds	r3, r7, #7
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d113      	bne.n	8004f2c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f08:	2220      	movs	r2, #32
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2241      	movs	r2, #65	@ 0x41
 8004f14:	2120      	movs	r1, #32
 8004f16:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2242      	movs	r2, #66	@ 0x42
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2240      	movs	r2, #64	@ 0x40
 8004f24:	2100      	movs	r1, #0
 8004f26:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e00f      	b.n	8004f4c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	4013      	ands	r3, r2
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	425a      	negs	r2, r3
 8004f3c:	4153      	adcs	r3, r2
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	001a      	movs	r2, r3
 8004f42:	1dfb      	adds	r3, r7, #7
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d0b5      	beq.n	8004eb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	b004      	add	sp, #16
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f60:	e032      	b.n	8004fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	0018      	movs	r0, r3
 8004f6a:	f000 f87d 	bl	8005068 <I2C_IsErrorOccurred>
 8004f6e:	1e03      	subs	r3, r0, #0
 8004f70:	d001      	beq.n	8004f76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e030      	b.n	8004fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	d025      	beq.n	8004fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7c:	f7fc fd5c 	bl	8001a38 <HAL_GetTick>
 8004f80:	0002      	movs	r2, r0
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d302      	bcc.n	8004f92 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d11a      	bne.n	8004fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d013      	beq.n	8004fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2241      	movs	r2, #65	@ 0x41
 8004fb0:	2120      	movs	r1, #32
 8004fb2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2242      	movs	r2, #66	@ 0x42
 8004fb8:	2100      	movs	r1, #0
 8004fba:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2240      	movs	r2, #64	@ 0x40
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e007      	b.n	8004fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d1c5      	bne.n	8004f62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	0018      	movs	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b004      	add	sp, #16
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fec:	e02f      	b.n	800504e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	68b9      	ldr	r1, [r7, #8]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f000 f837 	bl	8005068 <I2C_IsErrorOccurred>
 8004ffa:	1e03      	subs	r3, r0, #0
 8004ffc:	d001      	beq.n	8005002 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e02d      	b.n	800505e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005002:	f7fc fd19 	bl	8001a38 <HAL_GetTick>
 8005006:	0002      	movs	r2, r0
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	429a      	cmp	r2, r3
 8005010:	d302      	bcc.n	8005018 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d11a      	bne.n	800504e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2220      	movs	r2, #32
 8005020:	4013      	ands	r3, r2
 8005022:	2b20      	cmp	r3, #32
 8005024:	d013      	beq.n	800504e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502a:	2220      	movs	r2, #32
 800502c:	431a      	orrs	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2241      	movs	r2, #65	@ 0x41
 8005036:	2120      	movs	r1, #32
 8005038:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2242      	movs	r2, #66	@ 0x42
 800503e:	2100      	movs	r1, #0
 8005040:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2240      	movs	r2, #64	@ 0x40
 8005046:	2100      	movs	r1, #0
 8005048:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e007      	b.n	800505e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	2220      	movs	r2, #32
 8005056:	4013      	ands	r3, r2
 8005058:	2b20      	cmp	r3, #32
 800505a:	d1c8      	bne.n	8004fee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	0018      	movs	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	b004      	add	sp, #16
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	@ 0x28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005074:	2327      	movs	r3, #39	@ 0x27
 8005076:	18fb      	adds	r3, r7, r3
 8005078:	2200      	movs	r2, #0
 800507a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2210      	movs	r2, #16
 8005090:	4013      	ands	r3, r2
 8005092:	d100      	bne.n	8005096 <I2C_IsErrorOccurred+0x2e>
 8005094:	e079      	b.n	800518a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2210      	movs	r2, #16
 800509c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800509e:	e057      	b.n	8005150 <I2C_IsErrorOccurred+0xe8>
 80050a0:	2227      	movs	r2, #39	@ 0x27
 80050a2:	18bb      	adds	r3, r7, r2
 80050a4:	18ba      	adds	r2, r7, r2
 80050a6:	7812      	ldrb	r2, [r2, #0]
 80050a8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	3301      	adds	r3, #1
 80050ae:	d04f      	beq.n	8005150 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050b0:	f7fc fcc2 	bl	8001a38 <HAL_GetTick>
 80050b4:	0002      	movs	r2, r0
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d302      	bcc.n	80050c6 <I2C_IsErrorOccurred+0x5e>
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d144      	bne.n	8005150 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	2380      	movs	r3, #128	@ 0x80
 80050ce:	01db      	lsls	r3, r3, #7
 80050d0:	4013      	ands	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80050d4:	2013      	movs	r0, #19
 80050d6:	183b      	adds	r3, r7, r0
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	2142      	movs	r1, #66	@ 0x42
 80050dc:	5c52      	ldrb	r2, [r2, r1]
 80050de:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	2380      	movs	r3, #128	@ 0x80
 80050e8:	021b      	lsls	r3, r3, #8
 80050ea:	401a      	ands	r2, r3
 80050ec:	2380      	movs	r3, #128	@ 0x80
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d126      	bne.n	8005142 <I2C_IsErrorOccurred+0xda>
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	2380      	movs	r3, #128	@ 0x80
 80050f8:	01db      	lsls	r3, r3, #7
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d021      	beq.n	8005142 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80050fe:	183b      	adds	r3, r7, r0
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b20      	cmp	r3, #32
 8005104:	d01d      	beq.n	8005142 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2180      	movs	r1, #128	@ 0x80
 8005112:	01c9      	lsls	r1, r1, #7
 8005114:	430a      	orrs	r2, r1
 8005116:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005118:	f7fc fc8e 	bl	8001a38 <HAL_GetTick>
 800511c:	0003      	movs	r3, r0
 800511e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005120:	e00f      	b.n	8005142 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005122:	f7fc fc89 	bl	8001a38 <HAL_GetTick>
 8005126:	0002      	movs	r2, r0
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b19      	cmp	r3, #25
 800512e:	d908      	bls.n	8005142 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	2220      	movs	r2, #32
 8005134:	4313      	orrs	r3, r2
 8005136:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005138:	2327      	movs	r3, #39	@ 0x27
 800513a:	18fb      	adds	r3, r7, r3
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]

              break;
 8005140:	e006      	b.n	8005150 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	2220      	movs	r2, #32
 800514a:	4013      	ands	r3, r2
 800514c:	2b20      	cmp	r3, #32
 800514e:	d1e8      	bne.n	8005122 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	2220      	movs	r2, #32
 8005158:	4013      	ands	r3, r2
 800515a:	2b20      	cmp	r3, #32
 800515c:	d004      	beq.n	8005168 <I2C_IsErrorOccurred+0x100>
 800515e:	2327      	movs	r3, #39	@ 0x27
 8005160:	18fb      	adds	r3, r7, r3
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d09b      	beq.n	80050a0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005168:	2327      	movs	r3, #39	@ 0x27
 800516a:	18fb      	adds	r3, r7, r3
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2220      	movs	r2, #32
 8005178:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	2204      	movs	r2, #4
 800517e:	4313      	orrs	r3, r2
 8005180:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005182:	2327      	movs	r3, #39	@ 0x27
 8005184:	18fb      	adds	r3, r7, r3
 8005186:	2201      	movs	r2, #1
 8005188:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	2380      	movs	r3, #128	@ 0x80
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	4013      	ands	r3, r2
 800519a:	d00c      	beq.n	80051b6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	2201      	movs	r2, #1
 80051a0:	4313      	orrs	r3, r2
 80051a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2280      	movs	r2, #128	@ 0x80
 80051aa:	0052      	lsls	r2, r2, #1
 80051ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051ae:	2327      	movs	r3, #39	@ 0x27
 80051b0:	18fb      	adds	r3, r7, r3
 80051b2:	2201      	movs	r2, #1
 80051b4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	2380      	movs	r3, #128	@ 0x80
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4013      	ands	r3, r2
 80051be:	d00c      	beq.n	80051da <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	2208      	movs	r2, #8
 80051c4:	4313      	orrs	r3, r2
 80051c6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2280      	movs	r2, #128	@ 0x80
 80051ce:	00d2      	lsls	r2, r2, #3
 80051d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051d2:	2327      	movs	r3, #39	@ 0x27
 80051d4:	18fb      	adds	r3, r7, r3
 80051d6:	2201      	movs	r2, #1
 80051d8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	2380      	movs	r3, #128	@ 0x80
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4013      	ands	r3, r2
 80051e2:	d00c      	beq.n	80051fe <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	2202      	movs	r2, #2
 80051e8:	4313      	orrs	r3, r2
 80051ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2280      	movs	r2, #128	@ 0x80
 80051f2:	0092      	lsls	r2, r2, #2
 80051f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051f6:	2327      	movs	r3, #39	@ 0x27
 80051f8:	18fb      	adds	r3, r7, r3
 80051fa:	2201      	movs	r2, #1
 80051fc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80051fe:	2327      	movs	r3, #39	@ 0x27
 8005200:	18fb      	adds	r3, r7, r3
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01d      	beq.n	8005244 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	0018      	movs	r0, r3
 800520c:	f7ff fd9f 	bl	8004d4e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	490e      	ldr	r1, [pc, #56]	@ (8005254 <I2C_IsErrorOccurred+0x1ec>)
 800521c:	400a      	ands	r2, r1
 800521e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	431a      	orrs	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2241      	movs	r2, #65	@ 0x41
 8005230:	2120      	movs	r1, #32
 8005232:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2242      	movs	r2, #66	@ 0x42
 8005238:	2100      	movs	r1, #0
 800523a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2240      	movs	r2, #64	@ 0x40
 8005240:	2100      	movs	r1, #0
 8005242:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005244:	2327      	movs	r3, #39	@ 0x27
 8005246:	18fb      	adds	r3, r7, r3
 8005248:	781b      	ldrb	r3, [r3, #0]
}
 800524a:	0018      	movs	r0, r3
 800524c:	46bd      	mov	sp, r7
 800524e:	b00a      	add	sp, #40	@ 0x28
 8005250:	bd80      	pop	{r7, pc}
 8005252:	46c0      	nop			@ (mov r8, r8)
 8005254:	fe00e800 	.word	0xfe00e800

08005258 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005258:	b590      	push	{r4, r7, lr}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	0008      	movs	r0, r1
 8005262:	0011      	movs	r1, r2
 8005264:	607b      	str	r3, [r7, #4]
 8005266:	240a      	movs	r4, #10
 8005268:	193b      	adds	r3, r7, r4
 800526a:	1c02      	adds	r2, r0, #0
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	2009      	movs	r0, #9
 8005270:	183b      	adds	r3, r7, r0
 8005272:	1c0a      	adds	r2, r1, #0
 8005274:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005276:	193b      	adds	r3, r7, r4
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	059b      	lsls	r3, r3, #22
 800527c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800527e:	183b      	adds	r3, r7, r0
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	0419      	lsls	r1, r3, #16
 8005284:	23ff      	movs	r3, #255	@ 0xff
 8005286:	041b      	lsls	r3, r3, #16
 8005288:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800528a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005292:	4313      	orrs	r3, r2
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	085b      	lsrs	r3, r3, #1
 8005298:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052a2:	0d51      	lsrs	r1, r2, #21
 80052a4:	2280      	movs	r2, #128	@ 0x80
 80052a6:	00d2      	lsls	r2, r2, #3
 80052a8:	400a      	ands	r2, r1
 80052aa:	4907      	ldr	r1, [pc, #28]	@ (80052c8 <I2C_TransferConfig+0x70>)
 80052ac:	430a      	orrs	r2, r1
 80052ae:	43d2      	mvns	r2, r2
 80052b0:	401a      	ands	r2, r3
 80052b2:	0011      	movs	r1, r2
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80052be:	46c0      	nop			@ (mov r8, r8)
 80052c0:	46bd      	mov	sp, r7
 80052c2:	b007      	add	sp, #28
 80052c4:	bd90      	pop	{r4, r7, pc}
 80052c6:	46c0      	nop			@ (mov r8, r8)
 80052c8:	03ff63ff 	.word	0x03ff63ff

080052cc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	000a      	movs	r2, r1
 80052d6:	1cbb      	adds	r3, r7, #2
 80052d8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052e2:	4b3c      	ldr	r3, [pc, #240]	@ (80053d4 <I2C_Enable_IRQ+0x108>)
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d035      	beq.n	8005354 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80052ec:	4b3a      	ldr	r3, [pc, #232]	@ (80053d8 <I2C_Enable_IRQ+0x10c>)
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d030      	beq.n	8005354 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80052f6:	4b39      	ldr	r3, [pc, #228]	@ (80053dc <I2C_Enable_IRQ+0x110>)
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d02b      	beq.n	8005354 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80052fc:	1cbb      	adds	r3, r7, #2
 80052fe:	2200      	movs	r2, #0
 8005300:	5e9b      	ldrsh	r3, [r3, r2]
 8005302:	2b00      	cmp	r3, #0
 8005304:	da03      	bge.n	800530e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	22b8      	movs	r2, #184	@ 0xb8
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800530e:	1cbb      	adds	r3, r7, #2
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	2201      	movs	r2, #1
 8005314:	4013      	ands	r3, r2
 8005316:	d003      	beq.n	8005320 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	22f2      	movs	r2, #242	@ 0xf2
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005320:	1cbb      	adds	r3, r7, #2
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	2202      	movs	r2, #2
 8005326:	4013      	ands	r3, r2
 8005328:	d003      	beq.n	8005332 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	22f4      	movs	r2, #244	@ 0xf4
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005332:	1cbb      	adds	r3, r7, #2
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	2b10      	cmp	r3, #16
 8005338:	d103      	bne.n	8005342 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2290      	movs	r2, #144	@ 0x90
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005342:	1cbb      	adds	r3, r7, #2
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	2b20      	cmp	r3, #32
 8005348:	d137      	bne.n	80053ba <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005352:	e032      	b.n	80053ba <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005354:	1cbb      	adds	r3, r7, #2
 8005356:	2200      	movs	r2, #0
 8005358:	5e9b      	ldrsh	r3, [r3, r2]
 800535a:	2b00      	cmp	r3, #0
 800535c:	da03      	bge.n	8005366 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	22b8      	movs	r2, #184	@ 0xb8
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005366:	1cbb      	adds	r3, r7, #2
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	2201      	movs	r2, #1
 800536c:	4013      	ands	r3, r2
 800536e:	d003      	beq.n	8005378 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	22f2      	movs	r2, #242	@ 0xf2
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005378:	1cbb      	adds	r3, r7, #2
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	2202      	movs	r2, #2
 800537e:	4013      	ands	r3, r2
 8005380:	d003      	beq.n	800538a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	22f4      	movs	r2, #244	@ 0xf4
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800538a:	1cbb      	adds	r3, r7, #2
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	2b10      	cmp	r3, #16
 8005390:	d103      	bne.n	800539a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2290      	movs	r2, #144	@ 0x90
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800539a:	1cbb      	adds	r3, r7, #2
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d103      	bne.n	80053aa <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2260      	movs	r2, #96	@ 0x60
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80053aa:	1cbb      	adds	r3, r7, #2
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	2b40      	cmp	r3, #64	@ 0x40
 80053b0:	d103      	bne.n	80053ba <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2240      	movs	r2, #64	@ 0x40
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6819      	ldr	r1, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	601a      	str	r2, [r3, #0]
}
 80053ca:	46c0      	nop			@ (mov r8, r8)
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b004      	add	sp, #16
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	46c0      	nop			@ (mov r8, r8)
 80053d4:	08003c21 	.word	0x08003c21
 80053d8:	08004071 	.word	0x08004071
 80053dc:	08003e19 	.word	0x08003e19

080053e0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	000a      	movs	r2, r1
 80053ea:	1cbb      	adds	r3, r7, #2
 80053ec:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80053f2:	1cbb      	adds	r3, r7, #2
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	2201      	movs	r2, #1
 80053f8:	4013      	ands	r3, r2
 80053fa:	d010      	beq.n	800541e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2242      	movs	r2, #66	@ 0x42
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2241      	movs	r2, #65	@ 0x41
 8005408:	5c9b      	ldrb	r3, [r3, r2]
 800540a:	b2db      	uxtb	r3, r3
 800540c:	001a      	movs	r2, r3
 800540e:	2328      	movs	r3, #40	@ 0x28
 8005410:	4013      	ands	r3, r2
 8005412:	2b28      	cmp	r3, #40	@ 0x28
 8005414:	d003      	beq.n	800541e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	22b0      	movs	r2, #176	@ 0xb0
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800541e:	1cbb      	adds	r3, r7, #2
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	2202      	movs	r2, #2
 8005424:	4013      	ands	r3, r2
 8005426:	d010      	beq.n	800544a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2244      	movs	r2, #68	@ 0x44
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2241      	movs	r2, #65	@ 0x41
 8005434:	5c9b      	ldrb	r3, [r3, r2]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	001a      	movs	r2, r3
 800543a:	2328      	movs	r3, #40	@ 0x28
 800543c:	4013      	ands	r3, r2
 800543e:	2b28      	cmp	r3, #40	@ 0x28
 8005440:	d003      	beq.n	800544a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	22b0      	movs	r2, #176	@ 0xb0
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800544a:	1cbb      	adds	r3, r7, #2
 800544c:	2200      	movs	r2, #0
 800544e:	5e9b      	ldrsh	r3, [r3, r2]
 8005450:	2b00      	cmp	r3, #0
 8005452:	da03      	bge.n	800545c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	22b8      	movs	r2, #184	@ 0xb8
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800545c:	1cbb      	adds	r3, r7, #2
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	2b10      	cmp	r3, #16
 8005462:	d103      	bne.n	800546c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2290      	movs	r2, #144	@ 0x90
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800546c:	1cbb      	adds	r3, r7, #2
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	2b20      	cmp	r3, #32
 8005472:	d103      	bne.n	800547c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800547c:	1cbb      	adds	r3, r7, #2
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	2b40      	cmp	r3, #64	@ 0x40
 8005482:	d103      	bne.n	800548c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2240      	movs	r2, #64	@ 0x40
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	43d9      	mvns	r1, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	400a      	ands	r2, r1
 800549c:	601a      	str	r2, [r3, #0]
}
 800549e:	46c0      	nop			@ (mov r8, r8)
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b004      	add	sp, #16
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2241      	movs	r2, #65	@ 0x41
 80054b6:	5c9b      	ldrb	r3, [r3, r2]
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	d138      	bne.n	8005530 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2240      	movs	r2, #64	@ 0x40
 80054c2:	5c9b      	ldrb	r3, [r3, r2]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e032      	b.n	8005532 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2240      	movs	r2, #64	@ 0x40
 80054d0:	2101      	movs	r1, #1
 80054d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2241      	movs	r2, #65	@ 0x41
 80054d8:	2124      	movs	r1, #36	@ 0x24
 80054da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2101      	movs	r1, #1
 80054e8:	438a      	bics	r2, r1
 80054ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4911      	ldr	r1, [pc, #68]	@ (800553c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80054f8:	400a      	ands	r2, r1
 80054fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6819      	ldr	r1, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2101      	movs	r1, #1
 8005518:	430a      	orrs	r2, r1
 800551a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2241      	movs	r2, #65	@ 0x41
 8005520:	2120      	movs	r1, #32
 8005522:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2240      	movs	r2, #64	@ 0x40
 8005528:	2100      	movs	r1, #0
 800552a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	e000      	b.n	8005532 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005530:	2302      	movs	r3, #2
  }
}
 8005532:	0018      	movs	r0, r3
 8005534:	46bd      	mov	sp, r7
 8005536:	b002      	add	sp, #8
 8005538:	bd80      	pop	{r7, pc}
 800553a:	46c0      	nop			@ (mov r8, r8)
 800553c:	ffffefff 	.word	0xffffefff

08005540 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2241      	movs	r2, #65	@ 0x41
 800554e:	5c9b      	ldrb	r3, [r3, r2]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b20      	cmp	r3, #32
 8005554:	d139      	bne.n	80055ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2240      	movs	r2, #64	@ 0x40
 800555a:	5c9b      	ldrb	r3, [r3, r2]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005560:	2302      	movs	r3, #2
 8005562:	e033      	b.n	80055cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2240      	movs	r2, #64	@ 0x40
 8005568:	2101      	movs	r1, #1
 800556a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2241      	movs	r2, #65	@ 0x41
 8005570:	2124      	movs	r1, #36	@ 0x24
 8005572:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2101      	movs	r1, #1
 8005580:	438a      	bics	r2, r1
 8005582:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4a11      	ldr	r2, [pc, #68]	@ (80055d4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005590:	4013      	ands	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2101      	movs	r1, #1
 80055b2:	430a      	orrs	r2, r1
 80055b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2241      	movs	r2, #65	@ 0x41
 80055ba:	2120      	movs	r1, #32
 80055bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2240      	movs	r2, #64	@ 0x40
 80055c2:	2100      	movs	r1, #0
 80055c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e000      	b.n	80055cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055ca:	2302      	movs	r3, #2
  }
}
 80055cc:	0018      	movs	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	b004      	add	sp, #16
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	fffff0ff 	.word	0xfffff0ff

080055d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e20f      	b.n	8005a0a <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2201      	movs	r2, #1
 80055f0:	4013      	ands	r3, r2
 80055f2:	d100      	bne.n	80055f6 <HAL_RCC_OscConfig+0x1e>
 80055f4:	e069      	b.n	80056ca <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055f6:	4bc8      	ldr	r3, [pc, #800]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	2238      	movs	r2, #56	@ 0x38
 80055fc:	4013      	ands	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2b08      	cmp	r3, #8
 8005604:	d105      	bne.n	8005612 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d15d      	bne.n	80056ca <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e1fb      	b.n	8005a0a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	2380      	movs	r3, #128	@ 0x80
 8005618:	025b      	lsls	r3, r3, #9
 800561a:	429a      	cmp	r2, r3
 800561c:	d107      	bne.n	800562e <HAL_RCC_OscConfig+0x56>
 800561e:	4bbe      	ldr	r3, [pc, #760]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4bbd      	ldr	r3, [pc, #756]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 8005624:	2180      	movs	r1, #128	@ 0x80
 8005626:	0249      	lsls	r1, r1, #9
 8005628:	430a      	orrs	r2, r1
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	e020      	b.n	8005670 <HAL_RCC_OscConfig+0x98>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	23a0      	movs	r3, #160	@ 0xa0
 8005634:	02db      	lsls	r3, r3, #11
 8005636:	429a      	cmp	r2, r3
 8005638:	d10e      	bne.n	8005658 <HAL_RCC_OscConfig+0x80>
 800563a:	4bb7      	ldr	r3, [pc, #732]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	4bb6      	ldr	r3, [pc, #728]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 8005640:	2180      	movs	r1, #128	@ 0x80
 8005642:	02c9      	lsls	r1, r1, #11
 8005644:	430a      	orrs	r2, r1
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	4bb3      	ldr	r3, [pc, #716]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	4bb2      	ldr	r3, [pc, #712]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 800564e:	2180      	movs	r1, #128	@ 0x80
 8005650:	0249      	lsls	r1, r1, #9
 8005652:	430a      	orrs	r2, r1
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	e00b      	b.n	8005670 <HAL_RCC_OscConfig+0x98>
 8005658:	4baf      	ldr	r3, [pc, #700]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	4bae      	ldr	r3, [pc, #696]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 800565e:	49af      	ldr	r1, [pc, #700]	@ (800591c <HAL_RCC_OscConfig+0x344>)
 8005660:	400a      	ands	r2, r1
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	4bac      	ldr	r3, [pc, #688]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	4bab      	ldr	r3, [pc, #684]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 800566a:	49ad      	ldr	r1, [pc, #692]	@ (8005920 <HAL_RCC_OscConfig+0x348>)
 800566c:	400a      	ands	r2, r1
 800566e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d014      	beq.n	80056a2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005678:	f7fc f9de 	bl	8001a38 <HAL_GetTick>
 800567c:	0003      	movs	r3, r0
 800567e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005680:	e008      	b.n	8005694 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005682:	f7fc f9d9 	bl	8001a38 <HAL_GetTick>
 8005686:	0002      	movs	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b64      	cmp	r3, #100	@ 0x64
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e1ba      	b.n	8005a0a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005694:	4ba0      	ldr	r3, [pc, #640]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	2380      	movs	r3, #128	@ 0x80
 800569a:	029b      	lsls	r3, r3, #10
 800569c:	4013      	ands	r3, r2
 800569e:	d0f0      	beq.n	8005682 <HAL_RCC_OscConfig+0xaa>
 80056a0:	e013      	b.n	80056ca <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a2:	f7fc f9c9 	bl	8001a38 <HAL_GetTick>
 80056a6:	0003      	movs	r3, r0
 80056a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80056ac:	f7fc f9c4 	bl	8001a38 <HAL_GetTick>
 80056b0:	0002      	movs	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b64      	cmp	r3, #100	@ 0x64
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e1a5      	b.n	8005a0a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056be:	4b96      	ldr	r3, [pc, #600]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	2380      	movs	r3, #128	@ 0x80
 80056c4:	029b      	lsls	r3, r3, #10
 80056c6:	4013      	ands	r3, r2
 80056c8:	d1f0      	bne.n	80056ac <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2202      	movs	r2, #2
 80056d0:	4013      	ands	r3, r2
 80056d2:	d100      	bne.n	80056d6 <HAL_RCC_OscConfig+0xfe>
 80056d4:	e086      	b.n	80057e4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056d6:	4b90      	ldr	r3, [pc, #576]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2238      	movs	r2, #56	@ 0x38
 80056dc:	4013      	ands	r3, r2
 80056de:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d12f      	bne.n	8005746 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e18b      	b.n	8005a0a <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f2:	4b89      	ldr	r3, [pc, #548]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	4a8b      	ldr	r2, [pc, #556]	@ (8005924 <HAL_RCC_OscConfig+0x34c>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	0019      	movs	r1, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	021a      	lsls	r2, r3, #8
 8005702:	4b85      	ldr	r3, [pc, #532]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 8005704:	430a      	orrs	r2, r1
 8005706:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d112      	bne.n	8005734 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800570e:	4b82      	ldr	r3, [pc, #520]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a85      	ldr	r2, [pc, #532]	@ (8005928 <HAL_RCC_OscConfig+0x350>)
 8005714:	4013      	ands	r3, r2
 8005716:	0019      	movs	r1, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	4b7e      	ldr	r3, [pc, #504]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 800571e:	430a      	orrs	r2, r1
 8005720:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005722:	4b7d      	ldr	r3, [pc, #500]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	0adb      	lsrs	r3, r3, #11
 8005728:	2207      	movs	r2, #7
 800572a:	4013      	ands	r3, r2
 800572c:	4a7f      	ldr	r2, [pc, #508]	@ (800592c <HAL_RCC_OscConfig+0x354>)
 800572e:	40da      	lsrs	r2, r3
 8005730:	4b7f      	ldr	r3, [pc, #508]	@ (8005930 <HAL_RCC_OscConfig+0x358>)
 8005732:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005734:	4b7f      	ldr	r3, [pc, #508]	@ (8005934 <HAL_RCC_OscConfig+0x35c>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	0018      	movs	r0, r3
 800573a:	f7fc f921 	bl	8001980 <HAL_InitTick>
 800573e:	1e03      	subs	r3, r0, #0
 8005740:	d050      	beq.n	80057e4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e161      	b.n	8005a0a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d030      	beq.n	80057b0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800574e:	4b72      	ldr	r3, [pc, #456]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a75      	ldr	r2, [pc, #468]	@ (8005928 <HAL_RCC_OscConfig+0x350>)
 8005754:	4013      	ands	r3, r2
 8005756:	0019      	movs	r1, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	4b6e      	ldr	r3, [pc, #440]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 800575e:	430a      	orrs	r2, r1
 8005760:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8005762:	4b6d      	ldr	r3, [pc, #436]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	4b6c      	ldr	r3, [pc, #432]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 8005768:	2180      	movs	r1, #128	@ 0x80
 800576a:	0049      	lsls	r1, r1, #1
 800576c:	430a      	orrs	r2, r1
 800576e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005770:	f7fc f962 	bl	8001a38 <HAL_GetTick>
 8005774:	0003      	movs	r3, r0
 8005776:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800577a:	f7fc f95d 	bl	8001a38 <HAL_GetTick>
 800577e:	0002      	movs	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e13e      	b.n	8005a0a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800578c:	4b62      	ldr	r3, [pc, #392]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	2380      	movs	r3, #128	@ 0x80
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	4013      	ands	r3, r2
 8005796:	d0f0      	beq.n	800577a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005798:	4b5f      	ldr	r3, [pc, #380]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	4a61      	ldr	r2, [pc, #388]	@ (8005924 <HAL_RCC_OscConfig+0x34c>)
 800579e:	4013      	ands	r3, r2
 80057a0:	0019      	movs	r1, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	021a      	lsls	r2, r3, #8
 80057a8:	4b5b      	ldr	r3, [pc, #364]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]
 80057ae:	e019      	b.n	80057e4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80057b0:	4b59      	ldr	r3, [pc, #356]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	4b58      	ldr	r3, [pc, #352]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80057b6:	4960      	ldr	r1, [pc, #384]	@ (8005938 <HAL_RCC_OscConfig+0x360>)
 80057b8:	400a      	ands	r2, r1
 80057ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057bc:	f7fc f93c 	bl	8001a38 <HAL_GetTick>
 80057c0:	0003      	movs	r3, r0
 80057c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057c4:	e008      	b.n	80057d8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80057c6:	f7fc f937 	bl	8001a38 <HAL_GetTick>
 80057ca:	0002      	movs	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e118      	b.n	8005a0a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057d8:	4b4f      	ldr	r3, [pc, #316]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	2380      	movs	r3, #128	@ 0x80
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	4013      	ands	r3, r2
 80057e2:	d1f0      	bne.n	80057c6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2208      	movs	r2, #8
 80057ea:	4013      	ands	r3, r2
 80057ec:	d042      	beq.n	8005874 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80057ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2238      	movs	r2, #56	@ 0x38
 80057f4:	4013      	ands	r3, r2
 80057f6:	2b18      	cmp	r3, #24
 80057f8:	d105      	bne.n	8005806 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d138      	bne.n	8005874 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e101      	b.n	8005a0a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d019      	beq.n	8005842 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800580e:	4b42      	ldr	r3, [pc, #264]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 8005810:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005812:	4b41      	ldr	r3, [pc, #260]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 8005814:	2101      	movs	r1, #1
 8005816:	430a      	orrs	r2, r1
 8005818:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581a:	f7fc f90d 	bl	8001a38 <HAL_GetTick>
 800581e:	0003      	movs	r3, r0
 8005820:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005824:	f7fc f908 	bl	8001a38 <HAL_GetTick>
 8005828:	0002      	movs	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e0e9      	b.n	8005a0a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005836:	4b38      	ldr	r3, [pc, #224]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 8005838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800583a:	2202      	movs	r2, #2
 800583c:	4013      	ands	r3, r2
 800583e:	d0f1      	beq.n	8005824 <HAL_RCC_OscConfig+0x24c>
 8005840:	e018      	b.n	8005874 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005842:	4b35      	ldr	r3, [pc, #212]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 8005844:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005846:	4b34      	ldr	r3, [pc, #208]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 8005848:	2101      	movs	r1, #1
 800584a:	438a      	bics	r2, r1
 800584c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584e:	f7fc f8f3 	bl	8001a38 <HAL_GetTick>
 8005852:	0003      	movs	r3, r0
 8005854:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005858:	f7fc f8ee 	bl	8001a38 <HAL_GetTick>
 800585c:	0002      	movs	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e0cf      	b.n	8005a0a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800586a:	4b2b      	ldr	r3, [pc, #172]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 800586c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800586e:	2202      	movs	r2, #2
 8005870:	4013      	ands	r3, r2
 8005872:	d1f1      	bne.n	8005858 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2204      	movs	r2, #4
 800587a:	4013      	ands	r3, r2
 800587c:	d100      	bne.n	8005880 <HAL_RCC_OscConfig+0x2a8>
 800587e:	e084      	b.n	800598a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005880:	230f      	movs	r3, #15
 8005882:	18fb      	adds	r3, r7, r3
 8005884:	2200      	movs	r2, #0
 8005886:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005888:	4b23      	ldr	r3, [pc, #140]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	2238      	movs	r2, #56	@ 0x38
 800588e:	4013      	ands	r3, r2
 8005890:	2b20      	cmp	r3, #32
 8005892:	d106      	bne.n	80058a2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d000      	beq.n	800589e <HAL_RCC_OscConfig+0x2c6>
 800589c:	e075      	b.n	800598a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e0b3      	b.n	8005a0a <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d106      	bne.n	80058b8 <HAL_RCC_OscConfig+0x2e0>
 80058aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80058ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80058ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80058b0:	2101      	movs	r1, #1
 80058b2:	430a      	orrs	r2, r1
 80058b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80058b6:	e01c      	b.n	80058f2 <HAL_RCC_OscConfig+0x31a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2b05      	cmp	r3, #5
 80058be:	d10c      	bne.n	80058da <HAL_RCC_OscConfig+0x302>
 80058c0:	4b15      	ldr	r3, [pc, #84]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80058c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80058c4:	4b14      	ldr	r3, [pc, #80]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80058c6:	2104      	movs	r1, #4
 80058c8:	430a      	orrs	r2, r1
 80058ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80058cc:	4b12      	ldr	r3, [pc, #72]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80058ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80058d0:	4b11      	ldr	r3, [pc, #68]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80058d2:	2101      	movs	r1, #1
 80058d4:	430a      	orrs	r2, r1
 80058d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80058d8:	e00b      	b.n	80058f2 <HAL_RCC_OscConfig+0x31a>
 80058da:	4b0f      	ldr	r3, [pc, #60]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80058dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80058de:	4b0e      	ldr	r3, [pc, #56]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80058e0:	2101      	movs	r1, #1
 80058e2:	438a      	bics	r2, r1
 80058e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80058e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80058e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80058ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005918 <HAL_RCC_OscConfig+0x340>)
 80058ec:	2104      	movs	r1, #4
 80058ee:	438a      	bics	r2, r1
 80058f0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d028      	beq.n	800594c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fa:	f7fc f89d 	bl	8001a38 <HAL_GetTick>
 80058fe:	0003      	movs	r3, r0
 8005900:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005902:	e01d      	b.n	8005940 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005904:	f7fc f898 	bl	8001a38 <HAL_GetTick>
 8005908:	0002      	movs	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	4a0b      	ldr	r2, [pc, #44]	@ (800593c <HAL_RCC_OscConfig+0x364>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d915      	bls.n	8005940 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e078      	b.n	8005a0a <HAL_RCC_OscConfig+0x432>
 8005918:	40021000 	.word	0x40021000
 800591c:	fffeffff 	.word	0xfffeffff
 8005920:	fffbffff 	.word	0xfffbffff
 8005924:	ffff80ff 	.word	0xffff80ff
 8005928:	ffffc7ff 	.word	0xffffc7ff
 800592c:	02dc6c00 	.word	0x02dc6c00
 8005930:	20000030 	.word	0x20000030
 8005934:	20000034 	.word	0x20000034
 8005938:	fffffeff 	.word	0xfffffeff
 800593c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005940:	4b34      	ldr	r3, [pc, #208]	@ (8005a14 <HAL_RCC_OscConfig+0x43c>)
 8005942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005944:	2202      	movs	r2, #2
 8005946:	4013      	ands	r3, r2
 8005948:	d0dc      	beq.n	8005904 <HAL_RCC_OscConfig+0x32c>
 800594a:	e013      	b.n	8005974 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fc f874 	bl	8001a38 <HAL_GetTick>
 8005950:	0003      	movs	r3, r0
 8005952:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005954:	e009      	b.n	800596a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005956:	f7fc f86f 	bl	8001a38 <HAL_GetTick>
 800595a:	0002      	movs	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	4a2d      	ldr	r2, [pc, #180]	@ (8005a18 <HAL_RCC_OscConfig+0x440>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e04f      	b.n	8005a0a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800596a:	4b2a      	ldr	r3, [pc, #168]	@ (8005a14 <HAL_RCC_OscConfig+0x43c>)
 800596c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800596e:	2202      	movs	r2, #2
 8005970:	4013      	ands	r3, r2
 8005972:	d1f0      	bne.n	8005956 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005974:	230f      	movs	r3, #15
 8005976:	18fb      	adds	r3, r7, r3
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d105      	bne.n	800598a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800597e:	4b25      	ldr	r3, [pc, #148]	@ (8005a14 <HAL_RCC_OscConfig+0x43c>)
 8005980:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005982:	4b24      	ldr	r3, [pc, #144]	@ (8005a14 <HAL_RCC_OscConfig+0x43c>)
 8005984:	4925      	ldr	r1, [pc, #148]	@ (8005a1c <HAL_RCC_OscConfig+0x444>)
 8005986:	400a      	ands	r2, r1
 8005988:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2210      	movs	r2, #16
 8005990:	4013      	ands	r3, r2
 8005992:	d039      	beq.n	8005a08 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d01b      	beq.n	80059d4 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800599c:	4b1d      	ldr	r3, [pc, #116]	@ (8005a14 <HAL_RCC_OscConfig+0x43c>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005a14 <HAL_RCC_OscConfig+0x43c>)
 80059a2:	2180      	movs	r1, #128	@ 0x80
 80059a4:	03c9      	lsls	r1, r1, #15
 80059a6:	430a      	orrs	r2, r1
 80059a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059aa:	f7fc f845 	bl	8001a38 <HAL_GetTick>
 80059ae:	0003      	movs	r3, r0
 80059b0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059b4:	f7fc f840 	bl	8001a38 <HAL_GetTick>
 80059b8:	0002      	movs	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e021      	b.n	8005a0a <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80059c6:	4b13      	ldr	r3, [pc, #76]	@ (8005a14 <HAL_RCC_OscConfig+0x43c>)
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	2380      	movs	r3, #128	@ 0x80
 80059cc:	041b      	lsls	r3, r3, #16
 80059ce:	4013      	ands	r3, r2
 80059d0:	d0f0      	beq.n	80059b4 <HAL_RCC_OscConfig+0x3dc>
 80059d2:	e019      	b.n	8005a08 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005a14 <HAL_RCC_OscConfig+0x43c>)
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005a14 <HAL_RCC_OscConfig+0x43c>)
 80059da:	4911      	ldr	r1, [pc, #68]	@ (8005a20 <HAL_RCC_OscConfig+0x448>)
 80059dc:	400a      	ands	r2, r1
 80059de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e0:	f7fc f82a 	bl	8001a38 <HAL_GetTick>
 80059e4:	0003      	movs	r3, r0
 80059e6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059ea:	f7fc f825 	bl	8001a38 <HAL_GetTick>
 80059ee:	0002      	movs	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e006      	b.n	8005a0a <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80059fc:	4b05      	ldr	r3, [pc, #20]	@ (8005a14 <HAL_RCC_OscConfig+0x43c>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	2380      	movs	r3, #128	@ 0x80
 8005a02:	041b      	lsls	r3, r3, #16
 8005a04:	4013      	ands	r3, r2
 8005a06:	d1f0      	bne.n	80059ea <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	b006      	add	sp, #24
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	46c0      	nop			@ (mov r8, r8)
 8005a14:	40021000 	.word	0x40021000
 8005a18:	00001388 	.word	0x00001388
 8005a1c:	efffffff 	.word	0xefffffff
 8005a20:	ffbfffff 	.word	0xffbfffff

08005a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e0f6      	b.n	8005c26 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a38:	4b7d      	ldr	r3, [pc, #500]	@ (8005c30 <HAL_RCC_ClockConfig+0x20c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2207      	movs	r2, #7
 8005a3e:	4013      	ands	r3, r2
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d91e      	bls.n	8005a84 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a46:	4b7a      	ldr	r3, [pc, #488]	@ (8005c30 <HAL_RCC_ClockConfig+0x20c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2207      	movs	r2, #7
 8005a4c:	4393      	bics	r3, r2
 8005a4e:	0019      	movs	r1, r3
 8005a50:	4b77      	ldr	r3, [pc, #476]	@ (8005c30 <HAL_RCC_ClockConfig+0x20c>)
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a58:	f7fb ffee 	bl	8001a38 <HAL_GetTick>
 8005a5c:	0003      	movs	r3, r0
 8005a5e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a60:	e009      	b.n	8005a76 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005a62:	f7fb ffe9 	bl	8001a38 <HAL_GetTick>
 8005a66:	0002      	movs	r2, r0
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	4a71      	ldr	r2, [pc, #452]	@ (8005c34 <HAL_RCC_ClockConfig+0x210>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e0d7      	b.n	8005c26 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a76:	4b6e      	ldr	r3, [pc, #440]	@ (8005c30 <HAL_RCC_ClockConfig+0x20c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2207      	movs	r2, #7
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d1ee      	bne.n	8005a62 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	d017      	beq.n	8005abe <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2204      	movs	r2, #4
 8005a94:	4013      	ands	r3, r2
 8005a96:	d008      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005a98:	4b67      	ldr	r3, [pc, #412]	@ (8005c38 <HAL_RCC_ClockConfig+0x214>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	4a67      	ldr	r2, [pc, #412]	@ (8005c3c <HAL_RCC_ClockConfig+0x218>)
 8005a9e:	401a      	ands	r2, r3
 8005aa0:	4b65      	ldr	r3, [pc, #404]	@ (8005c38 <HAL_RCC_ClockConfig+0x214>)
 8005aa2:	21b0      	movs	r1, #176	@ 0xb0
 8005aa4:	0109      	lsls	r1, r1, #4
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aaa:	4b63      	ldr	r3, [pc, #396]	@ (8005c38 <HAL_RCC_ClockConfig+0x214>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	4a64      	ldr	r2, [pc, #400]	@ (8005c40 <HAL_RCC_ClockConfig+0x21c>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	0019      	movs	r1, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	4b5f      	ldr	r3, [pc, #380]	@ (8005c38 <HAL_RCC_ClockConfig+0x214>)
 8005aba:	430a      	orrs	r2, r1
 8005abc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	d100      	bne.n	8005aca <HAL_RCC_ClockConfig+0xa6>
 8005ac8:	e061      	b.n	8005b8e <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8005aca:	4b5b      	ldr	r3, [pc, #364]	@ (8005c38 <HAL_RCC_ClockConfig+0x214>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	221c      	movs	r2, #28
 8005ad0:	4393      	bics	r3, r2
 8005ad2:	0019      	movs	r1, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	4b57      	ldr	r3, [pc, #348]	@ (8005c38 <HAL_RCC_ClockConfig+0x214>)
 8005ada:	430a      	orrs	r2, r1
 8005adc:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d107      	bne.n	8005af6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ae6:	4b54      	ldr	r3, [pc, #336]	@ (8005c38 <HAL_RCC_ClockConfig+0x214>)
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	2380      	movs	r3, #128	@ 0x80
 8005aec:	029b      	lsls	r3, r3, #10
 8005aee:	4013      	ands	r3, r2
 8005af0:	d12b      	bne.n	8005b4a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e097      	b.n	8005c26 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d107      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005afe:	4b4e      	ldr	r3, [pc, #312]	@ (8005c38 <HAL_RCC_ClockConfig+0x214>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	2380      	movs	r3, #128	@ 0x80
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	4013      	ands	r3, r2
 8005b08:	d11f      	bne.n	8005b4a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e08b      	b.n	8005c26 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d107      	bne.n	8005b26 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8005b16:	4b48      	ldr	r3, [pc, #288]	@ (8005c38 <HAL_RCC_ClockConfig+0x214>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	2380      	movs	r3, #128	@ 0x80
 8005b1c:	041b      	lsls	r3, r3, #16
 8005b1e:	4013      	ands	r3, r2
 8005b20:	d113      	bne.n	8005b4a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e07f      	b.n	8005c26 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d106      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005b2e:	4b42      	ldr	r3, [pc, #264]	@ (8005c38 <HAL_RCC_ClockConfig+0x214>)
 8005b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b32:	2202      	movs	r2, #2
 8005b34:	4013      	ands	r3, r2
 8005b36:	d108      	bne.n	8005b4a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e074      	b.n	8005c26 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005b3c:	4b3e      	ldr	r3, [pc, #248]	@ (8005c38 <HAL_RCC_ClockConfig+0x214>)
 8005b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b40:	2202      	movs	r2, #2
 8005b42:	4013      	ands	r3, r2
 8005b44:	d101      	bne.n	8005b4a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e06d      	b.n	8005c26 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c38 <HAL_RCC_ClockConfig+0x214>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	2207      	movs	r2, #7
 8005b50:	4393      	bics	r3, r2
 8005b52:	0019      	movs	r1, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	4b37      	ldr	r3, [pc, #220]	@ (8005c38 <HAL_RCC_ClockConfig+0x214>)
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b5e:	f7fb ff6b 	bl	8001a38 <HAL_GetTick>
 8005b62:	0003      	movs	r3, r0
 8005b64:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b66:	e009      	b.n	8005b7c <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005b68:	f7fb ff66 	bl	8001a38 <HAL_GetTick>
 8005b6c:	0002      	movs	r2, r0
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	4a30      	ldr	r2, [pc, #192]	@ (8005c34 <HAL_RCC_ClockConfig+0x210>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e054      	b.n	8005c26 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8005c38 <HAL_RCC_ClockConfig+0x214>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	2238      	movs	r2, #56	@ 0x38
 8005b82:	401a      	ands	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d1ec      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b8e:	4b28      	ldr	r3, [pc, #160]	@ (8005c30 <HAL_RCC_ClockConfig+0x20c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2207      	movs	r2, #7
 8005b94:	4013      	ands	r3, r2
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d21e      	bcs.n	8005bda <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b9c:	4b24      	ldr	r3, [pc, #144]	@ (8005c30 <HAL_RCC_ClockConfig+0x20c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2207      	movs	r2, #7
 8005ba2:	4393      	bics	r3, r2
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	4b22      	ldr	r3, [pc, #136]	@ (8005c30 <HAL_RCC_ClockConfig+0x20c>)
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005bae:	f7fb ff43 	bl	8001a38 <HAL_GetTick>
 8005bb2:	0003      	movs	r3, r0
 8005bb4:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005bb6:	e009      	b.n	8005bcc <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005bb8:	f7fb ff3e 	bl	8001a38 <HAL_GetTick>
 8005bbc:	0002      	movs	r2, r0
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8005c34 <HAL_RCC_ClockConfig+0x210>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e02c      	b.n	8005c26 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005bcc:	4b18      	ldr	r3, [pc, #96]	@ (8005c30 <HAL_RCC_ClockConfig+0x20c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2207      	movs	r2, #7
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d1ee      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2204      	movs	r2, #4
 8005be0:	4013      	ands	r3, r2
 8005be2:	d009      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005be4:	4b14      	ldr	r3, [pc, #80]	@ (8005c38 <HAL_RCC_ClockConfig+0x214>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	4a16      	ldr	r2, [pc, #88]	@ (8005c44 <HAL_RCC_ClockConfig+0x220>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	0019      	movs	r1, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691a      	ldr	r2, [r3, #16]
 8005bf2:	4b11      	ldr	r3, [pc, #68]	@ (8005c38 <HAL_RCC_ClockConfig+0x214>)
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005bf8:	f000 f82c 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 8005bfc:	0001      	movs	r1, r0
 8005bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8005c38 <HAL_RCC_ClockConfig+0x214>)
 8005c00:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005c02:	0a1b      	lsrs	r3, r3, #8
 8005c04:	220f      	movs	r2, #15
 8005c06:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005c08:	4b0f      	ldr	r3, [pc, #60]	@ (8005c48 <HAL_RCC_ClockConfig+0x224>)
 8005c0a:	0092      	lsls	r2, r2, #2
 8005c0c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005c0e:	221f      	movs	r2, #31
 8005c10:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005c12:	000a      	movs	r2, r1
 8005c14:	40da      	lsrs	r2, r3
 8005c16:	4b0d      	ldr	r3, [pc, #52]	@ (8005c4c <HAL_RCC_ClockConfig+0x228>)
 8005c18:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c50 <HAL_RCC_ClockConfig+0x22c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f7fb feae 	bl	8001980 <HAL_InitTick>
 8005c24:	0003      	movs	r3, r0
}
 8005c26:	0018      	movs	r0, r3
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	b004      	add	sp, #16
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	46c0      	nop			@ (mov r8, r8)
 8005c30:	40022000 	.word	0x40022000
 8005c34:	00001388 	.word	0x00001388
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	ffff84ff 	.word	0xffff84ff
 8005c40:	fffff0ff 	.word	0xfffff0ff
 8005c44:	ffff8fff 	.word	0xffff8fff
 8005c48:	08008804 	.word	0x08008804
 8005c4c:	20000030 	.word	0x20000030
 8005c50:	20000034 	.word	0x20000034

08005c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8005c5a:	4b27      	ldr	r3, [pc, #156]	@ (8005cf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	089b      	lsrs	r3, r3, #2
 8005c60:	2207      	movs	r2, #7
 8005c62:	4013      	ands	r3, r2
 8005c64:	3301      	adds	r3, #1
 8005c66:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c68:	4b23      	ldr	r3, [pc, #140]	@ (8005cf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2238      	movs	r2, #56	@ 0x38
 8005c6e:	4013      	ands	r3, r2
 8005c70:	d10f      	bne.n	8005c92 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005c72:	4b21      	ldr	r3, [pc, #132]	@ (8005cf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	0adb      	lsrs	r3, r3, #11
 8005c78:	2207      	movs	r2, #7
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	409a      	lsls	r2, r3
 8005c80:	0013      	movs	r3, r2
 8005c82:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	481d      	ldr	r0, [pc, #116]	@ (8005cfc <HAL_RCC_GetSysClockFreq+0xa8>)
 8005c88:	f7fa fa48 	bl	800011c <__udivsi3>
 8005c8c:	0003      	movs	r3, r0
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e027      	b.n	8005ce2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c92:	4b19      	ldr	r3, [pc, #100]	@ (8005cf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	2238      	movs	r2, #56	@ 0x38
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d102      	bne.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c9e:	4b18      	ldr	r3, [pc, #96]	@ (8005d00 <HAL_RCC_GetSysClockFreq+0xac>)
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	e01e      	b.n	8005ce2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005ca4:	4b14      	ldr	r3, [pc, #80]	@ (8005cf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2238      	movs	r2, #56	@ 0x38
 8005caa:	4013      	ands	r3, r2
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d103      	bne.n	8005cb8 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005cb0:	2380      	movs	r3, #128	@ 0x80
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	e014      	b.n	8005ce2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8005cf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	2238      	movs	r2, #56	@ 0x38
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	2b18      	cmp	r3, #24
 8005cc2:	d103      	bne.n	8005ccc <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005cc4:	23fa      	movs	r3, #250	@ 0xfa
 8005cc6:	01db      	lsls	r3, r3, #7
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	e00a      	b.n	8005ce2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8005ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	2238      	movs	r2, #56	@ 0x38
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	2b10      	cmp	r3, #16
 8005cd6:	d102      	bne.n	8005cde <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8005cd8:	4b08      	ldr	r3, [pc, #32]	@ (8005cfc <HAL_RCC_GetSysClockFreq+0xa8>)
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	e001      	b.n	8005ce2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8005ce2:	68b9      	ldr	r1, [r7, #8]
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f7fa fa19 	bl	800011c <__udivsi3>
 8005cea:	0003      	movs	r3, r0
 8005cec:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8005cee:	68fb      	ldr	r3, [r7, #12]
}
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	b004      	add	sp, #16
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	02dc6c00 	.word	0x02dc6c00
 8005d00:	007a1200 	.word	0x007a1200

08005d04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005d08:	f7ff ffa4 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 8005d0c:	0001      	movs	r1, r0
 8005d0e:	4b09      	ldr	r3, [pc, #36]	@ (8005d34 <HAL_RCC_GetHCLKFreq+0x30>)
 8005d10:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005d12:	0a1b      	lsrs	r3, r3, #8
 8005d14:	220f      	movs	r2, #15
 8005d16:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005d18:	4b07      	ldr	r3, [pc, #28]	@ (8005d38 <HAL_RCC_GetHCLKFreq+0x34>)
 8005d1a:	0092      	lsls	r2, r2, #2
 8005d1c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005d1e:	221f      	movs	r2, #31
 8005d20:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005d22:	000a      	movs	r2, r1
 8005d24:	40da      	lsrs	r2, r3
 8005d26:	4b05      	ldr	r3, [pc, #20]	@ (8005d3c <HAL_RCC_GetHCLKFreq+0x38>)
 8005d28:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8005d2a:	4b04      	ldr	r3, [pc, #16]	@ (8005d3c <HAL_RCC_GetHCLKFreq+0x38>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
}
 8005d2e:	0018      	movs	r0, r3
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40021000 	.word	0x40021000
 8005d38:	08008804 	.word	0x08008804
 8005d3c:	20000030 	.word	0x20000030

08005d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8005d44:	f7ff ffde 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8005d48:	0001      	movs	r1, r0
 8005d4a:	4b07      	ldr	r3, [pc, #28]	@ (8005d68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	0b1b      	lsrs	r3, r3, #12
 8005d50:	2207      	movs	r2, #7
 8005d52:	401a      	ands	r2, r3
 8005d54:	4b05      	ldr	r3, [pc, #20]	@ (8005d6c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8005d56:	0092      	lsls	r2, r2, #2
 8005d58:	58d3      	ldr	r3, [r2, r3]
 8005d5a:	221f      	movs	r2, #31
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	40d9      	lsrs	r1, r3
 8005d60:	000b      	movs	r3, r1
}
 8005d62:	0018      	movs	r0, r3
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	08008844 	.word	0x08008844

08005d70 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005d78:	2313      	movs	r3, #19
 8005d7a:	18fb      	adds	r3, r7, r3
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d80:	2312      	movs	r3, #18
 8005d82:	18fb      	adds	r3, r7, r3
 8005d84:	2200      	movs	r2, #0
 8005d86:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2240      	movs	r2, #64	@ 0x40
 8005d8e:	4013      	ands	r3, r2
 8005d90:	d100      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8005d92:	e079      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d94:	2011      	movs	r0, #17
 8005d96:	183b      	adds	r3, r7, r0
 8005d98:	2200      	movs	r2, #0
 8005d9a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005da0:	2380      	movs	r3, #128	@ 0x80
 8005da2:	055b      	lsls	r3, r3, #21
 8005da4:	4013      	ands	r3, r2
 8005da6:	d110      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005da8:	4b67      	ldr	r3, [pc, #412]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005daa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005dac:	4b66      	ldr	r3, [pc, #408]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005dae:	2180      	movs	r1, #128	@ 0x80
 8005db0:	0549      	lsls	r1, r1, #21
 8005db2:	430a      	orrs	r2, r1
 8005db4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005db6:	4b64      	ldr	r3, [pc, #400]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005db8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005dba:	2380      	movs	r3, #128	@ 0x80
 8005dbc:	055b      	lsls	r3, r3, #21
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	60bb      	str	r3, [r7, #8]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dc4:	183b      	adds	r3, r7, r0
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8005dca:	4b5f      	ldr	r3, [pc, #380]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005dcc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005dce:	23c0      	movs	r3, #192	@ 0xc0
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d019      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d014      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8005de6:	4b58      	ldr	r3, [pc, #352]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dea:	4a58      	ldr	r2, [pc, #352]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005dec:	4013      	ands	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005df0:	4b55      	ldr	r3, [pc, #340]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005df2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005df4:	4b54      	ldr	r3, [pc, #336]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005df6:	2180      	movs	r1, #128	@ 0x80
 8005df8:	0249      	lsls	r1, r1, #9
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dfe:	4b52      	ldr	r3, [pc, #328]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e02:	4b51      	ldr	r3, [pc, #324]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e04:	4952      	ldr	r1, [pc, #328]	@ (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e06:	400a      	ands	r2, r1
 8005e08:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8005e0a:	4b4f      	ldr	r3, [pc, #316]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2201      	movs	r2, #1
 8005e14:	4013      	ands	r3, r2
 8005e16:	d016      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e18:	f7fb fe0e 	bl	8001a38 <HAL_GetTick>
 8005e1c:	0003      	movs	r3, r0
 8005e1e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005e20:	e00c      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e22:	f7fb fe09 	bl	8001a38 <HAL_GetTick>
 8005e26:	0002      	movs	r2, r0
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	4a49      	ldr	r2, [pc, #292]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d904      	bls.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8005e32:	2313      	movs	r3, #19
 8005e34:	18fb      	adds	r3, r7, r3
 8005e36:	2203      	movs	r2, #3
 8005e38:	701a      	strb	r2, [r3, #0]
          break;
 8005e3a:	e004      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005e3c:	4b42      	ldr	r3, [pc, #264]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e40:	2202      	movs	r2, #2
 8005e42:	4013      	ands	r3, r2
 8005e44:	d0ed      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8005e46:	2313      	movs	r3, #19
 8005e48:	18fb      	adds	r3, r7, r3
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10a      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e50:	4b3d      	ldr	r3, [pc, #244]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e54:	4a3d      	ldr	r2, [pc, #244]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005e56:	4013      	ands	r3, r2
 8005e58:	0019      	movs	r1, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69da      	ldr	r2, [r3, #28]
 8005e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e60:	430a      	orrs	r2, r1
 8005e62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e64:	e005      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e66:	2312      	movs	r3, #18
 8005e68:	18fb      	adds	r3, r7, r3
 8005e6a:	2213      	movs	r2, #19
 8005e6c:	18ba      	adds	r2, r7, r2
 8005e6e:	7812      	ldrb	r2, [r2, #0]
 8005e70:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e72:	2311      	movs	r3, #17
 8005e74:	18fb      	adds	r3, r7, r3
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d105      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e7c:	4b32      	ldr	r3, [pc, #200]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e80:	4b31      	ldr	r3, [pc, #196]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e82:	4935      	ldr	r1, [pc, #212]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005e84:	400a      	ands	r2, r1
 8005e86:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	4013      	ands	r3, r2
 8005e90:	d009      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e92:	4b2d      	ldr	r3, [pc, #180]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e96:	2203      	movs	r2, #3
 8005e98:	4393      	bics	r3, r2
 8005e9a:	0019      	movs	r1, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	4b29      	ldr	r3, [pc, #164]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	4013      	ands	r3, r2
 8005eae:	d009      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eb0:	4b25      	ldr	r3, [pc, #148]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb4:	4a29      	ldr	r2, [pc, #164]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	0019      	movs	r1, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	4b22      	ldr	r3, [pc, #136]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d008      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ece:	4b1e      	ldr	r3, [pc, #120]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	0899      	lsrs	r1, r3, #2
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	4b1b      	ldr	r3, [pc, #108]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005edc:	430a      	orrs	r2, r1
 8005ede:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2208      	movs	r2, #8
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	d009      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005eea:	4b17      	ldr	r3, [pc, #92]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eee:	4a1c      	ldr	r2, [pc, #112]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	0019      	movs	r1, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	4b13      	ldr	r3, [pc, #76]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005efa:	430a      	orrs	r2, r1
 8005efc:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2204      	movs	r2, #4
 8005f04:	4013      	ands	r3, r2
 8005f06:	d009      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005f08:	4b0f      	ldr	r3, [pc, #60]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f0c:	4a15      	ldr	r2, [pc, #84]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	0019      	movs	r1, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	4b0c      	ldr	r3, [pc, #48]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2280      	movs	r2, #128	@ 0x80
 8005f22:	4013      	ands	r3, r2
 8005f24:	d009      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8005f26:	4b08      	ldr	r3, [pc, #32]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	22e0      	movs	r2, #224	@ 0xe0
 8005f2c:	4393      	bics	r3, r2
 8005f2e:	0019      	movs	r1, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	4b04      	ldr	r3, [pc, #16]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005f36:	430a      	orrs	r2, r1
 8005f38:	601a      	str	r2, [r3, #0]
  }
  return status;
 8005f3a:	2312      	movs	r3, #18
 8005f3c:	18fb      	adds	r3, r7, r3
 8005f3e:	781b      	ldrb	r3, [r3, #0]
}
 8005f40:	0018      	movs	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	b006      	add	sp, #24
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	fffffcff 	.word	0xfffffcff
 8005f50:	fffeffff 	.word	0xfffeffff
 8005f54:	00001388 	.word	0x00001388
 8005f58:	efffffff 	.word	0xefffffff
 8005f5c:	ffffcfff 	.word	0xffffcfff
 8005f60:	ffffefff 	.word	0xffffefff
 8005f64:	ffff3fff 	.word	0xffff3fff

08005f68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e04a      	b.n	8006010 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	223d      	movs	r2, #61	@ 0x3d
 8005f7e:	5c9b      	ldrb	r3, [r3, r2]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d107      	bne.n	8005f96 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	223c      	movs	r2, #60	@ 0x3c
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	0018      	movs	r0, r3
 8005f92:	f7fb fbc5 	bl	8001720 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	223d      	movs	r2, #61	@ 0x3d
 8005f9a:	2102      	movs	r1, #2
 8005f9c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	0019      	movs	r1, r3
 8005fa8:	0010      	movs	r0, r2
 8005faa:	f000 fa13 	bl	80063d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2248      	movs	r2, #72	@ 0x48
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	223e      	movs	r2, #62	@ 0x3e
 8005fba:	2101      	movs	r1, #1
 8005fbc:	5499      	strb	r1, [r3, r2]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	223f      	movs	r2, #63	@ 0x3f
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	5499      	strb	r1, [r3, r2]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2240      	movs	r2, #64	@ 0x40
 8005fca:	2101      	movs	r1, #1
 8005fcc:	5499      	strb	r1, [r3, r2]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2241      	movs	r2, #65	@ 0x41
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	5499      	strb	r1, [r3, r2]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2242      	movs	r2, #66	@ 0x42
 8005fda:	2101      	movs	r1, #1
 8005fdc:	5499      	strb	r1, [r3, r2]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2243      	movs	r2, #67	@ 0x43
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2244      	movs	r2, #68	@ 0x44
 8005fea:	2101      	movs	r1, #1
 8005fec:	5499      	strb	r1, [r3, r2]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2245      	movs	r2, #69	@ 0x45
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	5499      	strb	r1, [r3, r2]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2246      	movs	r2, #70	@ 0x46
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	5499      	strb	r1, [r3, r2]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2247      	movs	r2, #71	@ 0x47
 8006002:	2101      	movs	r1, #1
 8006004:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	223d      	movs	r2, #61	@ 0x3d
 800600a:	2101      	movs	r1, #1
 800600c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	0018      	movs	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	b002      	add	sp, #8
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d108      	bne.n	800603a <HAL_TIM_PWM_Start+0x22>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	223e      	movs	r2, #62	@ 0x3e
 800602c:	5c9b      	ldrb	r3, [r3, r2]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	1e5a      	subs	r2, r3, #1
 8006034:	4193      	sbcs	r3, r2
 8006036:	b2db      	uxtb	r3, r3
 8006038:	e037      	b.n	80060aa <HAL_TIM_PWM_Start+0x92>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b04      	cmp	r3, #4
 800603e:	d108      	bne.n	8006052 <HAL_TIM_PWM_Start+0x3a>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	223f      	movs	r2, #63	@ 0x3f
 8006044:	5c9b      	ldrb	r3, [r3, r2]
 8006046:	b2db      	uxtb	r3, r3
 8006048:	3b01      	subs	r3, #1
 800604a:	1e5a      	subs	r2, r3, #1
 800604c:	4193      	sbcs	r3, r2
 800604e:	b2db      	uxtb	r3, r3
 8006050:	e02b      	b.n	80060aa <HAL_TIM_PWM_Start+0x92>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b08      	cmp	r3, #8
 8006056:	d108      	bne.n	800606a <HAL_TIM_PWM_Start+0x52>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2240      	movs	r2, #64	@ 0x40
 800605c:	5c9b      	ldrb	r3, [r3, r2]
 800605e:	b2db      	uxtb	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	1e5a      	subs	r2, r3, #1
 8006064:	4193      	sbcs	r3, r2
 8006066:	b2db      	uxtb	r3, r3
 8006068:	e01f      	b.n	80060aa <HAL_TIM_PWM_Start+0x92>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b0c      	cmp	r3, #12
 800606e:	d108      	bne.n	8006082 <HAL_TIM_PWM_Start+0x6a>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2241      	movs	r2, #65	@ 0x41
 8006074:	5c9b      	ldrb	r3, [r3, r2]
 8006076:	b2db      	uxtb	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	1e5a      	subs	r2, r3, #1
 800607c:	4193      	sbcs	r3, r2
 800607e:	b2db      	uxtb	r3, r3
 8006080:	e013      	b.n	80060aa <HAL_TIM_PWM_Start+0x92>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b10      	cmp	r3, #16
 8006086:	d108      	bne.n	800609a <HAL_TIM_PWM_Start+0x82>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2242      	movs	r2, #66	@ 0x42
 800608c:	5c9b      	ldrb	r3, [r3, r2]
 800608e:	b2db      	uxtb	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	1e5a      	subs	r2, r3, #1
 8006094:	4193      	sbcs	r3, r2
 8006096:	b2db      	uxtb	r3, r3
 8006098:	e007      	b.n	80060aa <HAL_TIM_PWM_Start+0x92>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2243      	movs	r2, #67	@ 0x43
 800609e:	5c9b      	ldrb	r3, [r3, r2]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	3b01      	subs	r3, #1
 80060a4:	1e5a      	subs	r2, r3, #1
 80060a6:	4193      	sbcs	r3, r2
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e081      	b.n	80061b6 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d104      	bne.n	80060c2 <HAL_TIM_PWM_Start+0xaa>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	223e      	movs	r2, #62	@ 0x3e
 80060bc:	2102      	movs	r1, #2
 80060be:	5499      	strb	r1, [r3, r2]
 80060c0:	e023      	b.n	800610a <HAL_TIM_PWM_Start+0xf2>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d104      	bne.n	80060d2 <HAL_TIM_PWM_Start+0xba>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	223f      	movs	r2, #63	@ 0x3f
 80060cc:	2102      	movs	r1, #2
 80060ce:	5499      	strb	r1, [r3, r2]
 80060d0:	e01b      	b.n	800610a <HAL_TIM_PWM_Start+0xf2>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d104      	bne.n	80060e2 <HAL_TIM_PWM_Start+0xca>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2240      	movs	r2, #64	@ 0x40
 80060dc:	2102      	movs	r1, #2
 80060de:	5499      	strb	r1, [r3, r2]
 80060e0:	e013      	b.n	800610a <HAL_TIM_PWM_Start+0xf2>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b0c      	cmp	r3, #12
 80060e6:	d104      	bne.n	80060f2 <HAL_TIM_PWM_Start+0xda>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2241      	movs	r2, #65	@ 0x41
 80060ec:	2102      	movs	r1, #2
 80060ee:	5499      	strb	r1, [r3, r2]
 80060f0:	e00b      	b.n	800610a <HAL_TIM_PWM_Start+0xf2>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b10      	cmp	r3, #16
 80060f6:	d104      	bne.n	8006102 <HAL_TIM_PWM_Start+0xea>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2242      	movs	r2, #66	@ 0x42
 80060fc:	2102      	movs	r1, #2
 80060fe:	5499      	strb	r1, [r3, r2]
 8006100:	e003      	b.n	800610a <HAL_TIM_PWM_Start+0xf2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2243      	movs	r2, #67	@ 0x43
 8006106:	2102      	movs	r1, #2
 8006108:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	2201      	movs	r2, #1
 8006112:	0018      	movs	r0, r3
 8006114:	f000 fc7e 	bl	8006a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a28      	ldr	r2, [pc, #160]	@ (80061c0 <HAL_TIM_PWM_Start+0x1a8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d009      	beq.n	8006136 <HAL_TIM_PWM_Start+0x11e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a27      	ldr	r2, [pc, #156]	@ (80061c4 <HAL_TIM_PWM_Start+0x1ac>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d004      	beq.n	8006136 <HAL_TIM_PWM_Start+0x11e>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a25      	ldr	r2, [pc, #148]	@ (80061c8 <HAL_TIM_PWM_Start+0x1b0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d101      	bne.n	800613a <HAL_TIM_PWM_Start+0x122>
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <HAL_TIM_PWM_Start+0x124>
 800613a:	2300      	movs	r3, #0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d008      	beq.n	8006152 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2180      	movs	r1, #128	@ 0x80
 800614c:	0209      	lsls	r1, r1, #8
 800614e:	430a      	orrs	r2, r1
 8006150:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1a      	ldr	r2, [pc, #104]	@ (80061c0 <HAL_TIM_PWM_Start+0x1a8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00a      	beq.n	8006172 <HAL_TIM_PWM_Start+0x15a>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	2380      	movs	r3, #128	@ 0x80
 8006162:	05db      	lsls	r3, r3, #23
 8006164:	429a      	cmp	r2, r3
 8006166:	d004      	beq.n	8006172 <HAL_TIM_PWM_Start+0x15a>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a17      	ldr	r2, [pc, #92]	@ (80061cc <HAL_TIM_PWM_Start+0x1b4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d116      	bne.n	80061a0 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	4a15      	ldr	r2, [pc, #84]	@ (80061d0 <HAL_TIM_PWM_Start+0x1b8>)
 800617a:	4013      	ands	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b06      	cmp	r3, #6
 8006182:	d016      	beq.n	80061b2 <HAL_TIM_PWM_Start+0x19a>
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	2380      	movs	r3, #128	@ 0x80
 8006188:	025b      	lsls	r3, r3, #9
 800618a:	429a      	cmp	r2, r3
 800618c:	d011      	beq.n	80061b2 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2101      	movs	r1, #1
 800619a:	430a      	orrs	r2, r1
 800619c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800619e:	e008      	b.n	80061b2 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2101      	movs	r1, #1
 80061ac:	430a      	orrs	r2, r1
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	e000      	b.n	80061b4 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	0018      	movs	r0, r3
 80061b8:	46bd      	mov	sp, r7
 80061ba:	b004      	add	sp, #16
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	46c0      	nop			@ (mov r8, r8)
 80061c0:	40012c00 	.word	0x40012c00
 80061c4:	40014400 	.word	0x40014400
 80061c8:	40014800 	.word	0x40014800
 80061cc:	40000400 	.word	0x40000400
 80061d0:	00010007 	.word	0x00010007

080061d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061e0:	2317      	movs	r3, #23
 80061e2:	18fb      	adds	r3, r7, r3
 80061e4:	2200      	movs	r2, #0
 80061e6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	223c      	movs	r2, #60	@ 0x3c
 80061ec:	5c9b      	ldrb	r3, [r3, r2]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80061f2:	2302      	movs	r3, #2
 80061f4:	e0e5      	b.n	80063c2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	223c      	movs	r2, #60	@ 0x3c
 80061fa:	2101      	movs	r1, #1
 80061fc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b14      	cmp	r3, #20
 8006202:	d900      	bls.n	8006206 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006204:	e0d1      	b.n	80063aa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	009a      	lsls	r2, r3, #2
 800620a:	4b70      	ldr	r3, [pc, #448]	@ (80063cc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800620c:	18d3      	adds	r3, r2, r3
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	0011      	movs	r1, r2
 800621a:	0018      	movs	r0, r3
 800621c:	f000 f95e 	bl	80064dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2108      	movs	r1, #8
 800622c:	430a      	orrs	r2, r1
 800622e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699a      	ldr	r2, [r3, #24]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2104      	movs	r1, #4
 800623c:	438a      	bics	r2, r1
 800623e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6999      	ldr	r1, [r3, #24]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	691a      	ldr	r2, [r3, #16]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	619a      	str	r2, [r3, #24]
      break;
 8006252:	e0af      	b.n	80063b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	0011      	movs	r1, r2
 800625c:	0018      	movs	r0, r3
 800625e:	f000 f9bd 	bl	80065dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	699a      	ldr	r2, [r3, #24]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2180      	movs	r1, #128	@ 0x80
 800626e:	0109      	lsls	r1, r1, #4
 8006270:	430a      	orrs	r2, r1
 8006272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4954      	ldr	r1, [pc, #336]	@ (80063d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006280:	400a      	ands	r2, r1
 8006282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6999      	ldr	r1, [r3, #24]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	021a      	lsls	r2, r3, #8
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	619a      	str	r2, [r3, #24]
      break;
 8006298:	e08c      	b.n	80063b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	0011      	movs	r1, r2
 80062a2:	0018      	movs	r0, r3
 80062a4:	f000 fa18 	bl	80066d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	69da      	ldr	r2, [r3, #28]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2108      	movs	r1, #8
 80062b4:	430a      	orrs	r2, r1
 80062b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69da      	ldr	r2, [r3, #28]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2104      	movs	r1, #4
 80062c4:	438a      	bics	r2, r1
 80062c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69d9      	ldr	r1, [r3, #28]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	691a      	ldr	r2, [r3, #16]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	61da      	str	r2, [r3, #28]
      break;
 80062da:	e06b      	b.n	80063b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	0011      	movs	r1, r2
 80062e4:	0018      	movs	r0, r3
 80062e6:	f000 fa79 	bl	80067dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	69da      	ldr	r2, [r3, #28]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2180      	movs	r1, #128	@ 0x80
 80062f6:	0109      	lsls	r1, r1, #4
 80062f8:	430a      	orrs	r2, r1
 80062fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	69da      	ldr	r2, [r3, #28]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4932      	ldr	r1, [pc, #200]	@ (80063d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006308:	400a      	ands	r2, r1
 800630a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	69d9      	ldr	r1, [r3, #28]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	021a      	lsls	r2, r3, #8
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	61da      	str	r2, [r3, #28]
      break;
 8006320:	e048      	b.n	80063b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	0011      	movs	r1, r2
 800632a:	0018      	movs	r0, r3
 800632c:	f000 faba 	bl	80068a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2108      	movs	r1, #8
 800633c:	430a      	orrs	r2, r1
 800633e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2104      	movs	r1, #4
 800634c:	438a      	bics	r2, r1
 800634e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	691a      	ldr	r2, [r3, #16]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006362:	e027      	b.n	80063b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	0011      	movs	r1, r2
 800636c:	0018      	movs	r0, r3
 800636e:	f000 faf3 	bl	8006958 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2180      	movs	r1, #128	@ 0x80
 800637e:	0109      	lsls	r1, r1, #4
 8006380:	430a      	orrs	r2, r1
 8006382:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4910      	ldr	r1, [pc, #64]	@ (80063d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006390:	400a      	ands	r2, r1
 8006392:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	021a      	lsls	r2, r3, #8
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80063a8:	e004      	b.n	80063b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80063aa:	2317      	movs	r3, #23
 80063ac:	18fb      	adds	r3, r7, r3
 80063ae:	2201      	movs	r2, #1
 80063b0:	701a      	strb	r2, [r3, #0]
      break;
 80063b2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	223c      	movs	r2, #60	@ 0x3c
 80063b8:	2100      	movs	r1, #0
 80063ba:	5499      	strb	r1, [r3, r2]

  return status;
 80063bc:	2317      	movs	r3, #23
 80063be:	18fb      	adds	r3, r7, r3
 80063c0:	781b      	ldrb	r3, [r3, #0]
}
 80063c2:	0018      	movs	r0, r3
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b006      	add	sp, #24
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	46c0      	nop			@ (mov r8, r8)
 80063cc:	08008864 	.word	0x08008864
 80063d0:	fffffbff 	.word	0xfffffbff

080063d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a37      	ldr	r2, [pc, #220]	@ (80064c4 <TIM_Base_SetConfig+0xf0>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d008      	beq.n	80063fe <TIM_Base_SetConfig+0x2a>
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	2380      	movs	r3, #128	@ 0x80
 80063f0:	05db      	lsls	r3, r3, #23
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d003      	beq.n	80063fe <TIM_Base_SetConfig+0x2a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a33      	ldr	r2, [pc, #204]	@ (80064c8 <TIM_Base_SetConfig+0xf4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d108      	bne.n	8006410 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2270      	movs	r2, #112	@ 0x70
 8006402:	4393      	bics	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a2c      	ldr	r2, [pc, #176]	@ (80064c4 <TIM_Base_SetConfig+0xf0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d014      	beq.n	8006442 <TIM_Base_SetConfig+0x6e>
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	2380      	movs	r3, #128	@ 0x80
 800641c:	05db      	lsls	r3, r3, #23
 800641e:	429a      	cmp	r2, r3
 8006420:	d00f      	beq.n	8006442 <TIM_Base_SetConfig+0x6e>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a28      	ldr	r2, [pc, #160]	@ (80064c8 <TIM_Base_SetConfig+0xf4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00b      	beq.n	8006442 <TIM_Base_SetConfig+0x6e>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a27      	ldr	r2, [pc, #156]	@ (80064cc <TIM_Base_SetConfig+0xf8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d007      	beq.n	8006442 <TIM_Base_SetConfig+0x6e>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a26      	ldr	r2, [pc, #152]	@ (80064d0 <TIM_Base_SetConfig+0xfc>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d003      	beq.n	8006442 <TIM_Base_SetConfig+0x6e>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a25      	ldr	r2, [pc, #148]	@ (80064d4 <TIM_Base_SetConfig+0x100>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d108      	bne.n	8006454 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4a24      	ldr	r2, [pc, #144]	@ (80064d8 <TIM_Base_SetConfig+0x104>)
 8006446:	4013      	ands	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2280      	movs	r2, #128	@ 0x80
 8006458:	4393      	bics	r3, r2
 800645a:	001a      	movs	r2, r3
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a11      	ldr	r2, [pc, #68]	@ (80064c4 <TIM_Base_SetConfig+0xf0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d007      	beq.n	8006492 <TIM_Base_SetConfig+0xbe>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a12      	ldr	r2, [pc, #72]	@ (80064d0 <TIM_Base_SetConfig+0xfc>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d003      	beq.n	8006492 <TIM_Base_SetConfig+0xbe>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a11      	ldr	r2, [pc, #68]	@ (80064d4 <TIM_Base_SetConfig+0x100>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d103      	bne.n	800649a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	691a      	ldr	r2, [r3, #16]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	2201      	movs	r2, #1
 80064a6:	4013      	ands	r3, r2
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d106      	bne.n	80064ba <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	2201      	movs	r2, #1
 80064b2:	4393      	bics	r3, r2
 80064b4:	001a      	movs	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	611a      	str	r2, [r3, #16]
  }
}
 80064ba:	46c0      	nop			@ (mov r8, r8)
 80064bc:	46bd      	mov	sp, r7
 80064be:	b004      	add	sp, #16
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	46c0      	nop			@ (mov r8, r8)
 80064c4:	40012c00 	.word	0x40012c00
 80064c8:	40000400 	.word	0x40000400
 80064cc:	40002000 	.word	0x40002000
 80064d0:	40014400 	.word	0x40014400
 80064d4:	40014800 	.word	0x40014800
 80064d8:	fffffcff 	.word	0xfffffcff

080064dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	2201      	movs	r2, #1
 80064f2:	4393      	bics	r3, r2
 80064f4:	001a      	movs	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a2e      	ldr	r2, [pc, #184]	@ (80065c4 <TIM_OC1_SetConfig+0xe8>)
 800650a:	4013      	ands	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2203      	movs	r2, #3
 8006512:	4393      	bics	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4313      	orrs	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2202      	movs	r2, #2
 8006524:	4393      	bics	r3, r2
 8006526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a24      	ldr	r2, [pc, #144]	@ (80065c8 <TIM_OC1_SetConfig+0xec>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d007      	beq.n	800654a <TIM_OC1_SetConfig+0x6e>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a23      	ldr	r2, [pc, #140]	@ (80065cc <TIM_OC1_SetConfig+0xf0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d003      	beq.n	800654a <TIM_OC1_SetConfig+0x6e>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a22      	ldr	r2, [pc, #136]	@ (80065d0 <TIM_OC1_SetConfig+0xf4>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d10c      	bne.n	8006564 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2208      	movs	r2, #8
 800654e:	4393      	bics	r3, r2
 8006550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	2204      	movs	r2, #4
 8006560:	4393      	bics	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a18      	ldr	r2, [pc, #96]	@ (80065c8 <TIM_OC1_SetConfig+0xec>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d007      	beq.n	800657c <TIM_OC1_SetConfig+0xa0>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a17      	ldr	r2, [pc, #92]	@ (80065cc <TIM_OC1_SetConfig+0xf0>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <TIM_OC1_SetConfig+0xa0>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a16      	ldr	r2, [pc, #88]	@ (80065d0 <TIM_OC1_SetConfig+0xf4>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d111      	bne.n	80065a0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	4a15      	ldr	r2, [pc, #84]	@ (80065d4 <TIM_OC1_SetConfig+0xf8>)
 8006580:	4013      	ands	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	4a14      	ldr	r2, [pc, #80]	@ (80065d8 <TIM_OC1_SetConfig+0xfc>)
 8006588:	4013      	ands	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	621a      	str	r2, [r3, #32]
}
 80065ba:	46c0      	nop			@ (mov r8, r8)
 80065bc:	46bd      	mov	sp, r7
 80065be:	b006      	add	sp, #24
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	46c0      	nop			@ (mov r8, r8)
 80065c4:	fffeff8f 	.word	0xfffeff8f
 80065c8:	40012c00 	.word	0x40012c00
 80065cc:	40014400 	.word	0x40014400
 80065d0:	40014800 	.word	0x40014800
 80065d4:	fffffeff 	.word	0xfffffeff
 80065d8:	fffffdff 	.word	0xfffffdff

080065dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	2210      	movs	r2, #16
 80065f2:	4393      	bics	r3, r2
 80065f4:	001a      	movs	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4a2c      	ldr	r2, [pc, #176]	@ (80066bc <TIM_OC2_SetConfig+0xe0>)
 800660a:	4013      	ands	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a2b      	ldr	r2, [pc, #172]	@ (80066c0 <TIM_OC2_SetConfig+0xe4>)
 8006612:	4013      	ands	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2220      	movs	r2, #32
 8006626:	4393      	bics	r3, r2
 8006628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a22      	ldr	r2, [pc, #136]	@ (80066c4 <TIM_OC2_SetConfig+0xe8>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d10d      	bne.n	800665a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2280      	movs	r2, #128	@ 0x80
 8006642:	4393      	bics	r3, r2
 8006644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	4313      	orrs	r3, r2
 8006650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2240      	movs	r2, #64	@ 0x40
 8006656:	4393      	bics	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a19      	ldr	r2, [pc, #100]	@ (80066c4 <TIM_OC2_SetConfig+0xe8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d007      	beq.n	8006672 <TIM_OC2_SetConfig+0x96>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a18      	ldr	r2, [pc, #96]	@ (80066c8 <TIM_OC2_SetConfig+0xec>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d003      	beq.n	8006672 <TIM_OC2_SetConfig+0x96>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a17      	ldr	r2, [pc, #92]	@ (80066cc <TIM_OC2_SetConfig+0xf0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d113      	bne.n	800669a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	4a16      	ldr	r2, [pc, #88]	@ (80066d0 <TIM_OC2_SetConfig+0xf4>)
 8006676:	4013      	ands	r3, r2
 8006678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	4a15      	ldr	r2, [pc, #84]	@ (80066d4 <TIM_OC2_SetConfig+0xf8>)
 800667e:	4013      	ands	r3, r2
 8006680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	621a      	str	r2, [r3, #32]
}
 80066b4:	46c0      	nop			@ (mov r8, r8)
 80066b6:	46bd      	mov	sp, r7
 80066b8:	b006      	add	sp, #24
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	feff8fff 	.word	0xfeff8fff
 80066c0:	fffffcff 	.word	0xfffffcff
 80066c4:	40012c00 	.word	0x40012c00
 80066c8:	40014400 	.word	0x40014400
 80066cc:	40014800 	.word	0x40014800
 80066d0:	fffffbff 	.word	0xfffffbff
 80066d4:	fffff7ff 	.word	0xfffff7ff

080066d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	4a31      	ldr	r2, [pc, #196]	@ (80067b4 <TIM_OC3_SetConfig+0xdc>)
 80066ee:	401a      	ands	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4a2d      	ldr	r2, [pc, #180]	@ (80067b8 <TIM_OC3_SetConfig+0xe0>)
 8006704:	4013      	ands	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2203      	movs	r2, #3
 800670c:	4393      	bics	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	4a27      	ldr	r2, [pc, #156]	@ (80067bc <TIM_OC3_SetConfig+0xe4>)
 800671e:	4013      	ands	r3, r2
 8006720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	021b      	lsls	r3, r3, #8
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a23      	ldr	r2, [pc, #140]	@ (80067c0 <TIM_OC3_SetConfig+0xe8>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d10d      	bne.n	8006752 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	4a22      	ldr	r2, [pc, #136]	@ (80067c4 <TIM_OC3_SetConfig+0xec>)
 800673a:	4013      	ands	r3, r2
 800673c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	021b      	lsls	r3, r3, #8
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	4313      	orrs	r3, r2
 8006748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	4a1e      	ldr	r2, [pc, #120]	@ (80067c8 <TIM_OC3_SetConfig+0xf0>)
 800674e:	4013      	ands	r3, r2
 8006750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a1a      	ldr	r2, [pc, #104]	@ (80067c0 <TIM_OC3_SetConfig+0xe8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d007      	beq.n	800676a <TIM_OC3_SetConfig+0x92>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a1b      	ldr	r2, [pc, #108]	@ (80067cc <TIM_OC3_SetConfig+0xf4>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d003      	beq.n	800676a <TIM_OC3_SetConfig+0x92>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a1a      	ldr	r2, [pc, #104]	@ (80067d0 <TIM_OC3_SetConfig+0xf8>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d113      	bne.n	8006792 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	4a19      	ldr	r2, [pc, #100]	@ (80067d4 <TIM_OC3_SetConfig+0xfc>)
 800676e:	4013      	ands	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	4a18      	ldr	r2, [pc, #96]	@ (80067d8 <TIM_OC3_SetConfig+0x100>)
 8006776:	4013      	ands	r3, r2
 8006778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4313      	orrs	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4313      	orrs	r3, r2
 8006790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	621a      	str	r2, [r3, #32]
}
 80067ac:	46c0      	nop			@ (mov r8, r8)
 80067ae:	46bd      	mov	sp, r7
 80067b0:	b006      	add	sp, #24
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	fffffeff 	.word	0xfffffeff
 80067b8:	fffeff8f 	.word	0xfffeff8f
 80067bc:	fffffdff 	.word	0xfffffdff
 80067c0:	40012c00 	.word	0x40012c00
 80067c4:	fffff7ff 	.word	0xfffff7ff
 80067c8:	fffffbff 	.word	0xfffffbff
 80067cc:	40014400 	.word	0x40014400
 80067d0:	40014800 	.word	0x40014800
 80067d4:	ffffefff 	.word	0xffffefff
 80067d8:	ffffdfff 	.word	0xffffdfff

080067dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	4a24      	ldr	r2, [pc, #144]	@ (8006884 <TIM_OC4_SetConfig+0xa8>)
 80067f2:	401a      	ands	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4a20      	ldr	r2, [pc, #128]	@ (8006888 <TIM_OC4_SetConfig+0xac>)
 8006808:	4013      	ands	r3, r2
 800680a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4a1f      	ldr	r2, [pc, #124]	@ (800688c <TIM_OC4_SetConfig+0xb0>)
 8006810:	4013      	ands	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	021b      	lsls	r3, r3, #8
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4313      	orrs	r3, r2
 800681e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	4a1b      	ldr	r2, [pc, #108]	@ (8006890 <TIM_OC4_SetConfig+0xb4>)
 8006824:	4013      	ands	r3, r2
 8006826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	031b      	lsls	r3, r3, #12
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	4313      	orrs	r3, r2
 8006832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a17      	ldr	r2, [pc, #92]	@ (8006894 <TIM_OC4_SetConfig+0xb8>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d007      	beq.n	800684c <TIM_OC4_SetConfig+0x70>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a16      	ldr	r2, [pc, #88]	@ (8006898 <TIM_OC4_SetConfig+0xbc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d003      	beq.n	800684c <TIM_OC4_SetConfig+0x70>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a15      	ldr	r2, [pc, #84]	@ (800689c <TIM_OC4_SetConfig+0xc0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d109      	bne.n	8006860 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	4a14      	ldr	r2, [pc, #80]	@ (80068a0 <TIM_OC4_SetConfig+0xc4>)
 8006850:	4013      	ands	r3, r2
 8006852:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	019b      	lsls	r3, r3, #6
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	621a      	str	r2, [r3, #32]
}
 800687a:	46c0      	nop			@ (mov r8, r8)
 800687c:	46bd      	mov	sp, r7
 800687e:	b006      	add	sp, #24
 8006880:	bd80      	pop	{r7, pc}
 8006882:	46c0      	nop			@ (mov r8, r8)
 8006884:	ffffefff 	.word	0xffffefff
 8006888:	feff8fff 	.word	0xfeff8fff
 800688c:	fffffcff 	.word	0xfffffcff
 8006890:	ffffdfff 	.word	0xffffdfff
 8006894:	40012c00 	.word	0x40012c00
 8006898:	40014400 	.word	0x40014400
 800689c:	40014800 	.word	0x40014800
 80068a0:	ffffbfff 	.word	0xffffbfff

080068a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	4a21      	ldr	r2, [pc, #132]	@ (8006940 <TIM_OC5_SetConfig+0x9c>)
 80068ba:	401a      	ands	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006944 <TIM_OC5_SetConfig+0xa0>)
 80068d0:	4013      	ands	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	4a19      	ldr	r2, [pc, #100]	@ (8006948 <TIM_OC5_SetConfig+0xa4>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	041b      	lsls	r3, r3, #16
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a15      	ldr	r2, [pc, #84]	@ (800694c <TIM_OC5_SetConfig+0xa8>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d007      	beq.n	800690a <TIM_OC5_SetConfig+0x66>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a14      	ldr	r2, [pc, #80]	@ (8006950 <TIM_OC5_SetConfig+0xac>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d003      	beq.n	800690a <TIM_OC5_SetConfig+0x66>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a13      	ldr	r2, [pc, #76]	@ (8006954 <TIM_OC5_SetConfig+0xb0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d109      	bne.n	800691e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	4a0c      	ldr	r2, [pc, #48]	@ (8006940 <TIM_OC5_SetConfig+0x9c>)
 800690e:	4013      	ands	r3, r2
 8006910:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	021b      	lsls	r3, r3, #8
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	4313      	orrs	r3, r2
 800691c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	621a      	str	r2, [r3, #32]
}
 8006938:	46c0      	nop			@ (mov r8, r8)
 800693a:	46bd      	mov	sp, r7
 800693c:	b006      	add	sp, #24
 800693e:	bd80      	pop	{r7, pc}
 8006940:	fffeffff 	.word	0xfffeffff
 8006944:	fffeff8f 	.word	0xfffeff8f
 8006948:	fffdffff 	.word	0xfffdffff
 800694c:	40012c00 	.word	0x40012c00
 8006950:	40014400 	.word	0x40014400
 8006954:	40014800 	.word	0x40014800

08006958 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	4a22      	ldr	r2, [pc, #136]	@ (80069f8 <TIM_OC6_SetConfig+0xa0>)
 800696e:	401a      	ands	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800697e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4a1e      	ldr	r2, [pc, #120]	@ (80069fc <TIM_OC6_SetConfig+0xa4>)
 8006984:	4013      	ands	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	021b      	lsls	r3, r3, #8
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	4a1a      	ldr	r2, [pc, #104]	@ (8006a00 <TIM_OC6_SetConfig+0xa8>)
 8006998:	4013      	ands	r3, r2
 800699a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	051b      	lsls	r3, r3, #20
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a16      	ldr	r2, [pc, #88]	@ (8006a04 <TIM_OC6_SetConfig+0xac>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d007      	beq.n	80069c0 <TIM_OC6_SetConfig+0x68>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a15      	ldr	r2, [pc, #84]	@ (8006a08 <TIM_OC6_SetConfig+0xb0>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <TIM_OC6_SetConfig+0x68>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a14      	ldr	r2, [pc, #80]	@ (8006a0c <TIM_OC6_SetConfig+0xb4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d109      	bne.n	80069d4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	4a13      	ldr	r2, [pc, #76]	@ (8006a10 <TIM_OC6_SetConfig+0xb8>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	029b      	lsls	r3, r3, #10
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	621a      	str	r2, [r3, #32]
}
 80069ee:	46c0      	nop			@ (mov r8, r8)
 80069f0:	46bd      	mov	sp, r7
 80069f2:	b006      	add	sp, #24
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	46c0      	nop			@ (mov r8, r8)
 80069f8:	ffefffff 	.word	0xffefffff
 80069fc:	feff8fff 	.word	0xfeff8fff
 8006a00:	ffdfffff 	.word	0xffdfffff
 8006a04:	40012c00 	.word	0x40012c00
 8006a08:	40014400 	.word	0x40014400
 8006a0c:	40014800 	.word	0x40014800
 8006a10:	fffbffff 	.word	0xfffbffff

08006a14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	221f      	movs	r2, #31
 8006a24:	4013      	ands	r3, r2
 8006a26:	2201      	movs	r2, #1
 8006a28:	409a      	lsls	r2, r3
 8006a2a:	0013      	movs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	43d2      	mvns	r2, r2
 8006a36:	401a      	ands	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a1a      	ldr	r2, [r3, #32]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	211f      	movs	r1, #31
 8006a44:	400b      	ands	r3, r1
 8006a46:	6879      	ldr	r1, [r7, #4]
 8006a48:	4099      	lsls	r1, r3
 8006a4a:	000b      	movs	r3, r1
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	621a      	str	r2, [r3, #32]
}
 8006a52:	46c0      	nop			@ (mov r8, r8)
 8006a54:	46bd      	mov	sp, r7
 8006a56:	b006      	add	sp, #24
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	223c      	movs	r2, #60	@ 0x3c
 8006a6a:	5c9b      	ldrb	r3, [r3, r2]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d101      	bne.n	8006a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a70:	2302      	movs	r3, #2
 8006a72:	e050      	b.n	8006b16 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	223c      	movs	r2, #60	@ 0x3c
 8006a78:	2101      	movs	r1, #1
 8006a7a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	223d      	movs	r2, #61	@ 0x3d
 8006a80:	2102      	movs	r1, #2
 8006a82:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a21      	ldr	r2, [pc, #132]	@ (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d108      	bne.n	8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4a20      	ldr	r2, [pc, #128]	@ (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2270      	movs	r2, #112	@ 0x70
 8006ab4:	4393      	bics	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a14      	ldr	r2, [pc, #80]	@ (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00a      	beq.n	8006aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	2380      	movs	r3, #128	@ 0x80
 8006ada:	05db      	lsls	r3, r3, #23
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d004      	beq.n	8006aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a10      	ldr	r2, [pc, #64]	@ (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d10c      	bne.n	8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2280      	movs	r2, #128	@ 0x80
 8006aee:	4393      	bics	r3, r2
 8006af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	223d      	movs	r2, #61	@ 0x3d
 8006b08:	2101      	movs	r1, #1
 8006b0a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	223c      	movs	r2, #60	@ 0x3c
 8006b10:	2100      	movs	r1, #0
 8006b12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	0018      	movs	r0, r3
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	b004      	add	sp, #16
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	46c0      	nop			@ (mov r8, r8)
 8006b20:	40012c00 	.word	0x40012c00
 8006b24:	ff0fffff 	.word	0xff0fffff
 8006b28:	40000400 	.word	0x40000400

08006b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e046      	b.n	8006bcc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2288      	movs	r2, #136	@ 0x88
 8006b42:	589b      	ldr	r3, [r3, r2]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d107      	bne.n	8006b58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2284      	movs	r2, #132	@ 0x84
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	0018      	movs	r0, r3
 8006b54:	f7fa fe8a 	bl	800186c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2288      	movs	r2, #136	@ 0x88
 8006b5c:	2124      	movs	r1, #36	@ 0x24
 8006b5e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	438a      	bics	r2, r1
 8006b6e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f000 fa4e 	bl	800701c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	0018      	movs	r0, r3
 8006b84:	f000 f8cc 	bl	8006d20 <UART_SetConfig>
 8006b88:	0003      	movs	r3, r0
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e01c      	b.n	8006bcc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	490d      	ldr	r1, [pc, #52]	@ (8006bd4 <HAL_UART_Init+0xa8>)
 8006b9e:	400a      	ands	r2, r1
 8006ba0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	212a      	movs	r1, #42	@ 0x2a
 8006bae:	438a      	bics	r2, r1
 8006bb0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	0018      	movs	r0, r3
 8006bc6:	f000 fadd 	bl	8007184 <UART_CheckIdleState>
 8006bca:	0003      	movs	r3, r0
}
 8006bcc:	0018      	movs	r0, r3
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	b002      	add	sp, #8
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	ffffb7ff 	.word	0xffffb7ff

08006bd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08a      	sub	sp, #40	@ 0x28
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	603b      	str	r3, [r7, #0]
 8006be4:	1dbb      	adds	r3, r7, #6
 8006be6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2288      	movs	r2, #136	@ 0x88
 8006bec:	589b      	ldr	r3, [r3, r2]
 8006bee:	2b20      	cmp	r3, #32
 8006bf0:	d000      	beq.n	8006bf4 <HAL_UART_Transmit+0x1c>
 8006bf2:	e090      	b.n	8006d16 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_UART_Transmit+0x2a>
 8006bfa:	1dbb      	adds	r3, r7, #6
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e088      	b.n	8006d18 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	2380      	movs	r3, #128	@ 0x80
 8006c0c:	015b      	lsls	r3, r3, #5
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d109      	bne.n	8006c26 <HAL_UART_Transmit+0x4e>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d105      	bne.n	8006c26 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	4013      	ands	r3, r2
 8006c20:	d001      	beq.n	8006c26 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e078      	b.n	8006d18 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2290      	movs	r2, #144	@ 0x90
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2288      	movs	r2, #136	@ 0x88
 8006c32:	2121      	movs	r1, #33	@ 0x21
 8006c34:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c36:	f7fa feff 	bl	8001a38 <HAL_GetTick>
 8006c3a:	0003      	movs	r3, r0
 8006c3c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	1dba      	adds	r2, r7, #6
 8006c42:	2154      	movs	r1, #84	@ 0x54
 8006c44:	8812      	ldrh	r2, [r2, #0]
 8006c46:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	1dba      	adds	r2, r7, #6
 8006c4c:	2156      	movs	r1, #86	@ 0x56
 8006c4e:	8812      	ldrh	r2, [r2, #0]
 8006c50:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	689a      	ldr	r2, [r3, #8]
 8006c56:	2380      	movs	r3, #128	@ 0x80
 8006c58:	015b      	lsls	r3, r3, #5
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d108      	bne.n	8006c70 <HAL_UART_Transmit+0x98>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d104      	bne.n	8006c70 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	e003      	b.n	8006c78 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c74:	2300      	movs	r3, #0
 8006c76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c78:	e030      	b.n	8006cdc <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	0013      	movs	r3, r2
 8006c84:	2200      	movs	r2, #0
 8006c86:	2180      	movs	r1, #128	@ 0x80
 8006c88:	f000 fb26 	bl	80072d8 <UART_WaitOnFlagUntilTimeout>
 8006c8c:	1e03      	subs	r3, r0, #0
 8006c8e:	d005      	beq.n	8006c9c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2288      	movs	r2, #136	@ 0x88
 8006c94:	2120      	movs	r1, #32
 8006c96:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e03d      	b.n	8006d18 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10b      	bne.n	8006cba <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	001a      	movs	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	05d2      	lsls	r2, r2, #23
 8006cae:	0dd2      	lsrs	r2, r2, #23
 8006cb0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	3302      	adds	r3, #2
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	e007      	b.n	8006cca <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	781a      	ldrb	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2256      	movs	r2, #86	@ 0x56
 8006cce:	5a9b      	ldrh	r3, [r3, r2]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	b299      	uxth	r1, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2256      	movs	r2, #86	@ 0x56
 8006cda:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2256      	movs	r2, #86	@ 0x56
 8006ce0:	5a9b      	ldrh	r3, [r3, r2]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1c8      	bne.n	8006c7a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	0013      	movs	r3, r2
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	2140      	movs	r1, #64	@ 0x40
 8006cf6:	f000 faef 	bl	80072d8 <UART_WaitOnFlagUntilTimeout>
 8006cfa:	1e03      	subs	r3, r0, #0
 8006cfc:	d005      	beq.n	8006d0a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2288      	movs	r2, #136	@ 0x88
 8006d02:	2120      	movs	r1, #32
 8006d04:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e006      	b.n	8006d18 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2288      	movs	r2, #136	@ 0x88
 8006d0e:	2120      	movs	r1, #32
 8006d10:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	e000      	b.n	8006d18 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006d16:	2302      	movs	r3, #2
  }
}
 8006d18:	0018      	movs	r0, r3
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	b008      	add	sp, #32
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d28:	231e      	movs	r3, #30
 8006d2a:	18fb      	adds	r3, r7, r3
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4aab      	ldr	r2, [pc, #684]	@ (8006ffc <UART_SetConfig+0x2dc>)
 8006d50:	4013      	ands	r3, r2
 8006d52:	0019      	movs	r1, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	4aa6      	ldr	r2, [pc, #664]	@ (8007000 <UART_SetConfig+0x2e0>)
 8006d66:	4013      	ands	r3, r2
 8006d68:	0019      	movs	r1, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	4a9d      	ldr	r2, [pc, #628]	@ (8007004 <UART_SetConfig+0x2e4>)
 8006d8e:	4013      	ands	r3, r2
 8006d90:	0019      	movs	r1, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da2:	220f      	movs	r2, #15
 8006da4:	4393      	bics	r3, r2
 8006da6:	0019      	movs	r1, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a93      	ldr	r2, [pc, #588]	@ (8007008 <UART_SetConfig+0x2e8>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d127      	bne.n	8006e0e <UART_SetConfig+0xee>
 8006dbe:	4b93      	ldr	r3, [pc, #588]	@ (800700c <UART_SetConfig+0x2ec>)
 8006dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dc2:	2203      	movs	r2, #3
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d017      	beq.n	8006dfa <UART_SetConfig+0xda>
 8006dca:	d81b      	bhi.n	8006e04 <UART_SetConfig+0xe4>
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d00a      	beq.n	8006de6 <UART_SetConfig+0xc6>
 8006dd0:	d818      	bhi.n	8006e04 <UART_SetConfig+0xe4>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d002      	beq.n	8006ddc <UART_SetConfig+0xbc>
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d00a      	beq.n	8006df0 <UART_SetConfig+0xd0>
 8006dda:	e013      	b.n	8006e04 <UART_SetConfig+0xe4>
 8006ddc:	231f      	movs	r3, #31
 8006dde:	18fb      	adds	r3, r7, r3
 8006de0:	2200      	movs	r2, #0
 8006de2:	701a      	strb	r2, [r3, #0]
 8006de4:	e021      	b.n	8006e2a <UART_SetConfig+0x10a>
 8006de6:	231f      	movs	r3, #31
 8006de8:	18fb      	adds	r3, r7, r3
 8006dea:	2202      	movs	r2, #2
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	e01c      	b.n	8006e2a <UART_SetConfig+0x10a>
 8006df0:	231f      	movs	r3, #31
 8006df2:	18fb      	adds	r3, r7, r3
 8006df4:	2204      	movs	r2, #4
 8006df6:	701a      	strb	r2, [r3, #0]
 8006df8:	e017      	b.n	8006e2a <UART_SetConfig+0x10a>
 8006dfa:	231f      	movs	r3, #31
 8006dfc:	18fb      	adds	r3, r7, r3
 8006dfe:	2208      	movs	r2, #8
 8006e00:	701a      	strb	r2, [r3, #0]
 8006e02:	e012      	b.n	8006e2a <UART_SetConfig+0x10a>
 8006e04:	231f      	movs	r3, #31
 8006e06:	18fb      	adds	r3, r7, r3
 8006e08:	2210      	movs	r2, #16
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	e00d      	b.n	8006e2a <UART_SetConfig+0x10a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a7f      	ldr	r2, [pc, #508]	@ (8007010 <UART_SetConfig+0x2f0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d104      	bne.n	8006e22 <UART_SetConfig+0x102>
 8006e18:	231f      	movs	r3, #31
 8006e1a:	18fb      	adds	r3, r7, r3
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	e003      	b.n	8006e2a <UART_SetConfig+0x10a>
 8006e22:	231f      	movs	r3, #31
 8006e24:	18fb      	adds	r3, r7, r3
 8006e26:	2210      	movs	r2, #16
 8006e28:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69da      	ldr	r2, [r3, #28]
 8006e2e:	2380      	movs	r3, #128	@ 0x80
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d000      	beq.n	8006e38 <UART_SetConfig+0x118>
 8006e36:	e06f      	b.n	8006f18 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8006e38:	231f      	movs	r3, #31
 8006e3a:	18fb      	adds	r3, r7, r3
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b08      	cmp	r3, #8
 8006e40:	d01f      	beq.n	8006e82 <UART_SetConfig+0x162>
 8006e42:	dc22      	bgt.n	8006e8a <UART_SetConfig+0x16a>
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d017      	beq.n	8006e78 <UART_SetConfig+0x158>
 8006e48:	dc1f      	bgt.n	8006e8a <UART_SetConfig+0x16a>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <UART_SetConfig+0x134>
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d005      	beq.n	8006e5e <UART_SetConfig+0x13e>
 8006e52:	e01a      	b.n	8006e8a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e54:	f7fe ff74 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 8006e58:	0003      	movs	r3, r0
 8006e5a:	61bb      	str	r3, [r7, #24]
        break;
 8006e5c:	e01c      	b.n	8006e98 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8006e5e:	4b6b      	ldr	r3, [pc, #428]	@ (800700c <UART_SetConfig+0x2ec>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	095b      	lsrs	r3, r3, #5
 8006e64:	2207      	movs	r2, #7
 8006e66:	4013      	ands	r3, r2
 8006e68:	3301      	adds	r3, #1
 8006e6a:	0019      	movs	r1, r3
 8006e6c:	4869      	ldr	r0, [pc, #420]	@ (8007014 <UART_SetConfig+0x2f4>)
 8006e6e:	f7f9 f955 	bl	800011c <__udivsi3>
 8006e72:	0003      	movs	r3, r0
 8006e74:	61bb      	str	r3, [r7, #24]
        break;
 8006e76:	e00f      	b.n	8006e98 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e78:	f7fe feec 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 8006e7c:	0003      	movs	r3, r0
 8006e7e:	61bb      	str	r3, [r7, #24]
        break;
 8006e80:	e00a      	b.n	8006e98 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e82:	2380      	movs	r3, #128	@ 0x80
 8006e84:	021b      	lsls	r3, r3, #8
 8006e86:	61bb      	str	r3, [r7, #24]
        break;
 8006e88:	e006      	b.n	8006e98 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e8e:	231e      	movs	r3, #30
 8006e90:	18fb      	adds	r3, r7, r3
 8006e92:	2201      	movs	r2, #1
 8006e94:	701a      	strb	r2, [r3, #0]
        break;
 8006e96:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d100      	bne.n	8006ea0 <UART_SetConfig+0x180>
 8006e9e:	e097      	b.n	8006fd0 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ea4:	4b5c      	ldr	r3, [pc, #368]	@ (8007018 <UART_SetConfig+0x2f8>)
 8006ea6:	0052      	lsls	r2, r2, #1
 8006ea8:	5ad3      	ldrh	r3, [r2, r3]
 8006eaa:	0019      	movs	r1, r3
 8006eac:	69b8      	ldr	r0, [r7, #24]
 8006eae:	f7f9 f935 	bl	800011c <__udivsi3>
 8006eb2:	0003      	movs	r3, r0
 8006eb4:	005a      	lsls	r2, r3, #1
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	085b      	lsrs	r3, r3, #1
 8006ebc:	18d2      	adds	r2, r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	0019      	movs	r1, r3
 8006ec4:	0010      	movs	r0, r2
 8006ec6:	f7f9 f929 	bl	800011c <__udivsi3>
 8006eca:	0003      	movs	r3, r0
 8006ecc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b0f      	cmp	r3, #15
 8006ed2:	d91c      	bls.n	8006f0e <UART_SetConfig+0x1ee>
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	2380      	movs	r3, #128	@ 0x80
 8006ed8:	025b      	lsls	r3, r3, #9
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d217      	bcs.n	8006f0e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	200e      	movs	r0, #14
 8006ee4:	183b      	adds	r3, r7, r0
 8006ee6:	210f      	movs	r1, #15
 8006ee8:	438a      	bics	r2, r1
 8006eea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	085b      	lsrs	r3, r3, #1
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2207      	movs	r2, #7
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	b299      	uxth	r1, r3
 8006ef8:	183b      	adds	r3, r7, r0
 8006efa:	183a      	adds	r2, r7, r0
 8006efc:	8812      	ldrh	r2, [r2, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	183a      	adds	r2, r7, r0
 8006f08:	8812      	ldrh	r2, [r2, #0]
 8006f0a:	60da      	str	r2, [r3, #12]
 8006f0c:	e060      	b.n	8006fd0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8006f0e:	231e      	movs	r3, #30
 8006f10:	18fb      	adds	r3, r7, r3
 8006f12:	2201      	movs	r2, #1
 8006f14:	701a      	strb	r2, [r3, #0]
 8006f16:	e05b      	b.n	8006fd0 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f18:	231f      	movs	r3, #31
 8006f1a:	18fb      	adds	r3, r7, r3
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	2b08      	cmp	r3, #8
 8006f20:	d01f      	beq.n	8006f62 <UART_SetConfig+0x242>
 8006f22:	dc22      	bgt.n	8006f6a <UART_SetConfig+0x24a>
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	d017      	beq.n	8006f58 <UART_SetConfig+0x238>
 8006f28:	dc1f      	bgt.n	8006f6a <UART_SetConfig+0x24a>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d002      	beq.n	8006f34 <UART_SetConfig+0x214>
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d005      	beq.n	8006f3e <UART_SetConfig+0x21e>
 8006f32:	e01a      	b.n	8006f6a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f34:	f7fe ff04 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 8006f38:	0003      	movs	r3, r0
 8006f3a:	61bb      	str	r3, [r7, #24]
        break;
 8006f3c:	e01c      	b.n	8006f78 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8006f3e:	4b33      	ldr	r3, [pc, #204]	@ (800700c <UART_SetConfig+0x2ec>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	2207      	movs	r2, #7
 8006f46:	4013      	ands	r3, r2
 8006f48:	3301      	adds	r3, #1
 8006f4a:	0019      	movs	r1, r3
 8006f4c:	4831      	ldr	r0, [pc, #196]	@ (8007014 <UART_SetConfig+0x2f4>)
 8006f4e:	f7f9 f8e5 	bl	800011c <__udivsi3>
 8006f52:	0003      	movs	r3, r0
 8006f54:	61bb      	str	r3, [r7, #24]
        break;
 8006f56:	e00f      	b.n	8006f78 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f58:	f7fe fe7c 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 8006f5c:	0003      	movs	r3, r0
 8006f5e:	61bb      	str	r3, [r7, #24]
        break;
 8006f60:	e00a      	b.n	8006f78 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f62:	2380      	movs	r3, #128	@ 0x80
 8006f64:	021b      	lsls	r3, r3, #8
 8006f66:	61bb      	str	r3, [r7, #24]
        break;
 8006f68:	e006      	b.n	8006f78 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f6e:	231e      	movs	r3, #30
 8006f70:	18fb      	adds	r3, r7, r3
 8006f72:	2201      	movs	r2, #1
 8006f74:	701a      	strb	r2, [r3, #0]
        break;
 8006f76:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d028      	beq.n	8006fd0 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f82:	4b25      	ldr	r3, [pc, #148]	@ (8007018 <UART_SetConfig+0x2f8>)
 8006f84:	0052      	lsls	r2, r2, #1
 8006f86:	5ad3      	ldrh	r3, [r2, r3]
 8006f88:	0019      	movs	r1, r3
 8006f8a:	69b8      	ldr	r0, [r7, #24]
 8006f8c:	f7f9 f8c6 	bl	800011c <__udivsi3>
 8006f90:	0003      	movs	r3, r0
 8006f92:	001a      	movs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	085b      	lsrs	r3, r3, #1
 8006f9a:	18d2      	adds	r2, r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	0019      	movs	r1, r3
 8006fa2:	0010      	movs	r0, r2
 8006fa4:	f7f9 f8ba 	bl	800011c <__udivsi3>
 8006fa8:	0003      	movs	r3, r0
 8006faa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	2b0f      	cmp	r3, #15
 8006fb0:	d90a      	bls.n	8006fc8 <UART_SetConfig+0x2a8>
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	2380      	movs	r3, #128	@ 0x80
 8006fb6:	025b      	lsls	r3, r3, #9
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d205      	bcs.n	8006fc8 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60da      	str	r2, [r3, #12]
 8006fc6:	e003      	b.n	8006fd0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8006fc8:	231e      	movs	r3, #30
 8006fca:	18fb      	adds	r3, r7, r3
 8006fcc:	2201      	movs	r2, #1
 8006fce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	226a      	movs	r2, #106	@ 0x6a
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2268      	movs	r2, #104	@ 0x68
 8006fdc:	2101      	movs	r1, #1
 8006fde:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006fec:	231e      	movs	r3, #30
 8006fee:	18fb      	adds	r3, r7, r3
 8006ff0:	781b      	ldrb	r3, [r3, #0]
}
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	b008      	add	sp, #32
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	46c0      	nop			@ (mov r8, r8)
 8006ffc:	cfff69f3 	.word	0xcfff69f3
 8007000:	ffffcfff 	.word	0xffffcfff
 8007004:	11fff4ff 	.word	0x11fff4ff
 8007008:	40013800 	.word	0x40013800
 800700c:	40021000 	.word	0x40021000
 8007010:	40004400 	.word	0x40004400
 8007014:	02dc6c00 	.word	0x02dc6c00
 8007018:	080088b8 	.word	0x080088b8

0800701c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007028:	2208      	movs	r2, #8
 800702a:	4013      	ands	r3, r2
 800702c:	d00b      	beq.n	8007046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	4a4a      	ldr	r2, [pc, #296]	@ (8007160 <UART_AdvFeatureConfig+0x144>)
 8007036:	4013      	ands	r3, r2
 8007038:	0019      	movs	r1, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800704a:	2201      	movs	r2, #1
 800704c:	4013      	ands	r3, r2
 800704e:	d00b      	beq.n	8007068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	4a43      	ldr	r2, [pc, #268]	@ (8007164 <UART_AdvFeatureConfig+0x148>)
 8007058:	4013      	ands	r3, r2
 800705a:	0019      	movs	r1, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706c:	2202      	movs	r2, #2
 800706e:	4013      	ands	r3, r2
 8007070:	d00b      	beq.n	800708a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	4a3b      	ldr	r2, [pc, #236]	@ (8007168 <UART_AdvFeatureConfig+0x14c>)
 800707a:	4013      	ands	r3, r2
 800707c:	0019      	movs	r1, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708e:	2204      	movs	r2, #4
 8007090:	4013      	ands	r3, r2
 8007092:	d00b      	beq.n	80070ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	4a34      	ldr	r2, [pc, #208]	@ (800716c <UART_AdvFeatureConfig+0x150>)
 800709c:	4013      	ands	r3, r2
 800709e:	0019      	movs	r1, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b0:	2210      	movs	r2, #16
 80070b2:	4013      	ands	r3, r2
 80070b4:	d00b      	beq.n	80070ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	4a2c      	ldr	r2, [pc, #176]	@ (8007170 <UART_AdvFeatureConfig+0x154>)
 80070be:	4013      	ands	r3, r2
 80070c0:	0019      	movs	r1, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d2:	2220      	movs	r2, #32
 80070d4:	4013      	ands	r3, r2
 80070d6:	d00b      	beq.n	80070f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	4a25      	ldr	r2, [pc, #148]	@ (8007174 <UART_AdvFeatureConfig+0x158>)
 80070e0:	4013      	ands	r3, r2
 80070e2:	0019      	movs	r1, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f4:	2240      	movs	r2, #64	@ 0x40
 80070f6:	4013      	ands	r3, r2
 80070f8:	d01d      	beq.n	8007136 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	4a1d      	ldr	r2, [pc, #116]	@ (8007178 <UART_AdvFeatureConfig+0x15c>)
 8007102:	4013      	ands	r3, r2
 8007104:	0019      	movs	r1, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007116:	2380      	movs	r3, #128	@ 0x80
 8007118:	035b      	lsls	r3, r3, #13
 800711a:	429a      	cmp	r2, r3
 800711c:	d10b      	bne.n	8007136 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	4a15      	ldr	r2, [pc, #84]	@ (800717c <UART_AdvFeatureConfig+0x160>)
 8007126:	4013      	ands	r3, r2
 8007128:	0019      	movs	r1, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713a:	2280      	movs	r2, #128	@ 0x80
 800713c:	4013      	ands	r3, r2
 800713e:	d00b      	beq.n	8007158 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	4a0e      	ldr	r2, [pc, #56]	@ (8007180 <UART_AdvFeatureConfig+0x164>)
 8007148:	4013      	ands	r3, r2
 800714a:	0019      	movs	r1, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	430a      	orrs	r2, r1
 8007156:	605a      	str	r2, [r3, #4]
  }
}
 8007158:	46c0      	nop			@ (mov r8, r8)
 800715a:	46bd      	mov	sp, r7
 800715c:	b002      	add	sp, #8
 800715e:	bd80      	pop	{r7, pc}
 8007160:	ffff7fff 	.word	0xffff7fff
 8007164:	fffdffff 	.word	0xfffdffff
 8007168:	fffeffff 	.word	0xfffeffff
 800716c:	fffbffff 	.word	0xfffbffff
 8007170:	ffffefff 	.word	0xffffefff
 8007174:	ffffdfff 	.word	0xffffdfff
 8007178:	ffefffff 	.word	0xffefffff
 800717c:	ff9fffff 	.word	0xff9fffff
 8007180:	fff7ffff 	.word	0xfff7ffff

08007184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b092      	sub	sp, #72	@ 0x48
 8007188:	af02      	add	r7, sp, #8
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2290      	movs	r2, #144	@ 0x90
 8007190:	2100      	movs	r1, #0
 8007192:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007194:	f7fa fc50 	bl	8001a38 <HAL_GetTick>
 8007198:	0003      	movs	r3, r0
 800719a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2208      	movs	r2, #8
 80071a4:	4013      	ands	r3, r2
 80071a6:	2b08      	cmp	r3, #8
 80071a8:	d12d      	bne.n	8007206 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071ac:	2280      	movs	r2, #128	@ 0x80
 80071ae:	0391      	lsls	r1, r2, #14
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	4a47      	ldr	r2, [pc, #284]	@ (80072d0 <UART_CheckIdleState+0x14c>)
 80071b4:	9200      	str	r2, [sp, #0]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f000 f88e 	bl	80072d8 <UART_WaitOnFlagUntilTimeout>
 80071bc:	1e03      	subs	r3, r0, #0
 80071be:	d022      	beq.n	8007206 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80071c0:	f3ef 8310 	mrs	r3, PRIMASK
 80071c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80071c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071ca:	2301      	movs	r3, #1
 80071cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d0:	f383 8810 	msr	PRIMASK, r3
}
 80071d4:	46c0      	nop			@ (mov r8, r8)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2180      	movs	r1, #128	@ 0x80
 80071e2:	438a      	bics	r2, r1
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ec:	f383 8810 	msr	PRIMASK, r3
}
 80071f0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2288      	movs	r2, #136	@ 0x88
 80071f6:	2120      	movs	r1, #32
 80071f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2284      	movs	r2, #132	@ 0x84
 80071fe:	2100      	movs	r1, #0
 8007200:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e060      	b.n	80072c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2204      	movs	r2, #4
 800720e:	4013      	ands	r3, r2
 8007210:	2b04      	cmp	r3, #4
 8007212:	d146      	bne.n	80072a2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007216:	2280      	movs	r2, #128	@ 0x80
 8007218:	03d1      	lsls	r1, r2, #15
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	4a2c      	ldr	r2, [pc, #176]	@ (80072d0 <UART_CheckIdleState+0x14c>)
 800721e:	9200      	str	r2, [sp, #0]
 8007220:	2200      	movs	r2, #0
 8007222:	f000 f859 	bl	80072d8 <UART_WaitOnFlagUntilTimeout>
 8007226:	1e03      	subs	r3, r0, #0
 8007228:	d03b      	beq.n	80072a2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800722a:	f3ef 8310 	mrs	r3, PRIMASK
 800722e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007230:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007232:	637b      	str	r3, [r7, #52]	@ 0x34
 8007234:	2301      	movs	r3, #1
 8007236:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f383 8810 	msr	PRIMASK, r3
}
 800723e:	46c0      	nop			@ (mov r8, r8)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4922      	ldr	r1, [pc, #136]	@ (80072d4 <UART_CheckIdleState+0x150>)
 800724c:	400a      	ands	r2, r1
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f383 8810 	msr	PRIMASK, r3
}
 800725a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800725c:	f3ef 8310 	mrs	r3, PRIMASK
 8007260:	61bb      	str	r3, [r7, #24]
  return(result);
 8007262:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007264:	633b      	str	r3, [r7, #48]	@ 0x30
 8007266:	2301      	movs	r3, #1
 8007268:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	f383 8810 	msr	PRIMASK, r3
}
 8007270:	46c0      	nop			@ (mov r8, r8)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2101      	movs	r1, #1
 800727e:	438a      	bics	r2, r1
 8007280:	609a      	str	r2, [r3, #8]
 8007282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007284:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	f383 8810 	msr	PRIMASK, r3
}
 800728c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	228c      	movs	r2, #140	@ 0x8c
 8007292:	2120      	movs	r1, #32
 8007294:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2284      	movs	r2, #132	@ 0x84
 800729a:	2100      	movs	r1, #0
 800729c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e012      	b.n	80072c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2288      	movs	r2, #136	@ 0x88
 80072a6:	2120      	movs	r1, #32
 80072a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	228c      	movs	r2, #140	@ 0x8c
 80072ae:	2120      	movs	r1, #32
 80072b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2284      	movs	r2, #132	@ 0x84
 80072c2:	2100      	movs	r1, #0
 80072c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	0018      	movs	r0, r3
 80072ca:	46bd      	mov	sp, r7
 80072cc:	b010      	add	sp, #64	@ 0x40
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	01ffffff 	.word	0x01ffffff
 80072d4:	fffffedf 	.word	0xfffffedf

080072d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	603b      	str	r3, [r7, #0]
 80072e4:	1dfb      	adds	r3, r7, #7
 80072e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e8:	e051      	b.n	800738e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	3301      	adds	r3, #1
 80072ee:	d04e      	beq.n	800738e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072f0:	f7fa fba2 	bl	8001a38 <HAL_GetTick>
 80072f4:	0002      	movs	r2, r0
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d302      	bcc.n	8007306 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e051      	b.n	80073ae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2204      	movs	r2, #4
 8007312:	4013      	ands	r3, r2
 8007314:	d03b      	beq.n	800738e <UART_WaitOnFlagUntilTimeout+0xb6>
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2b80      	cmp	r3, #128	@ 0x80
 800731a:	d038      	beq.n	800738e <UART_WaitOnFlagUntilTimeout+0xb6>
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b40      	cmp	r3, #64	@ 0x40
 8007320:	d035      	beq.n	800738e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	2208      	movs	r2, #8
 800732a:	4013      	ands	r3, r2
 800732c:	2b08      	cmp	r3, #8
 800732e:	d111      	bne.n	8007354 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2208      	movs	r2, #8
 8007336:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	0018      	movs	r0, r3
 800733c:	f000 f83c 	bl	80073b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2290      	movs	r2, #144	@ 0x90
 8007344:	2108      	movs	r1, #8
 8007346:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2284      	movs	r2, #132	@ 0x84
 800734c:	2100      	movs	r1, #0
 800734e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e02c      	b.n	80073ae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	69da      	ldr	r2, [r3, #28]
 800735a:	2380      	movs	r3, #128	@ 0x80
 800735c:	011b      	lsls	r3, r3, #4
 800735e:	401a      	ands	r2, r3
 8007360:	2380      	movs	r3, #128	@ 0x80
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	429a      	cmp	r2, r3
 8007366:	d112      	bne.n	800738e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2280      	movs	r2, #128	@ 0x80
 800736e:	0112      	lsls	r2, r2, #4
 8007370:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	0018      	movs	r0, r3
 8007376:	f000 f81f 	bl	80073b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2290      	movs	r2, #144	@ 0x90
 800737e:	2120      	movs	r1, #32
 8007380:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2284      	movs	r2, #132	@ 0x84
 8007386:	2100      	movs	r1, #0
 8007388:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e00f      	b.n	80073ae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	4013      	ands	r3, r2
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	425a      	negs	r2, r3
 800739e:	4153      	adcs	r3, r2
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	001a      	movs	r2, r3
 80073a4:	1dfb      	adds	r3, r7, #7
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d09e      	beq.n	80072ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	0018      	movs	r0, r3
 80073b0:	46bd      	mov	sp, r7
 80073b2:	b004      	add	sp, #16
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08e      	sub	sp, #56	@ 0x38
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80073c0:	f3ef 8310 	mrs	r3, PRIMASK
 80073c4:	617b      	str	r3, [r7, #20]
  return(result);
 80073c6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ca:	2301      	movs	r3, #1
 80073cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	f383 8810 	msr	PRIMASK, r3
}
 80073d4:	46c0      	nop			@ (mov r8, r8)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4926      	ldr	r1, [pc, #152]	@ (800747c <UART_EndRxTransfer+0xc4>)
 80073e2:	400a      	ands	r2, r1
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	f383 8810 	msr	PRIMASK, r3
}
 80073f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80073f2:	f3ef 8310 	mrs	r3, PRIMASK
 80073f6:	623b      	str	r3, [r7, #32]
  return(result);
 80073f8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80073fc:	2301      	movs	r3, #1
 80073fe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007402:	f383 8810 	msr	PRIMASK, r3
}
 8007406:	46c0      	nop			@ (mov r8, r8)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	491b      	ldr	r1, [pc, #108]	@ (8007480 <UART_EndRxTransfer+0xc8>)
 8007414:	400a      	ands	r2, r1
 8007416:	609a      	str	r2, [r3, #8]
 8007418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800741c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741e:	f383 8810 	msr	PRIMASK, r3
}
 8007422:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007428:	2b01      	cmp	r3, #1
 800742a:	d118      	bne.n	800745e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800742c:	f3ef 8310 	mrs	r3, PRIMASK
 8007430:	60bb      	str	r3, [r7, #8]
  return(result);
 8007432:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007434:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007436:	2301      	movs	r3, #1
 8007438:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f383 8810 	msr	PRIMASK, r3
}
 8007440:	46c0      	nop			@ (mov r8, r8)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2110      	movs	r1, #16
 800744e:	438a      	bics	r2, r1
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f383 8810 	msr	PRIMASK, r3
}
 800745c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	228c      	movs	r2, #140	@ 0x8c
 8007462:	2120      	movs	r1, #32
 8007464:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007472:	46c0      	nop			@ (mov r8, r8)
 8007474:	46bd      	mov	sp, r7
 8007476:	b00e      	add	sp, #56	@ 0x38
 8007478:	bd80      	pop	{r7, pc}
 800747a:	46c0      	nop			@ (mov r8, r8)
 800747c:	fffffedf 	.word	0xfffffedf
 8007480:	effffffe 	.word	0xeffffffe

08007484 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2284      	movs	r2, #132	@ 0x84
 8007490:	5c9b      	ldrb	r3, [r3, r2]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d101      	bne.n	800749a <HAL_UARTEx_DisableFifoMode+0x16>
 8007496:	2302      	movs	r3, #2
 8007498:	e027      	b.n	80074ea <HAL_UARTEx_DisableFifoMode+0x66>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2284      	movs	r2, #132	@ 0x84
 800749e:	2101      	movs	r1, #1
 80074a0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2288      	movs	r2, #136	@ 0x88
 80074a6:	2124      	movs	r1, #36	@ 0x24
 80074a8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2101      	movs	r1, #1
 80074be:	438a      	bics	r2, r1
 80074c0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	4a0b      	ldr	r2, [pc, #44]	@ (80074f4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80074c6:	4013      	ands	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2288      	movs	r2, #136	@ 0x88
 80074dc:	2120      	movs	r1, #32
 80074de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2284      	movs	r2, #132	@ 0x84
 80074e4:	2100      	movs	r1, #0
 80074e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	0018      	movs	r0, r3
 80074ec:	46bd      	mov	sp, r7
 80074ee:	b004      	add	sp, #16
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	46c0      	nop			@ (mov r8, r8)
 80074f4:	dfffffff 	.word	0xdfffffff

080074f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2284      	movs	r2, #132	@ 0x84
 8007506:	5c9b      	ldrb	r3, [r3, r2]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800750c:	2302      	movs	r3, #2
 800750e:	e02e      	b.n	800756e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2284      	movs	r2, #132	@ 0x84
 8007514:	2101      	movs	r1, #1
 8007516:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2288      	movs	r2, #136	@ 0x88
 800751c:	2124      	movs	r1, #36	@ 0x24
 800751e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2101      	movs	r1, #1
 8007534:	438a      	bics	r2, r1
 8007536:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	08d9      	lsrs	r1, r3, #3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	0018      	movs	r0, r3
 8007550:	f000 f854 	bl	80075fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2288      	movs	r2, #136	@ 0x88
 8007560:	2120      	movs	r1, #32
 8007562:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2284      	movs	r2, #132	@ 0x84
 8007568:	2100      	movs	r1, #0
 800756a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	0018      	movs	r0, r3
 8007570:	46bd      	mov	sp, r7
 8007572:	b004      	add	sp, #16
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2284      	movs	r2, #132	@ 0x84
 8007586:	5c9b      	ldrb	r3, [r3, r2]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d101      	bne.n	8007590 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800758c:	2302      	movs	r3, #2
 800758e:	e02f      	b.n	80075f0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2284      	movs	r2, #132	@ 0x84
 8007594:	2101      	movs	r1, #1
 8007596:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2288      	movs	r2, #136	@ 0x88
 800759c:	2124      	movs	r1, #36	@ 0x24
 800759e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2101      	movs	r1, #1
 80075b4:	438a      	bics	r2, r1
 80075b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	4a0e      	ldr	r2, [pc, #56]	@ (80075f8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80075c0:	4013      	ands	r3, r2
 80075c2:	0019      	movs	r1, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	0018      	movs	r0, r3
 80075d2:	f000 f813 	bl	80075fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2288      	movs	r2, #136	@ 0x88
 80075e2:	2120      	movs	r1, #32
 80075e4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2284      	movs	r2, #132	@ 0x84
 80075ea:	2100      	movs	r1, #0
 80075ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	0018      	movs	r0, r3
 80075f2:	46bd      	mov	sp, r7
 80075f4:	b004      	add	sp, #16
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	f1ffffff 	.word	0xf1ffffff

080075fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007608:	2b00      	cmp	r3, #0
 800760a:	d108      	bne.n	800761e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	226a      	movs	r2, #106	@ 0x6a
 8007610:	2101      	movs	r1, #1
 8007612:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2268      	movs	r2, #104	@ 0x68
 8007618:	2101      	movs	r1, #1
 800761a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800761c:	e043      	b.n	80076a6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800761e:	260f      	movs	r6, #15
 8007620:	19bb      	adds	r3, r7, r6
 8007622:	2208      	movs	r2, #8
 8007624:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007626:	200e      	movs	r0, #14
 8007628:	183b      	adds	r3, r7, r0
 800762a:	2208      	movs	r2, #8
 800762c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	0e5b      	lsrs	r3, r3, #25
 8007636:	b2da      	uxtb	r2, r3
 8007638:	240d      	movs	r4, #13
 800763a:	193b      	adds	r3, r7, r4
 800763c:	2107      	movs	r1, #7
 800763e:	400a      	ands	r2, r1
 8007640:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	0f5b      	lsrs	r3, r3, #29
 800764a:	b2da      	uxtb	r2, r3
 800764c:	250c      	movs	r5, #12
 800764e:	197b      	adds	r3, r7, r5
 8007650:	2107      	movs	r1, #7
 8007652:	400a      	ands	r2, r1
 8007654:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007656:	183b      	adds	r3, r7, r0
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	197a      	adds	r2, r7, r5
 800765c:	7812      	ldrb	r2, [r2, #0]
 800765e:	4914      	ldr	r1, [pc, #80]	@ (80076b0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007660:	5c8a      	ldrb	r2, [r1, r2]
 8007662:	435a      	muls	r2, r3
 8007664:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007666:	197b      	adds	r3, r7, r5
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	4a12      	ldr	r2, [pc, #72]	@ (80076b4 <UARTEx_SetNbDataToProcess+0xb8>)
 800766c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800766e:	0019      	movs	r1, r3
 8007670:	f7f8 fdde 	bl	8000230 <__divsi3>
 8007674:	0003      	movs	r3, r0
 8007676:	b299      	uxth	r1, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	226a      	movs	r2, #106	@ 0x6a
 800767c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800767e:	19bb      	adds	r3, r7, r6
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	193a      	adds	r2, r7, r4
 8007684:	7812      	ldrb	r2, [r2, #0]
 8007686:	490a      	ldr	r1, [pc, #40]	@ (80076b0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007688:	5c8a      	ldrb	r2, [r1, r2]
 800768a:	435a      	muls	r2, r3
 800768c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800768e:	193b      	adds	r3, r7, r4
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	4a08      	ldr	r2, [pc, #32]	@ (80076b4 <UARTEx_SetNbDataToProcess+0xb8>)
 8007694:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007696:	0019      	movs	r1, r3
 8007698:	f7f8 fdca 	bl	8000230 <__divsi3>
 800769c:	0003      	movs	r3, r0
 800769e:	b299      	uxth	r1, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2268      	movs	r2, #104	@ 0x68
 80076a4:	5299      	strh	r1, [r3, r2]
}
 80076a6:	46c0      	nop			@ (mov r8, r8)
 80076a8:	46bd      	mov	sp, r7
 80076aa:	b005      	add	sp, #20
 80076ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ae:	46c0      	nop			@ (mov r8, r8)
 80076b0:	080088d0 	.word	0x080088d0
 80076b4:	080088d8 	.word	0x080088d8

080076b8 <sniprintf>:
 80076b8:	b40c      	push	{r2, r3}
 80076ba:	b530      	push	{r4, r5, lr}
 80076bc:	4b17      	ldr	r3, [pc, #92]	@ (800771c <sniprintf+0x64>)
 80076be:	000c      	movs	r4, r1
 80076c0:	681d      	ldr	r5, [r3, #0]
 80076c2:	b09d      	sub	sp, #116	@ 0x74
 80076c4:	2900      	cmp	r1, #0
 80076c6:	da08      	bge.n	80076da <sniprintf+0x22>
 80076c8:	238b      	movs	r3, #139	@ 0x8b
 80076ca:	2001      	movs	r0, #1
 80076cc:	602b      	str	r3, [r5, #0]
 80076ce:	4240      	negs	r0, r0
 80076d0:	b01d      	add	sp, #116	@ 0x74
 80076d2:	bc30      	pop	{r4, r5}
 80076d4:	bc08      	pop	{r3}
 80076d6:	b002      	add	sp, #8
 80076d8:	4718      	bx	r3
 80076da:	2382      	movs	r3, #130	@ 0x82
 80076dc:	466a      	mov	r2, sp
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	8293      	strh	r3, [r2, #20]
 80076e2:	2300      	movs	r3, #0
 80076e4:	9002      	str	r0, [sp, #8]
 80076e6:	9006      	str	r0, [sp, #24]
 80076e8:	4299      	cmp	r1, r3
 80076ea:	d000      	beq.n	80076ee <sniprintf+0x36>
 80076ec:	1e4b      	subs	r3, r1, #1
 80076ee:	9304      	str	r3, [sp, #16]
 80076f0:	9307      	str	r3, [sp, #28]
 80076f2:	2301      	movs	r3, #1
 80076f4:	466a      	mov	r2, sp
 80076f6:	425b      	negs	r3, r3
 80076f8:	82d3      	strh	r3, [r2, #22]
 80076fa:	0028      	movs	r0, r5
 80076fc:	ab21      	add	r3, sp, #132	@ 0x84
 80076fe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007700:	a902      	add	r1, sp, #8
 8007702:	9301      	str	r3, [sp, #4]
 8007704:	f000 f9a6 	bl	8007a54 <_svfiprintf_r>
 8007708:	1c43      	adds	r3, r0, #1
 800770a:	da01      	bge.n	8007710 <sniprintf+0x58>
 800770c:	238b      	movs	r3, #139	@ 0x8b
 800770e:	602b      	str	r3, [r5, #0]
 8007710:	2c00      	cmp	r4, #0
 8007712:	d0dd      	beq.n	80076d0 <sniprintf+0x18>
 8007714:	2200      	movs	r2, #0
 8007716:	9b02      	ldr	r3, [sp, #8]
 8007718:	701a      	strb	r2, [r3, #0]
 800771a:	e7d9      	b.n	80076d0 <sniprintf+0x18>
 800771c:	2000003c 	.word	0x2000003c

08007720 <memset>:
 8007720:	0003      	movs	r3, r0
 8007722:	1882      	adds	r2, r0, r2
 8007724:	4293      	cmp	r3, r2
 8007726:	d100      	bne.n	800772a <memset+0xa>
 8007728:	4770      	bx	lr
 800772a:	7019      	strb	r1, [r3, #0]
 800772c:	3301      	adds	r3, #1
 800772e:	e7f9      	b.n	8007724 <memset+0x4>

08007730 <__errno>:
 8007730:	4b01      	ldr	r3, [pc, #4]	@ (8007738 <__errno+0x8>)
 8007732:	6818      	ldr	r0, [r3, #0]
 8007734:	4770      	bx	lr
 8007736:	46c0      	nop			@ (mov r8, r8)
 8007738:	2000003c 	.word	0x2000003c

0800773c <__libc_init_array>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	2600      	movs	r6, #0
 8007740:	4c0c      	ldr	r4, [pc, #48]	@ (8007774 <__libc_init_array+0x38>)
 8007742:	4d0d      	ldr	r5, [pc, #52]	@ (8007778 <__libc_init_array+0x3c>)
 8007744:	1b64      	subs	r4, r4, r5
 8007746:	10a4      	asrs	r4, r4, #2
 8007748:	42a6      	cmp	r6, r4
 800774a:	d109      	bne.n	8007760 <__libc_init_array+0x24>
 800774c:	2600      	movs	r6, #0
 800774e:	f000 fc65 	bl	800801c <_init>
 8007752:	4c0a      	ldr	r4, [pc, #40]	@ (800777c <__libc_init_array+0x40>)
 8007754:	4d0a      	ldr	r5, [pc, #40]	@ (8007780 <__libc_init_array+0x44>)
 8007756:	1b64      	subs	r4, r4, r5
 8007758:	10a4      	asrs	r4, r4, #2
 800775a:	42a6      	cmp	r6, r4
 800775c:	d105      	bne.n	800776a <__libc_init_array+0x2e>
 800775e:	bd70      	pop	{r4, r5, r6, pc}
 8007760:	00b3      	lsls	r3, r6, #2
 8007762:	58eb      	ldr	r3, [r5, r3]
 8007764:	4798      	blx	r3
 8007766:	3601      	adds	r6, #1
 8007768:	e7ee      	b.n	8007748 <__libc_init_array+0xc>
 800776a:	00b3      	lsls	r3, r6, #2
 800776c:	58eb      	ldr	r3, [r5, r3]
 800776e:	4798      	blx	r3
 8007770:	3601      	adds	r6, #1
 8007772:	e7f2      	b.n	800775a <__libc_init_array+0x1e>
 8007774:	08008914 	.word	0x08008914
 8007778:	08008914 	.word	0x08008914
 800777c:	08008918 	.word	0x08008918
 8007780:	08008914 	.word	0x08008914

08007784 <__retarget_lock_acquire_recursive>:
 8007784:	4770      	bx	lr

08007786 <__retarget_lock_release_recursive>:
 8007786:	4770      	bx	lr

08007788 <memcpy>:
 8007788:	2300      	movs	r3, #0
 800778a:	b510      	push	{r4, lr}
 800778c:	429a      	cmp	r2, r3
 800778e:	d100      	bne.n	8007792 <memcpy+0xa>
 8007790:	bd10      	pop	{r4, pc}
 8007792:	5ccc      	ldrb	r4, [r1, r3]
 8007794:	54c4      	strb	r4, [r0, r3]
 8007796:	3301      	adds	r3, #1
 8007798:	e7f8      	b.n	800778c <memcpy+0x4>
	...

0800779c <_free_r>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	0005      	movs	r5, r0
 80077a0:	1e0c      	subs	r4, r1, #0
 80077a2:	d010      	beq.n	80077c6 <_free_r+0x2a>
 80077a4:	3c04      	subs	r4, #4
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	da00      	bge.n	80077ae <_free_r+0x12>
 80077ac:	18e4      	adds	r4, r4, r3
 80077ae:	0028      	movs	r0, r5
 80077b0:	f000 f8e0 	bl	8007974 <__malloc_lock>
 80077b4:	4a1d      	ldr	r2, [pc, #116]	@ (800782c <_free_r+0x90>)
 80077b6:	6813      	ldr	r3, [r2, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d105      	bne.n	80077c8 <_free_r+0x2c>
 80077bc:	6063      	str	r3, [r4, #4]
 80077be:	6014      	str	r4, [r2, #0]
 80077c0:	0028      	movs	r0, r5
 80077c2:	f000 f8df 	bl	8007984 <__malloc_unlock>
 80077c6:	bd70      	pop	{r4, r5, r6, pc}
 80077c8:	42a3      	cmp	r3, r4
 80077ca:	d908      	bls.n	80077de <_free_r+0x42>
 80077cc:	6820      	ldr	r0, [r4, #0]
 80077ce:	1821      	adds	r1, r4, r0
 80077d0:	428b      	cmp	r3, r1
 80077d2:	d1f3      	bne.n	80077bc <_free_r+0x20>
 80077d4:	6819      	ldr	r1, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	1809      	adds	r1, r1, r0
 80077da:	6021      	str	r1, [r4, #0]
 80077dc:	e7ee      	b.n	80077bc <_free_r+0x20>
 80077de:	001a      	movs	r2, r3
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <_free_r+0x4e>
 80077e6:	42a3      	cmp	r3, r4
 80077e8:	d9f9      	bls.n	80077de <_free_r+0x42>
 80077ea:	6811      	ldr	r1, [r2, #0]
 80077ec:	1850      	adds	r0, r2, r1
 80077ee:	42a0      	cmp	r0, r4
 80077f0:	d10b      	bne.n	800780a <_free_r+0x6e>
 80077f2:	6820      	ldr	r0, [r4, #0]
 80077f4:	1809      	adds	r1, r1, r0
 80077f6:	1850      	adds	r0, r2, r1
 80077f8:	6011      	str	r1, [r2, #0]
 80077fa:	4283      	cmp	r3, r0
 80077fc:	d1e0      	bne.n	80077c0 <_free_r+0x24>
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	1841      	adds	r1, r0, r1
 8007804:	6011      	str	r1, [r2, #0]
 8007806:	6053      	str	r3, [r2, #4]
 8007808:	e7da      	b.n	80077c0 <_free_r+0x24>
 800780a:	42a0      	cmp	r0, r4
 800780c:	d902      	bls.n	8007814 <_free_r+0x78>
 800780e:	230c      	movs	r3, #12
 8007810:	602b      	str	r3, [r5, #0]
 8007812:	e7d5      	b.n	80077c0 <_free_r+0x24>
 8007814:	6820      	ldr	r0, [r4, #0]
 8007816:	1821      	adds	r1, r4, r0
 8007818:	428b      	cmp	r3, r1
 800781a:	d103      	bne.n	8007824 <_free_r+0x88>
 800781c:	6819      	ldr	r1, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	1809      	adds	r1, r1, r0
 8007822:	6021      	str	r1, [r4, #0]
 8007824:	6063      	str	r3, [r4, #4]
 8007826:	6054      	str	r4, [r2, #4]
 8007828:	e7ca      	b.n	80077c0 <_free_r+0x24>
 800782a:	46c0      	nop			@ (mov r8, r8)
 800782c:	20000860 	.word	0x20000860

08007830 <sbrk_aligned>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	4e0f      	ldr	r6, [pc, #60]	@ (8007870 <sbrk_aligned+0x40>)
 8007834:	000d      	movs	r5, r1
 8007836:	6831      	ldr	r1, [r6, #0]
 8007838:	0004      	movs	r4, r0
 800783a:	2900      	cmp	r1, #0
 800783c:	d102      	bne.n	8007844 <sbrk_aligned+0x14>
 800783e:	f000 fb99 	bl	8007f74 <_sbrk_r>
 8007842:	6030      	str	r0, [r6, #0]
 8007844:	0029      	movs	r1, r5
 8007846:	0020      	movs	r0, r4
 8007848:	f000 fb94 	bl	8007f74 <_sbrk_r>
 800784c:	1c43      	adds	r3, r0, #1
 800784e:	d103      	bne.n	8007858 <sbrk_aligned+0x28>
 8007850:	2501      	movs	r5, #1
 8007852:	426d      	negs	r5, r5
 8007854:	0028      	movs	r0, r5
 8007856:	bd70      	pop	{r4, r5, r6, pc}
 8007858:	2303      	movs	r3, #3
 800785a:	1cc5      	adds	r5, r0, #3
 800785c:	439d      	bics	r5, r3
 800785e:	42a8      	cmp	r0, r5
 8007860:	d0f8      	beq.n	8007854 <sbrk_aligned+0x24>
 8007862:	1a29      	subs	r1, r5, r0
 8007864:	0020      	movs	r0, r4
 8007866:	f000 fb85 	bl	8007f74 <_sbrk_r>
 800786a:	3001      	adds	r0, #1
 800786c:	d1f2      	bne.n	8007854 <sbrk_aligned+0x24>
 800786e:	e7ef      	b.n	8007850 <sbrk_aligned+0x20>
 8007870:	2000085c 	.word	0x2000085c

08007874 <_malloc_r>:
 8007874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007876:	2203      	movs	r2, #3
 8007878:	1ccb      	adds	r3, r1, #3
 800787a:	4393      	bics	r3, r2
 800787c:	3308      	adds	r3, #8
 800787e:	0005      	movs	r5, r0
 8007880:	001f      	movs	r7, r3
 8007882:	2b0c      	cmp	r3, #12
 8007884:	d234      	bcs.n	80078f0 <_malloc_r+0x7c>
 8007886:	270c      	movs	r7, #12
 8007888:	42b9      	cmp	r1, r7
 800788a:	d833      	bhi.n	80078f4 <_malloc_r+0x80>
 800788c:	0028      	movs	r0, r5
 800788e:	f000 f871 	bl	8007974 <__malloc_lock>
 8007892:	4e37      	ldr	r6, [pc, #220]	@ (8007970 <_malloc_r+0xfc>)
 8007894:	6833      	ldr	r3, [r6, #0]
 8007896:	001c      	movs	r4, r3
 8007898:	2c00      	cmp	r4, #0
 800789a:	d12f      	bne.n	80078fc <_malloc_r+0x88>
 800789c:	0039      	movs	r1, r7
 800789e:	0028      	movs	r0, r5
 80078a0:	f7ff ffc6 	bl	8007830 <sbrk_aligned>
 80078a4:	0004      	movs	r4, r0
 80078a6:	1c43      	adds	r3, r0, #1
 80078a8:	d15f      	bne.n	800796a <_malloc_r+0xf6>
 80078aa:	6834      	ldr	r4, [r6, #0]
 80078ac:	9400      	str	r4, [sp, #0]
 80078ae:	9b00      	ldr	r3, [sp, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d14a      	bne.n	800794a <_malloc_r+0xd6>
 80078b4:	2c00      	cmp	r4, #0
 80078b6:	d052      	beq.n	800795e <_malloc_r+0xea>
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	0028      	movs	r0, r5
 80078bc:	18e3      	adds	r3, r4, r3
 80078be:	9900      	ldr	r1, [sp, #0]
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	f000 fb57 	bl	8007f74 <_sbrk_r>
 80078c6:	9b01      	ldr	r3, [sp, #4]
 80078c8:	4283      	cmp	r3, r0
 80078ca:	d148      	bne.n	800795e <_malloc_r+0xea>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	0028      	movs	r0, r5
 80078d0:	1aff      	subs	r7, r7, r3
 80078d2:	0039      	movs	r1, r7
 80078d4:	f7ff ffac 	bl	8007830 <sbrk_aligned>
 80078d8:	3001      	adds	r0, #1
 80078da:	d040      	beq.n	800795e <_malloc_r+0xea>
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	19db      	adds	r3, r3, r7
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	6833      	ldr	r3, [r6, #0]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	2a00      	cmp	r2, #0
 80078e8:	d133      	bne.n	8007952 <_malloc_r+0xde>
 80078ea:	9b00      	ldr	r3, [sp, #0]
 80078ec:	6033      	str	r3, [r6, #0]
 80078ee:	e019      	b.n	8007924 <_malloc_r+0xb0>
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	dac9      	bge.n	8007888 <_malloc_r+0x14>
 80078f4:	230c      	movs	r3, #12
 80078f6:	602b      	str	r3, [r5, #0]
 80078f8:	2000      	movs	r0, #0
 80078fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80078fc:	6821      	ldr	r1, [r4, #0]
 80078fe:	1bc9      	subs	r1, r1, r7
 8007900:	d420      	bmi.n	8007944 <_malloc_r+0xd0>
 8007902:	290b      	cmp	r1, #11
 8007904:	d90a      	bls.n	800791c <_malloc_r+0xa8>
 8007906:	19e2      	adds	r2, r4, r7
 8007908:	6027      	str	r7, [r4, #0]
 800790a:	42a3      	cmp	r3, r4
 800790c:	d104      	bne.n	8007918 <_malloc_r+0xa4>
 800790e:	6032      	str	r2, [r6, #0]
 8007910:	6863      	ldr	r3, [r4, #4]
 8007912:	6011      	str	r1, [r2, #0]
 8007914:	6053      	str	r3, [r2, #4]
 8007916:	e005      	b.n	8007924 <_malloc_r+0xb0>
 8007918:	605a      	str	r2, [r3, #4]
 800791a:	e7f9      	b.n	8007910 <_malloc_r+0x9c>
 800791c:	6862      	ldr	r2, [r4, #4]
 800791e:	42a3      	cmp	r3, r4
 8007920:	d10e      	bne.n	8007940 <_malloc_r+0xcc>
 8007922:	6032      	str	r2, [r6, #0]
 8007924:	0028      	movs	r0, r5
 8007926:	f000 f82d 	bl	8007984 <__malloc_unlock>
 800792a:	0020      	movs	r0, r4
 800792c:	2207      	movs	r2, #7
 800792e:	300b      	adds	r0, #11
 8007930:	1d23      	adds	r3, r4, #4
 8007932:	4390      	bics	r0, r2
 8007934:	1ac2      	subs	r2, r0, r3
 8007936:	4298      	cmp	r0, r3
 8007938:	d0df      	beq.n	80078fa <_malloc_r+0x86>
 800793a:	1a1b      	subs	r3, r3, r0
 800793c:	50a3      	str	r3, [r4, r2]
 800793e:	e7dc      	b.n	80078fa <_malloc_r+0x86>
 8007940:	605a      	str	r2, [r3, #4]
 8007942:	e7ef      	b.n	8007924 <_malloc_r+0xb0>
 8007944:	0023      	movs	r3, r4
 8007946:	6864      	ldr	r4, [r4, #4]
 8007948:	e7a6      	b.n	8007898 <_malloc_r+0x24>
 800794a:	9c00      	ldr	r4, [sp, #0]
 800794c:	6863      	ldr	r3, [r4, #4]
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	e7ad      	b.n	80078ae <_malloc_r+0x3a>
 8007952:	001a      	movs	r2, r3
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	42a3      	cmp	r3, r4
 8007958:	d1fb      	bne.n	8007952 <_malloc_r+0xde>
 800795a:	2300      	movs	r3, #0
 800795c:	e7da      	b.n	8007914 <_malloc_r+0xa0>
 800795e:	230c      	movs	r3, #12
 8007960:	0028      	movs	r0, r5
 8007962:	602b      	str	r3, [r5, #0]
 8007964:	f000 f80e 	bl	8007984 <__malloc_unlock>
 8007968:	e7c6      	b.n	80078f8 <_malloc_r+0x84>
 800796a:	6007      	str	r7, [r0, #0]
 800796c:	e7da      	b.n	8007924 <_malloc_r+0xb0>
 800796e:	46c0      	nop			@ (mov r8, r8)
 8007970:	20000860 	.word	0x20000860

08007974 <__malloc_lock>:
 8007974:	b510      	push	{r4, lr}
 8007976:	4802      	ldr	r0, [pc, #8]	@ (8007980 <__malloc_lock+0xc>)
 8007978:	f7ff ff04 	bl	8007784 <__retarget_lock_acquire_recursive>
 800797c:	bd10      	pop	{r4, pc}
 800797e:	46c0      	nop			@ (mov r8, r8)
 8007980:	20000858 	.word	0x20000858

08007984 <__malloc_unlock>:
 8007984:	b510      	push	{r4, lr}
 8007986:	4802      	ldr	r0, [pc, #8]	@ (8007990 <__malloc_unlock+0xc>)
 8007988:	f7ff fefd 	bl	8007786 <__retarget_lock_release_recursive>
 800798c:	bd10      	pop	{r4, pc}
 800798e:	46c0      	nop			@ (mov r8, r8)
 8007990:	20000858 	.word	0x20000858

08007994 <__ssputs_r>:
 8007994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007996:	688e      	ldr	r6, [r1, #8]
 8007998:	b085      	sub	sp, #20
 800799a:	001f      	movs	r7, r3
 800799c:	000c      	movs	r4, r1
 800799e:	680b      	ldr	r3, [r1, #0]
 80079a0:	9002      	str	r0, [sp, #8]
 80079a2:	9203      	str	r2, [sp, #12]
 80079a4:	42be      	cmp	r6, r7
 80079a6:	d830      	bhi.n	8007a0a <__ssputs_r+0x76>
 80079a8:	210c      	movs	r1, #12
 80079aa:	5e62      	ldrsh	r2, [r4, r1]
 80079ac:	2190      	movs	r1, #144	@ 0x90
 80079ae:	00c9      	lsls	r1, r1, #3
 80079b0:	420a      	tst	r2, r1
 80079b2:	d028      	beq.n	8007a06 <__ssputs_r+0x72>
 80079b4:	2003      	movs	r0, #3
 80079b6:	6921      	ldr	r1, [r4, #16]
 80079b8:	1a5b      	subs	r3, r3, r1
 80079ba:	9301      	str	r3, [sp, #4]
 80079bc:	6963      	ldr	r3, [r4, #20]
 80079be:	4343      	muls	r3, r0
 80079c0:	9801      	ldr	r0, [sp, #4]
 80079c2:	0fdd      	lsrs	r5, r3, #31
 80079c4:	18ed      	adds	r5, r5, r3
 80079c6:	1c7b      	adds	r3, r7, #1
 80079c8:	181b      	adds	r3, r3, r0
 80079ca:	106d      	asrs	r5, r5, #1
 80079cc:	42ab      	cmp	r3, r5
 80079ce:	d900      	bls.n	80079d2 <__ssputs_r+0x3e>
 80079d0:	001d      	movs	r5, r3
 80079d2:	0552      	lsls	r2, r2, #21
 80079d4:	d528      	bpl.n	8007a28 <__ssputs_r+0x94>
 80079d6:	0029      	movs	r1, r5
 80079d8:	9802      	ldr	r0, [sp, #8]
 80079da:	f7ff ff4b 	bl	8007874 <_malloc_r>
 80079de:	1e06      	subs	r6, r0, #0
 80079e0:	d02c      	beq.n	8007a3c <__ssputs_r+0xa8>
 80079e2:	9a01      	ldr	r2, [sp, #4]
 80079e4:	6921      	ldr	r1, [r4, #16]
 80079e6:	f7ff fecf 	bl	8007788 <memcpy>
 80079ea:	89a2      	ldrh	r2, [r4, #12]
 80079ec:	4b18      	ldr	r3, [pc, #96]	@ (8007a50 <__ssputs_r+0xbc>)
 80079ee:	401a      	ands	r2, r3
 80079f0:	2380      	movs	r3, #128	@ 0x80
 80079f2:	4313      	orrs	r3, r2
 80079f4:	81a3      	strh	r3, [r4, #12]
 80079f6:	9b01      	ldr	r3, [sp, #4]
 80079f8:	6126      	str	r6, [r4, #16]
 80079fa:	18f6      	adds	r6, r6, r3
 80079fc:	6026      	str	r6, [r4, #0]
 80079fe:	003e      	movs	r6, r7
 8007a00:	6165      	str	r5, [r4, #20]
 8007a02:	1aed      	subs	r5, r5, r3
 8007a04:	60a5      	str	r5, [r4, #8]
 8007a06:	42be      	cmp	r6, r7
 8007a08:	d900      	bls.n	8007a0c <__ssputs_r+0x78>
 8007a0a:	003e      	movs	r6, r7
 8007a0c:	0032      	movs	r2, r6
 8007a0e:	9903      	ldr	r1, [sp, #12]
 8007a10:	6820      	ldr	r0, [r4, #0]
 8007a12:	f000 fa9b 	bl	8007f4c <memmove>
 8007a16:	2000      	movs	r0, #0
 8007a18:	68a3      	ldr	r3, [r4, #8]
 8007a1a:	1b9b      	subs	r3, r3, r6
 8007a1c:	60a3      	str	r3, [r4, #8]
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	199b      	adds	r3, r3, r6
 8007a22:	6023      	str	r3, [r4, #0]
 8007a24:	b005      	add	sp, #20
 8007a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a28:	002a      	movs	r2, r5
 8007a2a:	9802      	ldr	r0, [sp, #8]
 8007a2c:	f000 fabf 	bl	8007fae <_realloc_r>
 8007a30:	1e06      	subs	r6, r0, #0
 8007a32:	d1e0      	bne.n	80079f6 <__ssputs_r+0x62>
 8007a34:	6921      	ldr	r1, [r4, #16]
 8007a36:	9802      	ldr	r0, [sp, #8]
 8007a38:	f7ff feb0 	bl	800779c <_free_r>
 8007a3c:	230c      	movs	r3, #12
 8007a3e:	2001      	movs	r0, #1
 8007a40:	9a02      	ldr	r2, [sp, #8]
 8007a42:	4240      	negs	r0, r0
 8007a44:	6013      	str	r3, [r2, #0]
 8007a46:	89a2      	ldrh	r2, [r4, #12]
 8007a48:	3334      	adds	r3, #52	@ 0x34
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	81a3      	strh	r3, [r4, #12]
 8007a4e:	e7e9      	b.n	8007a24 <__ssputs_r+0x90>
 8007a50:	fffffb7f 	.word	0xfffffb7f

08007a54 <_svfiprintf_r>:
 8007a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a56:	b0a1      	sub	sp, #132	@ 0x84
 8007a58:	9003      	str	r0, [sp, #12]
 8007a5a:	001d      	movs	r5, r3
 8007a5c:	898b      	ldrh	r3, [r1, #12]
 8007a5e:	000f      	movs	r7, r1
 8007a60:	0016      	movs	r6, r2
 8007a62:	061b      	lsls	r3, r3, #24
 8007a64:	d511      	bpl.n	8007a8a <_svfiprintf_r+0x36>
 8007a66:	690b      	ldr	r3, [r1, #16]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10e      	bne.n	8007a8a <_svfiprintf_r+0x36>
 8007a6c:	2140      	movs	r1, #64	@ 0x40
 8007a6e:	f7ff ff01 	bl	8007874 <_malloc_r>
 8007a72:	6038      	str	r0, [r7, #0]
 8007a74:	6138      	str	r0, [r7, #16]
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d105      	bne.n	8007a86 <_svfiprintf_r+0x32>
 8007a7a:	230c      	movs	r3, #12
 8007a7c:	9a03      	ldr	r2, [sp, #12]
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	2001      	movs	r0, #1
 8007a82:	4240      	negs	r0, r0
 8007a84:	e0cf      	b.n	8007c26 <_svfiprintf_r+0x1d2>
 8007a86:	2340      	movs	r3, #64	@ 0x40
 8007a88:	617b      	str	r3, [r7, #20]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	ac08      	add	r4, sp, #32
 8007a8e:	6163      	str	r3, [r4, #20]
 8007a90:	3320      	adds	r3, #32
 8007a92:	7663      	strb	r3, [r4, #25]
 8007a94:	3310      	adds	r3, #16
 8007a96:	76a3      	strb	r3, [r4, #26]
 8007a98:	9507      	str	r5, [sp, #28]
 8007a9a:	0035      	movs	r5, r6
 8007a9c:	782b      	ldrb	r3, [r5, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <_svfiprintf_r+0x52>
 8007aa2:	2b25      	cmp	r3, #37	@ 0x25
 8007aa4:	d148      	bne.n	8007b38 <_svfiprintf_r+0xe4>
 8007aa6:	1bab      	subs	r3, r5, r6
 8007aa8:	9305      	str	r3, [sp, #20]
 8007aaa:	42b5      	cmp	r5, r6
 8007aac:	d00b      	beq.n	8007ac6 <_svfiprintf_r+0x72>
 8007aae:	0032      	movs	r2, r6
 8007ab0:	0039      	movs	r1, r7
 8007ab2:	9803      	ldr	r0, [sp, #12]
 8007ab4:	f7ff ff6e 	bl	8007994 <__ssputs_r>
 8007ab8:	3001      	adds	r0, #1
 8007aba:	d100      	bne.n	8007abe <_svfiprintf_r+0x6a>
 8007abc:	e0ae      	b.n	8007c1c <_svfiprintf_r+0x1c8>
 8007abe:	6963      	ldr	r3, [r4, #20]
 8007ac0:	9a05      	ldr	r2, [sp, #20]
 8007ac2:	189b      	adds	r3, r3, r2
 8007ac4:	6163      	str	r3, [r4, #20]
 8007ac6:	782b      	ldrb	r3, [r5, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d100      	bne.n	8007ace <_svfiprintf_r+0x7a>
 8007acc:	e0a6      	b.n	8007c1c <_svfiprintf_r+0x1c8>
 8007ace:	2201      	movs	r2, #1
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	4252      	negs	r2, r2
 8007ad4:	6062      	str	r2, [r4, #4]
 8007ad6:	a904      	add	r1, sp, #16
 8007ad8:	3254      	adds	r2, #84	@ 0x54
 8007ada:	1852      	adds	r2, r2, r1
 8007adc:	1c6e      	adds	r6, r5, #1
 8007ade:	6023      	str	r3, [r4, #0]
 8007ae0:	60e3      	str	r3, [r4, #12]
 8007ae2:	60a3      	str	r3, [r4, #8]
 8007ae4:	7013      	strb	r3, [r2, #0]
 8007ae6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007ae8:	4b54      	ldr	r3, [pc, #336]	@ (8007c3c <_svfiprintf_r+0x1e8>)
 8007aea:	2205      	movs	r2, #5
 8007aec:	0018      	movs	r0, r3
 8007aee:	7831      	ldrb	r1, [r6, #0]
 8007af0:	9305      	str	r3, [sp, #20]
 8007af2:	f000 fa51 	bl	8007f98 <memchr>
 8007af6:	1c75      	adds	r5, r6, #1
 8007af8:	2800      	cmp	r0, #0
 8007afa:	d11f      	bne.n	8007b3c <_svfiprintf_r+0xe8>
 8007afc:	6822      	ldr	r2, [r4, #0]
 8007afe:	06d3      	lsls	r3, r2, #27
 8007b00:	d504      	bpl.n	8007b0c <_svfiprintf_r+0xb8>
 8007b02:	2353      	movs	r3, #83	@ 0x53
 8007b04:	a904      	add	r1, sp, #16
 8007b06:	185b      	adds	r3, r3, r1
 8007b08:	2120      	movs	r1, #32
 8007b0a:	7019      	strb	r1, [r3, #0]
 8007b0c:	0713      	lsls	r3, r2, #28
 8007b0e:	d504      	bpl.n	8007b1a <_svfiprintf_r+0xc6>
 8007b10:	2353      	movs	r3, #83	@ 0x53
 8007b12:	a904      	add	r1, sp, #16
 8007b14:	185b      	adds	r3, r3, r1
 8007b16:	212b      	movs	r1, #43	@ 0x2b
 8007b18:	7019      	strb	r1, [r3, #0]
 8007b1a:	7833      	ldrb	r3, [r6, #0]
 8007b1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b1e:	d016      	beq.n	8007b4e <_svfiprintf_r+0xfa>
 8007b20:	0035      	movs	r5, r6
 8007b22:	2100      	movs	r1, #0
 8007b24:	200a      	movs	r0, #10
 8007b26:	68e3      	ldr	r3, [r4, #12]
 8007b28:	782a      	ldrb	r2, [r5, #0]
 8007b2a:	1c6e      	adds	r6, r5, #1
 8007b2c:	3a30      	subs	r2, #48	@ 0x30
 8007b2e:	2a09      	cmp	r2, #9
 8007b30:	d950      	bls.n	8007bd4 <_svfiprintf_r+0x180>
 8007b32:	2900      	cmp	r1, #0
 8007b34:	d111      	bne.n	8007b5a <_svfiprintf_r+0x106>
 8007b36:	e017      	b.n	8007b68 <_svfiprintf_r+0x114>
 8007b38:	3501      	adds	r5, #1
 8007b3a:	e7af      	b.n	8007a9c <_svfiprintf_r+0x48>
 8007b3c:	9b05      	ldr	r3, [sp, #20]
 8007b3e:	6822      	ldr	r2, [r4, #0]
 8007b40:	1ac0      	subs	r0, r0, r3
 8007b42:	2301      	movs	r3, #1
 8007b44:	4083      	lsls	r3, r0
 8007b46:	4313      	orrs	r3, r2
 8007b48:	002e      	movs	r6, r5
 8007b4a:	6023      	str	r3, [r4, #0]
 8007b4c:	e7cc      	b.n	8007ae8 <_svfiprintf_r+0x94>
 8007b4e:	9b07      	ldr	r3, [sp, #28]
 8007b50:	1d19      	adds	r1, r3, #4
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	9107      	str	r1, [sp, #28]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	db01      	blt.n	8007b5e <_svfiprintf_r+0x10a>
 8007b5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b5c:	e004      	b.n	8007b68 <_svfiprintf_r+0x114>
 8007b5e:	425b      	negs	r3, r3
 8007b60:	60e3      	str	r3, [r4, #12]
 8007b62:	2302      	movs	r3, #2
 8007b64:	4313      	orrs	r3, r2
 8007b66:	6023      	str	r3, [r4, #0]
 8007b68:	782b      	ldrb	r3, [r5, #0]
 8007b6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b6c:	d10c      	bne.n	8007b88 <_svfiprintf_r+0x134>
 8007b6e:	786b      	ldrb	r3, [r5, #1]
 8007b70:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b72:	d134      	bne.n	8007bde <_svfiprintf_r+0x18a>
 8007b74:	9b07      	ldr	r3, [sp, #28]
 8007b76:	3502      	adds	r5, #2
 8007b78:	1d1a      	adds	r2, r3, #4
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	9207      	str	r2, [sp, #28]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	da01      	bge.n	8007b86 <_svfiprintf_r+0x132>
 8007b82:	2301      	movs	r3, #1
 8007b84:	425b      	negs	r3, r3
 8007b86:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b88:	4e2d      	ldr	r6, [pc, #180]	@ (8007c40 <_svfiprintf_r+0x1ec>)
 8007b8a:	2203      	movs	r2, #3
 8007b8c:	0030      	movs	r0, r6
 8007b8e:	7829      	ldrb	r1, [r5, #0]
 8007b90:	f000 fa02 	bl	8007f98 <memchr>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d006      	beq.n	8007ba6 <_svfiprintf_r+0x152>
 8007b98:	2340      	movs	r3, #64	@ 0x40
 8007b9a:	1b80      	subs	r0, r0, r6
 8007b9c:	4083      	lsls	r3, r0
 8007b9e:	6822      	ldr	r2, [r4, #0]
 8007ba0:	3501      	adds	r5, #1
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	7829      	ldrb	r1, [r5, #0]
 8007ba8:	2206      	movs	r2, #6
 8007baa:	4826      	ldr	r0, [pc, #152]	@ (8007c44 <_svfiprintf_r+0x1f0>)
 8007bac:	1c6e      	adds	r6, r5, #1
 8007bae:	7621      	strb	r1, [r4, #24]
 8007bb0:	f000 f9f2 	bl	8007f98 <memchr>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d038      	beq.n	8007c2a <_svfiprintf_r+0x1d6>
 8007bb8:	4b23      	ldr	r3, [pc, #140]	@ (8007c48 <_svfiprintf_r+0x1f4>)
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d122      	bne.n	8007c04 <_svfiprintf_r+0x1b0>
 8007bbe:	2207      	movs	r2, #7
 8007bc0:	9b07      	ldr	r3, [sp, #28]
 8007bc2:	3307      	adds	r3, #7
 8007bc4:	4393      	bics	r3, r2
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	9307      	str	r3, [sp, #28]
 8007bca:	6963      	ldr	r3, [r4, #20]
 8007bcc:	9a04      	ldr	r2, [sp, #16]
 8007bce:	189b      	adds	r3, r3, r2
 8007bd0:	6163      	str	r3, [r4, #20]
 8007bd2:	e762      	b.n	8007a9a <_svfiprintf_r+0x46>
 8007bd4:	4343      	muls	r3, r0
 8007bd6:	0035      	movs	r5, r6
 8007bd8:	2101      	movs	r1, #1
 8007bda:	189b      	adds	r3, r3, r2
 8007bdc:	e7a4      	b.n	8007b28 <_svfiprintf_r+0xd4>
 8007bde:	2300      	movs	r3, #0
 8007be0:	200a      	movs	r0, #10
 8007be2:	0019      	movs	r1, r3
 8007be4:	3501      	adds	r5, #1
 8007be6:	6063      	str	r3, [r4, #4]
 8007be8:	782a      	ldrb	r2, [r5, #0]
 8007bea:	1c6e      	adds	r6, r5, #1
 8007bec:	3a30      	subs	r2, #48	@ 0x30
 8007bee:	2a09      	cmp	r2, #9
 8007bf0:	d903      	bls.n	8007bfa <_svfiprintf_r+0x1a6>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d0c8      	beq.n	8007b88 <_svfiprintf_r+0x134>
 8007bf6:	9109      	str	r1, [sp, #36]	@ 0x24
 8007bf8:	e7c6      	b.n	8007b88 <_svfiprintf_r+0x134>
 8007bfa:	4341      	muls	r1, r0
 8007bfc:	0035      	movs	r5, r6
 8007bfe:	2301      	movs	r3, #1
 8007c00:	1889      	adds	r1, r1, r2
 8007c02:	e7f1      	b.n	8007be8 <_svfiprintf_r+0x194>
 8007c04:	aa07      	add	r2, sp, #28
 8007c06:	9200      	str	r2, [sp, #0]
 8007c08:	0021      	movs	r1, r4
 8007c0a:	003a      	movs	r2, r7
 8007c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8007c4c <_svfiprintf_r+0x1f8>)
 8007c0e:	9803      	ldr	r0, [sp, #12]
 8007c10:	e000      	b.n	8007c14 <_svfiprintf_r+0x1c0>
 8007c12:	bf00      	nop
 8007c14:	9004      	str	r0, [sp, #16]
 8007c16:	9b04      	ldr	r3, [sp, #16]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	d1d6      	bne.n	8007bca <_svfiprintf_r+0x176>
 8007c1c:	89bb      	ldrh	r3, [r7, #12]
 8007c1e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007c20:	065b      	lsls	r3, r3, #25
 8007c22:	d500      	bpl.n	8007c26 <_svfiprintf_r+0x1d2>
 8007c24:	e72c      	b.n	8007a80 <_svfiprintf_r+0x2c>
 8007c26:	b021      	add	sp, #132	@ 0x84
 8007c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c2a:	aa07      	add	r2, sp, #28
 8007c2c:	9200      	str	r2, [sp, #0]
 8007c2e:	0021      	movs	r1, r4
 8007c30:	003a      	movs	r2, r7
 8007c32:	4b06      	ldr	r3, [pc, #24]	@ (8007c4c <_svfiprintf_r+0x1f8>)
 8007c34:	9803      	ldr	r0, [sp, #12]
 8007c36:	f000 f87b 	bl	8007d30 <_printf_i>
 8007c3a:	e7eb      	b.n	8007c14 <_svfiprintf_r+0x1c0>
 8007c3c:	080088e0 	.word	0x080088e0
 8007c40:	080088e6 	.word	0x080088e6
 8007c44:	080088ea 	.word	0x080088ea
 8007c48:	00000000 	.word	0x00000000
 8007c4c:	08007995 	.word	0x08007995

08007c50 <_printf_common>:
 8007c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c52:	0016      	movs	r6, r2
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	688a      	ldr	r2, [r1, #8]
 8007c58:	690b      	ldr	r3, [r1, #16]
 8007c5a:	000c      	movs	r4, r1
 8007c5c:	9000      	str	r0, [sp, #0]
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	da00      	bge.n	8007c64 <_printf_common+0x14>
 8007c62:	0013      	movs	r3, r2
 8007c64:	0022      	movs	r2, r4
 8007c66:	6033      	str	r3, [r6, #0]
 8007c68:	3243      	adds	r2, #67	@ 0x43
 8007c6a:	7812      	ldrb	r2, [r2, #0]
 8007c6c:	2a00      	cmp	r2, #0
 8007c6e:	d001      	beq.n	8007c74 <_printf_common+0x24>
 8007c70:	3301      	adds	r3, #1
 8007c72:	6033      	str	r3, [r6, #0]
 8007c74:	6823      	ldr	r3, [r4, #0]
 8007c76:	069b      	lsls	r3, r3, #26
 8007c78:	d502      	bpl.n	8007c80 <_printf_common+0x30>
 8007c7a:	6833      	ldr	r3, [r6, #0]
 8007c7c:	3302      	adds	r3, #2
 8007c7e:	6033      	str	r3, [r6, #0]
 8007c80:	6822      	ldr	r2, [r4, #0]
 8007c82:	2306      	movs	r3, #6
 8007c84:	0015      	movs	r5, r2
 8007c86:	401d      	ands	r5, r3
 8007c88:	421a      	tst	r2, r3
 8007c8a:	d027      	beq.n	8007cdc <_printf_common+0x8c>
 8007c8c:	0023      	movs	r3, r4
 8007c8e:	3343      	adds	r3, #67	@ 0x43
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	1e5a      	subs	r2, r3, #1
 8007c94:	4193      	sbcs	r3, r2
 8007c96:	6822      	ldr	r2, [r4, #0]
 8007c98:	0692      	lsls	r2, r2, #26
 8007c9a:	d430      	bmi.n	8007cfe <_printf_common+0xae>
 8007c9c:	0022      	movs	r2, r4
 8007c9e:	9901      	ldr	r1, [sp, #4]
 8007ca0:	9800      	ldr	r0, [sp, #0]
 8007ca2:	9d08      	ldr	r5, [sp, #32]
 8007ca4:	3243      	adds	r2, #67	@ 0x43
 8007ca6:	47a8      	blx	r5
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d025      	beq.n	8007cf8 <_printf_common+0xa8>
 8007cac:	2206      	movs	r2, #6
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	2500      	movs	r5, #0
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	2b04      	cmp	r3, #4
 8007cb6:	d105      	bne.n	8007cc4 <_printf_common+0x74>
 8007cb8:	6833      	ldr	r3, [r6, #0]
 8007cba:	68e5      	ldr	r5, [r4, #12]
 8007cbc:	1aed      	subs	r5, r5, r3
 8007cbe:	43eb      	mvns	r3, r5
 8007cc0:	17db      	asrs	r3, r3, #31
 8007cc2:	401d      	ands	r5, r3
 8007cc4:	68a3      	ldr	r3, [r4, #8]
 8007cc6:	6922      	ldr	r2, [r4, #16]
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	dd01      	ble.n	8007cd0 <_printf_common+0x80>
 8007ccc:	1a9b      	subs	r3, r3, r2
 8007cce:	18ed      	adds	r5, r5, r3
 8007cd0:	2600      	movs	r6, #0
 8007cd2:	42b5      	cmp	r5, r6
 8007cd4:	d120      	bne.n	8007d18 <_printf_common+0xc8>
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	e010      	b.n	8007cfc <_printf_common+0xac>
 8007cda:	3501      	adds	r5, #1
 8007cdc:	68e3      	ldr	r3, [r4, #12]
 8007cde:	6832      	ldr	r2, [r6, #0]
 8007ce0:	1a9b      	subs	r3, r3, r2
 8007ce2:	42ab      	cmp	r3, r5
 8007ce4:	ddd2      	ble.n	8007c8c <_printf_common+0x3c>
 8007ce6:	0022      	movs	r2, r4
 8007ce8:	2301      	movs	r3, #1
 8007cea:	9901      	ldr	r1, [sp, #4]
 8007cec:	9800      	ldr	r0, [sp, #0]
 8007cee:	9f08      	ldr	r7, [sp, #32]
 8007cf0:	3219      	adds	r2, #25
 8007cf2:	47b8      	blx	r7
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d1f0      	bne.n	8007cda <_printf_common+0x8a>
 8007cf8:	2001      	movs	r0, #1
 8007cfa:	4240      	negs	r0, r0
 8007cfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007cfe:	2030      	movs	r0, #48	@ 0x30
 8007d00:	18e1      	adds	r1, r4, r3
 8007d02:	3143      	adds	r1, #67	@ 0x43
 8007d04:	7008      	strb	r0, [r1, #0]
 8007d06:	0021      	movs	r1, r4
 8007d08:	1c5a      	adds	r2, r3, #1
 8007d0a:	3145      	adds	r1, #69	@ 0x45
 8007d0c:	7809      	ldrb	r1, [r1, #0]
 8007d0e:	18a2      	adds	r2, r4, r2
 8007d10:	3243      	adds	r2, #67	@ 0x43
 8007d12:	3302      	adds	r3, #2
 8007d14:	7011      	strb	r1, [r2, #0]
 8007d16:	e7c1      	b.n	8007c9c <_printf_common+0x4c>
 8007d18:	0022      	movs	r2, r4
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	9901      	ldr	r1, [sp, #4]
 8007d1e:	9800      	ldr	r0, [sp, #0]
 8007d20:	9f08      	ldr	r7, [sp, #32]
 8007d22:	321a      	adds	r2, #26
 8007d24:	47b8      	blx	r7
 8007d26:	3001      	adds	r0, #1
 8007d28:	d0e6      	beq.n	8007cf8 <_printf_common+0xa8>
 8007d2a:	3601      	adds	r6, #1
 8007d2c:	e7d1      	b.n	8007cd2 <_printf_common+0x82>
	...

08007d30 <_printf_i>:
 8007d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d32:	b08b      	sub	sp, #44	@ 0x2c
 8007d34:	9206      	str	r2, [sp, #24]
 8007d36:	000a      	movs	r2, r1
 8007d38:	3243      	adds	r2, #67	@ 0x43
 8007d3a:	9307      	str	r3, [sp, #28]
 8007d3c:	9005      	str	r0, [sp, #20]
 8007d3e:	9203      	str	r2, [sp, #12]
 8007d40:	7e0a      	ldrb	r2, [r1, #24]
 8007d42:	000c      	movs	r4, r1
 8007d44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d46:	2a78      	cmp	r2, #120	@ 0x78
 8007d48:	d809      	bhi.n	8007d5e <_printf_i+0x2e>
 8007d4a:	2a62      	cmp	r2, #98	@ 0x62
 8007d4c:	d80b      	bhi.n	8007d66 <_printf_i+0x36>
 8007d4e:	2a00      	cmp	r2, #0
 8007d50:	d100      	bne.n	8007d54 <_printf_i+0x24>
 8007d52:	e0bc      	b.n	8007ece <_printf_i+0x19e>
 8007d54:	497b      	ldr	r1, [pc, #492]	@ (8007f44 <_printf_i+0x214>)
 8007d56:	9104      	str	r1, [sp, #16]
 8007d58:	2a58      	cmp	r2, #88	@ 0x58
 8007d5a:	d100      	bne.n	8007d5e <_printf_i+0x2e>
 8007d5c:	e090      	b.n	8007e80 <_printf_i+0x150>
 8007d5e:	0025      	movs	r5, r4
 8007d60:	3542      	adds	r5, #66	@ 0x42
 8007d62:	702a      	strb	r2, [r5, #0]
 8007d64:	e022      	b.n	8007dac <_printf_i+0x7c>
 8007d66:	0010      	movs	r0, r2
 8007d68:	3863      	subs	r0, #99	@ 0x63
 8007d6a:	2815      	cmp	r0, #21
 8007d6c:	d8f7      	bhi.n	8007d5e <_printf_i+0x2e>
 8007d6e:	f7f8 f9cb 	bl	8000108 <__gnu_thumb1_case_shi>
 8007d72:	0016      	.short	0x0016
 8007d74:	fff6001f 	.word	0xfff6001f
 8007d78:	fff6fff6 	.word	0xfff6fff6
 8007d7c:	001ffff6 	.word	0x001ffff6
 8007d80:	fff6fff6 	.word	0xfff6fff6
 8007d84:	fff6fff6 	.word	0xfff6fff6
 8007d88:	003600a1 	.word	0x003600a1
 8007d8c:	fff60080 	.word	0xfff60080
 8007d90:	00b2fff6 	.word	0x00b2fff6
 8007d94:	0036fff6 	.word	0x0036fff6
 8007d98:	fff6fff6 	.word	0xfff6fff6
 8007d9c:	0084      	.short	0x0084
 8007d9e:	0025      	movs	r5, r4
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	3542      	adds	r5, #66	@ 0x42
 8007da4:	1d11      	adds	r1, r2, #4
 8007da6:	6019      	str	r1, [r3, #0]
 8007da8:	6813      	ldr	r3, [r2, #0]
 8007daa:	702b      	strb	r3, [r5, #0]
 8007dac:	2301      	movs	r3, #1
 8007dae:	e0a0      	b.n	8007ef2 <_printf_i+0x1c2>
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	6809      	ldr	r1, [r1, #0]
 8007db4:	1d02      	adds	r2, r0, #4
 8007db6:	060d      	lsls	r5, r1, #24
 8007db8:	d50b      	bpl.n	8007dd2 <_printf_i+0xa2>
 8007dba:	6806      	ldr	r6, [r0, #0]
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	2e00      	cmp	r6, #0
 8007dc0:	da03      	bge.n	8007dca <_printf_i+0x9a>
 8007dc2:	232d      	movs	r3, #45	@ 0x2d
 8007dc4:	9a03      	ldr	r2, [sp, #12]
 8007dc6:	4276      	negs	r6, r6
 8007dc8:	7013      	strb	r3, [r2, #0]
 8007dca:	4b5e      	ldr	r3, [pc, #376]	@ (8007f44 <_printf_i+0x214>)
 8007dcc:	270a      	movs	r7, #10
 8007dce:	9304      	str	r3, [sp, #16]
 8007dd0:	e018      	b.n	8007e04 <_printf_i+0xd4>
 8007dd2:	6806      	ldr	r6, [r0, #0]
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	0649      	lsls	r1, r1, #25
 8007dd8:	d5f1      	bpl.n	8007dbe <_printf_i+0x8e>
 8007dda:	b236      	sxth	r6, r6
 8007ddc:	e7ef      	b.n	8007dbe <_printf_i+0x8e>
 8007dde:	6808      	ldr	r0, [r1, #0]
 8007de0:	6819      	ldr	r1, [r3, #0]
 8007de2:	c940      	ldmia	r1!, {r6}
 8007de4:	0605      	lsls	r5, r0, #24
 8007de6:	d402      	bmi.n	8007dee <_printf_i+0xbe>
 8007de8:	0640      	lsls	r0, r0, #25
 8007dea:	d500      	bpl.n	8007dee <_printf_i+0xbe>
 8007dec:	b2b6      	uxth	r6, r6
 8007dee:	6019      	str	r1, [r3, #0]
 8007df0:	4b54      	ldr	r3, [pc, #336]	@ (8007f44 <_printf_i+0x214>)
 8007df2:	270a      	movs	r7, #10
 8007df4:	9304      	str	r3, [sp, #16]
 8007df6:	2a6f      	cmp	r2, #111	@ 0x6f
 8007df8:	d100      	bne.n	8007dfc <_printf_i+0xcc>
 8007dfa:	3f02      	subs	r7, #2
 8007dfc:	0023      	movs	r3, r4
 8007dfe:	2200      	movs	r2, #0
 8007e00:	3343      	adds	r3, #67	@ 0x43
 8007e02:	701a      	strb	r2, [r3, #0]
 8007e04:	6863      	ldr	r3, [r4, #4]
 8007e06:	60a3      	str	r3, [r4, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	db03      	blt.n	8007e14 <_printf_i+0xe4>
 8007e0c:	2104      	movs	r1, #4
 8007e0e:	6822      	ldr	r2, [r4, #0]
 8007e10:	438a      	bics	r2, r1
 8007e12:	6022      	str	r2, [r4, #0]
 8007e14:	2e00      	cmp	r6, #0
 8007e16:	d102      	bne.n	8007e1e <_printf_i+0xee>
 8007e18:	9d03      	ldr	r5, [sp, #12]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00c      	beq.n	8007e38 <_printf_i+0x108>
 8007e1e:	9d03      	ldr	r5, [sp, #12]
 8007e20:	0030      	movs	r0, r6
 8007e22:	0039      	movs	r1, r7
 8007e24:	f7f8 fa00 	bl	8000228 <__aeabi_uidivmod>
 8007e28:	9b04      	ldr	r3, [sp, #16]
 8007e2a:	3d01      	subs	r5, #1
 8007e2c:	5c5b      	ldrb	r3, [r3, r1]
 8007e2e:	702b      	strb	r3, [r5, #0]
 8007e30:	0033      	movs	r3, r6
 8007e32:	0006      	movs	r6, r0
 8007e34:	429f      	cmp	r7, r3
 8007e36:	d9f3      	bls.n	8007e20 <_printf_i+0xf0>
 8007e38:	2f08      	cmp	r7, #8
 8007e3a:	d109      	bne.n	8007e50 <_printf_i+0x120>
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	07db      	lsls	r3, r3, #31
 8007e40:	d506      	bpl.n	8007e50 <_printf_i+0x120>
 8007e42:	6862      	ldr	r2, [r4, #4]
 8007e44:	6923      	ldr	r3, [r4, #16]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	dc02      	bgt.n	8007e50 <_printf_i+0x120>
 8007e4a:	2330      	movs	r3, #48	@ 0x30
 8007e4c:	3d01      	subs	r5, #1
 8007e4e:	702b      	strb	r3, [r5, #0]
 8007e50:	9b03      	ldr	r3, [sp, #12]
 8007e52:	1b5b      	subs	r3, r3, r5
 8007e54:	6123      	str	r3, [r4, #16]
 8007e56:	9b07      	ldr	r3, [sp, #28]
 8007e58:	0021      	movs	r1, r4
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	9805      	ldr	r0, [sp, #20]
 8007e5e:	9b06      	ldr	r3, [sp, #24]
 8007e60:	aa09      	add	r2, sp, #36	@ 0x24
 8007e62:	f7ff fef5 	bl	8007c50 <_printf_common>
 8007e66:	3001      	adds	r0, #1
 8007e68:	d148      	bne.n	8007efc <_printf_i+0x1cc>
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	4240      	negs	r0, r0
 8007e6e:	b00b      	add	sp, #44	@ 0x2c
 8007e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e72:	2220      	movs	r2, #32
 8007e74:	6809      	ldr	r1, [r1, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	6022      	str	r2, [r4, #0]
 8007e7a:	2278      	movs	r2, #120	@ 0x78
 8007e7c:	4932      	ldr	r1, [pc, #200]	@ (8007f48 <_printf_i+0x218>)
 8007e7e:	9104      	str	r1, [sp, #16]
 8007e80:	0021      	movs	r1, r4
 8007e82:	3145      	adds	r1, #69	@ 0x45
 8007e84:	700a      	strb	r2, [r1, #0]
 8007e86:	6819      	ldr	r1, [r3, #0]
 8007e88:	6822      	ldr	r2, [r4, #0]
 8007e8a:	c940      	ldmia	r1!, {r6}
 8007e8c:	0610      	lsls	r0, r2, #24
 8007e8e:	d402      	bmi.n	8007e96 <_printf_i+0x166>
 8007e90:	0650      	lsls	r0, r2, #25
 8007e92:	d500      	bpl.n	8007e96 <_printf_i+0x166>
 8007e94:	b2b6      	uxth	r6, r6
 8007e96:	6019      	str	r1, [r3, #0]
 8007e98:	07d3      	lsls	r3, r2, #31
 8007e9a:	d502      	bpl.n	8007ea2 <_printf_i+0x172>
 8007e9c:	2320      	movs	r3, #32
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	2e00      	cmp	r6, #0
 8007ea4:	d001      	beq.n	8007eaa <_printf_i+0x17a>
 8007ea6:	2710      	movs	r7, #16
 8007ea8:	e7a8      	b.n	8007dfc <_printf_i+0xcc>
 8007eaa:	2220      	movs	r2, #32
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	4393      	bics	r3, r2
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	e7f8      	b.n	8007ea6 <_printf_i+0x176>
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	680d      	ldr	r5, [r1, #0]
 8007eb8:	1d10      	adds	r0, r2, #4
 8007eba:	6949      	ldr	r1, [r1, #20]
 8007ebc:	6018      	str	r0, [r3, #0]
 8007ebe:	6813      	ldr	r3, [r2, #0]
 8007ec0:	062e      	lsls	r6, r5, #24
 8007ec2:	d501      	bpl.n	8007ec8 <_printf_i+0x198>
 8007ec4:	6019      	str	r1, [r3, #0]
 8007ec6:	e002      	b.n	8007ece <_printf_i+0x19e>
 8007ec8:	066d      	lsls	r5, r5, #25
 8007eca:	d5fb      	bpl.n	8007ec4 <_printf_i+0x194>
 8007ecc:	8019      	strh	r1, [r3, #0]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	9d03      	ldr	r5, [sp, #12]
 8007ed2:	6123      	str	r3, [r4, #16]
 8007ed4:	e7bf      	b.n	8007e56 <_printf_i+0x126>
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	1d11      	adds	r1, r2, #4
 8007eda:	6019      	str	r1, [r3, #0]
 8007edc:	6815      	ldr	r5, [r2, #0]
 8007ede:	2100      	movs	r1, #0
 8007ee0:	0028      	movs	r0, r5
 8007ee2:	6862      	ldr	r2, [r4, #4]
 8007ee4:	f000 f858 	bl	8007f98 <memchr>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d001      	beq.n	8007ef0 <_printf_i+0x1c0>
 8007eec:	1b40      	subs	r0, r0, r5
 8007eee:	6060      	str	r0, [r4, #4]
 8007ef0:	6863      	ldr	r3, [r4, #4]
 8007ef2:	6123      	str	r3, [r4, #16]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	9a03      	ldr	r2, [sp, #12]
 8007ef8:	7013      	strb	r3, [r2, #0]
 8007efa:	e7ac      	b.n	8007e56 <_printf_i+0x126>
 8007efc:	002a      	movs	r2, r5
 8007efe:	6923      	ldr	r3, [r4, #16]
 8007f00:	9906      	ldr	r1, [sp, #24]
 8007f02:	9805      	ldr	r0, [sp, #20]
 8007f04:	9d07      	ldr	r5, [sp, #28]
 8007f06:	47a8      	blx	r5
 8007f08:	3001      	adds	r0, #1
 8007f0a:	d0ae      	beq.n	8007e6a <_printf_i+0x13a>
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	079b      	lsls	r3, r3, #30
 8007f10:	d415      	bmi.n	8007f3e <_printf_i+0x20e>
 8007f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f14:	68e0      	ldr	r0, [r4, #12]
 8007f16:	4298      	cmp	r0, r3
 8007f18:	daa9      	bge.n	8007e6e <_printf_i+0x13e>
 8007f1a:	0018      	movs	r0, r3
 8007f1c:	e7a7      	b.n	8007e6e <_printf_i+0x13e>
 8007f1e:	0022      	movs	r2, r4
 8007f20:	2301      	movs	r3, #1
 8007f22:	9906      	ldr	r1, [sp, #24]
 8007f24:	9805      	ldr	r0, [sp, #20]
 8007f26:	9e07      	ldr	r6, [sp, #28]
 8007f28:	3219      	adds	r2, #25
 8007f2a:	47b0      	blx	r6
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d09c      	beq.n	8007e6a <_printf_i+0x13a>
 8007f30:	3501      	adds	r5, #1
 8007f32:	68e3      	ldr	r3, [r4, #12]
 8007f34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f36:	1a9b      	subs	r3, r3, r2
 8007f38:	42ab      	cmp	r3, r5
 8007f3a:	dcf0      	bgt.n	8007f1e <_printf_i+0x1ee>
 8007f3c:	e7e9      	b.n	8007f12 <_printf_i+0x1e2>
 8007f3e:	2500      	movs	r5, #0
 8007f40:	e7f7      	b.n	8007f32 <_printf_i+0x202>
 8007f42:	46c0      	nop			@ (mov r8, r8)
 8007f44:	080088f1 	.word	0x080088f1
 8007f48:	08008902 	.word	0x08008902

08007f4c <memmove>:
 8007f4c:	b510      	push	{r4, lr}
 8007f4e:	4288      	cmp	r0, r1
 8007f50:	d806      	bhi.n	8007f60 <memmove+0x14>
 8007f52:	2300      	movs	r3, #0
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d008      	beq.n	8007f6a <memmove+0x1e>
 8007f58:	5ccc      	ldrb	r4, [r1, r3]
 8007f5a:	54c4      	strb	r4, [r0, r3]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	e7f9      	b.n	8007f54 <memmove+0x8>
 8007f60:	188b      	adds	r3, r1, r2
 8007f62:	4298      	cmp	r0, r3
 8007f64:	d2f5      	bcs.n	8007f52 <memmove+0x6>
 8007f66:	3a01      	subs	r2, #1
 8007f68:	d200      	bcs.n	8007f6c <memmove+0x20>
 8007f6a:	bd10      	pop	{r4, pc}
 8007f6c:	5c8b      	ldrb	r3, [r1, r2]
 8007f6e:	5483      	strb	r3, [r0, r2]
 8007f70:	e7f9      	b.n	8007f66 <memmove+0x1a>
	...

08007f74 <_sbrk_r>:
 8007f74:	2300      	movs	r3, #0
 8007f76:	b570      	push	{r4, r5, r6, lr}
 8007f78:	4d06      	ldr	r5, [pc, #24]	@ (8007f94 <_sbrk_r+0x20>)
 8007f7a:	0004      	movs	r4, r0
 8007f7c:	0008      	movs	r0, r1
 8007f7e:	602b      	str	r3, [r5, #0]
 8007f80:	f7f9 fa82 	bl	8001488 <_sbrk>
 8007f84:	1c43      	adds	r3, r0, #1
 8007f86:	d103      	bne.n	8007f90 <_sbrk_r+0x1c>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d000      	beq.n	8007f90 <_sbrk_r+0x1c>
 8007f8e:	6023      	str	r3, [r4, #0]
 8007f90:	bd70      	pop	{r4, r5, r6, pc}
 8007f92:	46c0      	nop			@ (mov r8, r8)
 8007f94:	20000854 	.word	0x20000854

08007f98 <memchr>:
 8007f98:	b2c9      	uxtb	r1, r1
 8007f9a:	1882      	adds	r2, r0, r2
 8007f9c:	4290      	cmp	r0, r2
 8007f9e:	d101      	bne.n	8007fa4 <memchr+0xc>
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	4770      	bx	lr
 8007fa4:	7803      	ldrb	r3, [r0, #0]
 8007fa6:	428b      	cmp	r3, r1
 8007fa8:	d0fb      	beq.n	8007fa2 <memchr+0xa>
 8007faa:	3001      	adds	r0, #1
 8007fac:	e7f6      	b.n	8007f9c <memchr+0x4>

08007fae <_realloc_r>:
 8007fae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fb0:	0006      	movs	r6, r0
 8007fb2:	000c      	movs	r4, r1
 8007fb4:	0015      	movs	r5, r2
 8007fb6:	2900      	cmp	r1, #0
 8007fb8:	d105      	bne.n	8007fc6 <_realloc_r+0x18>
 8007fba:	0011      	movs	r1, r2
 8007fbc:	f7ff fc5a 	bl	8007874 <_malloc_r>
 8007fc0:	0004      	movs	r4, r0
 8007fc2:	0020      	movs	r0, r4
 8007fc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007fc6:	2a00      	cmp	r2, #0
 8007fc8:	d103      	bne.n	8007fd2 <_realloc_r+0x24>
 8007fca:	f7ff fbe7 	bl	800779c <_free_r>
 8007fce:	2400      	movs	r4, #0
 8007fd0:	e7f7      	b.n	8007fc2 <_realloc_r+0x14>
 8007fd2:	f000 f81b 	bl	800800c <_malloc_usable_size_r>
 8007fd6:	0007      	movs	r7, r0
 8007fd8:	4285      	cmp	r5, r0
 8007fda:	d802      	bhi.n	8007fe2 <_realloc_r+0x34>
 8007fdc:	0843      	lsrs	r3, r0, #1
 8007fde:	42ab      	cmp	r3, r5
 8007fe0:	d3ef      	bcc.n	8007fc2 <_realloc_r+0x14>
 8007fe2:	0029      	movs	r1, r5
 8007fe4:	0030      	movs	r0, r6
 8007fe6:	f7ff fc45 	bl	8007874 <_malloc_r>
 8007fea:	9001      	str	r0, [sp, #4]
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d0ee      	beq.n	8007fce <_realloc_r+0x20>
 8007ff0:	002a      	movs	r2, r5
 8007ff2:	42bd      	cmp	r5, r7
 8007ff4:	d900      	bls.n	8007ff8 <_realloc_r+0x4a>
 8007ff6:	003a      	movs	r2, r7
 8007ff8:	0021      	movs	r1, r4
 8007ffa:	9801      	ldr	r0, [sp, #4]
 8007ffc:	f7ff fbc4 	bl	8007788 <memcpy>
 8008000:	0021      	movs	r1, r4
 8008002:	0030      	movs	r0, r6
 8008004:	f7ff fbca 	bl	800779c <_free_r>
 8008008:	9c01      	ldr	r4, [sp, #4]
 800800a:	e7da      	b.n	8007fc2 <_realloc_r+0x14>

0800800c <_malloc_usable_size_r>:
 800800c:	1f0b      	subs	r3, r1, #4
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	1f18      	subs	r0, r3, #4
 8008012:	2b00      	cmp	r3, #0
 8008014:	da01      	bge.n	800801a <_malloc_usable_size_r+0xe>
 8008016:	580b      	ldr	r3, [r1, r0]
 8008018:	18c0      	adds	r0, r0, r3
 800801a:	4770      	bx	lr

0800801c <_init>:
 800801c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801e:	46c0      	nop			@ (mov r8, r8)
 8008020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008022:	bc08      	pop	{r3}
 8008024:	469e      	mov	lr, r3
 8008026:	4770      	bx	lr

08008028 <_fini>:
 8008028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802a:	46c0      	nop			@ (mov r8, r8)
 800802c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802e:	bc08      	pop	{r3}
 8008030:	469e      	mov	lr, r3
 8008032:	4770      	bx	lr
