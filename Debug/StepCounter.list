
StepCounter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082bc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  0800837c  0800837c  0000937c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cac  08008cac  0000a0c8  2**0
                  CONTENTS
  4 .ARM          00000000  08008cac  08008cac  0000a0c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008cac  08008cac  0000a0c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cac  08008cac  00009cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008cb0  08008cb0  00009cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  08008cb4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000084c  200000c8  08008d7c  0000a0c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  08008d7c  0000a914  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a0c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019228  00000000  00000000  0000a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000452a  00000000  00000000  00023318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  00027848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a3  00000000  00000000  00028f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba6b  00000000  00000000  0002a0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023fb5  00000000  00000000  00045b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a41c  00000000  00000000  00069b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103f27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f0  00000000  00000000  00103f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0010935c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000c8 	.word	0x200000c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008364 	.word	0x08008364

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000cc 	.word	0x200000cc
 8000104:	08008364 	.word	0x08008364

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	0018      	movs	r0, r3
 8000412:	230c      	movs	r3, #12
 8000414:	001a      	movs	r2, r3
 8000416:	2100      	movs	r1, #0
 8000418:	f007 fb26 	bl	8007a68 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800041c:	4b38      	ldr	r3, [pc, #224]	@ (8000500 <MX_ADC1_Init+0xf8>)
 800041e:	4a39      	ldr	r2, [pc, #228]	@ (8000504 <MX_ADC1_Init+0xfc>)
 8000420:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000422:	4b37      	ldr	r3, [pc, #220]	@ (8000500 <MX_ADC1_Init+0xf8>)
 8000424:	22c0      	movs	r2, #192	@ 0xc0
 8000426:	0612      	lsls	r2, r2, #24
 8000428:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800042a:	4b35      	ldr	r3, [pc, #212]	@ (8000500 <MX_ADC1_Init+0xf8>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000430:	4b33      	ldr	r3, [pc, #204]	@ (8000500 <MX_ADC1_Init+0xf8>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000436:	4b32      	ldr	r3, [pc, #200]	@ (8000500 <MX_ADC1_Init+0xf8>)
 8000438:	2280      	movs	r2, #128	@ 0x80
 800043a:	0612      	lsls	r2, r2, #24
 800043c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800043e:	4b30      	ldr	r3, [pc, #192]	@ (8000500 <MX_ADC1_Init+0xf8>)
 8000440:	2204      	movs	r2, #4
 8000442:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000444:	4b2e      	ldr	r3, [pc, #184]	@ (8000500 <MX_ADC1_Init+0xf8>)
 8000446:	2200      	movs	r2, #0
 8000448:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800044a:	4b2d      	ldr	r3, [pc, #180]	@ (8000500 <MX_ADC1_Init+0xf8>)
 800044c:	2200      	movs	r2, #0
 800044e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000450:	4b2b      	ldr	r3, [pc, #172]	@ (8000500 <MX_ADC1_Init+0xf8>)
 8000452:	2200      	movs	r2, #0
 8000454:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 8000456:	4b2a      	ldr	r3, [pc, #168]	@ (8000500 <MX_ADC1_Init+0xf8>)
 8000458:	2200      	movs	r2, #0
 800045a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800045c:	4b28      	ldr	r3, [pc, #160]	@ (8000500 <MX_ADC1_Init+0xf8>)
 800045e:	2220      	movs	r2, #32
 8000460:	2100      	movs	r1, #0
 8000462:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000464:	4b26      	ldr	r3, [pc, #152]	@ (8000500 <MX_ADC1_Init+0xf8>)
 8000466:	2200      	movs	r2, #0
 8000468:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800046a:	4b25      	ldr	r3, [pc, #148]	@ (8000500 <MX_ADC1_Init+0xf8>)
 800046c:	2200      	movs	r2, #0
 800046e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000470:	4b23      	ldr	r3, [pc, #140]	@ (8000500 <MX_ADC1_Init+0xf8>)
 8000472:	222c      	movs	r2, #44	@ 0x2c
 8000474:	2100      	movs	r1, #0
 8000476:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000478:	4b21      	ldr	r3, [pc, #132]	@ (8000500 <MX_ADC1_Init+0xf8>)
 800047a:	2200      	movs	r2, #0
 800047c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800047e:	4b20      	ldr	r3, [pc, #128]	@ (8000500 <MX_ADC1_Init+0xf8>)
 8000480:	2200      	movs	r2, #0
 8000482:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000484:	4b1e      	ldr	r3, [pc, #120]	@ (8000500 <MX_ADC1_Init+0xf8>)
 8000486:	223c      	movs	r2, #60	@ 0x3c
 8000488:	2100      	movs	r1, #0
 800048a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800048c:	4b1c      	ldr	r3, [pc, #112]	@ (8000500 <MX_ADC1_Init+0xf8>)
 800048e:	2200      	movs	r2, #0
 8000490:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000492:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <MX_ADC1_Init+0xf8>)
 8000494:	0018      	movs	r0, r3
 8000496:	f001 ffab 	bl	80023f0 <HAL_ADC_Init>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800049e:	f000 fe12 	bl	80010c6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4a18      	ldr	r2, [pc, #96]	@ (8000508 <MX_ADC1_Init+0x100>)
 80004a6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2201      	movs	r2, #1
 80004ac:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ae:	1d3a      	adds	r2, r7, #4
 80004b0:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <MX_ADC1_Init+0xf8>)
 80004b2:	0011      	movs	r1, r2
 80004b4:	0018      	movs	r0, r3
 80004b6:	f002 f9df 	bl	8002878 <HAL_ADC_ConfigChannel>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80004be:	f000 fe02 	bl	80010c6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4a11      	ldr	r2, [pc, #68]	@ (800050c <MX_ADC1_Init+0x104>)
 80004c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c8:	1d3a      	adds	r2, r7, #4
 80004ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000500 <MX_ADC1_Init+0xf8>)
 80004cc:	0011      	movs	r1, r2
 80004ce:	0018      	movs	r0, r3
 80004d0:	f002 f9d2 	bl	8002878 <HAL_ADC_ConfigChannel>
 80004d4:	1e03      	subs	r3, r0, #0
 80004d6:	d001      	beq.n	80004dc <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80004d8:	f000 fdf5 	bl	80010c6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	4a0c      	ldr	r2, [pc, #48]	@ (8000510 <MX_ADC1_Init+0x108>)
 80004e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004e2:	1d3a      	adds	r2, r7, #4
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <MX_ADC1_Init+0xf8>)
 80004e6:	0011      	movs	r1, r2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f002 f9c5 	bl	8002878 <HAL_ADC_ConfigChannel>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80004f2:	f000 fde8 	bl	80010c6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004f6:	46c0      	nop			@ (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b004      	add	sp, #16
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	200000e4 	.word	0x200000e4
 8000504:	40012400 	.word	0x40012400
 8000508:	04000002 	.word	0x04000002
 800050c:	2c000800 	.word	0x2c000800
 8000510:	30001000 	.word	0x30001000

08000514 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b093      	sub	sp, #76	@ 0x4c
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051c:	2334      	movs	r3, #52	@ 0x34
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	0018      	movs	r0, r3
 8000522:	2314      	movs	r3, #20
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f007 fa9e 	bl	8007a68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800052c:	2414      	movs	r4, #20
 800052e:	193b      	adds	r3, r7, r4
 8000530:	0018      	movs	r0, r3
 8000532:	2320      	movs	r3, #32
 8000534:	001a      	movs	r2, r3
 8000536:	2100      	movs	r1, #0
 8000538:	f007 fa96 	bl	8007a68 <memset>
  if(adcHandle->Instance==ADC1)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a43      	ldr	r2, [pc, #268]	@ (8000650 <HAL_ADC_MspInit+0x13c>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d000      	beq.n	8000548 <HAL_ADC_MspInit+0x34>
 8000546:	e07e      	b.n	8000646 <HAL_ADC_MspInit+0x132>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	2220      	movs	r2, #32
 800054c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000554:	193b      	adds	r3, r7, r4
 8000556:	0018      	movs	r0, r3
 8000558:	f005 ff54 	bl	8006404 <HAL_RCCEx_PeriphCLKConfig>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000560:	f000 fdb1 	bl	80010c6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000564:	4b3b      	ldr	r3, [pc, #236]	@ (8000654 <HAL_ADC_MspInit+0x140>)
 8000566:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000568:	4b3a      	ldr	r3, [pc, #232]	@ (8000654 <HAL_ADC_MspInit+0x140>)
 800056a:	2180      	movs	r1, #128	@ 0x80
 800056c:	0349      	lsls	r1, r1, #13
 800056e:	430a      	orrs	r2, r1
 8000570:	641a      	str	r2, [r3, #64]	@ 0x40
 8000572:	4b38      	ldr	r3, [pc, #224]	@ (8000654 <HAL_ADC_MspInit+0x140>)
 8000574:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000576:	2380      	movs	r3, #128	@ 0x80
 8000578:	035b      	lsls	r3, r3, #13
 800057a:	4013      	ands	r3, r2
 800057c:	613b      	str	r3, [r7, #16]
 800057e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	4b34      	ldr	r3, [pc, #208]	@ (8000654 <HAL_ADC_MspInit+0x140>)
 8000582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000584:	4b33      	ldr	r3, [pc, #204]	@ (8000654 <HAL_ADC_MspInit+0x140>)
 8000586:	2101      	movs	r1, #1
 8000588:	430a      	orrs	r2, r1
 800058a:	635a      	str	r2, [r3, #52]	@ 0x34
 800058c:	4b31      	ldr	r3, [pc, #196]	@ (8000654 <HAL_ADC_MspInit+0x140>)
 800058e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000590:	2201      	movs	r2, #1
 8000592:	4013      	ands	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000598:	4b2e      	ldr	r3, [pc, #184]	@ (8000654 <HAL_ADC_MspInit+0x140>)
 800059a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800059c:	4b2d      	ldr	r3, [pc, #180]	@ (8000654 <HAL_ADC_MspInit+0x140>)
 800059e:	2104      	movs	r1, #4
 80005a0:	430a      	orrs	r2, r1
 80005a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80005a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000654 <HAL_ADC_MspInit+0x140>)
 80005a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005a8:	2204      	movs	r2, #4
 80005aa:	4013      	ands	r3, r2
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PC4     ------> ADC1_IN11
    PC5     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005b0:	2434      	movs	r4, #52	@ 0x34
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2202      	movs	r2, #2
 80005b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2203      	movs	r2, #3
 80005bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	193a      	adds	r2, r7, r4
 80005c6:	23a0      	movs	r3, #160	@ 0xa0
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	0011      	movs	r1, r2
 80005cc:	0018      	movs	r0, r3
 80005ce:	f002 ffed 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOYSTICK_X_Pin|JOYSTICK_Y_Pin;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	2230      	movs	r2, #48	@ 0x30
 80005d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2203      	movs	r2, #3
 80005dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000658 <HAL_ADC_MspInit+0x144>)
 80005e8:	0019      	movs	r1, r3
 80005ea:	0010      	movs	r0, r2
 80005ec:	f002 ffde 	bl	80035ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005f0:	4b1a      	ldr	r3, [pc, #104]	@ (800065c <HAL_ADC_MspInit+0x148>)
 80005f2:	4a1b      	ldr	r2, [pc, #108]	@ (8000660 <HAL_ADC_MspInit+0x14c>)
 80005f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80005f6:	4b19      	ldr	r3, [pc, #100]	@ (800065c <HAL_ADC_MspInit+0x148>)
 80005f8:	2205      	movs	r2, #5
 80005fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005fc:	4b17      	ldr	r3, [pc, #92]	@ (800065c <HAL_ADC_MspInit+0x148>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000602:	4b16      	ldr	r3, [pc, #88]	@ (800065c <HAL_ADC_MspInit+0x148>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000608:	4b14      	ldr	r3, [pc, #80]	@ (800065c <HAL_ADC_MspInit+0x148>)
 800060a:	2280      	movs	r2, #128	@ 0x80
 800060c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800060e:	4b13      	ldr	r3, [pc, #76]	@ (800065c <HAL_ADC_MspInit+0x148>)
 8000610:	2280      	movs	r2, #128	@ 0x80
 8000612:	0052      	lsls	r2, r2, #1
 8000614:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000616:	4b11      	ldr	r3, [pc, #68]	@ (800065c <HAL_ADC_MspInit+0x148>)
 8000618:	2280      	movs	r2, #128	@ 0x80
 800061a:	00d2      	lsls	r2, r2, #3
 800061c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <HAL_ADC_MspInit+0x148>)
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000624:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <HAL_ADC_MspInit+0x148>)
 8000626:	2200      	movs	r2, #0
 8000628:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <HAL_ADC_MspInit+0x148>)
 800062c:	0018      	movs	r0, r3
 800062e:	f002 fce3 	bl	8002ff8 <HAL_DMA_Init>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <HAL_ADC_MspInit+0x126>
    {
      Error_Handler();
 8000636:	f000 fd46 	bl	80010c6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a07      	ldr	r2, [pc, #28]	@ (800065c <HAL_ADC_MspInit+0x148>)
 800063e:	651a      	str	r2, [r3, #80]	@ 0x50
 8000640:	4b06      	ldr	r3, [pc, #24]	@ (800065c <HAL_ADC_MspInit+0x148>)
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b013      	add	sp, #76	@ 0x4c
 800064c:	bd90      	pop	{r4, r7, pc}
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	40012400 	.word	0x40012400
 8000654:	40021000 	.word	0x40021000
 8000658:	50000800 	.word	0x50000800
 800065c:	20000148 	.word	0x20000148
 8000660:	40020008 	.word	0x40020008

08000664 <app_main>:
static uint32_t uartTaskNextRun = 0;
static uint32_t fsmTaskNextRun = 0;
static uint32_t potTaskNextRun = 0;

void app_main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
	// Initialise and start timer.
	uint32_t ticks;
	buttonTaskNextRun = HAL_GetTick() + BUTTON_TASK_PERIOD_TICKS;
 800066a:	f001 fd4b 	bl	8002104 <HAL_GetTick>
 800066e:	0003      	movs	r3, r0
 8000670:	330a      	adds	r3, #10
 8000672:	001a      	movs	r2, r3
 8000674:	4b33      	ldr	r3, [pc, #204]	@ (8000744 <app_main+0xe0>)
 8000676:	601a      	str	r2, [r3, #0]
	joystickTaskNextRun = HAL_GetTick() + JOYSTICK_TASK_PERIOD_TICKS;
 8000678:	f001 fd44 	bl	8002104 <HAL_GetTick>
 800067c:	0003      	movs	r3, r0
 800067e:	3364      	adds	r3, #100	@ 0x64
 8000680:	001a      	movs	r2, r3
 8000682:	4b31      	ldr	r3, [pc, #196]	@ (8000748 <app_main+0xe4>)
 8000684:	601a      	str	r2, [r3, #0]
	displayTaskNextRun = HAL_GetTick() + DISPLAY_TASK_PERIOD_TICKS;
 8000686:	f001 fd3d 	bl	8002104 <HAL_GetTick>
 800068a:	0003      	movs	r3, r0
 800068c:	33fa      	adds	r3, #250	@ 0xfa
 800068e:	001a      	movs	r2, r3
 8000690:	4b2e      	ldr	r3, [pc, #184]	@ (800074c <app_main+0xe8>)
 8000692:	601a      	str	r2, [r3, #0]

	// Initialise tasks.
	buttons_task_init();
 8000694:	f001 f9f4 	bl	8001a80 <buttons_task_init>
	display_task_init();
 8000698:	f001 fa01 	bl	8001a9e <display_task_init>


	// Periodically execute tasks at the frequency defined above.
	while(1)
	{
		ticks = HAL_GetTick();
 800069c:	f001 fd32 	bl	8002104 <HAL_GetTick>
 80006a0:	0003      	movs	r3, r0
 80006a2:	607b      	str	r3, [r7, #4]

		if(ticks > buttonTaskNextRun) {
 80006a4:	4b27      	ldr	r3, [pc, #156]	@ (8000744 <app_main+0xe0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d907      	bls.n	80006be <app_main+0x5a>
			buttons_task_execute();
 80006ae:	f001 f9ee 	bl	8001a8e <buttons_task_execute>
			buttonTaskNextRun += BUTTON_TASK_PERIOD_TICKS;
 80006b2:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <app_main+0xe0>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	330a      	adds	r3, #10
 80006b8:	001a      	movs	r2, r3
 80006ba:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <app_main+0xe0>)
 80006bc:	601a      	str	r2, [r3, #0]
		}

		if (ticks > joystickTaskNextRun) {
 80006be:	4b22      	ldr	r3, [pc, #136]	@ (8000748 <app_main+0xe4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d907      	bls.n	80006d8 <app_main+0x74>
			joystick_task_execute();
 80006c8:	f001 fb1a 	bl	8001d00 <joystick_task_execute>
			joystickTaskNextRun += JOYSTICK_TASK_PERIOD_TICKS;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <app_main+0xe4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	3364      	adds	r3, #100	@ 0x64
 80006d2:	001a      	movs	r2, r3
 80006d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <app_main+0xe4>)
 80006d6:	601a      	str	r2, [r3, #0]
		}

		if (ticks > displayTaskNextRun) {
 80006d8:	4b1c      	ldr	r3, [pc, #112]	@ (800074c <app_main+0xe8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d907      	bls.n	80006f2 <app_main+0x8e>
			display_task_execute();
 80006e2:	f001 f9e7 	bl	8001ab4 <display_task_execute>
			displayTaskNextRun += DISPLAY_TASK_PERIOD_TICKS;
 80006e6:	4b19      	ldr	r3, [pc, #100]	@ (800074c <app_main+0xe8>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	33fa      	adds	r3, #250	@ 0xfa
 80006ec:	001a      	movs	r2, r3
 80006ee:	4b17      	ldr	r3, [pc, #92]	@ (800074c <app_main+0xe8>)
 80006f0:	601a      	str	r2, [r3, #0]
		}

		if (ticks > uartTaskNextRun) {
 80006f2:	4b17      	ldr	r3, [pc, #92]	@ (8000750 <app_main+0xec>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d907      	bls.n	800070c <app_main+0xa8>
			uart_task_execute();
 80006fc:	f001 fb0e 	bl	8001d1c <uart_task_execute>
			uartTaskNextRun += UART_TASK_PERIOD_TICKS;
 8000700:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <app_main+0xec>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	33fa      	adds	r3, #250	@ 0xfa
 8000706:	001a      	movs	r2, r3
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <app_main+0xec>)
 800070a:	601a      	str	r2, [r3, #0]
		}

		if (ticks > fsmTaskNextRun) {
 800070c:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <app_main+0xf0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	429a      	cmp	r2, r3
 8000714:	d907      	bls.n	8000726 <app_main+0xc2>
			fsm_task_execute();
 8000716:	f001 f9f7 	bl	8001b08 <fsm_task_execute>
			fsmTaskNextRun += FSM_TASK_PERIOD_TICKS;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <app_main+0xf0>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3314      	adds	r3, #20
 8000720:	001a      	movs	r2, r3
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <app_main+0xf0>)
 8000724:	601a      	str	r2, [r3, #0]
		}
		if (ticks > potTaskNextRun) {
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <app_main+0xf4>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	429a      	cmp	r2, r3
 800072e:	d9b5      	bls.n	800069c <app_main+0x38>
			pot_task_execute();
 8000730:	f001 faed 	bl	8001d0e <pot_task_execute>
			potTaskNextRun += POT_TASK_PERIOD_TICKS;
 8000734:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <app_main+0xf4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3314      	adds	r3, #20
 800073a:	001a      	movs	r2, r3
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <app_main+0xf4>)
 800073e:	601a      	str	r2, [r3, #0]
		ticks = HAL_GetTick();
 8000740:	e7ac      	b.n	800069c <app_main+0x38>
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	200001a4 	.word	0x200001a4
 8000748:	200001a8 	.word	0x200001a8
 800074c:	200001ac 	.word	0x200001ac
 8000750:	200001b0 	.word	0x200001b0
 8000754:	200001b4 	.word	0x200001b4
 8000758:	200001b8 	.word	0x200001b8

0800075c <buttons_init>:
};

// *******************************************************
// buttons_init: Initialise the variables associated with the set of buttons.
void buttons_init (void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	e029      	b.n	80007bc <buttons_init+0x60>
	{
		buttons[i].state = buttons[i].normalState;
 8000768:	4918      	ldr	r1, [pc, #96]	@ (80007cc <buttons_init+0x70>)
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	0013      	movs	r3, r2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	189b      	adds	r3, r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	18cb      	adds	r3, r1, r3
 8000776:	3306      	adds	r3, #6
 8000778:	7818      	ldrb	r0, [r3, #0]
 800077a:	4914      	ldr	r1, [pc, #80]	@ (80007cc <buttons_init+0x70>)
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	0013      	movs	r3, r2
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	189b      	adds	r3, r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	18cb      	adds	r3, r1, r3
 8000788:	3307      	adds	r3, #7
 800078a:	1c02      	adds	r2, r0, #0
 800078c:	701a      	strb	r2, [r3, #0]
		buttons[i].newStateCount = 0;
 800078e:	490f      	ldr	r1, [pc, #60]	@ (80007cc <buttons_init+0x70>)
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	0013      	movs	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	189b      	adds	r3, r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	18cb      	adds	r3, r1, r3
 800079c:	3308      	adds	r3, #8
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
		buttons[i].hasChanged = false;
 80007a2:	490a      	ldr	r1, [pc, #40]	@ (80007cc <buttons_init+0x70>)
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	0013      	movs	r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	189b      	adds	r3, r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	18cb      	adds	r3, r1, r3
 80007b0:	3309      	adds	r3, #9
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BUTTONS; i++)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3301      	adds	r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b04      	cmp	r3, #4
 80007c0:	ddd2      	ble.n	8000768 <buttons_init+0xc>
	}
}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b002      	add	sp, #8
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000000 	.word	0x20000000

080007d0 <buttons_update>:
// Debouncing algorithm: A finite state machine (FSM) is associated with each button.
// A state change can be declared only after NUM_BUT_POLLS consecutive polls have
// read the pin in the opposite condition, before the state changes and
// a flag is set. Set NUM_BUT_POLLS according to the polling rate.
void buttons_update (void)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
	static uint8_t dutyCycle = 0;
	// Iterate through the buttons, updating button variables as required
	for (int i = 0; i < NUM_BUTTONS; i++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	e0e2      	b.n	80009a2 <buttons_update+0x1d2>
	{
		// Read the pin value
		GPIO_PinState rawState = HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin);
 80007dc:	4975      	ldr	r1, [pc, #468]	@ (80009b4 <buttons_update+0x1e4>)
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	0013      	movs	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	189b      	adds	r3, r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	5858      	ldr	r0, [r3, r1]
 80007ea:	4972      	ldr	r1, [pc, #456]	@ (80009b4 <buttons_update+0x1e4>)
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	0013      	movs	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	189b      	adds	r3, r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	18cb      	adds	r3, r1, r3
 80007f8:	3304      	adds	r3, #4
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	1cfc      	adds	r4, r7, #3
 80007fe:	0019      	movs	r1, r3
 8000800:	f003 f846 	bl	8003890 <HAL_GPIO_ReadPin>
 8000804:	0003      	movs	r3, r0
 8000806:	7023      	strb	r3, [r4, #0]

		// If reading is different from last confirmed state, increment counter
        if (rawState != buttons[i].state)
 8000808:	496a      	ldr	r1, [pc, #424]	@ (80009b4 <buttons_update+0x1e4>)
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	0013      	movs	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	189b      	adds	r3, r3, r2
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	18cb      	adds	r3, r1, r3
 8000816:	3307      	adds	r3, #7
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	1cfa      	adds	r2, r7, #3
 800081c:	7812      	ldrb	r2, [r2, #0]
 800081e:	429a      	cmp	r2, r3
 8000820:	d076      	beq.n	8000910 <buttons_update+0x140>
        {
        	buttons[i].newStateCount++;
 8000822:	4964      	ldr	r1, [pc, #400]	@ (80009b4 <buttons_update+0x1e4>)
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	0013      	movs	r3, r2
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	189b      	adds	r3, r3, r2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	18cb      	adds	r3, r1, r3
 8000830:	3308      	adds	r3, #8
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	b2d8      	uxtb	r0, r3
 8000838:	495e      	ldr	r1, [pc, #376]	@ (80009b4 <buttons_update+0x1e4>)
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	0013      	movs	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	189b      	adds	r3, r3, r2
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	18cb      	adds	r3, r1, r3
 8000846:	3308      	adds	r3, #8
 8000848:	1c02      	adds	r2, r0, #0
 800084a:	701a      	strb	r2, [r3, #0]

        	// If count exceeds poll count, confirm change of state
        	if (buttons[i].newStateCount >= NUM_BUT_POLLS)
 800084c:	4959      	ldr	r1, [pc, #356]	@ (80009b4 <buttons_update+0x1e4>)
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	0013      	movs	r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	189b      	adds	r3, r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	18cb      	adds	r3, r1, r3
 800085a:	3308      	adds	r3, #8
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b02      	cmp	r3, #2
 8000860:	d91e      	bls.n	80008a0 <buttons_update+0xd0>
        	{
        		buttons[i].state = rawState;
 8000862:	4954      	ldr	r1, [pc, #336]	@ (80009b4 <buttons_update+0x1e4>)
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	0013      	movs	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	189b      	adds	r3, r3, r2
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	18cb      	adds	r3, r1, r3
 8000870:	3307      	adds	r3, #7
 8000872:	1cfa      	adds	r2, r7, #3
 8000874:	7812      	ldrb	r2, [r2, #0]
 8000876:	701a      	strb	r2, [r3, #0]
        		buttons[i].hasChanged = true;	// Reset by call to buttons_checkButton()
 8000878:	494e      	ldr	r1, [pc, #312]	@ (80009b4 <buttons_update+0x1e4>)
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	0013      	movs	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	189b      	adds	r3, r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	18cb      	adds	r3, r1, r3
 8000886:	3309      	adds	r3, #9
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
        		buttons[i].newStateCount = 0;
 800088c:	4949      	ldr	r1, [pc, #292]	@ (80009b4 <buttons_update+0x1e4>)
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	0013      	movs	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	189b      	adds	r3, r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	18cb      	adds	r3, r1, r3
 800089a:	3308      	adds	r3, #8
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
        	}

			if (rawState != buttons[i].normalState) {
 80008a0:	4944      	ldr	r1, [pc, #272]	@ (80009b4 <buttons_update+0x1e4>)
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	0013      	movs	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	189b      	adds	r3, r3, r2
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	18cb      	adds	r3, r1, r3
 80008ae:	3306      	adds	r3, #6
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	1cfa      	adds	r2, r7, #3
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d015      	beq.n	80008e6 <buttons_update+0x116>
				buttons[i].pressStartTime = HAL_GetTick();
 80008ba:	f001 fc23 	bl	8002104 <HAL_GetTick>
 80008be:	493d      	ldr	r1, [pc, #244]	@ (80009b4 <buttons_update+0x1e4>)
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	0013      	movs	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	189b      	adds	r3, r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	18cb      	adds	r3, r1, r3
 80008cc:	330c      	adds	r3, #12
 80008ce:	6018      	str	r0, [r3, #0]
				buttons[i].isHeld = false;
 80008d0:	4938      	ldr	r1, [pc, #224]	@ (80009b4 <buttons_update+0x1e4>)
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	0013      	movs	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	189b      	adds	r3, r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	18cb      	adds	r3, r1, r3
 80008de:	3310      	adds	r3, #16
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
 80008e4:	e05a      	b.n	800099c <buttons_update+0x1cc>
			} else {
				buttons[i].pressStartTime = 0;
 80008e6:	4933      	ldr	r1, [pc, #204]	@ (80009b4 <buttons_update+0x1e4>)
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	0013      	movs	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	189b      	adds	r3, r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	18cb      	adds	r3, r1, r3
 80008f4:	330c      	adds	r3, #12
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
				buttons[i].isHeld = false;
 80008fa:	492e      	ldr	r1, [pc, #184]	@ (80009b4 <buttons_update+0x1e4>)
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	0013      	movs	r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	189b      	adds	r3, r3, r2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	18cb      	adds	r3, r1, r3
 8000908:	3310      	adds	r3, #16
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	e045      	b.n	800099c <buttons_update+0x1cc>
			}
        }
        else
        {
        	buttons[i].newStateCount = 0;
 8000910:	4928      	ldr	r1, [pc, #160]	@ (80009b4 <buttons_update+0x1e4>)
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	0013      	movs	r3, r2
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	189b      	adds	r3, r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	18cb      	adds	r3, r1, r3
 800091e:	3308      	adds	r3, #8
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]

			if (buttons[i].state != buttons[i].normalState && !buttons[i].isHeld) {
 8000924:	4923      	ldr	r1, [pc, #140]	@ (80009b4 <buttons_update+0x1e4>)
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	0013      	movs	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	189b      	adds	r3, r3, r2
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	18cb      	adds	r3, r1, r3
 8000932:	3307      	adds	r3, #7
 8000934:	7819      	ldrb	r1, [r3, #0]
 8000936:	481f      	ldr	r0, [pc, #124]	@ (80009b4 <buttons_update+0x1e4>)
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	0013      	movs	r3, r2
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	189b      	adds	r3, r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	18c3      	adds	r3, r0, r3
 8000944:	3306      	adds	r3, #6
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4299      	cmp	r1, r3
 800094a:	d027      	beq.n	800099c <buttons_update+0x1cc>
 800094c:	4919      	ldr	r1, [pc, #100]	@ (80009b4 <buttons_update+0x1e4>)
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	0013      	movs	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	189b      	adds	r3, r3, r2
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	18cb      	adds	r3, r1, r3
 800095a:	3310      	adds	r3, #16
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4053      	eors	r3, r2
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	d019      	beq.n	800099c <buttons_update+0x1cc>
				if (HAL_GetTick() - buttons[i].pressStartTime >= 1000) {
 8000968:	f001 fbcc 	bl	8002104 <HAL_GetTick>
 800096c:	4911      	ldr	r1, [pc, #68]	@ (80009b4 <buttons_update+0x1e4>)
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	0013      	movs	r3, r2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	189b      	adds	r3, r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	18cb      	adds	r3, r1, r3
 800097a:	330c      	adds	r3, #12
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	1ac2      	subs	r2, r0, r3
 8000980:	23fa      	movs	r3, #250	@ 0xfa
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	429a      	cmp	r2, r3
 8000986:	d309      	bcc.n	800099c <buttons_update+0x1cc>
					buttons[i].isHeld = true;
 8000988:	490a      	ldr	r1, [pc, #40]	@ (80009b4 <buttons_update+0x1e4>)
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	0013      	movs	r3, r2
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	189b      	adds	r3, r3, r2
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	18cb      	adds	r3, r1, r3
 8000996:	3310      	adds	r3, #16
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BUTTONS; i++)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3301      	adds	r3, #1
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b04      	cmp	r3, #4
 80009a6:	dc00      	bgt.n	80009aa <buttons_update+0x1da>
 80009a8:	e718      	b.n	80007dc <buttons_update+0xc>
				}
			}
        }
	}
}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	46c0      	nop			@ (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b003      	add	sp, #12
 80009b2:	bd90      	pop	{r4, r7, pc}
 80009b4:	20000000 	.word	0x20000000

080009b8 <buttons_checkButton>:
// *******************************************************
// buttons_checkButton: Function returns the new button logical state if the button
// logical state (PUSHED or RELEASED) has changed since the last call,
// otherwise returns NO_CHANGE.
buttonState_t buttons_checkButton (buttonName_t butName)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	0002      	movs	r2, r0
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	701a      	strb	r2, [r3, #0]
	if (buttons[butName].hasChanged)
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	781a      	ldrb	r2, [r3, #0]
 80009c8:	4919      	ldr	r1, [pc, #100]	@ (8000a30 <buttons_checkButton+0x78>)
 80009ca:	0013      	movs	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	189b      	adds	r3, r3, r2
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	18cb      	adds	r3, r1, r3
 80009d4:	3309      	adds	r3, #9
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d024      	beq.n	8000a26 <buttons_checkButton+0x6e>
	{
		buttons[butName].hasChanged = false;
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	781a      	ldrb	r2, [r3, #0]
 80009e0:	4913      	ldr	r1, [pc, #76]	@ (8000a30 <buttons_checkButton+0x78>)
 80009e2:	0013      	movs	r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	189b      	adds	r3, r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	18cb      	adds	r3, r1, r3
 80009ec:	3309      	adds	r3, #9
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
		if (buttons[butName].state == buttons[butName].normalState)
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781a      	ldrb	r2, [r3, #0]
 80009f6:	490e      	ldr	r1, [pc, #56]	@ (8000a30 <buttons_checkButton+0x78>)
 80009f8:	0013      	movs	r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	189b      	adds	r3, r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	18cb      	adds	r3, r1, r3
 8000a02:	3307      	adds	r3, #7
 8000a04:	7819      	ldrb	r1, [r3, #0]
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	4809      	ldr	r0, [pc, #36]	@ (8000a30 <buttons_checkButton+0x78>)
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	189b      	adds	r3, r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	18c3      	adds	r3, r0, r3
 8000a16:	3306      	adds	r3, #6
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4299      	cmp	r1, r3
 8000a1c:	d101      	bne.n	8000a22 <buttons_checkButton+0x6a>
			return RELEASED;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e002      	b.n	8000a28 <buttons_checkButton+0x70>
		else
			return PUSHED;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <buttons_checkButton+0x70>
	}
	return NO_CHANGE;
 8000a26:	2302      	movs	r3, #2
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b002      	add	sp, #8
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000000 	.word	0x20000000

08000a34 <buttons_isHeld>:

bool buttons_isHeld(buttonName_t button)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	1dfb      	adds	r3, r7, #7
 8000a3e:	701a      	strb	r2, [r3, #0]
	return buttons[button].isHeld;
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	4905      	ldr	r1, [pc, #20]	@ (8000a5c <buttons_isHeld+0x28>)
 8000a46:	0013      	movs	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	189b      	adds	r3, r3, r2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	18cb      	adds	r3, r1, r3
 8000a50:	3310      	adds	r3, #16
 8000a52:	781b      	ldrb	r3, [r3, #0]
}
 8000a54:	0018      	movs	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b002      	add	sp, #8
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000000 	.word	0x20000000

08000a60 <buttons_resetHeld>:

void buttons_resetHeld(buttonName_t button){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	0002      	movs	r2, r0
 8000a68:	1dfb      	adds	r3, r7, #7
 8000a6a:	701a      	strb	r2, [r3, #0]
	buttons[button].isHeld = false;
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	781a      	ldrb	r2, [r3, #0]
 8000a70:	4906      	ldr	r1, [pc, #24]	@ (8000a8c <buttons_resetHeld+0x2c>)
 8000a72:	0013      	movs	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	189b      	adds	r3, r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	18cb      	adds	r3, r1, r3
 8000a7c:	3310      	adds	r3, #16
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	20000000 	.word	0x20000000

08000a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <MX_DMA_Init+0x48>)
 8000a98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_DMA_Init+0x48>)
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <MX_DMA_Init+0x48>)
 8000aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2009      	movs	r0, #9
 8000ab4:	f002 fa6e 	bl	8002f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ab8:	2009      	movs	r0, #9
 8000aba:	f002 fa80 	bl	8002fbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	200a      	movs	r0, #10
 8000ac4:	f002 fa66 	bl	8002f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000ac8:	200a      	movs	r0, #10
 8000aca:	f002 fa78 	bl	8002fbe <HAL_NVIC_EnableIRQ>

}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	40021000 	.word	0x40021000

08000adc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b08b      	sub	sp, #44	@ 0x2c
 8000ae0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	2414      	movs	r4, #20
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	2314      	movs	r3, #20
 8000aea:	001a      	movs	r2, r3
 8000aec:	2100      	movs	r1, #0
 8000aee:	f006 ffbb 	bl	8007a68 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	4b79      	ldr	r3, [pc, #484]	@ (8000cd8 <MX_GPIO_Init+0x1fc>)
 8000af4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000af6:	4b78      	ldr	r3, [pc, #480]	@ (8000cd8 <MX_GPIO_Init+0x1fc>)
 8000af8:	2104      	movs	r1, #4
 8000afa:	430a      	orrs	r2, r1
 8000afc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000afe:	4b76      	ldr	r3, [pc, #472]	@ (8000cd8 <MX_GPIO_Init+0x1fc>)
 8000b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b02:	2204      	movs	r2, #4
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b0a:	4b73      	ldr	r3, [pc, #460]	@ (8000cd8 <MX_GPIO_Init+0x1fc>)
 8000b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b0e:	4b72      	ldr	r3, [pc, #456]	@ (8000cd8 <MX_GPIO_Init+0x1fc>)
 8000b10:	2120      	movs	r1, #32
 8000b12:	430a      	orrs	r2, r1
 8000b14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b16:	4b70      	ldr	r3, [pc, #448]	@ (8000cd8 <MX_GPIO_Init+0x1fc>)
 8000b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b1a:	2220      	movs	r2, #32
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b6d      	ldr	r3, [pc, #436]	@ (8000cd8 <MX_GPIO_Init+0x1fc>)
 8000b24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b26:	4b6c      	ldr	r3, [pc, #432]	@ (8000cd8 <MX_GPIO_Init+0x1fc>)
 8000b28:	2101      	movs	r1, #1
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8000cd8 <MX_GPIO_Init+0x1fc>)
 8000b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b32:	2201      	movs	r2, #1
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	4b67      	ldr	r3, [pc, #412]	@ (8000cd8 <MX_GPIO_Init+0x1fc>)
 8000b3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b3e:	4b66      	ldr	r3, [pc, #408]	@ (8000cd8 <MX_GPIO_Init+0x1fc>)
 8000b40:	2102      	movs	r1, #2
 8000b42:	430a      	orrs	r2, r1
 8000b44:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b46:	4b64      	ldr	r3, [pc, #400]	@ (8000cd8 <MX_GPIO_Init+0x1fc>)
 8000b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b52:	4b61      	ldr	r3, [pc, #388]	@ (8000cd8 <MX_GPIO_Init+0x1fc>)
 8000b54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b56:	4b60      	ldr	r3, [pc, #384]	@ (8000cd8 <MX_GPIO_Init+0x1fc>)
 8000b58:	2108      	movs	r1, #8
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b5e:	4b5e      	ldr	r3, [pc, #376]	@ (8000cd8 <MX_GPIO_Init+0x1fc>)
 8000b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b62:	2208      	movs	r2, #8
 8000b64:	4013      	ands	r3, r2
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB_DS4_Pin|RGB_DS2_Pin, GPIO_PIN_SET);
 8000b6a:	495c      	ldr	r1, [pc, #368]	@ (8000cdc <MX_GPIO_Init+0x200>)
 8000b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8000ce0 <MX_GPIO_Init+0x204>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	0018      	movs	r0, r3
 8000b72:	f002 feaa 	bl	80038ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_DS1_GPIO_Port, RGB_DS1_Pin, GPIO_PIN_SET);
 8000b76:	4b5b      	ldr	r3, [pc, #364]	@ (8000ce4 <MX_GPIO_Init+0x208>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2108      	movs	r1, #8
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f002 fea4 	bl	80038ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NUCLEO_LD1_GPIO_Port, NUCLEO_LD1_Pin, GPIO_PIN_RESET);
 8000b82:	23a0      	movs	r3, #160	@ 0xa0
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	2200      	movs	r2, #0
 8000b88:	2120      	movs	r1, #32
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f002 fe9d 	bl	80038ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NUCLEO_LD2_GPIO_Port, NUCLEO_LD2_Pin, GPIO_PIN_RESET);
 8000b90:	2380      	movs	r3, #128	@ 0x80
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4852      	ldr	r0, [pc, #328]	@ (8000ce0 <MX_GPIO_Init+0x204>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	0019      	movs	r1, r3
 8000b9a:	f002 fe96 	bl	80038ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin, GPIO_PIN_RESET);
 8000b9e:	4b52      	ldr	r3, [pc, #328]	@ (8000ce8 <MX_GPIO_Init+0x20c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	211c      	movs	r1, #28
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f002 fe90 	bl	80038ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	4a4f      	ldr	r2, [pc, #316]	@ (8000cec <MX_GPIO_Init+0x210>)
 8000bae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	2202      	movs	r2, #2
 8000bba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	4a48      	ldr	r2, [pc, #288]	@ (8000ce0 <MX_GPIO_Init+0x204>)
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	0010      	movs	r0, r2
 8000bc4:	f002 fcf2 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RGB_DS4_Pin|RGB_DS2_Pin|NUCLEO_LD2_Pin;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	4a49      	ldr	r2, [pc, #292]	@ (8000cf0 <MX_GPIO_Init+0x214>)
 8000bcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	4a3f      	ldr	r2, [pc, #252]	@ (8000ce0 <MX_GPIO_Init+0x204>)
 8000be4:	0019      	movs	r1, r3
 8000be6:	0010      	movs	r0, r2
 8000be8:	f002 fce0 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW4_Pin;
 8000bec:	0021      	movs	r1, r4
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2280      	movs	r2, #128	@ 0x80
 8000bf2:	0192      	lsls	r2, r2, #6
 8000bf4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf6:	000c      	movs	r4, r1
 8000bf8:	193b      	adds	r3, r7, r4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfe:	193b      	adds	r3, r7, r4
 8000c00:	2201      	movs	r2, #1
 8000c02:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW4_GPIO_Port, &GPIO_InitStruct);
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	4a36      	ldr	r2, [pc, #216]	@ (8000ce0 <MX_GPIO_Init+0x204>)
 8000c08:	0019      	movs	r1, r3
 8000c0a:	0010      	movs	r0, r2
 8000c0c:	f002 fcce 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RGB_DS1_Pin;
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	2208      	movs	r2, #8
 8000c14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2201      	movs	r2, #1
 8000c1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RGB_DS1_GPIO_Port, &GPIO_InitStruct);
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ce4 <MX_GPIO_Init+0x208>)
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	0010      	movs	r0, r2
 8000c30:	f002 fcbc 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUCLEO_LD1_Pin;
 8000c34:	193b      	adds	r3, r7, r4
 8000c36:	2220      	movs	r2, #32
 8000c38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NUCLEO_LD1_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	193a      	adds	r2, r7, r4
 8000c4e:	23a0      	movs	r3, #160	@ 0xa0
 8000c50:	05db      	lsls	r3, r3, #23
 8000c52:	0011      	movs	r1, r2
 8000c54:	0018      	movs	r0, r3
 8000c56:	f002 fca9 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOYSTICK_CLICK_Pin;
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	2202      	movs	r2, #2
 8000c6a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(JOYSTICK_CLICK_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	4a21      	ldr	r2, [pc, #132]	@ (8000cf4 <MX_GPIO_Init+0x218>)
 8000c70:	0019      	movs	r1, r3
 8000c72:	0010      	movs	r0, r2
 8000c74:	f002 fc9a 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	221c      	movs	r2, #28
 8000c7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2201      	movs	r2, #1
 8000c82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	4a15      	ldr	r2, [pc, #84]	@ (8000ce8 <MX_GPIO_Init+0x20c>)
 8000c94:	0019      	movs	r1, r3
 8000c96:	0010      	movs	r0, r2
 8000c98:	f002 fc88 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8000c9c:	0021      	movs	r1, r4
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2280      	movs	r2, #128	@ 0x80
 8000ca2:	00d2      	lsls	r2, r2, #3
 8000ca4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	4a13      	ldr	r2, [pc, #76]	@ (8000cf8 <MX_GPIO_Init+0x21c>)
 8000caa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2202      	movs	r2, #2
 8000cb0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <MX_GPIO_Init+0x204>)
 8000cb6:	0019      	movs	r1, r3
 8000cb8:	0010      	movs	r0, r2
 8000cba:	f002 fc77 	bl	80035ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2007      	movs	r0, #7
 8000cc4:	f002 f966 	bl	8002f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000cc8:	2007      	movs	r0, #7
 8000cca:	f002 f978 	bl	8002fbe <HAL_NVIC_EnableIRQ>

}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b00b      	add	sp, #44	@ 0x2c
 8000cd4:	bd90      	pop	{r4, r7, pc}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	00001004 	.word	0x00001004
 8000ce0:	50000800 	.word	0x50000800
 8000ce4:	50001400 	.word	0x50001400
 8000ce8:	50000c00 	.word	0x50000c00
 8000cec:	00000802 	.word	0x00000802
 8000cf0:	00001204 	.word	0x00001204
 8000cf4:	50000400 	.word	0x50000400
 8000cf8:	10110000 	.word	0x10110000

08000cfc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	@ (8000d70 <MX_I2C1_Init+0x74>)
 8000d02:	4a1c      	ldr	r2, [pc, #112]	@ (8000d74 <MX_I2C1_Init+0x78>)
 8000d04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	@ (8000d70 <MX_I2C1_Init+0x74>)
 8000d08:	4a1b      	ldr	r2, [pc, #108]	@ (8000d78 <MX_I2C1_Init+0x7c>)
 8000d0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <MX_I2C1_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d12:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <MX_I2C1_Init+0x74>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d18:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <MX_I2C1_Init+0x74>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <MX_I2C1_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <MX_I2C1_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <MX_I2C1_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <MX_I2C1_Init+0x74>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d36:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <MX_I2C1_Init+0x74>)
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f002 fe21 	bl	8003980 <HAL_I2C_Init>
 8000d3e:	1e03      	subs	r3, r0, #0
 8000d40:	d001      	beq.n	8000d46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d42:	f000 f9c0 	bl	80010c6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <MX_I2C1_Init+0x74>)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f004 fef6 	bl	8005b3c <HAL_I2CEx_ConfigAnalogFilter>
 8000d50:	1e03      	subs	r3, r0, #0
 8000d52:	d001      	beq.n	8000d58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d54:	f000 f9b7 	bl	80010c6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d58:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <MX_I2C1_Init+0x74>)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f004 ff39 	bl	8005bd4 <HAL_I2CEx_ConfigDigitalFilter>
 8000d62:	1e03      	subs	r3, r0, #0
 8000d64:	d001      	beq.n	8000d6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d66:	f000 f9ae 	bl	80010c6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200001bc 	.word	0x200001bc
 8000d74:	40005400 	.word	0x40005400
 8000d78:	00402d41 	.word	0x00402d41

08000d7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b093      	sub	sp, #76	@ 0x4c
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	2334      	movs	r3, #52	@ 0x34
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	0018      	movs	r0, r3
 8000d8a:	2314      	movs	r3, #20
 8000d8c:	001a      	movs	r2, r3
 8000d8e:	2100      	movs	r1, #0
 8000d90:	f006 fe6a 	bl	8007a68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d94:	2414      	movs	r4, #20
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	0018      	movs	r0, r3
 8000d9a:	2320      	movs	r3, #32
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f006 fe62 	bl	8007a68 <memset>
  if(i2cHandle->Instance==I2C1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a3b      	ldr	r2, [pc, #236]	@ (8000e98 <HAL_I2C_MspInit+0x11c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d16f      	bne.n	8000e8e <HAL_I2C_MspInit+0x112>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	2202      	movs	r2, #2
 8000db2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000db4:	193b      	adds	r3, r7, r4
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dba:	193b      	adds	r3, r7, r4
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f005 fb21 	bl	8006404 <HAL_RCCEx_PeriphCLKConfig>
 8000dc2:	1e03      	subs	r3, r0, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000dc6:	f000 f97e 	bl	80010c6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	4b34      	ldr	r3, [pc, #208]	@ (8000e9c <HAL_I2C_MspInit+0x120>)
 8000dcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dce:	4b33      	ldr	r3, [pc, #204]	@ (8000e9c <HAL_I2C_MspInit+0x120>)
 8000dd0:	2102      	movs	r1, #2
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dd6:	4b31      	ldr	r3, [pc, #196]	@ (8000e9c <HAL_I2C_MspInit+0x120>)
 8000dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dda:	2202      	movs	r2, #2
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000de2:	2134      	movs	r1, #52	@ 0x34
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	22c0      	movs	r2, #192	@ 0xc0
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2212      	movs	r2, #18
 8000df0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2206      	movs	r2, #6
 8000e02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	4a26      	ldr	r2, [pc, #152]	@ (8000ea0 <HAL_I2C_MspInit+0x124>)
 8000e08:	0019      	movs	r1, r3
 8000e0a:	0010      	movs	r0, r2
 8000e0c:	f002 fbce 	bl	80035ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e10:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <HAL_I2C_MspInit+0x120>)
 8000e12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e14:	4b21      	ldr	r3, [pc, #132]	@ (8000e9c <HAL_I2C_MspInit+0x120>)
 8000e16:	2180      	movs	r1, #128	@ 0x80
 8000e18:	0389      	lsls	r1, r1, #14
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e9c <HAL_I2C_MspInit+0x120>)
 8000e20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e22:	2380      	movs	r3, #128	@ 0x80
 8000e24:	039b      	lsls	r3, r3, #14
 8000e26:	4013      	ands	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <HAL_I2C_MspInit+0x128>)
 8000e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ea8 <HAL_I2C_MspInit+0x12c>)
 8000e30:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <HAL_I2C_MspInit+0x128>)
 8000e34:	220b      	movs	r2, #11
 8000e36:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <HAL_I2C_MspInit+0x128>)
 8000e3a:	2210      	movs	r2, #16
 8000e3c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <HAL_I2C_MspInit+0x128>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e44:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <HAL_I2C_MspInit+0x128>)
 8000e46:	2280      	movs	r2, #128	@ 0x80
 8000e48:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <HAL_I2C_MspInit+0x128>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e50:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <HAL_I2C_MspInit+0x128>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000e56:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <HAL_I2C_MspInit+0x128>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <HAL_I2C_MspInit+0x128>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000e62:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <HAL_I2C_MspInit+0x128>)
 8000e64:	0018      	movs	r0, r3
 8000e66:	f002 f8c7 	bl	8002ff8 <HAL_DMA_Init>
 8000e6a:	1e03      	subs	r3, r0, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_I2C_MspInit+0xf6>
    {
      Error_Handler();
 8000e6e:	f000 f92a 	bl	80010c6 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea4 <HAL_I2C_MspInit+0x128>)
 8000e76:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_I2C_MspInit+0x128>)
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2017      	movs	r0, #23
 8000e84:	f002 f886 	bl	8002f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000e88:	2017      	movs	r0, #23
 8000e8a:	f002 f898 	bl	8002fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b013      	add	sp, #76	@ 0x4c
 8000e94:	bd90      	pop	{r4, r7, pc}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	40005400 	.word	0x40005400
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	50000400 	.word	0x50000400
 8000ea4:	20000210 	.word	0x20000210
 8000ea8:	4002001c 	.word	0x4002001c

08000eac <update_joystick>:

#define MIDDLE_ADC_VALUE 2047

static uint16_t raw_adc[3];

void update_joystick(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	// Update the ADC values of the JoyStick X and Y axis inputs
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)raw_adc, 3);
 8000eb0:	4904      	ldr	r1, [pc, #16]	@ (8000ec4 <update_joystick+0x18>)
 8000eb2:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <update_joystick+0x1c>)
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f001 fc40 	bl	800273c <HAL_ADC_Start_DMA>

	// Do something here to detect press and hold
	// (although maybe we should just extend button.c?)
}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	2000026c 	.word	0x2000026c
 8000ec8:	200000e4 	.word	0x200000e4

08000ecc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	// No callback required as of yet
}
 8000ed4:	46c0      	nop			@ (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b002      	add	sp, #8
 8000eda:	bd80      	pop	{r7, pc}

08000edc <get_percentage_coordinates>:
uint16_t* get_raw_values(void) {
	// Return raw values (between 0 and 4096) of the analog inputs of the joysticks
	return raw_adc;
}

struct percentage_coords get_percentage_coordinates(void) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
	// Convert raw values to percentage values, stored in percentage_coords struct
	struct percentage_coords output;
	output.x = (((int16_t)raw_adc[2] - MIDDLE_ADC_VALUE) * 100) / MIDDLE_ADC_VALUE;
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <get_percentage_coordinates+0x74>)
 8000ee4:	889b      	ldrh	r3, [r3, #4]
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f54 <get_percentage_coordinates+0x78>)
 8000eea:	4694      	mov	ip, r2
 8000eec:	4463      	add	r3, ip
 8000eee:	2264      	movs	r2, #100	@ 0x64
 8000ef0:	4353      	muls	r3, r2
 8000ef2:	4919      	ldr	r1, [pc, #100]	@ (8000f58 <get_percentage_coordinates+0x7c>)
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f7ff f99b 	bl	8000230 <__divsi3>
 8000efa:	0003      	movs	r3, r0
 8000efc:	b25a      	sxtb	r2, r3
 8000efe:	003b      	movs	r3, r7
 8000f00:	701a      	strb	r2, [r3, #0]
	output.y = (((int16_t)raw_adc[1] - MIDDLE_ADC_VALUE) * 100) / MIDDLE_ADC_VALUE;
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <get_percentage_coordinates+0x74>)
 8000f04:	885b      	ldrh	r3, [r3, #2]
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	4a12      	ldr	r2, [pc, #72]	@ (8000f54 <get_percentage_coordinates+0x78>)
 8000f0a:	4694      	mov	ip, r2
 8000f0c:	4463      	add	r3, ip
 8000f0e:	2264      	movs	r2, #100	@ 0x64
 8000f10:	4353      	muls	r3, r2
 8000f12:	4911      	ldr	r1, [pc, #68]	@ (8000f58 <get_percentage_coordinates+0x7c>)
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff f98b 	bl	8000230 <__divsi3>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	b25a      	sxtb	r2, r3
 8000f1e:	003b      	movs	r3, r7
 8000f20:	705a      	strb	r2, [r3, #1]

	return output;
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	003a      	movs	r2, r7
 8000f26:	8812      	ldrh	r2, [r2, #0]
 8000f28:	801a      	strh	r2, [r3, #0]
 8000f2a:	1d3a      	adds	r2, r7, #4
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	7811      	ldrb	r1, [r2, #0]
 8000f30:	20ff      	movs	r0, #255	@ 0xff
 8000f32:	4001      	ands	r1, r0
 8000f34:	20ff      	movs	r0, #255	@ 0xff
 8000f36:	4383      	bics	r3, r0
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	7852      	ldrb	r2, [r2, #1]
 8000f3c:	21ff      	movs	r1, #255	@ 0xff
 8000f3e:	400a      	ands	r2, r1
 8000f40:	0212      	lsls	r2, r2, #8
 8000f42:	4906      	ldr	r1, [pc, #24]	@ (8000f5c <get_percentage_coordinates+0x80>)
 8000f44:	400b      	ands	r3, r1
 8000f46:	4313      	orrs	r3, r2
}
 8000f48:	1c18      	adds	r0, r3, #0
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b002      	add	sp, #8
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2000026c 	.word	0x2000026c
 8000f54:	fffff801 	.word	0xfffff801
 8000f58:	000007ff 	.word	0x000007ff
 8000f5c:	ffff00ff 	.word	0xffff00ff

08000f60 <get_joystick_flags>:
	}

	return output;
}

struct joystick_position_flags get_joystick_flags(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
	struct percentage_coords percentages;
	percentages = get_percentage_coordinates();
 8000f66:	f7ff ffb9 	bl	8000edc <get_percentage_coordinates>
 8000f6a:	1c03      	adds	r3, r0, #0
 8000f6c:	1c1a      	adds	r2, r3, #0
 8000f6e:	2108      	movs	r1, #8
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	801a      	strh	r2, [r3, #0]

	struct joystick_position_flags flags = {0};
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]

	if (percentages.x > 30) {
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	2b1e      	cmp	r3, #30
 8000f82:	dd03      	ble.n	8000f8c <get_joystick_flags+0x2c>
		flags.left = true;
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
 8000f8a:	e008      	b.n	8000f9e <get_joystick_flags+0x3e>
	} else if (percentages.x < -30) {
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	331e      	adds	r3, #30
 8000f96:	da02      	bge.n	8000f9e <get_joystick_flags+0x3e>
		flags.right = true;
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	705a      	strb	r2, [r3, #1]
	}

	if (percentages.y > 30) {
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	18fb      	adds	r3, r7, r3
 8000fa2:	785b      	ldrb	r3, [r3, #1]
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	2b1e      	cmp	r3, #30
 8000fa8:	dd03      	ble.n	8000fb2 <get_joystick_flags+0x52>
		flags.down = true;
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2201      	movs	r2, #1
 8000fae:	70da      	strb	r2, [r3, #3]
 8000fb0:	e008      	b.n	8000fc4 <get_joystick_flags+0x64>
	} else if (percentages.y < -30) {
 8000fb2:	2308      	movs	r3, #8
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	331e      	adds	r3, #30
 8000fbc:	da02      	bge.n	8000fc4 <get_joystick_flags+0x64>
		flags.up = true;
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	709a      	strb	r2, [r3, #2]
	}

	return flags;
 8000fc4:	210c      	movs	r1, #12
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	1d3a      	adds	r2, r7, #4
 8000fca:	6812      	ldr	r2, [r2, #0]
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	187a      	adds	r2, r7, r1
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	7811      	ldrb	r1, [r2, #0]
 8000fd4:	20ff      	movs	r0, #255	@ 0xff
 8000fd6:	4001      	ands	r1, r0
 8000fd8:	20ff      	movs	r0, #255	@ 0xff
 8000fda:	4383      	bics	r3, r0
 8000fdc:	430b      	orrs	r3, r1
 8000fde:	7851      	ldrb	r1, [r2, #1]
 8000fe0:	20ff      	movs	r0, #255	@ 0xff
 8000fe2:	4001      	ands	r1, r0
 8000fe4:	0209      	lsls	r1, r1, #8
 8000fe6:	4809      	ldr	r0, [pc, #36]	@ (800100c <get_joystick_flags+0xac>)
 8000fe8:	4003      	ands	r3, r0
 8000fea:	430b      	orrs	r3, r1
 8000fec:	7891      	ldrb	r1, [r2, #2]
 8000fee:	20ff      	movs	r0, #255	@ 0xff
 8000ff0:	4001      	ands	r1, r0
 8000ff2:	0409      	lsls	r1, r1, #16
 8000ff4:	4806      	ldr	r0, [pc, #24]	@ (8001010 <get_joystick_flags+0xb0>)
 8000ff6:	4003      	ands	r3, r0
 8000ff8:	430b      	orrs	r3, r1
 8000ffa:	78d2      	ldrb	r2, [r2, #3]
 8000ffc:	0612      	lsls	r2, r2, #24
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	4313      	orrs	r3, r2

	// Presses not yet implemented (although maybe we should just extend button.c?)
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	b004      	add	sp, #16
 800100a:	bd80      	pop	{r7, pc}
 800100c:	ffff00ff 	.word	0xffff00ff
 8001010:	ff00ffff 	.word	0xff00ffff

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001018:	f001 f801 	bl	800201e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101c:	f000 f80f 	bl	800103e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001020:	f7ff fd5c 	bl	8000adc <MX_GPIO_Init>
  MX_DMA_Init();
 8001024:	f7ff fd34 	bl	8000a90 <MX_DMA_Init>
  MX_ADC1_Init();
 8001028:	f7ff f9ee 	bl	8000408 <MX_ADC1_Init>
  MX_I2C1_Init();
 800102c:	f7ff fe66 	bl	8000cfc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001030:	f000 ff34 	bl	8001e9c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001034:	f000 fe78 	bl	8001d28 <MX_TIM2_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  app_main();
 8001038:	f7ff fb14 	bl	8000664 <app_main>
 800103c:	e7fc      	b.n	8001038 <main+0x24>

0800103e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103e:	b590      	push	{r4, r7, lr}
 8001040:	b08f      	sub	sp, #60	@ 0x3c
 8001042:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001044:	2418      	movs	r4, #24
 8001046:	193b      	adds	r3, r7, r4
 8001048:	0018      	movs	r0, r3
 800104a:	2320      	movs	r3, #32
 800104c:	001a      	movs	r2, r3
 800104e:	2100      	movs	r1, #0
 8001050:	f006 fd0a 	bl	8007a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	0018      	movs	r0, r3
 8001058:	2314      	movs	r3, #20
 800105a:	001a      	movs	r2, r3
 800105c:	2100      	movs	r1, #0
 800105e:	f006 fd03 	bl	8007a68 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001062:	193b      	adds	r3, r7, r4
 8001064:	2202      	movs	r2, #2
 8001066:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001068:	193b      	adds	r3, r7, r4
 800106a:	2280      	movs	r2, #128	@ 0x80
 800106c:	0052      	lsls	r2, r2, #1
 800106e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8001070:	193b      	adds	r3, r7, r4
 8001072:	2280      	movs	r2, #128	@ 0x80
 8001074:	0152      	lsls	r2, r2, #5
 8001076:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001078:	193b      	adds	r3, r7, r4
 800107a:	2240      	movs	r2, #64	@ 0x40
 800107c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107e:	193b      	adds	r3, r7, r4
 8001080:	0018      	movs	r0, r3
 8001082:	f004 fdf3 	bl	8005c6c <HAL_RCC_OscConfig>
 8001086:	1e03      	subs	r3, r0, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x50>
  {
    Error_Handler();
 800108a:	f000 f81c 	bl	80010c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2100      	movs	r1, #0
 80010b0:	0018      	movs	r0, r3
 80010b2:	f005 f801 	bl	80060b8 <HAL_RCC_ClockConfig>
 80010b6:	1e03      	subs	r3, r0, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010ba:	f000 f804 	bl	80010c6 <Error_Handler>
  }
}
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b00f      	add	sp, #60	@ 0x3c
 80010c4:	bd90      	pop	{r4, r7, pc}

080010c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ca:	b672      	cpsid	i
}
 80010cc:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	e7fd      	b.n	80010ce <Error_Handler+0x8>
	...

080010d4 <update_pot>:

#include "adc.h"

static uint16_t pot_raw_adc[3];

void update_pot(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)pot_raw_adc, 3);
 80010d8:	4904      	ldr	r1, [pc, #16]	@ (80010ec <update_pot+0x18>)
 80010da:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <update_pot+0x1c>)
 80010dc:	2203      	movs	r2, #3
 80010de:	0018      	movs	r0, r3
 80010e0:	f001 fb2c 	bl	800273c <HAL_ADC_Start_DMA>
}
 80010e4:	46c0      	nop			@ (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	20000274 	.word	0x20000274
 80010f0:	200000e4 	.word	0x200000e4

080010f4 <get_pot_raw_values>:

uint16_t get_pot_raw_values(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
	// Return raw values (between 0 and 4096) of the analog inputs of the joysticks
	uint16_t vr1_value = pot_raw_adc[0];
 80010fa:	1dbb      	adds	r3, r7, #6
 80010fc:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <get_pot_raw_values+0x1c>)
 80010fe:	8812      	ldrh	r2, [r2, #0]
 8001100:	801a      	strh	r2, [r3, #0]
	return vr1_value;
 8001102:	1dbb      	adds	r3, r7, #6
 8001104:	881b      	ldrh	r3, [r3, #0]
}
 8001106:	0018      	movs	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	b002      	add	sp, #8
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			@ (mov r8, r8)
 8001110:	20000274 	.word	0x20000274

08001114 <ssd1306_Reset>:

#if defined(SSD1306_USE_I2C)

static uint8_t updateScreenPageIndex = 0;

void ssd1306_Reset(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001118:	46c0      	nop			@ (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af04      	add	r7, sp, #16
 8001126:	0002      	movs	r2, r0
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800112c:	4808      	ldr	r0, [pc, #32]	@ (8001150 <ssd1306_WriteCommand+0x30>)
 800112e:	2301      	movs	r3, #1
 8001130:	425b      	negs	r3, r3
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	2301      	movs	r3, #1
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	2200      	movs	r2, #0
 8001140:	2178      	movs	r1, #120	@ 0x78
 8001142:	f002 fcc3 	bl	8003acc <HAL_I2C_Mem_Write>
}
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	200001bc 	.word	0x200001bc

08001154 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af02      	add	r7, sp, #8
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b29b      	uxth	r3, r3
 8001162:	4806      	ldr	r0, [pc, #24]	@ (800117c <ssd1306_WriteData+0x28>)
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	2240      	movs	r2, #64	@ 0x40
 800116e:	2178      	movs	r1, #120	@ 0x78
 8001170:	f002 fdda 	bl	8003d28 <HAL_I2C_Mem_Write_DMA>
}
 8001174:	46c0      	nop			@ (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	b002      	add	sp, #8
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200001bc 	.word	0x200001bc

08001180 <ssd1306_UpdatePage>:

void ssd1306_UpdatePage(uint8_t pageIndex) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	0002      	movs	r2, r0
 8001188:	1dfb      	adds	r3, r7, #7
 800118a:	701a      	strb	r2, [r3, #0]
	ssd1306_WriteCommand(0xB0 + pageIndex); // Set the current RAM page address.
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	3b50      	subs	r3, #80	@ 0x50
 8001192:	b2db      	uxtb	r3, r3
 8001194:	0018      	movs	r0, r3
 8001196:	f7ff ffc3 	bl	8001120 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff ffc0 	bl	8001120 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80011a0:	2010      	movs	r0, #16
 80011a2:	f7ff ffbd 	bl	8001120 <ssd1306_WriteCommand>
	ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*pageIndex],SSD1306_WIDTH);
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	01da      	lsls	r2, r3, #7
 80011ac:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <ssd1306_UpdatePage+0x40>)
 80011ae:	18d3      	adds	r3, r2, r3
 80011b0:	2180      	movs	r1, #128	@ 0x80
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff ffce 	bl	8001154 <ssd1306_WriteData>
}
 80011b8:	46c0      	nop			@ (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b002      	add	sp, #8
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000027c 	.word	0x2000027c

080011c4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages

	updateScreenPageIndex = 0;
 80011c8:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <ssd1306_UpdateScreen+0x1c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
	ssd1306_UpdatePage(updateScreenPageIndex);
 80011ce:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <ssd1306_UpdateScreen+0x1c>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7ff ffd4 	bl	8001180 <ssd1306_UpdatePage>
}
 80011d8:	46c0      	nop			@ (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	20000682 	.word	0x20000682

080011e4 <HAL_I2C_MemTxCpltCallback>:

/* Gets called by HAL when the entire buffer (i.e. one page) is transmitted through DMA */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	if (hi2c == &SSD1306_I2C_PORT)
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <HAL_I2C_MemTxCpltCallback+0x38>)
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d10e      	bne.n	8001212 <HAL_I2C_MemTxCpltCallback+0x2e>
	{
		updateScreenPageIndex++;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <HAL_I2C_MemTxCpltCallback+0x3c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <HAL_I2C_MemTxCpltCallback+0x3c>)
 80011fe:	701a      	strb	r2, [r3, #0]
		if (updateScreenPageIndex < SSD1306_HEIGHT/8)
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <HAL_I2C_MemTxCpltCallback+0x3c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b07      	cmp	r3, #7
 8001206:	d804      	bhi.n	8001212 <HAL_I2C_MemTxCpltCallback+0x2e>
		{
			ssd1306_UpdatePage(updateScreenPageIndex);
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <HAL_I2C_MemTxCpltCallback+0x3c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	0018      	movs	r0, r3
 800120e:	f7ff ffb7 	bl	8001180 <ssd1306_UpdatePage>
		}
	}
}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	200001bc 	.word	0x200001bc
 8001220:	20000682 	.word	0x20000682

08001224 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001228:	f7ff ff74 	bl	8001114 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800122c:	2064      	movs	r0, #100	@ 0x64
 800122e:	f000 ff73 	bl	8002118 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001232:	2000      	movs	r0, #0
 8001234:	f000 f9de 	bl	80015f4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001238:	2020      	movs	r0, #32
 800123a:	f7ff ff71 	bl	8001120 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff ff6e 	bl	8001120 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001244:	20b0      	movs	r0, #176	@ 0xb0
 8001246:	f7ff ff6b 	bl	8001120 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 800124a:	20c0      	movs	r0, #192	@ 0xc0
 800124c:	f7ff ff68 	bl	8001120 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff ff65 	bl	8001120 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001256:	2010      	movs	r0, #16
 8001258:	f7ff ff62 	bl	8001120 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800125c:	2040      	movs	r0, #64	@ 0x40
 800125e:	f7ff ff5f 	bl	8001120 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001262:	20ff      	movs	r0, #255	@ 0xff
 8001264:	f000 f9ae 	bl	80015c4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8001268:	20a0      	movs	r0, #160	@ 0xa0
 800126a:	f7ff ff59 	bl	8001120 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800126e:	20a6      	movs	r0, #166	@ 0xa6
 8001270:	f7ff ff56 	bl	8001120 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001274:	20a8      	movs	r0, #168	@ 0xa8
 8001276:	f7ff ff53 	bl	8001120 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800127a:	203f      	movs	r0, #63	@ 0x3f
 800127c:	f7ff ff50 	bl	8001120 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001280:	20a4      	movs	r0, #164	@ 0xa4
 8001282:	f7ff ff4d 	bl	8001120 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001286:	20d3      	movs	r0, #211	@ 0xd3
 8001288:	f7ff ff4a 	bl	8001120 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff ff47 	bl	8001120 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001292:	20d5      	movs	r0, #213	@ 0xd5
 8001294:	f7ff ff44 	bl	8001120 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001298:	20f0      	movs	r0, #240	@ 0xf0
 800129a:	f7ff ff41 	bl	8001120 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800129e:	20d9      	movs	r0, #217	@ 0xd9
 80012a0:	f7ff ff3e 	bl	8001120 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80012a4:	2022      	movs	r0, #34	@ 0x22
 80012a6:	f7ff ff3b 	bl	8001120 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80012aa:	20da      	movs	r0, #218	@ 0xda
 80012ac:	f7ff ff38 	bl	8001120 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80012b0:	2012      	movs	r0, #18
 80012b2:	f7ff ff35 	bl	8001120 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80012b6:	20db      	movs	r0, #219	@ 0xdb
 80012b8:	f7ff ff32 	bl	8001120 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80012bc:	2020      	movs	r0, #32
 80012be:	f7ff ff2f 	bl	8001120 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80012c2:	208d      	movs	r0, #141	@ 0x8d
 80012c4:	f7ff ff2c 	bl	8001120 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80012c8:	2014      	movs	r0, #20
 80012ca:	f7ff ff29 	bl	8001120 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80012ce:	2001      	movs	r0, #1
 80012d0:	f000 f990 	bl	80015f4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80012d4:	2000      	movs	r0, #0
 80012d6:	f000 f811 	bl	80012fc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80012da:	f7ff ff73 	bl	80011c4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80012de:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <ssd1306_Init+0xd4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012e4:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <ssd1306_Init+0xd4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80012ea:	4b03      	ldr	r3, [pc, #12]	@ (80012f8 <ssd1306_Init+0xd4>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	711a      	strb	r2, [r3, #4]
}
 80012f0:	46c0      	nop			@ (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	2000067c 	.word	0x2000067c

080012fc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	0002      	movs	r2, r0
 8001304:	1dfb      	adds	r3, r7, #7
 8001306:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001308:	1dfb      	adds	r3, r7, #7
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <ssd1306_Fill+0x18>
 8001310:	2300      	movs	r3, #0
 8001312:	e000      	b.n	8001316 <ssd1306_Fill+0x1a>
 8001314:	23ff      	movs	r3, #255	@ 0xff
 8001316:	2280      	movs	r2, #128	@ 0x80
 8001318:	00d2      	lsls	r2, r2, #3
 800131a:	4804      	ldr	r0, [pc, #16]	@ (800132c <ssd1306_Fill+0x30>)
 800131c:	0019      	movs	r1, r3
 800131e:	f006 fba3 	bl	8007a68 <memset>
}
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	b002      	add	sp, #8
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	2000027c 	.word	0x2000027c

08001330 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	0004      	movs	r4, r0
 8001338:	0008      	movs	r0, r1
 800133a:	0011      	movs	r1, r2
 800133c:	1dfb      	adds	r3, r7, #7
 800133e:	1c22      	adds	r2, r4, #0
 8001340:	701a      	strb	r2, [r3, #0]
 8001342:	1dbb      	adds	r3, r7, #6
 8001344:	1c02      	adds	r2, r0, #0
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	1d7b      	adds	r3, r7, #5
 800134a:	1c0a      	adds	r2, r1, #0
 800134c:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b25b      	sxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	db47      	blt.n	80013e8 <ssd1306_DrawPixel+0xb8>
 8001358:	1dbb      	adds	r3, r7, #6
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b3f      	cmp	r3, #63	@ 0x3f
 800135e:	d843      	bhi.n	80013e8 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001360:	1d7b      	adds	r3, r7, #5
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d11e      	bne.n	80013a6 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001368:	1dfb      	adds	r3, r7, #7
 800136a:	781a      	ldrb	r2, [r3, #0]
 800136c:	1dbb      	adds	r3, r7, #6
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	08db      	lsrs	r3, r3, #3
 8001372:	b2d8      	uxtb	r0, r3
 8001374:	0003      	movs	r3, r0
 8001376:	01db      	lsls	r3, r3, #7
 8001378:	18d3      	adds	r3, r2, r3
 800137a:	4a1d      	ldr	r2, [pc, #116]	@ (80013f0 <ssd1306_DrawPixel+0xc0>)
 800137c:	5cd3      	ldrb	r3, [r2, r3]
 800137e:	b25a      	sxtb	r2, r3
 8001380:	1dbb      	adds	r3, r7, #6
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2107      	movs	r1, #7
 8001386:	400b      	ands	r3, r1
 8001388:	2101      	movs	r1, #1
 800138a:	4099      	lsls	r1, r3
 800138c:	000b      	movs	r3, r1
 800138e:	b25b      	sxtb	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	b259      	sxtb	r1, r3
 8001394:	1dfb      	adds	r3, r7, #7
 8001396:	781a      	ldrb	r2, [r3, #0]
 8001398:	0003      	movs	r3, r0
 800139a:	01db      	lsls	r3, r3, #7
 800139c:	18d3      	adds	r3, r2, r3
 800139e:	b2c9      	uxtb	r1, r1
 80013a0:	4a13      	ldr	r2, [pc, #76]	@ (80013f0 <ssd1306_DrawPixel+0xc0>)
 80013a2:	54d1      	strb	r1, [r2, r3]
 80013a4:	e021      	b.n	80013ea <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	1dbb      	adds	r3, r7, #6
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	08db      	lsrs	r3, r3, #3
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	0003      	movs	r3, r0
 80013b4:	01db      	lsls	r3, r3, #7
 80013b6:	18d3      	adds	r3, r2, r3
 80013b8:	4a0d      	ldr	r2, [pc, #52]	@ (80013f0 <ssd1306_DrawPixel+0xc0>)
 80013ba:	5cd3      	ldrb	r3, [r2, r3]
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	1dba      	adds	r2, r7, #6
 80013c0:	7812      	ldrb	r2, [r2, #0]
 80013c2:	2107      	movs	r1, #7
 80013c4:	400a      	ands	r2, r1
 80013c6:	2101      	movs	r1, #1
 80013c8:	4091      	lsls	r1, r2
 80013ca:	000a      	movs	r2, r1
 80013cc:	b252      	sxtb	r2, r2
 80013ce:	43d2      	mvns	r2, r2
 80013d0:	b252      	sxtb	r2, r2
 80013d2:	4013      	ands	r3, r2
 80013d4:	b259      	sxtb	r1, r3
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781a      	ldrb	r2, [r3, #0]
 80013da:	0003      	movs	r3, r0
 80013dc:	01db      	lsls	r3, r3, #7
 80013de:	18d3      	adds	r3, r2, r3
 80013e0:	b2c9      	uxtb	r1, r1
 80013e2:	4a03      	ldr	r2, [pc, #12]	@ (80013f0 <ssd1306_DrawPixel+0xc0>)
 80013e4:	54d1      	strb	r1, [r2, r3]
 80013e6:	e000      	b.n	80013ea <ssd1306_DrawPixel+0xba>
        return;
 80013e8:	46c0      	nop			@ (mov r8, r8)
    }
}
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b003      	add	sp, #12
 80013ee:	bd90      	pop	{r4, r7, pc}
 80013f0:	2000027c 	.word	0x2000027c

080013f4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b089      	sub	sp, #36	@ 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	0004      	movs	r4, r0
 80013fc:	0038      	movs	r0, r7
 80013fe:	6001      	str	r1, [r0, #0]
 8001400:	6042      	str	r2, [r0, #4]
 8001402:	6083      	str	r3, [r0, #8]
 8001404:	210f      	movs	r1, #15
 8001406:	187b      	adds	r3, r7, r1
 8001408:	1c22      	adds	r2, r4, #0
 800140a:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800140c:	000a      	movs	r2, r1
 800140e:	18bb      	adds	r3, r7, r2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b1f      	cmp	r3, #31
 8001414:	d903      	bls.n	800141e <ssd1306_WriteChar+0x2a>
 8001416:	18bb      	adds	r3, r7, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b7e      	cmp	r3, #126	@ 0x7e
 800141c:	d901      	bls.n	8001422 <ssd1306_WriteChar+0x2e>
        return 0;
 800141e:	2300      	movs	r3, #0
 8001420:	e084      	b.n	800152c <ssd1306_WriteChar+0x138>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001422:	4b44      	ldr	r3, [pc, #272]	@ (8001534 <ssd1306_WriteChar+0x140>)
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	001a      	movs	r2, r3
 8001428:	003b      	movs	r3, r7
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	18d3      	adds	r3, r2, r3
 800142e:	2b80      	cmp	r3, #128	@ 0x80
 8001430:	dc07      	bgt.n	8001442 <ssd1306_WriteChar+0x4e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001432:	4b40      	ldr	r3, [pc, #256]	@ (8001534 <ssd1306_WriteChar+0x140>)
 8001434:	885b      	ldrh	r3, [r3, #2]
 8001436:	001a      	movs	r2, r3
 8001438:	003b      	movs	r3, r7
 800143a:	785b      	ldrb	r3, [r3, #1]
 800143c:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800143e:	2b40      	cmp	r3, #64	@ 0x40
 8001440:	dd01      	ble.n	8001446 <ssd1306_WriteChar+0x52>
    {
        // Not enough space on current line
        return 0;
 8001442:	2300      	movs	r3, #0
 8001444:	e072      	b.n	800152c <ssd1306_WriteChar+0x138>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	e051      	b.n	80014f0 <ssd1306_WriteChar+0xfc>
        b = Font.data[(ch - 32) * Font.height + i];
 800144c:	003b      	movs	r3, r7
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	230f      	movs	r3, #15
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	3b20      	subs	r3, #32
 8001458:	0039      	movs	r1, r7
 800145a:	7849      	ldrb	r1, [r1, #1]
 800145c:	434b      	muls	r3, r1
 800145e:	0019      	movs	r1, r3
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	18cb      	adds	r3, r1, r3
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	18d3      	adds	r3, r2, r3
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	e035      	b.n	80014de <ssd1306_WriteChar+0xea>
            if((b << j) & 0x8000)  {
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	409a      	lsls	r2, r3
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	4013      	ands	r3, r2
 800147e:	d014      	beq.n	80014aa <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001480:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <ssd1306_WriteChar+0x140>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	18d3      	adds	r3, r2, r3
 800148c:	b2d8      	uxtb	r0, r3
 800148e:	4b29      	ldr	r3, [pc, #164]	@ (8001534 <ssd1306_WriteChar+0x140>)
 8001490:	885b      	ldrh	r3, [r3, #2]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	18d3      	adds	r3, r2, r3
 800149a:	b2d9      	uxtb	r1, r3
 800149c:	2330      	movs	r3, #48	@ 0x30
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	001a      	movs	r2, r3
 80014a4:	f7ff ff44 	bl	8001330 <ssd1306_DrawPixel>
 80014a8:	e016      	b.n	80014d8 <ssd1306_WriteChar+0xe4>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80014aa:	4b22      	ldr	r3, [pc, #136]	@ (8001534 <ssd1306_WriteChar+0x140>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	18d3      	adds	r3, r2, r3
 80014b6:	b2d8      	uxtb	r0, r3
 80014b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001534 <ssd1306_WriteChar+0x140>)
 80014ba:	885b      	ldrh	r3, [r3, #2]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	18d3      	adds	r3, r2, r3
 80014c4:	b2d9      	uxtb	r1, r3
 80014c6:	2330      	movs	r3, #48	@ 0x30
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	425a      	negs	r2, r3
 80014ce:	4153      	adcs	r3, r2
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	001a      	movs	r2, r3
 80014d4:	f7ff ff2c 	bl	8001330 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	3301      	adds	r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	003b      	movs	r3, r7
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	001a      	movs	r2, r3
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d3c3      	bcc.n	8001472 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	003b      	movs	r3, r7
 80014f2:	785b      	ldrb	r3, [r3, #1]
 80014f4:	001a      	movs	r2, r3
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d3a7      	bcc.n	800144c <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80014fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001534 <ssd1306_WriteChar+0x140>)
 80014fe:	881a      	ldrh	r2, [r3, #0]
 8001500:	003b      	movs	r3, r7
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <ssd1306_WriteChar+0x126>
 8001508:	003b      	movs	r3, r7
 800150a:	6899      	ldr	r1, [r3, #8]
 800150c:	230f      	movs	r3, #15
 800150e:	18fb      	adds	r3, r7, r3
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	3b20      	subs	r3, #32
 8001514:	18cb      	adds	r3, r1, r3
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	e001      	b.n	800151e <ssd1306_WriteChar+0x12a>
 800151a:	003b      	movs	r3, r7
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	189b      	adds	r3, r3, r2
 8001520:	b29a      	uxth	r2, r3
 8001522:	4b04      	ldr	r3, [pc, #16]	@ (8001534 <ssd1306_WriteChar+0x140>)
 8001524:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001526:	230f      	movs	r3, #15
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	781b      	ldrb	r3, [r3, #0]
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	b009      	add	sp, #36	@ 0x24
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	2000067c 	.word	0x2000067c

08001538 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af02      	add	r7, sp, #8
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	0038      	movs	r0, r7
 8001542:	6001      	str	r1, [r0, #0]
 8001544:	6042      	str	r2, [r0, #4]
 8001546:	6083      	str	r3, [r0, #8]
    while (*str) {
 8001548:	e017      	b.n	800157a <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	7818      	ldrb	r0, [r3, #0]
 800154e:	003b      	movs	r3, r7
 8001550:	2218      	movs	r2, #24
 8001552:	18ba      	adds	r2, r7, r2
 8001554:	7812      	ldrb	r2, [r2, #0]
 8001556:	9200      	str	r2, [sp, #0]
 8001558:	6819      	ldr	r1, [r3, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f7ff ff49 	bl	80013f4 <ssd1306_WriteChar>
 8001562:	0003      	movs	r3, r0
 8001564:	001a      	movs	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d002      	beq.n	8001574 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	e008      	b.n	8001586 <ssd1306_WriteString+0x4e>
        }
        str++;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3301      	adds	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1e3      	bne.n	800154a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	781b      	ldrb	r3, [r3, #0]
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b004      	add	sp, #16
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	0002      	movs	r2, r0
 8001598:	1dfb      	adds	r3, r7, #7
 800159a:	701a      	strb	r2, [r3, #0]
 800159c:	1dbb      	adds	r3, r7, #6
 800159e:	1c0a      	adds	r2, r1, #0
 80015a0:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <ssd1306_SetCursor+0x30>)
 80015aa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80015ac:	1dbb      	adds	r3, r7, #6
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b03      	ldr	r3, [pc, #12]	@ (80015c0 <ssd1306_SetCursor+0x30>)
 80015b4:	805a      	strh	r2, [r3, #2]
}
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b002      	add	sp, #8
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			@ (mov r8, r8)
 80015c0:	2000067c 	.word	0x2000067c

080015c4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	0002      	movs	r2, r0
 80015cc:	1dfb      	adds	r3, r7, #7
 80015ce:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80015d0:	210f      	movs	r1, #15
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	2281      	movs	r2, #129	@ 0x81
 80015d6:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff fd9f 	bl	8001120 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80015e2:	1dfb      	adds	r3, r7, #7
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	0018      	movs	r0, r3
 80015e8:	f7ff fd9a 	bl	8001120 <ssd1306_WriteCommand>
}
 80015ec:	46c0      	nop			@ (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b004      	add	sp, #16
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	0002      	movs	r2, r0
 80015fc:	1dfb      	adds	r3, r7, #7
 80015fe:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8001600:	1dfb      	adds	r3, r7, #7
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d007      	beq.n	8001618 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8001608:	230f      	movs	r3, #15
 800160a:	18fb      	adds	r3, r7, r3
 800160c:	22af      	movs	r2, #175	@ 0xaf
 800160e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8001610:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <ssd1306_SetDisplayOn+0x48>)
 8001612:	2201      	movs	r2, #1
 8001614:	715a      	strb	r2, [r3, #5]
 8001616:	e006      	b.n	8001626 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8001618:	230f      	movs	r3, #15
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	22ae      	movs	r2, #174	@ 0xae
 800161e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <ssd1306_SetDisplayOn+0x48>)
 8001622:	2200      	movs	r2, #0
 8001624:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001626:	230f      	movs	r3, #15
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff fd77 	bl	8001120 <ssd1306_WriteCommand>
}
 8001632:	46c0      	nop			@ (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	b004      	add	sp, #16
 8001638:	bd80      	pop	{r7, pc}
 800163a:	46c0      	nop			@ (mov r8, r8)
 800163c:	2000067c 	.word	0x2000067c

08001640 <get_step_count>:
void decrement_steps(uint16_t by) {
	// Decrease the step count
    step_count -= by;
}

uint16_t get_step_count(void) {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	// Get the step count
    return step_count;
 8001644:	4b02      	ldr	r3, [pc, #8]	@ (8001650 <get_step_count+0x10>)
 8001646:	881b      	ldrh	r3, [r3, #0]
}
 8001648:	0018      	movs	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	20000684 	.word	0x20000684

08001654 <toggle_step_unit>:

void toggle_step_unit(void) {
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	steps_as_percentage = !(steps_as_percentage);
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <toggle_step_unit+0x28>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	1e5a      	subs	r2, r3, #1
 800165e:	4193      	sbcs	r3, r2
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2201      	movs	r2, #1
 8001664:	4053      	eors	r3, r2
 8001666:	b2db      	uxtb	r3, r3
 8001668:	1c1a      	adds	r2, r3, #0
 800166a:	2301      	movs	r3, #1
 800166c:	4013      	ands	r3, r2
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b02      	ldr	r3, [pc, #8]	@ (800167c <toggle_step_unit+0x28>)
 8001672:	701a      	strb	r2, [r3, #0]
}
 8001674:	46c0      	nop			@ (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			@ (mov r8, r8)
 800167c:	20000686 	.word	0x20000686

08001680 <steps_state_task_execute>:


void steps_state_task_execute(void)
{
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b085      	sub	sp, #20
 8001684:	af02      	add	r7, sp, #8
	// Display the step count
	static char count[18];
	if (steps_as_percentage) {
 8001686:	4b18      	ldr	r3, [pc, #96]	@ (80016e8 <steps_state_task_execute+0x68>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d018      	beq.n	80016c0 <steps_state_task_execute+0x40>
		uint16_t step_percentage = (step_count * 100) / get_step_goal(); // avoid floats
 800168e:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <steps_state_task_execute+0x6c>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	001a      	movs	r2, r3
 8001694:	2364      	movs	r3, #100	@ 0x64
 8001696:	4353      	muls	r3, r2
 8001698:	001c      	movs	r4, r3
 800169a:	f000 f8bf 	bl	800181c <get_step_goal>
 800169e:	0003      	movs	r3, r0
 80016a0:	0019      	movs	r1, r3
 80016a2:	0020      	movs	r0, r4
 80016a4:	f7fe fdc4 	bl	8000230 <__divsi3>
 80016a8:	0003      	movs	r3, r0
 80016aa:	001a      	movs	r2, r3
 80016ac:	1dbb      	adds	r3, r7, #6
 80016ae:	801a      	strh	r2, [r3, #0]
		snprintf(count, sizeof(count), "Steps: %u%% goal", step_percentage);
 80016b0:	1dbb      	adds	r3, r7, #6
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	4a0e      	ldr	r2, [pc, #56]	@ (80016f0 <steps_state_task_execute+0x70>)
 80016b6:	480f      	ldr	r0, [pc, #60]	@ (80016f4 <steps_state_task_execute+0x74>)
 80016b8:	2112      	movs	r1, #18
 80016ba:	f006 f9a1 	bl	8007a00 <sniprintf>
 80016be:	e006      	b.n	80016ce <steps_state_task_execute+0x4e>
	} else {
		snprintf(count, sizeof(count), "Steps: %u", step_count);
 80016c0:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <steps_state_task_execute+0x6c>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	4a0c      	ldr	r2, [pc, #48]	@ (80016f8 <steps_state_task_execute+0x78>)
 80016c6:	480b      	ldr	r0, [pc, #44]	@ (80016f4 <steps_state_task_execute+0x74>)
 80016c8:	2112      	movs	r1, #18
 80016ca:	f006 f999 	bl	8007a00 <sniprintf>
	}
	ssd1306_WriteString(count, Font_7x10, White);
 80016ce:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <steps_state_task_execute+0x7c>)
 80016d0:	4808      	ldr	r0, [pc, #32]	@ (80016f4 <steps_state_task_execute+0x74>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	9200      	str	r2, [sp, #0]
 80016d6:	6819      	ldr	r1, [r3, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f7ff ff2c 	bl	8001538 <ssd1306_WriteString>
}
 80016e0:	46c0      	nop			@ (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b003      	add	sp, #12
 80016e6:	bd90      	pop	{r4, r7, pc}
 80016e8:	20000686 	.word	0x20000686
 80016ec:	20000684 	.word	0x20000684
 80016f0:	0800837c 	.word	0x0800837c
 80016f4:	20000688 	.word	0x20000688
 80016f8:	08008390 	.word	0x08008390
 80016fc:	08008b68 	.word	0x08008b68

08001700 <toggle_distance_unit>:
#define KILOMETRES_TO_YARDS 1093

// Boolean for selecting units (km/yd)
static bool distance_in_yards = false;

void toggle_distance_unit(void) {
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
	distance_in_yards = !(distance_in_yards);
 8001704:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <toggle_distance_unit+0x28>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	1e5a      	subs	r2, r3, #1
 800170a:	4193      	sbcs	r3, r2
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2201      	movs	r2, #1
 8001710:	4053      	eors	r3, r2
 8001712:	b2db      	uxtb	r3, r3
 8001714:	1c1a      	adds	r2, r3, #0
 8001716:	2301      	movs	r3, #1
 8001718:	4013      	ands	r3, r2
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b02      	ldr	r3, [pc, #8]	@ (8001728 <toggle_distance_unit+0x28>)
 800171e:	701a      	strb	r2, [r3, #0]
}
 8001720:	46c0      	nop			@ (mov r8, r8)
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	2000069a 	.word	0x2000069a

0800172c <distance_state_task_execute>:

void distance_state_task_execute(void)
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b085      	sub	sp, #20
 8001730:	af02      	add	r7, sp, #8
	// Calculate the distance walked, in meters, avoiding floats
	static char distance_string[18];
	uint16_t meters = ((uint32_t)get_step_count() * CM_PER_STEP) / 100;
 8001732:	f7ff ff85 	bl	8001640 <get_step_count>
 8001736:	0003      	movs	r3, r0
 8001738:	001a      	movs	r2, r3
 800173a:	0013      	movs	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	189b      	adds	r3, r3, r2
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	2164      	movs	r1, #100	@ 0x64
 8001744:	0018      	movs	r0, r3
 8001746:	f7fe fce9 	bl	800011c <__udivsi3>
 800174a:	0003      	movs	r3, r0
 800174c:	001a      	movs	r2, r3
 800174e:	1dbb      	adds	r3, r7, #6
 8001750:	801a      	strh	r2, [r3, #0]

	// Convert to yards if requested
	if (distance_in_yards) {
 8001752:	4b25      	ldr	r3, [pc, #148]	@ (80017e8 <distance_state_task_execute+0xbc>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d019      	beq.n	800178e <distance_state_task_execute+0x62>
		uint16_t yards = ((uint32_t)meters * KILOMETRES_TO_YARDS) / 1000;
 800175a:	1dbb      	adds	r3, r7, #6
 800175c:	881a      	ldrh	r2, [r3, #0]
 800175e:	0013      	movs	r3, r2
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	189b      	adds	r3, r3, r2
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	189b      	adds	r3, r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	189b      	adds	r3, r3, r2
 800176c:	22fa      	movs	r2, #250	@ 0xfa
 800176e:	0091      	lsls	r1, r2, #2
 8001770:	0018      	movs	r0, r3
 8001772:	f7fe fcd3 	bl	800011c <__udivsi3>
 8001776:	0003      	movs	r3, r0
 8001778:	001a      	movs	r2, r3
 800177a:	003b      	movs	r3, r7
 800177c:	801a      	strh	r2, [r3, #0]
		snprintf(distance_string, sizeof(distance_string), "Dist: %uyd", yards);
 800177e:	003b      	movs	r3, r7
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	4a1a      	ldr	r2, [pc, #104]	@ (80017ec <distance_state_task_execute+0xc0>)
 8001784:	481a      	ldr	r0, [pc, #104]	@ (80017f0 <distance_state_task_execute+0xc4>)
 8001786:	2112      	movs	r1, #18
 8001788:	f006 f93a 	bl	8007a00 <sniprintf>
 800178c:	e01e      	b.n	80017cc <distance_state_task_execute+0xa0>
	} else {
		// Split into kilometers and meters
		uint16_t kilometers = meters / 1000; // 2600 = 2
 800178e:	1d3c      	adds	r4, r7, #4
 8001790:	1dbb      	adds	r3, r7, #6
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	22fa      	movs	r2, #250	@ 0xfa
 8001796:	0091      	lsls	r1, r2, #2
 8001798:	0018      	movs	r0, r3
 800179a:	f7fe fcbf 	bl	800011c <__udivsi3>
 800179e:	0003      	movs	r3, r0
 80017a0:	8023      	strh	r3, [r4, #0]
		uint16_t remainder_meters = meters % 1000; // = 600
 80017a2:	1cbc      	adds	r4, r7, #2
 80017a4:	1dbb      	adds	r3, r7, #6
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	22fa      	movs	r2, #250	@ 0xfa
 80017aa:	0091      	lsls	r1, r2, #2
 80017ac:	0018      	movs	r0, r3
 80017ae:	f7fe fd3b 	bl	8000228 <__aeabi_uidivmod>
 80017b2:	000b      	movs	r3, r1
 80017b4:	8023      	strh	r3, [r4, #0]
		snprintf(distance_string, sizeof(distance_string), "Dist: %u.%03ukm", kilometers, remainder_meters);
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	8819      	ldrh	r1, [r3, #0]
 80017ba:	1cbb      	adds	r3, r7, #2
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	4a0d      	ldr	r2, [pc, #52]	@ (80017f4 <distance_state_task_execute+0xc8>)
 80017c0:	480b      	ldr	r0, [pc, #44]	@ (80017f0 <distance_state_task_execute+0xc4>)
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	000b      	movs	r3, r1
 80017c6:	2112      	movs	r1, #18
 80017c8:	f006 f91a 	bl	8007a00 <sniprintf>
	}

	ssd1306_WriteString(distance_string, Font_7x10, White);
 80017cc:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <distance_state_task_execute+0xcc>)
 80017ce:	4808      	ldr	r0, [pc, #32]	@ (80017f0 <distance_state_task_execute+0xc4>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	9200      	str	r2, [sp, #0]
 80017d4:	6819      	ldr	r1, [r3, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f7ff fead 	bl	8001538 <ssd1306_WriteString>
}
 80017de:	46c0      	nop			@ (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b003      	add	sp, #12
 80017e4:	bd90      	pop	{r4, r7, pc}
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	2000069a 	.word	0x2000069a
 80017ec:	0800839c 	.word	0x0800839c
 80017f0:	2000069c 	.word	0x2000069c
 80017f4:	080083a8 	.word	0x080083a8
 80017f8:	08008b68 	.word	0x08008b68

080017fc <set_step_goal>:
#include "state_task_goal.h"

static uint16_t step_goal = 1000;


void set_step_goal(uint16_t goal) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	0002      	movs	r2, r0
 8001804:	1dbb      	adds	r3, r7, #6
 8001806:	801a      	strh	r2, [r3, #0]
    step_goal = goal;
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <set_step_goal+0x1c>)
 800180a:	1dba      	adds	r2, r7, #6
 800180c:	8812      	ldrh	r2, [r2, #0]
 800180e:	801a      	strh	r2, [r3, #0]
}
 8001810:	46c0      	nop			@ (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b002      	add	sp, #8
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000064 	.word	0x20000064

0800181c <get_step_goal>:

uint16_t get_step_goal() {
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	return step_goal;
 8001820:	4b02      	ldr	r3, [pc, #8]	@ (800182c <get_step_goal+0x10>)
 8001822:	881b      	ldrh	r3, [r3, #0]
}
 8001824:	0018      	movs	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			@ (mov r8, r8)
 800182c:	20000064 	.word	0x20000064

08001830 <goal_state_task_execute>:


void goal_state_task_execute(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af02      	add	r7, sp, #8
	// Display the step goal
	static char goal[18];
	snprintf(goal, sizeof(goal), "Goal: %u\n", step_goal);
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <goal_state_task_execute+0x2c>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	4a09      	ldr	r2, [pc, #36]	@ (8001860 <goal_state_task_execute+0x30>)
 800183c:	4809      	ldr	r0, [pc, #36]	@ (8001864 <goal_state_task_execute+0x34>)
 800183e:	2112      	movs	r1, #18
 8001840:	f006 f8de 	bl	8007a00 <sniprintf>
	ssd1306_WriteString(goal, Font_7x10, White);
 8001844:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <goal_state_task_execute+0x38>)
 8001846:	4807      	ldr	r0, [pc, #28]	@ (8001864 <goal_state_task_execute+0x34>)
 8001848:	2201      	movs	r2, #1
 800184a:	9200      	str	r2, [sp, #0]
 800184c:	6819      	ldr	r1, [r3, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f7ff fe71 	bl	8001538 <ssd1306_WriteString>
}
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000064 	.word	0x20000064
 8001860:	080083b8 	.word	0x080083b8
 8001864:	200006b0 	.word	0x200006b0
 8001868:	08008b68 	.word	0x08008b68

0800186c <modify_state_task_execute>:
#define ADC_MIN 139

uint16_t new_goal;

void modify_state_task_execute(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af02      	add	r7, sp, #8
	uint16_t vr1_adc = get_pot_raw_values();
 8001872:	f7ff fc3f 	bl	80010f4 <get_pot_raw_values>
 8001876:	0003      	movs	r3, r0
 8001878:	001a      	movs	r2, r3
 800187a:	1dbb      	adds	r3, r7, #6
 800187c:	801a      	strh	r2, [r3, #0]
	new_goal = ((GOAL_RANGE * (vr1_adc - ADC_MIN)) / ADC_RANGE) + GOAL_MIN;
 800187e:	1dbb      	adds	r3, r7, #6
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	3b8b      	subs	r3, #139	@ 0x8b
 8001884:	4a15      	ldr	r2, [pc, #84]	@ (80018dc <modify_state_task_execute+0x70>)
 8001886:	4353      	muls	r3, r2
 8001888:	4915      	ldr	r1, [pc, #84]	@ (80018e0 <modify_state_task_execute+0x74>)
 800188a:	0018      	movs	r0, r3
 800188c:	f7fe fcd0 	bl	8000230 <__divsi3>
 8001890:	0003      	movs	r3, r0
 8001892:	b29b      	uxth	r3, r3
 8001894:	33f5      	adds	r3, #245	@ 0xf5
 8001896:	33ff      	adds	r3, #255	@ 0xff
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <modify_state_task_execute+0x78>)
 800189c:	801a      	strh	r2, [r3, #0]

	//goes slightly below 500 to 453 so sad :( only in 2025 am I right
	if(new_goal < 500)
 800189e:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <modify_state_task_execute+0x78>)
 80018a0:	881a      	ldrh	r2, [r3, #0]
 80018a2:	23fa      	movs	r3, #250	@ 0xfa
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d203      	bcs.n	80018b2 <modify_state_task_execute+0x46>
	{
		new_goal = 500;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <modify_state_task_execute+0x78>)
 80018ac:	22fa      	movs	r2, #250	@ 0xfa
 80018ae:	0052      	lsls	r2, r2, #1
 80018b0:	801a      	strh	r2, [r3, #0]
	}
	// Display the step goal
	static char goal[18];
	snprintf(goal, sizeof(goal), "New Goal: %u\n", new_goal);
 80018b2:	4b0c      	ldr	r3, [pc, #48]	@ (80018e4 <modify_state_task_execute+0x78>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	4a0c      	ldr	r2, [pc, #48]	@ (80018e8 <modify_state_task_execute+0x7c>)
 80018b8:	480c      	ldr	r0, [pc, #48]	@ (80018ec <modify_state_task_execute+0x80>)
 80018ba:	2112      	movs	r1, #18
 80018bc:	f006 f8a0 	bl	8007a00 <sniprintf>
	ssd1306_WriteString(goal, Font_7x10, White);
 80018c0:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <modify_state_task_execute+0x84>)
 80018c2:	480a      	ldr	r0, [pc, #40]	@ (80018ec <modify_state_task_execute+0x80>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	9200      	str	r2, [sp, #0]
 80018c8:	6819      	ldr	r1, [r3, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f7ff fe33 	bl	8001538 <ssd1306_WriteString>
}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b002      	add	sp, #8
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	000038a4 	.word	0x000038a4
 80018e0:	00000f74 	.word	0x00000f74
 80018e4:	200006c2 	.word	0x200006c2
 80018e8:	080083c4 	.word	0x080083c4
 80018ec:	200006c4 	.word	0x200006c4
 80018f0:	08008b68 	.word	0x08008b68

080018f4 <set_new_goal>:

void set_new_goal(void){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	set_step_goal(new_goal);
 80018f8:	4b03      	ldr	r3, [pc, #12]	@ (8001908 <set_new_goal+0x14>)
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7ff ff7d 	bl	80017fc <set_step_goal>
}
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200006c2 	.word	0x200006c2

0800190c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001912:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <HAL_MspInit+0x44>)
 8001914:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001916:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <HAL_MspInit+0x44>)
 8001918:	2101      	movs	r1, #1
 800191a:	430a      	orrs	r2, r1
 800191c:	641a      	str	r2, [r3, #64]	@ 0x40
 800191e:	4b0c      	ldr	r3, [pc, #48]	@ (8001950 <HAL_MspInit+0x44>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	2201      	movs	r2, #1
 8001924:	4013      	ands	r3, r2
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <HAL_MspInit+0x44>)
 800192c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800192e:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <HAL_MspInit+0x44>)
 8001930:	2180      	movs	r1, #128	@ 0x80
 8001932:	0549      	lsls	r1, r1, #21
 8001934:	430a      	orrs	r2, r1
 8001936:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_MspInit+0x44>)
 800193a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800193c:	2380      	movs	r3, #128	@ 0x80
 800193e:	055b      	lsls	r3, r3, #21
 8001940:	4013      	ands	r3, r2
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	b002      	add	sp, #8
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			@ (mov r8, r8)
 8001950:	40021000 	.word	0x40021000

08001954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001958:	46c0      	nop			@ (mov r8, r8)
 800195a:	e7fd      	b.n	8001958 <NMI_Handler+0x4>

0800195c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001960:	46c0      	nop			@ (mov r8, r8)
 8001962:	e7fd      	b.n	8001960 <HardFault_Handler+0x4>

08001964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001968:	46c0      	nop			@ (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197c:	f000 fbb0 	bl	80020e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001980:	46c0      	nop			@ (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 800198a:	2380      	movs	r3, #128	@ 0x80
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	0018      	movs	r0, r3
 8001990:	f001 ffb8 	bl	8003904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001994:	46c0      	nop			@ (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019a0:	4b03      	ldr	r3, [pc, #12]	@ (80019b0 <DMA1_Channel1_IRQHandler+0x14>)
 80019a2:	0018      	movs	r0, r3
 80019a4:	f001 fcb4 	bl	8003310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019a8:	46c0      	nop			@ (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	20000148 	.word	0x20000148

080019b4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80019ba:	0018      	movs	r0, r3
 80019bc:	f001 fca8 	bl	8003310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80019c0:	46c0      	nop			@ (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	20000210 	.word	0x20000210

080019cc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <I2C1_IRQHandler+0x2c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699a      	ldr	r2, [r3, #24]
 80019d6:	23e0      	movs	r3, #224	@ 0xe0
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4013      	ands	r3, r2
 80019dc:	d004      	beq.n	80019e8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <I2C1_IRQHandler+0x2c>)
 80019e0:	0018      	movs	r0, r3
 80019e2:	f002 fabd 	bl	8003f60 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80019e6:	e003      	b.n	80019f0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80019e8:	4b03      	ldr	r3, [pc, #12]	@ (80019f8 <I2C1_IRQHandler+0x2c>)
 80019ea:	0018      	movs	r0, r3
 80019ec:	f002 fa9e 	bl	8003f2c <HAL_I2C_EV_IRQHandler>
}
 80019f0:	46c0      	nop			@ (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			@ (mov r8, r8)
 80019f8:	200001bc 	.word	0x200001bc

080019fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a04:	4a14      	ldr	r2, [pc, #80]	@ (8001a58 <_sbrk+0x5c>)
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <_sbrk+0x60>)
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a10:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a18:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <_sbrk+0x64>)
 8001a1a:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <_sbrk+0x68>)
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	18d3      	adds	r3, r2, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d207      	bcs.n	8001a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a2c:	f006 f824 	bl	8007a78 <__errno>
 8001a30:	0003      	movs	r3, r0
 8001a32:	220c      	movs	r2, #12
 8001a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a36:	2301      	movs	r3, #1
 8001a38:	425b      	negs	r3, r3
 8001a3a:	e009      	b.n	8001a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a42:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	18d2      	adds	r2, r2, r3
 8001a4a:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <_sbrk+0x64>)
 8001a4c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b006      	add	sp, #24
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20006000 	.word	0x20006000
 8001a5c:	00000400 	.word	0x00000400
 8001a60:	200006d8 	.word	0x200006d8
 8001a64:	20000918 	.word	0x20000918

08001a68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a6c:	4b03      	ldr	r3, [pc, #12]	@ (8001a7c <SystemInit+0x14>)
 8001a6e:	2280      	movs	r2, #128	@ 0x80
 8001a70:	0512      	lsls	r2, r2, #20
 8001a72:	609a      	str	r2, [r3, #8]
#endif
}
 8001a74:	46c0      	nop			@ (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			@ (mov r8, r8)
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <buttons_task_init>:
#include "task_buttons.h"
#include "buttons.h"

#include <stdbool.h>

void buttons_task_init(void) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	// Initialise the upstream button driver, enable all RGB LED colour channels.
	buttons_init();
 8001a84:	f7fe fe6a 	bl	800075c <buttons_init>
}
 8001a88:	46c0      	nop			@ (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <buttons_task_execute>:

bool buttons_task_execute(void) {
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	af00      	add	r7, sp, #0
	buttons_update();
 8001a92:	f7fe fe9d 	bl	80007d0 <buttons_update>
}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	0018      	movs	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <display_task_init>:

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

void display_task_init(void) {
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8001aa2:	f7ff fbbf 	bl	8001224 <ssd1306_Init>
	ssd1306_SetCursor(0, 0);
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff fd71 	bl	8001590 <ssd1306_SetCursor>
}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <display_task_execute>:

void display_task_execute(void) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	// Fetch coordinate strings
	ssd1306_UpdateScreen();
 8001ab8:	f7ff fb84 	bl	80011c4 <ssd1306_UpdateScreen>
}
 8001abc:	46c0      	nop			@ (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <fsm_state_entry>:

static bool update_display = false;
bool joystick_release = true;


void fsm_state_entry(state_t state) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	0002      	movs	r2, r0
 8001acc:	1dfb      	adds	r3, r7, #7
 8001ace:	701a      	strb	r2, [r3, #0]
	// Set up the screen

	// Call the function associated with this state
	switch(state) {
 8001ad0:	1dfb      	adds	r3, r7, #7
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d811      	bhi.n	8001afc <fsm_state_entry+0x38>
 8001ad8:	009a      	lsls	r2, r3, #2
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <fsm_state_entry+0x40>)
 8001adc:	18d3      	adds	r3, r2, r3
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	469f      	mov	pc, r3
		case STATE_STEPS:
			steps_state_task_execute();
 8001ae2:	f7ff fdcd 	bl	8001680 <steps_state_task_execute>
			break;
 8001ae6:	e009      	b.n	8001afc <fsm_state_entry+0x38>
		case STATE_DISTANCE:
			distance_state_task_execute();
 8001ae8:	f7ff fe20 	bl	800172c <distance_state_task_execute>
			break;
 8001aec:	e006      	b.n	8001afc <fsm_state_entry+0x38>
		case STATE_GOAL:
			goal_state_task_execute();
 8001aee:	f7ff fe9f 	bl	8001830 <goal_state_task_execute>
			break;
 8001af2:	e003      	b.n	8001afc <fsm_state_entry+0x38>
		case STATE_MODIFY_GOAL:
			modify_state_task_execute();
 8001af4:	f7ff feba 	bl	800186c <modify_state_task_execute>
			break;
 8001af8:	e000      	b.n	8001afc <fsm_state_entry+0x38>
		case STATE_TEST:
			//test_state_task_execute();
			break;
 8001afa:	46c0      	nop			@ (mov r8, r8)
	}
}
 8001afc:	46c0      	nop			@ (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b002      	add	sp, #8
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	08008bd4 	.word	0x08008bd4

08001b08 <fsm_task_execute>:

void fsm_task_execute(void) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af02      	add	r7, sp, #8
	// Task to be called by the scheduler, to move between FSM states

	// Don't do anything if the last input was recent
	if (HAL_GetTick() < fsmTaskNextRun) return;
 8001b0e:	f000 faf9 	bl	8002104 <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	4b71      	ldr	r3, [pc, #452]	@ (8001cdc <fsm_task_execute+0x1d4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d200      	bcs.n	8001b1e <fsm_task_execute+0x16>
 8001b1c:	e0da      	b.n	8001cd4 <fsm_task_execute+0x1cc>

	// Pull flags from the joystick module
	struct joystick_position_flags joystick_position = get_joystick_flags();
 8001b1e:	f7ff fa1f 	bl	8000f60 <get_joystick_flags>
 8001b22:	0003      	movs	r3, r0
 8001b24:	001a      	movs	r2, r3
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	601a      	str	r2, [r3, #0]

	// Pull flags from the button module
	// not implemented

	// Implement state machine
	switch (current_state) {
 8001b2a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ce0 <fsm_task_execute+0x1d8>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d900      	bls.n	8001b34 <fsm_task_execute+0x2c>
 8001b32:	e092      	b.n	8001c5a <fsm_task_execute+0x152>
 8001b34:	009a      	lsls	r2, r3, #2
 8001b36:	4b6b      	ldr	r3, [pc, #428]	@ (8001ce4 <fsm_task_execute+0x1dc>)
 8001b38:	18d3      	adds	r3, r2, r3
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	469f      	mov	pc, r3
		case STATE_STEPS:
			if (joystick_position.left) current_state = STATE_DISTANCE;
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <fsm_task_execute+0x46>
 8001b46:	4b66      	ldr	r3, [pc, #408]	@ (8001ce0 <fsm_task_execute+0x1d8>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
 8001b4c:	e006      	b.n	8001b5c <fsm_task_execute+0x54>
			else if (joystick_position.right) current_state = STATE_GOAL;
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	785b      	ldrb	r3, [r3, #1]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <fsm_task_execute+0x54>
 8001b56:	4b62      	ldr	r3, [pc, #392]	@ (8001ce0 <fsm_task_execute+0x1d8>)
 8001b58:	2202      	movs	r2, #2
 8001b5a:	701a      	strb	r2, [r3, #0]
			// If joystick is up in this position, switch between count / % on display
			if (joystick_position.up) {
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	789b      	ldrb	r3, [r3, #2]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d100      	bne.n	8001b66 <fsm_task_execute+0x5e>
 8001b64:	e072      	b.n	8001c4c <fsm_task_execute+0x144>
				toggle_step_unit();
 8001b66:	f7ff fd75 	bl	8001654 <toggle_step_unit>
				update_display = true;
 8001b6a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ce8 <fsm_task_execute+0x1e0>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001b70:	e06c      	b.n	8001c4c <fsm_task_execute+0x144>

		case STATE_DISTANCE:
			if (joystick_position.left) current_state = STATE_GOAL;
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <fsm_task_execute+0x7a>
 8001b7a:	4b59      	ldr	r3, [pc, #356]	@ (8001ce0 <fsm_task_execute+0x1d8>)
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	e006      	b.n	8001b90 <fsm_task_execute+0x88>
			else if (joystick_position.right) current_state = STATE_STEPS;
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	785b      	ldrb	r3, [r3, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <fsm_task_execute+0x88>
 8001b8a:	4b55      	ldr	r3, [pc, #340]	@ (8001ce0 <fsm_task_execute+0x1d8>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
			// If joystick is up
			if (joystick_position.up) {
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	789b      	ldrb	r3, [r3, #2]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d05b      	beq.n	8001c50 <fsm_task_execute+0x148>
				toggle_distance_unit();
 8001b98:	f7ff fdb2 	bl	8001700 <toggle_distance_unit>
				update_display = true;
 8001b9c:	4b52      	ldr	r3, [pc, #328]	@ (8001ce8 <fsm_task_execute+0x1e0>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001ba2:	e055      	b.n	8001c50 <fsm_task_execute+0x148>

		case STATE_GOAL:
			if (buttons_checkButton(JOYSTICK) == RELEASED){
 8001ba4:	2004      	movs	r0, #4
 8001ba6:	f7fe ff07 	bl	80009b8 <buttons_checkButton>
 8001baa:	1e03      	subs	r3, r0, #0
 8001bac:	d102      	bne.n	8001bb4 <fsm_task_execute+0xac>
				joystick_release = true;
 8001bae:	4b4f      	ldr	r3, [pc, #316]	@ (8001cec <fsm_task_execute+0x1e4>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
			}
			if (buttons_isHeld(JOYSTICK) && joystick_release == true) { // joystick long press
 8001bb4:	2004      	movs	r0, #4
 8001bb6:	f7fe ff3d 	bl	8000a34 <buttons_isHeld>
 8001bba:	1e03      	subs	r3, r0, #0
 8001bbc:	d00d      	beq.n	8001bda <fsm_task_execute+0xd2>
 8001bbe:	4b4b      	ldr	r3, [pc, #300]	@ (8001cec <fsm_task_execute+0x1e4>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <fsm_task_execute+0xd2>
				current_state = STATE_MODIFY_GOAL;
 8001bc6:	4b46      	ldr	r3, [pc, #280]	@ (8001ce0 <fsm_task_execute+0x1d8>)
 8001bc8:	2203      	movs	r2, #3
 8001bca:	701a      	strb	r2, [r3, #0]
				buttons_resetHeld(JOYSTICK);
 8001bcc:	2004      	movs	r0, #4
 8001bce:	f7fe ff47 	bl	8000a60 <buttons_resetHeld>
				joystick_release = false;
 8001bd2:	4b46      	ldr	r3, [pc, #280]	@ (8001cec <fsm_task_execute+0x1e4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
			}
			else if (joystick_position.left) current_state = STATE_STEPS;
			else if (joystick_position.right) current_state = STATE_DISTANCE;
			break;
 8001bd8:	e03c      	b.n	8001c54 <fsm_task_execute+0x14c>
			else if (joystick_position.left) current_state = STATE_STEPS;
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <fsm_task_execute+0xe2>
 8001be2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ce0 <fsm_task_execute+0x1d8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
			break;
 8001be8:	e034      	b.n	8001c54 <fsm_task_execute+0x14c>
			else if (joystick_position.right) current_state = STATE_DISTANCE;
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	785b      	ldrb	r3, [r3, #1]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d030      	beq.n	8001c54 <fsm_task_execute+0x14c>
 8001bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce0 <fsm_task_execute+0x1d8>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]
			break;
 8001bf8:	e02c      	b.n	8001c54 <fsm_task_execute+0x14c>

		case STATE_MODIFY_GOAL:
			// joystick long press and joystick short press
			update_display = true;
 8001bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce8 <fsm_task_execute+0x1e0>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
			if (buttons_checkButton(JOYSTICK) == RELEASED){
 8001c00:	2004      	movs	r0, #4
 8001c02:	f7fe fed9 	bl	80009b8 <buttons_checkButton>
 8001c06:	1e03      	subs	r3, r0, #0
 8001c08:	d10c      	bne.n	8001c24 <fsm_task_execute+0x11c>
				if (joystick_release == true) {
 8001c0a:	4b38      	ldr	r3, [pc, #224]	@ (8001cec <fsm_task_execute+0x1e4>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d005      	beq.n	8001c1e <fsm_task_execute+0x116>
					current_state = STATE_GOAL;
 8001c12:	4b33      	ldr	r3, [pc, #204]	@ (8001ce0 <fsm_task_execute+0x1d8>)
 8001c14:	2202      	movs	r2, #2
 8001c16:	701a      	strb	r2, [r3, #0]
					joystick_release = false;
 8001c18:	4b34      	ldr	r3, [pc, #208]	@ (8001cec <fsm_task_execute+0x1e4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
				}
				joystick_release = true;
 8001c1e:	4b33      	ldr	r3, [pc, #204]	@ (8001cec <fsm_task_execute+0x1e4>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
			}

			 if (buttons_isHeld(JOYSTICK) && joystick_release == true) {
 8001c24:	2004      	movs	r0, #4
 8001c26:	f7fe ff05 	bl	8000a34 <buttons_isHeld>
 8001c2a:	1e03      	subs	r3, r0, #0
 8001c2c:	d014      	beq.n	8001c58 <fsm_task_execute+0x150>
 8001c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001cec <fsm_task_execute+0x1e4>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d010      	beq.n	8001c58 <fsm_task_execute+0x150>
				set_new_goal();
 8001c36:	f7ff fe5d 	bl	80018f4 <set_new_goal>
				current_state = STATE_GOAL;
 8001c3a:	4b29      	ldr	r3, [pc, #164]	@ (8001ce0 <fsm_task_execute+0x1d8>)
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	701a      	strb	r2, [r3, #0]
				joystick_release = false;
 8001c40:	4b2a      	ldr	r3, [pc, #168]	@ (8001cec <fsm_task_execute+0x1e4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]

			}
			break;
 8001c46:	e007      	b.n	8001c58 <fsm_task_execute+0x150>

		case STATE_TEST:
			// double press of sw2
			break;
 8001c48:	46c0      	nop			@ (mov r8, r8)
 8001c4a:	e006      	b.n	8001c5a <fsm_task_execute+0x152>
			break;
 8001c4c:	46c0      	nop			@ (mov r8, r8)
 8001c4e:	e004      	b.n	8001c5a <fsm_task_execute+0x152>
			break;
 8001c50:	46c0      	nop			@ (mov r8, r8)
 8001c52:	e002      	b.n	8001c5a <fsm_task_execute+0x152>
			break;
 8001c54:	46c0      	nop			@ (mov r8, r8)
 8001c56:	e000      	b.n	8001c5a <fsm_task_execute+0x152>
			break;
 8001c58:	46c0      	nop			@ (mov r8, r8)
	}


	if (current_state != prev_state || update_display) {
 8001c5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ce0 <fsm_task_execute+0x1d8>)
 8001c5c:	781a      	ldrb	r2, [r3, #0]
 8001c5e:	4b24      	ldr	r3, [pc, #144]	@ (8001cf0 <fsm_task_execute+0x1e8>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d103      	bne.n	8001c6e <fsm_task_execute+0x166>
 8001c66:	4b20      	ldr	r3, [pc, #128]	@ (8001ce8 <fsm_task_execute+0x1e0>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d033      	beq.n	8001cd6 <fsm_task_execute+0x1ce>
		// Reset the display before changing state
		ssd1306_SetCursor(0, 0);
 8001c6e:	2100      	movs	r1, #0
 8001c70:	2000      	movs	r0, #0
 8001c72:	f7ff fc8d 	bl	8001590 <ssd1306_SetCursor>
		ssd1306_WriteString("== STEP COUNTER ==", Font_7x10, White);
 8001c76:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf4 <fsm_task_execute+0x1ec>)
 8001c78:	481f      	ldr	r0, [pc, #124]	@ (8001cf8 <fsm_task_execute+0x1f0>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	9200      	str	r2, [sp, #0]
 8001c7e:	6819      	ldr	r1, [r3, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f7ff fc58 	bl	8001538 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 13);
 8001c88:	210d      	movs	r1, #13
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f7ff fc80 	bl	8001590 <ssd1306_SetCursor>
		ssd1306_WriteString("                  ", Font_7x10, White); // Clear previous text
 8001c90:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <fsm_task_execute+0x1ec>)
 8001c92:	481a      	ldr	r0, [pc, #104]	@ (8001cfc <fsm_task_execute+0x1f4>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	9200      	str	r2, [sp, #0]
 8001c98:	6819      	ldr	r1, [r3, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f7ff fc4b 	bl	8001538 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 13);
 8001ca2:	210d      	movs	r1, #13
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7ff fc73 	bl	8001590 <ssd1306_SetCursor>

		// Change state
		fsmTaskNextRun = HAL_GetTick() + STATE_CHANGE_DELAY;
 8001caa:	f000 fa2b 	bl	8002104 <HAL_GetTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	33f5      	adds	r3, #245	@ 0xf5
 8001cb2:	33ff      	adds	r3, #255	@ 0xff
 8001cb4:	001a      	movs	r2, r3
 8001cb6:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <fsm_task_execute+0x1d4>)
 8001cb8:	601a      	str	r2, [r3, #0]
		fsm_state_entry(current_state);
 8001cba:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <fsm_task_execute+0x1d8>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f7ff ff00 	bl	8001ac4 <fsm_state_entry>
		prev_state = current_state;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <fsm_task_execute+0x1d8>)
 8001cc6:	781a      	ldrb	r2, [r3, #0]
 8001cc8:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <fsm_task_execute+0x1e8>)
 8001cca:	701a      	strb	r2, [r3, #0]
		update_display = false;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <fsm_task_execute+0x1e0>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	e000      	b.n	8001cd6 <fsm_task_execute+0x1ce>
	if (HAL_GetTick() < fsmTaskNextRun) return;
 8001cd4:	46c0      	nop			@ (mov r8, r8)
	}
}
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b002      	add	sp, #8
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200006e0 	.word	0x200006e0
 8001ce0:	200006dc 	.word	0x200006dc
 8001ce4:	08008be8 	.word	0x08008be8
 8001ce8:	200006e4 	.word	0x200006e4
 8001cec:	2000006c 	.word	0x2000006c
 8001cf0:	200006dd 	.word	0x200006dd
 8001cf4:	08008b68 	.word	0x08008b68
 8001cf8:	080083d4 	.word	0x080083d4
 8001cfc:	080083e8 	.word	0x080083e8

08001d00 <joystick_task_execute>:
 */

#include "task_joystick.h"
#include "joystick.h"

void joystick_task_execute(void) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	// Update the ADC values of the JoyStick X and Y axis inputs
	update_joystick();
 8001d04:	f7ff f8d2 	bl	8000eac <update_joystick>
}
 8001d08:	46c0      	nop			@ (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <pot_task_execute>:
 */

#include "task_pot.h"
#include "pot.h"

void pot_task_execute(void) {
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	af00      	add	r7, sp, #0
	// Update the ADC values of the Potentiometer
	update_pot();
 8001d12:	f7ff f9df 	bl	80010d4 <update_pot>
}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <uart_task_execute>:
#include "uart_debugger.h"
#include "joystick.h"

#include <stdbool.h>

void uart_task_execute() {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	// Transmit debug values, if SW2_state is 1
	// Do something here later
}
 8001d20:	46c0      	nop			@ (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	@ 0x28
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2e:	231c      	movs	r3, #28
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	0018      	movs	r0, r3
 8001d34:	230c      	movs	r3, #12
 8001d36:	001a      	movs	r2, r3
 8001d38:	2100      	movs	r1, #0
 8001d3a:	f005 fe95 	bl	8007a68 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d3e:	003b      	movs	r3, r7
 8001d40:	0018      	movs	r0, r3
 8001d42:	231c      	movs	r3, #28
 8001d44:	001a      	movs	r2, r3
 8001d46:	2100      	movs	r1, #0
 8001d48:	f005 fe8e 	bl	8007a68 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d4c:	4b24      	ldr	r3, [pc, #144]	@ (8001de0 <MX_TIM2_Init+0xb8>)
 8001d4e:	2280      	movs	r2, #128	@ 0x80
 8001d50:	05d2      	lsls	r2, r2, #23
 8001d52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d54:	4b22      	ldr	r3, [pc, #136]	@ (8001de0 <MX_TIM2_Init+0xb8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5a:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <MX_TIM2_Init+0xb8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 8001d60:	4b1f      	ldr	r3, [pc, #124]	@ (8001de0 <MX_TIM2_Init+0xb8>)
 8001d62:	4a20      	ldr	r2, [pc, #128]	@ (8001de4 <MX_TIM2_Init+0xbc>)
 8001d64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d66:	4b1e      	ldr	r3, [pc, #120]	@ (8001de0 <MX_TIM2_Init+0xb8>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001de0 <MX_TIM2_Init+0xb8>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d72:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <MX_TIM2_Init+0xb8>)
 8001d74:	0018      	movs	r0, r3
 8001d76:	f004 fc41 	bl	80065fc <HAL_TIM_PWM_Init>
 8001d7a:	1e03      	subs	r3, r0, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d7e:	f7ff f9a2 	bl	80010c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d82:	211c      	movs	r1, #28
 8001d84:	187b      	adds	r3, r7, r1
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8a:	187b      	adds	r3, r7, r1
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d90:	187a      	adds	r2, r7, r1
 8001d92:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <MX_TIM2_Init+0xb8>)
 8001d94:	0011      	movs	r1, r2
 8001d96:	0018      	movs	r0, r3
 8001d98:	f005 f8a8 	bl	8006eec <HAL_TIMEx_MasterConfigSynchronization>
 8001d9c:	1e03      	subs	r3, r0, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001da0:	f7ff f991 	bl	80010c6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001da4:	003b      	movs	r3, r7
 8001da6:	2260      	movs	r2, #96	@ 0x60
 8001da8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 15000;
 8001daa:	003b      	movs	r3, r7
 8001dac:	4a0e      	ldr	r2, [pc, #56]	@ (8001de8 <MX_TIM2_Init+0xc0>)
 8001dae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001db0:	003b      	movs	r3, r7
 8001db2:	2202      	movs	r2, #2
 8001db4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db6:	003b      	movs	r3, r7
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dbc:	0039      	movs	r1, r7
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <MX_TIM2_Init+0xb8>)
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f004 fc72 	bl	80066ac <HAL_TIM_PWM_ConfigChannel>
 8001dc8:	1e03      	subs	r3, r0, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001dcc:	f7ff f97b 	bl	80010c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dd0:	4b03      	ldr	r3, [pc, #12]	@ (8001de0 <MX_TIM2_Init+0xb8>)
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 f826 	bl	8001e24 <HAL_TIM_MspPostInit>

}
 8001dd8:	46c0      	nop			@ (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b00a      	add	sp, #40	@ 0x28
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	200006e8 	.word	0x200006e8
 8001de4:	000186a0 	.word	0x000186a0
 8001de8:	00003a98 	.word	0x00003a98

08001dec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	05db      	lsls	r3, r3, #23
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d10b      	bne.n	8001e18 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e00:	4b07      	ldr	r3, [pc, #28]	@ (8001e20 <HAL_TIM_PWM_MspInit+0x34>)
 8001e02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_TIM_PWM_MspInit+0x34>)
 8001e06:	2101      	movs	r1, #1
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e0c:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <HAL_TIM_PWM_MspInit+0x34>)
 8001e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e10:	2201      	movs	r2, #1
 8001e12:	4013      	ands	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e18:	46c0      	nop			@ (mov r8, r8)
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b004      	add	sp, #16
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000

08001e24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e24:	b590      	push	{r4, r7, lr}
 8001e26:	b089      	sub	sp, #36	@ 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	240c      	movs	r4, #12
 8001e2e:	193b      	adds	r3, r7, r4
 8001e30:	0018      	movs	r0, r3
 8001e32:	2314      	movs	r3, #20
 8001e34:	001a      	movs	r2, r3
 8001e36:	2100      	movs	r1, #0
 8001e38:	f005 fe16 	bl	8007a68 <memset>
  if(timHandle->Instance==TIM2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	@ 0x80
 8001e42:	05db      	lsls	r3, r3, #23
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d121      	bne.n	8001e8c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e48:	4b12      	ldr	r3, [pc, #72]	@ (8001e94 <HAL_TIM_MspPostInit+0x70>)
 8001e4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <HAL_TIM_MspPostInit+0x70>)
 8001e4e:	2104      	movs	r1, #4
 8001e50:	430a      	orrs	r2, r1
 8001e52:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e54:	4b0f      	ldr	r3, [pc, #60]	@ (8001e94 <HAL_TIM_MspPostInit+0x70>)
 8001e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e58:	2204      	movs	r2, #4
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e60:	0021      	movs	r1, r4
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	2240      	movs	r2, #64	@ 0x40
 8001e66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	187b      	adds	r3, r7, r1
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	187b      	adds	r3, r7, r1
 8001e76:	2200      	movs	r2, #0
 8001e78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM2;
 8001e7a:	187b      	adds	r3, r7, r1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e80:	187b      	adds	r3, r7, r1
 8001e82:	4a05      	ldr	r2, [pc, #20]	@ (8001e98 <HAL_TIM_MspPostInit+0x74>)
 8001e84:	0019      	movs	r1, r3
 8001e86:	0010      	movs	r0, r2
 8001e88:	f001 fb90 	bl	80035ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e8c:	46c0      	nop			@ (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b009      	add	sp, #36	@ 0x24
 8001e92:	bd90      	pop	{r4, r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	50000800 	.word	0x50000800

08001e9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ea0:	4b23      	ldr	r3, [pc, #140]	@ (8001f30 <MX_USART2_UART_Init+0x94>)
 8001ea2:	4a24      	ldr	r2, [pc, #144]	@ (8001f34 <MX_USART2_UART_Init+0x98>)
 8001ea4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ea6:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <MX_USART2_UART_Init+0x94>)
 8001ea8:	22e1      	movs	r2, #225	@ 0xe1
 8001eaa:	0252      	lsls	r2, r2, #9
 8001eac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eae:	4b20      	ldr	r3, [pc, #128]	@ (8001f30 <MX_USART2_UART_Init+0x94>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <MX_USART2_UART_Init+0x94>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eba:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <MX_USART2_UART_Init+0x94>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <MX_USART2_UART_Init+0x94>)
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <MX_USART2_UART_Init+0x94>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <MX_USART2_UART_Init+0x94>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ed2:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <MX_USART2_UART_Init+0x94>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ed8:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <MX_USART2_UART_Init+0x94>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ede:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <MX_USART2_UART_Init+0x94>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ee4:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <MX_USART2_UART_Init+0x94>)
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f005 f868 	bl	8006fbc <HAL_UART_Init>
 8001eec:	1e03      	subs	r3, r0, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ef0:	f7ff f8e9 	bl	80010c6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f30 <MX_USART2_UART_Init+0x94>)
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f005 fca1 	bl	8007840 <HAL_UARTEx_SetTxFifoThreshold>
 8001efe:	1e03      	subs	r3, r0, #0
 8001f00:	d001      	beq.n	8001f06 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f02:	f7ff f8e0 	bl	80010c6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f06:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <MX_USART2_UART_Init+0x94>)
 8001f08:	2100      	movs	r1, #0
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f005 fcd8 	bl	80078c0 <HAL_UARTEx_SetRxFifoThreshold>
 8001f10:	1e03      	subs	r3, r0, #0
 8001f12:	d001      	beq.n	8001f18 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f14:	f7ff f8d7 	bl	80010c6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f18:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <MX_USART2_UART_Init+0x94>)
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f005 fc56 	bl	80077cc <HAL_UARTEx_DisableFifoMode>
 8001f20:	1e03      	subs	r3, r0, #0
 8001f22:	d001      	beq.n	8001f28 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f24:	f7ff f8cf 	bl	80010c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f28:	46c0      	nop			@ (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	20000734 	.word	0x20000734
 8001f34:	40004400 	.word	0x40004400

08001f38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b08b      	sub	sp, #44	@ 0x2c
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	2414      	movs	r4, #20
 8001f42:	193b      	adds	r3, r7, r4
 8001f44:	0018      	movs	r0, r3
 8001f46:	2314      	movs	r3, #20
 8001f48:	001a      	movs	r2, r3
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	f005 fd8c 	bl	8007a68 <memset>
  if(uartHandle->Instance==USART2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc4 <HAL_UART_MspInit+0x8c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d130      	bne.n	8001fbc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc8 <HAL_UART_MspInit+0x90>)
 8001f5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <HAL_UART_MspInit+0x90>)
 8001f60:	2180      	movs	r1, #128	@ 0x80
 8001f62:	0289      	lsls	r1, r1, #10
 8001f64:	430a      	orrs	r2, r1
 8001f66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f68:	4b17      	ldr	r3, [pc, #92]	@ (8001fc8 <HAL_UART_MspInit+0x90>)
 8001f6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f6c:	2380      	movs	r3, #128	@ 0x80
 8001f6e:	029b      	lsls	r3, r3, #10
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	4b14      	ldr	r3, [pc, #80]	@ (8001fc8 <HAL_UART_MspInit+0x90>)
 8001f78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f7a:	4b13      	ldr	r3, [pc, #76]	@ (8001fc8 <HAL_UART_MspInit+0x90>)
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f82:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <HAL_UART_MspInit+0x90>)
 8001f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f86:	2201      	movs	r2, #1
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f8e:	0021      	movs	r1, r4
 8001f90:	187b      	adds	r3, r7, r1
 8001f92:	220c      	movs	r2, #12
 8001f94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	187b      	adds	r3, r7, r1
 8001f98:	2202      	movs	r2, #2
 8001f9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa2:	187b      	adds	r3, r7, r1
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001fa8:	187b      	adds	r3, r7, r1
 8001faa:	2201      	movs	r2, #1
 8001fac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fae:	187a      	adds	r2, r7, r1
 8001fb0:	23a0      	movs	r3, #160	@ 0xa0
 8001fb2:	05db      	lsls	r3, r3, #23
 8001fb4:	0011      	movs	r1, r2
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f001 faf8 	bl	80035ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fbc:	46c0      	nop			@ (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b00b      	add	sp, #44	@ 0x2c
 8001fc2:	bd90      	pop	{r4, r7, pc}
 8001fc4:	40004400 	.word	0x40004400
 8001fc8:	40021000 	.word	0x40021000

08001fcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fcc:	480d      	ldr	r0, [pc, #52]	@ (8002004 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fd0:	f7ff fd4a 	bl	8001a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001fd4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001fd6:	e003      	b.n	8001fe0 <LoopCopyDataInit>

08001fd8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001fda:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001fdc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001fde:	3104      	adds	r1, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001fe0:	480a      	ldr	r0, [pc, #40]	@ (800200c <LoopForever+0xa>)
  ldr r3, =_edata
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <LoopForever+0xe>)
  adds r2, r0, r1
 8001fe4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001fe6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001fe8:	d3f6      	bcc.n	8001fd8 <CopyDataInit>
  ldr r2, =_sbss
 8001fea:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <LoopForever+0x12>)
  b LoopFillZerobss
 8001fec:	e002      	b.n	8001ff4 <LoopFillZerobss>

08001fee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  str  r3, [r2]
 8001ff0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff2:	3204      	adds	r2, #4

08001ff4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001ff4:	4b08      	ldr	r3, [pc, #32]	@ (8002018 <LoopForever+0x16>)
  cmp r2, r3
 8001ff6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ff8:	d3f9      	bcc.n	8001fee <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001ffa:	f005 fd43 	bl	8007a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ffe:	f7ff f809 	bl	8001014 <main>

08002002 <LoopForever>:

LoopForever:
    b LoopForever
 8002002:	e7fe      	b.n	8002002 <LoopForever>
  ldr   r0, =_estack
 8002004:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8002008:	08008cb4 	.word	0x08008cb4
  ldr r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002010:	200000c8 	.word	0x200000c8
  ldr r2, =_sbss
 8002014:	200000c8 	.word	0x200000c8
  ldr r3, = _ebss
 8002018:	20000914 	.word	0x20000914

0800201c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC1_IRQHandler>

0800201e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002024:	1dfb      	adds	r3, r7, #7
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800202a:	2003      	movs	r0, #3
 800202c:	f000 f80e 	bl	800204c <HAL_InitTick>
 8002030:	1e03      	subs	r3, r0, #0
 8002032:	d003      	beq.n	800203c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002034:	1dfb      	adds	r3, r7, #7
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	e001      	b.n	8002040 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800203c:	f7ff fc66 	bl	800190c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002040:	1dfb      	adds	r3, r7, #7
 8002042:	781b      	ldrb	r3, [r3, #0]
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	b002      	add	sp, #8
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002054:	230f      	movs	r3, #15
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 800205c:	4b1d      	ldr	r3, [pc, #116]	@ (80020d4 <HAL_InitTick+0x88>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d02b      	beq.n	80020bc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002064:	4b1c      	ldr	r3, [pc, #112]	@ (80020d8 <HAL_InitTick+0x8c>)
 8002066:	681c      	ldr	r4, [r3, #0]
 8002068:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <HAL_InitTick+0x88>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	0019      	movs	r1, r3
 800206e:	23fa      	movs	r3, #250	@ 0xfa
 8002070:	0098      	lsls	r0, r3, #2
 8002072:	f7fe f853 	bl	800011c <__udivsi3>
 8002076:	0003      	movs	r3, r0
 8002078:	0019      	movs	r1, r3
 800207a:	0020      	movs	r0, r4
 800207c:	f7fe f84e 	bl	800011c <__udivsi3>
 8002080:	0003      	movs	r3, r0
 8002082:	0018      	movs	r0, r3
 8002084:	f000 ffab 	bl	8002fde <HAL_SYSTICK_Config>
 8002088:	1e03      	subs	r3, r0, #0
 800208a:	d112      	bne.n	80020b2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b03      	cmp	r3, #3
 8002090:	d80a      	bhi.n	80020a8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	2301      	movs	r3, #1
 8002096:	425b      	negs	r3, r3
 8002098:	2200      	movs	r2, #0
 800209a:	0018      	movs	r0, r3
 800209c:	f000 ff7a 	bl	8002f94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020a0:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <HAL_InitTick+0x90>)
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	e00d      	b.n	80020c4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80020a8:	230f      	movs	r3, #15
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	e008      	b.n	80020c4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020b2:	230f      	movs	r3, #15
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e003      	b.n	80020c4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020bc:	230f      	movs	r3, #15
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80020c4:	230f      	movs	r3, #15
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	781b      	ldrb	r3, [r3, #0]
}
 80020ca:	0018      	movs	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b005      	add	sp, #20
 80020d0:	bd90      	pop	{r4, r7, pc}
 80020d2:	46c0      	nop			@ (mov r8, r8)
 80020d4:	20000074 	.word	0x20000074
 80020d8:	20000068 	.word	0x20000068
 80020dc:	20000070 	.word	0x20000070

080020e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020e4:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <HAL_IncTick+0x1c>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	001a      	movs	r2, r3
 80020ea:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <HAL_IncTick+0x20>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	18d2      	adds	r2, r2, r3
 80020f0:	4b03      	ldr	r3, [pc, #12]	@ (8002100 <HAL_IncTick+0x20>)
 80020f2:	601a      	str	r2, [r3, #0]
}
 80020f4:	46c0      	nop			@ (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	20000074 	.word	0x20000074
 8002100:	200007c8 	.word	0x200007c8

08002104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  return uwTick;
 8002108:	4b02      	ldr	r3, [pc, #8]	@ (8002114 <HAL_GetTick+0x10>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	200007c8 	.word	0x200007c8

08002118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff fff0 	bl	8002104 <HAL_GetTick>
 8002124:	0003      	movs	r3, r0
 8002126:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3301      	adds	r3, #1
 8002130:	d005      	beq.n	800213e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002132:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <HAL_Delay+0x44>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	001a      	movs	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	189b      	adds	r3, r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800213e:	46c0      	nop			@ (mov r8, r8)
 8002140:	f7ff ffe0 	bl	8002104 <HAL_GetTick>
 8002144:	0002      	movs	r2, r0
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	429a      	cmp	r2, r3
 800214e:	d8f7      	bhi.n	8002140 <HAL_Delay+0x28>
  {
  }
}
 8002150:	46c0      	nop			@ (mov r8, r8)
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	46bd      	mov	sp, r7
 8002156:	b004      	add	sp, #16
 8002158:	bd80      	pop	{r7, pc}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	20000074 	.word	0x20000074

08002160 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002170:	401a      	ands	r2, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	601a      	str	r2, [r3, #0]
}
 800217a:	46c0      	nop			@ (mov r8, r8)
 800217c:	46bd      	mov	sp, r7
 800217e:	b002      	add	sp, #8
 8002180:	bd80      	pop	{r7, pc}
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	ff3fffff 	.word	0xff3fffff

08002188 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	23c0      	movs	r3, #192	@ 0xc0
 8002196:	041b      	lsls	r3, r3, #16
 8002198:	4013      	ands	r3, r2
}
 800219a:	0018      	movs	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	b002      	add	sp, #8
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	2104      	movs	r1, #4
 80021b6:	400a      	ands	r2, r1
 80021b8:	2107      	movs	r1, #7
 80021ba:	4091      	lsls	r1, r2
 80021bc:	000a      	movs	r2, r1
 80021be:	43d2      	mvns	r2, r2
 80021c0:	401a      	ands	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2104      	movs	r1, #4
 80021c6:	400b      	ands	r3, r1
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4099      	lsls	r1, r3
 80021cc:	000b      	movs	r3, r1
 80021ce:	431a      	orrs	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80021d4:	46c0      	nop			@ (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b004      	add	sp, #16
 80021da:	bd80      	pop	{r7, pc}

080021dc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	2104      	movs	r1, #4
 80021ee:	400a      	ands	r2, r1
 80021f0:	2107      	movs	r1, #7
 80021f2:	4091      	lsls	r1, r2
 80021f4:	000a      	movs	r2, r1
 80021f6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2104      	movs	r1, #4
 80021fc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80021fe:	40da      	lsrs	r2, r3
 8002200:	0013      	movs	r3, r2
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b002      	add	sp, #8
 8002208:	bd80      	pop	{r7, pc}

0800220a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	23c0      	movs	r3, #192	@ 0xc0
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	4013      	ands	r3, r2
 800221c:	d101      	bne.n	8002222 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002222:	2300      	movs	r3, #0
}
 8002224:	0018      	movs	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	b002      	add	sp, #8
 800222a:	bd80      	pop	{r7, pc}

0800222c <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	211f      	movs	r1, #31
 8002240:	400a      	ands	r2, r1
 8002242:	210f      	movs	r1, #15
 8002244:	4091      	lsls	r1, r2
 8002246:	000a      	movs	r2, r1
 8002248:	43d2      	mvns	r2, r2
 800224a:	401a      	ands	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0e9b      	lsrs	r3, r3, #26
 8002250:	210f      	movs	r1, #15
 8002252:	4019      	ands	r1, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	201f      	movs	r0, #31
 8002258:	4003      	ands	r3, r0
 800225a:	4099      	lsls	r1, r3
 800225c:	000b      	movs	r3, r1
 800225e:	431a      	orrs	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002264:	46c0      	nop			@ (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b004      	add	sp, #16
 800226a:	bd80      	pop	{r7, pc}

0800226c <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	025b      	lsls	r3, r3, #9
 800227e:	0a5b      	lsrs	r3, r3, #9
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002286:	46c0      	nop			@ (mov r8, r8)
 8002288:	46bd      	mov	sp, r7
 800228a:	b002      	add	sp, #8
 800228c:	bd80      	pop	{r7, pc}

0800228e <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	0252      	lsls	r2, r2, #9
 80022a0:	0a52      	lsrs	r2, r2, #9
 80022a2:	43d2      	mvns	r2, r2
 80022a4:	401a      	ands	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022aa:	46c0      	nop			@ (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b002      	add	sp, #8
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	0212      	lsls	r2, r2, #8
 80022c8:	43d2      	mvns	r2, r2
 80022ca:	401a      	ands	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	400b      	ands	r3, r1
 80022d4:	4904      	ldr	r1, [pc, #16]	@ (80022e8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80022d6:	400b      	ands	r3, r1
 80022d8:	431a      	orrs	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b004      	add	sp, #16
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			@ (mov r8, r8)
 80022e8:	7fffff00 	.word	0x7fffff00

080022ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	4a05      	ldr	r2, [pc, #20]	@ (8002310 <LL_ADC_EnableInternalRegulator+0x24>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	2280      	movs	r2, #128	@ 0x80
 80022fe:	0552      	lsls	r2, r2, #21
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002306:	46c0      	nop			@ (mov r8, r8)
 8002308:	46bd      	mov	sp, r7
 800230a:	b002      	add	sp, #8
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			@ (mov r8, r8)
 8002310:	6fffffe8 	.word	0x6fffffe8

08002314 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	055b      	lsls	r3, r3, #21
 8002324:	401a      	ands	r2, r3
 8002326:	2380      	movs	r3, #128	@ 0x80
 8002328:	055b      	lsls	r3, r3, #21
 800232a:	429a      	cmp	r2, r3
 800232c:	d101      	bne.n	8002332 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002332:	2300      	movs	r3, #0
}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}

0800233c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a04      	ldr	r2, [pc, #16]	@ (800235c <LL_ADC_Enable+0x20>)
 800234a:	4013      	ands	r3, r2
 800234c:	2201      	movs	r2, #1
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002354:	46c0      	nop			@ (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	b002      	add	sp, #8
 800235a:	bd80      	pop	{r7, pc}
 800235c:	7fffffe8 	.word	0x7fffffe8

08002360 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4a04      	ldr	r2, [pc, #16]	@ (8002380 <LL_ADC_Disable+0x20>)
 800236e:	4013      	ands	r3, r2
 8002370:	2202      	movs	r2, #2
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002378:	46c0      	nop			@ (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}
 8002380:	7fffffe8 	.word	0x7fffffe8

08002384 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2201      	movs	r2, #1
 8002392:	4013      	ands	r3, r2
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <LL_ADC_IsEnabled+0x18>
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <LL_ADC_IsEnabled+0x1a>
 800239c:	2300      	movs	r3, #0
}
 800239e:	0018      	movs	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b002      	add	sp, #8
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4a04      	ldr	r2, [pc, #16]	@ (80023c8 <LL_ADC_REG_StartConversion+0x20>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	2204      	movs	r2, #4
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023c0:	46c0      	nop			@ (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	7fffffe8 	.word	0x7fffffe8

080023cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2204      	movs	r2, #4
 80023da:	4013      	ands	r3, r2
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d101      	bne.n	80023e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	0018      	movs	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b002      	add	sp, #8
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f8:	231f      	movs	r3, #31
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e17e      	b.n	8002714 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10a      	bne.n	8002434 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	0018      	movs	r0, r3
 8002422:	f7fe f877 	bl	8000514 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2254      	movs	r2, #84	@ 0x54
 8002430:	2100      	movs	r1, #0
 8002432:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	0018      	movs	r0, r3
 800243a:	f7ff ff6b 	bl	8002314 <LL_ADC_IsInternalRegulatorEnabled>
 800243e:	1e03      	subs	r3, r0, #0
 8002440:	d114      	bne.n	800246c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0018      	movs	r0, r3
 8002448:	f7ff ff50 	bl	80022ec <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800244c:	4bb3      	ldr	r3, [pc, #716]	@ (800271c <HAL_ADC_Init+0x32c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	49b3      	ldr	r1, [pc, #716]	@ (8002720 <HAL_ADC_Init+0x330>)
 8002452:	0018      	movs	r0, r3
 8002454:	f7fd fe62 	bl	800011c <__udivsi3>
 8002458:	0003      	movs	r3, r0
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800245e:	e002      	b.n	8002466 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3b01      	subs	r3, #1
 8002464:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f9      	bne.n	8002460 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0018      	movs	r0, r3
 8002472:	f7ff ff4f 	bl	8002314 <LL_ADC_IsInternalRegulatorEnabled>
 8002476:	1e03      	subs	r3, r0, #0
 8002478:	d10f      	bne.n	800249a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247e:	2210      	movs	r2, #16
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248a:	2201      	movs	r2, #1
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002492:	231f      	movs	r3, #31
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	0018      	movs	r0, r3
 80024a0:	f7ff ff94 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 80024a4:	0003      	movs	r3, r0
 80024a6:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ac:	2210      	movs	r2, #16
 80024ae:	4013      	ands	r3, r2
 80024b0:	d000      	beq.n	80024b4 <HAL_ADC_Init+0xc4>
 80024b2:	e122      	b.n	80026fa <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d000      	beq.n	80024bc <HAL_ADC_Init+0xcc>
 80024ba:	e11e      	b.n	80026fa <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c0:	4a98      	ldr	r2, [pc, #608]	@ (8002724 <HAL_ADC_Init+0x334>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	2202      	movs	r2, #2
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f7ff ff57 	bl	8002384 <LL_ADC_IsEnabled>
 80024d6:	1e03      	subs	r3, r0, #0
 80024d8:	d000      	beq.n	80024dc <HAL_ADC_Init+0xec>
 80024da:	e0ad      	b.n	8002638 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7e1b      	ldrb	r3, [r3, #24]
 80024e4:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80024e6:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7e5b      	ldrb	r3, [r3, #25]
 80024ec:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80024ee:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	7e9b      	ldrb	r3, [r3, #26]
 80024f4:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80024f6:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_ADC_Init+0x116>
 8002500:	2380      	movs	r3, #128	@ 0x80
 8002502:	015b      	lsls	r3, r3, #5
 8002504:	e000      	b.n	8002508 <HAL_ADC_Init+0x118>
 8002506:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002508:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800250e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	da04      	bge.n	8002522 <HAL_ADC_Init+0x132>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	085b      	lsrs	r3, r3, #1
 8002520:	e001      	b.n	8002526 <HAL_ADC_Init+0x136>
 8002522:	2380      	movs	r3, #128	@ 0x80
 8002524:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002526:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	212c      	movs	r1, #44	@ 0x2c
 800252c:	5c5b      	ldrb	r3, [r3, r1]
 800252e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002530:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2220      	movs	r2, #32
 800253c:	5c9b      	ldrb	r3, [r3, r2]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d115      	bne.n	800256e <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	7e9b      	ldrb	r3, [r3, #26]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d105      	bne.n	8002556 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2280      	movs	r2, #128	@ 0x80
 800254e:	0252      	lsls	r2, r2, #9
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	e00b      	b.n	800256e <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255a:	2220      	movs	r2, #32
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002566:	2201      	movs	r2, #1
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800257a:	23e0      	movs	r3, #224	@ 0xe0
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002584:	4313      	orrs	r3, r2
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	4a65      	ldr	r2, [pc, #404]	@ (8002728 <HAL_ADC_Init+0x338>)
 8002594:	4013      	ands	r3, r2
 8002596:	0019      	movs	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	430a      	orrs	r2, r1
 80025a0:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	0f9b      	lsrs	r3, r3, #30
 80025a8:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025ae:	4313      	orrs	r3, r2
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	223c      	movs	r2, #60	@ 0x3c
 80025ba:	5c9b      	ldrb	r3, [r3, r2]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d111      	bne.n	80025e4 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	0f9b      	lsrs	r3, r3, #30
 80025c6:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025cc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80025d2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80025d8:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	2201      	movs	r2, #1
 80025e0:	4313      	orrs	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	4a50      	ldr	r2, [pc, #320]	@ (800272c <HAL_ADC_Init+0x33c>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	0019      	movs	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	23c0      	movs	r3, #192	@ 0xc0
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	429a      	cmp	r2, r3
 8002604:	d018      	beq.n	8002638 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800260a:	2380      	movs	r3, #128	@ 0x80
 800260c:	05db      	lsls	r3, r3, #23
 800260e:	429a      	cmp	r2, r3
 8002610:	d012      	beq.n	8002638 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002616:	2380      	movs	r3, #128	@ 0x80
 8002618:	061b      	lsls	r3, r3, #24
 800261a:	429a      	cmp	r2, r3
 800261c:	d00c      	beq.n	8002638 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800261e:	4b44      	ldr	r3, [pc, #272]	@ (8002730 <HAL_ADC_Init+0x340>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a44      	ldr	r2, [pc, #272]	@ (8002734 <HAL_ADC_Init+0x344>)
 8002624:	4013      	ands	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	23f0      	movs	r3, #240	@ 0xf0
 800262e:	039b      	lsls	r3, r3, #14
 8002630:	401a      	ands	r2, r3
 8002632:	4b3f      	ldr	r3, [pc, #252]	@ (8002730 <HAL_ADC_Init+0x340>)
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002640:	001a      	movs	r2, r3
 8002642:	2100      	movs	r1, #0
 8002644:	f7ff fdad 	bl	80021a2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002650:	4939      	ldr	r1, [pc, #228]	@ (8002738 <HAL_ADC_Init+0x348>)
 8002652:	001a      	movs	r2, r3
 8002654:	f7ff fda5 	bl	80021a2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2110      	movs	r1, #16
 800266c:	4249      	negs	r1, r1
 800266e:	430a      	orrs	r2, r1
 8002670:	629a      	str	r2, [r3, #40]	@ 0x28
 8002672:	e018      	b.n	80026a6 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	2380      	movs	r3, #128	@ 0x80
 800267a:	039b      	lsls	r3, r3, #14
 800267c:	429a      	cmp	r2, r3
 800267e:	d112      	bne.n	80026a6 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	3b01      	subs	r3, #1
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	221c      	movs	r2, #28
 8002690:	4013      	ands	r3, r2
 8002692:	2210      	movs	r2, #16
 8002694:	4252      	negs	r2, r2
 8002696:	409a      	lsls	r2, r3
 8002698:	0011      	movs	r1, r2
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2100      	movs	r1, #0
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7ff fd95 	bl	80021dc <LL_ADC_GetSamplingTimeCommonChannels>
 80026b2:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d10b      	bne.n	80026d4 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c6:	2203      	movs	r2, #3
 80026c8:	4393      	bics	r3, r2
 80026ca:	2201      	movs	r2, #1
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026d2:	e01c      	b.n	800270e <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d8:	2212      	movs	r2, #18
 80026da:	4393      	bics	r3, r2
 80026dc:	2210      	movs	r2, #16
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e8:	2201      	movs	r2, #1
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80026f0:	231f      	movs	r3, #31
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026f8:	e009      	b.n	800270e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fe:	2210      	movs	r2, #16
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002706:	231f      	movs	r3, #31
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800270e:	231f      	movs	r3, #31
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	781b      	ldrb	r3, [r3, #0]
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b008      	add	sp, #32
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000068 	.word	0x20000068
 8002720:	00030d40 	.word	0x00030d40
 8002724:	fffffefd 	.word	0xfffffefd
 8002728:	ffde0201 	.word	0xffde0201
 800272c:	1ffffc02 	.word	0x1ffffc02
 8002730:	40012708 	.word	0x40012708
 8002734:	ffc3ffff 	.word	0xffc3ffff
 8002738:	7fffff04 	.word	0x7fffff04

0800273c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800273c:	b5b0      	push	{r4, r5, r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0018      	movs	r0, r3
 800274e:	f7ff fe3d 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 8002752:	1e03      	subs	r3, r0, #0
 8002754:	d16c      	bne.n	8002830 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2254      	movs	r2, #84	@ 0x54
 800275a:	5c9b      	ldrb	r3, [r3, r2]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_ADC_Start_DMA+0x28>
 8002760:	2302      	movs	r3, #2
 8002762:	e06c      	b.n	800283e <HAL_ADC_Start_DMA+0x102>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2254      	movs	r2, #84	@ 0x54
 8002768:	2101      	movs	r1, #1
 800276a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	4013      	ands	r3, r2
 8002776:	d113      	bne.n	80027a0 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	0018      	movs	r0, r3
 800277e:	f7ff fe01 	bl	8002384 <LL_ADC_IsEnabled>
 8002782:	1e03      	subs	r3, r0, #0
 8002784:	d004      	beq.n	8002790 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	0018      	movs	r0, r3
 800278c:	f7ff fde8 	bl	8002360 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2101      	movs	r1, #1
 800279c:	430a      	orrs	r2, r1
 800279e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027a0:	2517      	movs	r5, #23
 80027a2:	197c      	adds	r4, r7, r5
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	0018      	movs	r0, r3
 80027a8:	f000 fa3c 	bl	8002c24 <ADC_Enable>
 80027ac:	0003      	movs	r3, r0
 80027ae:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027b0:	002c      	movs	r4, r5
 80027b2:	193b      	adds	r3, r7, r4
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d13e      	bne.n	8002838 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027be:	4a22      	ldr	r2, [pc, #136]	@ (8002848 <HAL_ADC_Start_DMA+0x10c>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	2280      	movs	r2, #128	@ 0x80
 80027c4:	0052      	lsls	r2, r2, #1
 80027c6:	431a      	orrs	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d6:	4a1d      	ldr	r2, [pc, #116]	@ (800284c <HAL_ADC_Start_DMA+0x110>)
 80027d8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027de:	4a1c      	ldr	r2, [pc, #112]	@ (8002850 <HAL_ADC_Start_DMA+0x114>)
 80027e0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002854 <HAL_ADC_Start_DMA+0x118>)
 80027e8:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	221c      	movs	r2, #28
 80027f0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2254      	movs	r2, #84	@ 0x54
 80027f6:	2100      	movs	r1, #0
 80027f8:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2110      	movs	r1, #16
 8002806:	430a      	orrs	r2, r1
 8002808:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3340      	adds	r3, #64	@ 0x40
 8002814:	0019      	movs	r1, r3
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	193c      	adds	r4, r7, r4
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f000 fc76 	bl	800310c <HAL_DMA_Start_IT>
 8002820:	0003      	movs	r3, r0
 8002822:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	0018      	movs	r0, r3
 800282a:	f7ff fdbd 	bl	80023a8 <LL_ADC_REG_StartConversion>
 800282e:	e003      	b.n	8002838 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002830:	2317      	movs	r3, #23
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	2202      	movs	r2, #2
 8002836:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002838:	2317      	movs	r3, #23
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	781b      	ldrb	r3, [r3, #0]
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b006      	add	sp, #24
 8002844:	bdb0      	pop	{r4, r5, r7, pc}
 8002846:	46c0      	nop			@ (mov r8, r8)
 8002848:	fffff0fe 	.word	0xfffff0fe
 800284c:	08002d21 	.word	0x08002d21
 8002850:	08002de9 	.word	0x08002de9
 8002854:	08002e07 	.word	0x08002e07

08002858 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002860:	46c0      	nop			@ (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	b002      	add	sp, #8
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002870:	46c0      	nop			@ (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	b002      	add	sp, #8
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002882:	2317      	movs	r3, #23
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2254      	movs	r2, #84	@ 0x54
 8002892:	5c9b      	ldrb	r3, [r3, r2]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_ADC_ConfigChannel+0x24>
 8002898:	2302      	movs	r3, #2
 800289a:	e1be      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x3a2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2254      	movs	r2, #84	@ 0x54
 80028a0:	2101      	movs	r1, #1
 80028a2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7ff fd8f 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 80028ae:	1e03      	subs	r3, r0, #0
 80028b0:	d000      	beq.n	80028b4 <HAL_ADC_ConfigChannel+0x3c>
 80028b2:	e1a1      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d100      	bne.n	80028be <HAL_ADC_ConfigChannel+0x46>
 80028bc:	e152      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	2380      	movs	r3, #128	@ 0x80
 80028c4:	061b      	lsls	r3, r3, #24
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d004      	beq.n	80028d4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80028ce:	4ac2      	ldr	r2, [pc, #776]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x360>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d108      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	0019      	movs	r1, r3
 80028de:	0010      	movs	r0, r2
 80028e0:	f7ff fcc4 	bl	800226c <LL_ADC_REG_SetSequencerChAdd>
 80028e4:	e0ed      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	211f      	movs	r1, #31
 80028f0:	400b      	ands	r3, r1
 80028f2:	210f      	movs	r1, #15
 80028f4:	4099      	lsls	r1, r3
 80028f6:	000b      	movs	r3, r1
 80028f8:	43db      	mvns	r3, r3
 80028fa:	4013      	ands	r3, r2
 80028fc:	0019      	movs	r1, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	025b      	lsls	r3, r3, #9
 8002904:	0a5b      	lsrs	r3, r3, #9
 8002906:	d105      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x9c>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0e9b      	lsrs	r3, r3, #26
 800290e:	221f      	movs	r2, #31
 8002910:	4013      	ands	r3, r2
 8002912:	e0bc      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2201      	movs	r2, #1
 800291a:	4013      	ands	r3, r2
 800291c:	d000      	beq.n	8002920 <HAL_ADC_ConfigChannel+0xa8>
 800291e:	e0b5      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x214>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2202      	movs	r2, #2
 8002926:	4013      	ands	r3, r2
 8002928:	d000      	beq.n	800292c <HAL_ADC_ConfigChannel+0xb4>
 800292a:	e0ad      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x210>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2204      	movs	r2, #4
 8002932:	4013      	ands	r3, r2
 8002934:	d000      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xc0>
 8002936:	e0a5      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x20c>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2208      	movs	r2, #8
 800293e:	4013      	ands	r3, r2
 8002940:	d000      	beq.n	8002944 <HAL_ADC_ConfigChannel+0xcc>
 8002942:	e09d      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x208>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2210      	movs	r2, #16
 800294a:	4013      	ands	r3, r2
 800294c:	d000      	beq.n	8002950 <HAL_ADC_ConfigChannel+0xd8>
 800294e:	e095      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x204>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2220      	movs	r2, #32
 8002956:	4013      	ands	r3, r2
 8002958:	d000      	beq.n	800295c <HAL_ADC_ConfigChannel+0xe4>
 800295a:	e08d      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x200>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2240      	movs	r2, #64	@ 0x40
 8002962:	4013      	ands	r3, r2
 8002964:	d000      	beq.n	8002968 <HAL_ADC_ConfigChannel+0xf0>
 8002966:	e085      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x1fc>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2280      	movs	r2, #128	@ 0x80
 800296e:	4013      	ands	r3, r2
 8002970:	d000      	beq.n	8002974 <HAL_ADC_ConfigChannel+0xfc>
 8002972:	e07d      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x1f8>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4013      	ands	r3, r2
 800297e:	d000      	beq.n	8002982 <HAL_ADC_ConfigChannel+0x10a>
 8002980:	e074      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x1f4>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	2380      	movs	r3, #128	@ 0x80
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4013      	ands	r3, r2
 800298c:	d000      	beq.n	8002990 <HAL_ADC_ConfigChannel+0x118>
 800298e:	e06b      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x1f0>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	2380      	movs	r3, #128	@ 0x80
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4013      	ands	r3, r2
 800299a:	d000      	beq.n	800299e <HAL_ADC_ConfigChannel+0x126>
 800299c:	e062      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x1ec>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	2380      	movs	r3, #128	@ 0x80
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	4013      	ands	r3, r2
 80029a8:	d000      	beq.n	80029ac <HAL_ADC_ConfigChannel+0x134>
 80029aa:	e059      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x1e8>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2380      	movs	r3, #128	@ 0x80
 80029b2:	015b      	lsls	r3, r3, #5
 80029b4:	4013      	ands	r3, r2
 80029b6:	d151      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x1e4>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	019b      	lsls	r3, r3, #6
 80029c0:	4013      	ands	r3, r2
 80029c2:	d149      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x1e0>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	2380      	movs	r3, #128	@ 0x80
 80029ca:	01db      	lsls	r3, r3, #7
 80029cc:	4013      	ands	r3, r2
 80029ce:	d141      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x1dc>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	@ 0x80
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	4013      	ands	r3, r2
 80029da:	d139      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x1d8>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	025b      	lsls	r3, r3, #9
 80029e4:	4013      	ands	r3, r2
 80029e6:	d131      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x1d4>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	2380      	movs	r3, #128	@ 0x80
 80029ee:	029b      	lsls	r3, r3, #10
 80029f0:	4013      	ands	r3, r2
 80029f2:	d129      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x1d0>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	@ 0x80
 80029fa:	02db      	lsls	r3, r3, #11
 80029fc:	4013      	ands	r3, r2
 80029fe:	d121      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x1cc>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	2380      	movs	r3, #128	@ 0x80
 8002a06:	031b      	lsls	r3, r3, #12
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d119      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x1c8>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	2380      	movs	r3, #128	@ 0x80
 8002a12:	035b      	lsls	r3, r3, #13
 8002a14:	4013      	ands	r3, r2
 8002a16:	d111      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x1c4>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	039b      	lsls	r3, r3, #14
 8002a20:	4013      	ands	r3, r2
 8002a22:	d109      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x1c0>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	2380      	movs	r3, #128	@ 0x80
 8002a2a:	03db      	lsls	r3, r3, #15
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d001      	beq.n	8002a34 <HAL_ADC_ConfigChannel+0x1bc>
 8002a30:	2316      	movs	r3, #22
 8002a32:	e02c      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a34:	2300      	movs	r3, #0
 8002a36:	e02a      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a38:	2315      	movs	r3, #21
 8002a3a:	e028      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a3c:	2314      	movs	r3, #20
 8002a3e:	e026      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a40:	2313      	movs	r3, #19
 8002a42:	e024      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a44:	2312      	movs	r3, #18
 8002a46:	e022      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a48:	2311      	movs	r3, #17
 8002a4a:	e020      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a4c:	2310      	movs	r3, #16
 8002a4e:	e01e      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a50:	230f      	movs	r3, #15
 8002a52:	e01c      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a54:	230e      	movs	r3, #14
 8002a56:	e01a      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a58:	230d      	movs	r3, #13
 8002a5a:	e018      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a5c:	230c      	movs	r3, #12
 8002a5e:	e016      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a60:	230b      	movs	r3, #11
 8002a62:	e014      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a64:	230a      	movs	r3, #10
 8002a66:	e012      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a68:	2309      	movs	r3, #9
 8002a6a:	e010      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a6c:	2308      	movs	r3, #8
 8002a6e:	e00e      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a70:	2307      	movs	r3, #7
 8002a72:	e00c      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a74:	2306      	movs	r3, #6
 8002a76:	e00a      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a78:	2305      	movs	r3, #5
 8002a7a:	e008      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a7c:	2304      	movs	r3, #4
 8002a7e:	e006      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a80:	2303      	movs	r3, #3
 8002a82:	e004      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e002      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x216>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	6852      	ldr	r2, [r2, #4]
 8002a92:	201f      	movs	r0, #31
 8002a94:	4002      	ands	r2, r0
 8002a96:	4093      	lsls	r3, r2
 8002a98:	000a      	movs	r2, r1
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d808      	bhi.n	8002ac2 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	001a      	movs	r2, r3
 8002abe:	f7ff fbb5 	bl	800222c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6819      	ldr	r1, [r3, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	001a      	movs	r2, r3
 8002ad0:	f7ff fbf0 	bl	80022b4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	db00      	blt.n	8002ade <HAL_ADC_ConfigChannel+0x266>
 8002adc:	e096      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ade:	4b3f      	ldr	r3, [pc, #252]	@ (8002bdc <HAL_ADC_ConfigChannel+0x364>)
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f7ff fb51 	bl	8002188 <LL_ADC_GetCommonPathInternalCh>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a3c      	ldr	r2, [pc, #240]	@ (8002be0 <HAL_ADC_ConfigChannel+0x368>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d123      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	2380      	movs	r3, #128	@ 0x80
 8002af8:	041b      	lsls	r3, r3, #16
 8002afa:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002afc:	d11e      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	2280      	movs	r2, #128	@ 0x80
 8002b02:	0412      	lsls	r2, r2, #16
 8002b04:	4313      	orrs	r3, r2
 8002b06:	4a35      	ldr	r2, [pc, #212]	@ (8002bdc <HAL_ADC_ConfigChannel+0x364>)
 8002b08:	0019      	movs	r1, r3
 8002b0a:	0010      	movs	r0, r2
 8002b0c:	f7ff fb28 	bl	8002160 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002b10:	4b34      	ldr	r3, [pc, #208]	@ (8002be4 <HAL_ADC_ConfigChannel+0x36c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4934      	ldr	r1, [pc, #208]	@ (8002be8 <HAL_ADC_ConfigChannel+0x370>)
 8002b16:	0018      	movs	r0, r3
 8002b18:	f7fd fb00 	bl	800011c <__udivsi3>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	001a      	movs	r2, r3
 8002b20:	0013      	movs	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	189b      	adds	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	3301      	adds	r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b2c:	e002      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f9      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b3a:	e067      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2a      	ldr	r2, [pc, #168]	@ (8002bec <HAL_ADC_ConfigChannel+0x374>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d162      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	2380      	movs	r3, #128	@ 0x80
 8002b4a:	03db      	lsls	r3, r3, #15
 8002b4c:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002b4e:	d15d      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2280      	movs	r2, #128	@ 0x80
 8002b54:	03d2      	lsls	r2, r2, #15
 8002b56:	4313      	orrs	r3, r2
 8002b58:	4a20      	ldr	r2, [pc, #128]	@ (8002bdc <HAL_ADC_ConfigChannel+0x364>)
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	0010      	movs	r0, r2
 8002b5e:	f7ff faff 	bl	8002160 <LL_ADC_SetCommonPathInternalCh>
 8002b62:	e053      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	2380      	movs	r3, #128	@ 0x80
 8002b6a:	061b      	lsls	r3, r3, #24
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d004      	beq.n	8002b7a <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b74:	4a18      	ldr	r2, [pc, #96]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x360>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d107      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	0019      	movs	r1, r3
 8002b84:	0010      	movs	r0, r2
 8002b86:	f7ff fb82 	bl	800228e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	da3c      	bge.n	8002c0c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b92:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <HAL_ADC_ConfigChannel+0x364>)
 8002b94:	0018      	movs	r0, r3
 8002b96:	f7ff faf7 	bl	8002188 <LL_ADC_GetCommonPathInternalCh>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8002be0 <HAL_ADC_ConfigChannel+0x368>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d108      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4a11      	ldr	r2, [pc, #68]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x378>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	4a0b      	ldr	r2, [pc, #44]	@ (8002bdc <HAL_ADC_ConfigChannel+0x364>)
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	0010      	movs	r0, r2
 8002bb4:	f7ff fad4 	bl	8002160 <LL_ADC_SetCommonPathInternalCh>
 8002bb8:	e028      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a0b      	ldr	r2, [pc, #44]	@ (8002bec <HAL_ADC_ConfigChannel+0x374>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d123      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4a0b      	ldr	r2, [pc, #44]	@ (8002bf4 <HAL_ADC_ConfigChannel+0x37c>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	4a04      	ldr	r2, [pc, #16]	@ (8002bdc <HAL_ADC_ConfigChannel+0x364>)
 8002bcc:	0019      	movs	r1, r3
 8002bce:	0010      	movs	r0, r2
 8002bd0:	f7ff fac6 	bl	8002160 <LL_ADC_SetCommonPathInternalCh>
 8002bd4:	e01a      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x394>
 8002bd6:	46c0      	nop			@ (mov r8, r8)
 8002bd8:	80000004 	.word	0x80000004
 8002bdc:	40012708 	.word	0x40012708
 8002be0:	a4000200 	.word	0xa4000200
 8002be4:	20000068 	.word	0x20000068
 8002be8:	00030d40 	.word	0x00030d40
 8002bec:	a8000400 	.word	0xa8000400
 8002bf0:	ff7fffff 	.word	0xff7fffff
 8002bf4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002c04:	2317      	movs	r3, #23
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2254      	movs	r2, #84	@ 0x54
 8002c10:	2100      	movs	r1, #0
 8002c12:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002c14:	2317      	movs	r3, #23
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	781b      	ldrb	r3, [r3, #0]
}
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b006      	add	sp, #24
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	46c0      	nop			@ (mov r8, r8)

08002c24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	0018      	movs	r0, r3
 8002c36:	f7ff fba5 	bl	8002384 <LL_ADC_IsEnabled>
 8002c3a:	1e03      	subs	r3, r0, #0
 8002c3c:	d162      	bne.n	8002d04 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4a32      	ldr	r2, [pc, #200]	@ (8002d10 <ADC_Enable+0xec>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	d00d      	beq.n	8002c66 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4e:	2210      	movs	r2, #16
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e04f      	b.n	8002d06 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f7ff fb66 	bl	800233c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002c70:	4b28      	ldr	r3, [pc, #160]	@ (8002d14 <ADC_Enable+0xf0>)
 8002c72:	0018      	movs	r0, r3
 8002c74:	f7ff fa88 	bl	8002188 <LL_ADC_GetCommonPathInternalCh>
 8002c78:	0002      	movs	r2, r0
 8002c7a:	2380      	movs	r3, #128	@ 0x80
 8002c7c:	041b      	lsls	r3, r3, #16
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d00f      	beq.n	8002ca2 <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c82:	4b25      	ldr	r3, [pc, #148]	@ (8002d18 <ADC_Enable+0xf4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4925      	ldr	r1, [pc, #148]	@ (8002d1c <ADC_Enable+0xf8>)
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7fd fa47 	bl	800011c <__udivsi3>
 8002c8e:	0003      	movs	r3, r0
 8002c90:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002c92:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c94:	e002      	b.n	8002c9c <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f9      	bne.n	8002c96 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	7e5b      	ldrb	r3, [r3, #25]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d02c      	beq.n	8002d04 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002caa:	f7ff fa2b 	bl	8002104 <HAL_GetTick>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cb2:	e020      	b.n	8002cf6 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f7ff fb63 	bl	8002384 <LL_ADC_IsEnabled>
 8002cbe:	1e03      	subs	r3, r0, #0
 8002cc0:	d104      	bne.n	8002ccc <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7ff fb38 	bl	800233c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ccc:	f7ff fa1a 	bl	8002104 <HAL_GetTick>
 8002cd0:	0002      	movs	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d90d      	bls.n	8002cf6 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cde:	2210      	movs	r2, #16
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cea:	2201      	movs	r2, #1
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e007      	b.n	8002d06 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d1d7      	bne.n	8002cb4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	0018      	movs	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b004      	add	sp, #16
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	80000017 	.word	0x80000017
 8002d14:	40012708 	.word	0x40012708
 8002d18:	20000068 	.word	0x20000068
 8002d1c:	00030d40 	.word	0x00030d40

08002d20 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d32:	2250      	movs	r2, #80	@ 0x50
 8002d34:	4013      	ands	r3, r2
 8002d36:	d141      	bne.n	8002dbc <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3c:	2280      	movs	r2, #128	@ 0x80
 8002d3e:	0092      	lsls	r2, r2, #2
 8002d40:	431a      	orrs	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f7ff fa5d 	bl	800220a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d50:	1e03      	subs	r3, r0, #0
 8002d52:	d02e      	beq.n	8002db2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	7e9b      	ldrb	r3, [r3, #26]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d12a      	bne.n	8002db2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2208      	movs	r2, #8
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d123      	bne.n	8002db2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f7ff fb2c 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 8002d74:	1e03      	subs	r3, r0, #0
 8002d76:	d110      	bne.n	8002d9a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	210c      	movs	r1, #12
 8002d84:	438a      	bics	r2, r1
 8002d86:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8c:	4a15      	ldr	r2, [pc, #84]	@ (8002de4 <ADC_DMAConvCplt+0xc4>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2201      	movs	r2, #1
 8002d92:	431a      	orrs	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d98:	e00b      	b.n	8002db2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9e:	2220      	movs	r2, #32
 8002da0:	431a      	orrs	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002daa:	2201      	movs	r2, #1
 8002dac:	431a      	orrs	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	0018      	movs	r0, r3
 8002db6:	f7fe f889 	bl	8000ecc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dba:	e00f      	b.n	8002ddc <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f7ff fd4d 	bl	8002868 <HAL_ADC_ErrorCallback>
}
 8002dce:	e005      	b.n	8002ddc <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	0010      	movs	r0, r2
 8002dda:	4798      	blx	r3
}
 8002ddc:	46c0      	nop			@ (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b004      	add	sp, #16
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	fffffefe 	.word	0xfffffefe

08002de8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7ff fd2d 	bl	8002858 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b004      	add	sp, #16
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e18:	2240      	movs	r2, #64	@ 0x40
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e24:	2204      	movs	r2, #4
 8002e26:	431a      	orrs	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f7ff fd1a 	bl	8002868 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e34:	46c0      	nop			@ (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b004      	add	sp, #16
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	0002      	movs	r2, r0
 8002e44:	1dfb      	adds	r3, r7, #7
 8002e46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e48:	1dfb      	adds	r3, r7, #7
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e4e:	d809      	bhi.n	8002e64 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e50:	1dfb      	adds	r3, r7, #7
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	001a      	movs	r2, r3
 8002e56:	231f      	movs	r3, #31
 8002e58:	401a      	ands	r2, r3
 8002e5a:	4b04      	ldr	r3, [pc, #16]	@ (8002e6c <__NVIC_EnableIRQ+0x30>)
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	4091      	lsls	r1, r2
 8002e60:	000a      	movs	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002e64:	46c0      	nop			@ (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b002      	add	sp, #8
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	e000e100 	.word	0xe000e100

08002e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	0002      	movs	r2, r0
 8002e78:	6039      	str	r1, [r7, #0]
 8002e7a:	1dfb      	adds	r3, r7, #7
 8002e7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e7e:	1dfb      	adds	r3, r7, #7
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e84:	d828      	bhi.n	8002ed8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e86:	4a2f      	ldr	r2, [pc, #188]	@ (8002f44 <__NVIC_SetPriority+0xd4>)
 8002e88:	1dfb      	adds	r3, r7, #7
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	b25b      	sxtb	r3, r3
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	33c0      	adds	r3, #192	@ 0xc0
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	589b      	ldr	r3, [r3, r2]
 8002e96:	1dfa      	adds	r2, r7, #7
 8002e98:	7812      	ldrb	r2, [r2, #0]
 8002e9a:	0011      	movs	r1, r2
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	400a      	ands	r2, r1
 8002ea0:	00d2      	lsls	r2, r2, #3
 8002ea2:	21ff      	movs	r1, #255	@ 0xff
 8002ea4:	4091      	lsls	r1, r2
 8002ea6:	000a      	movs	r2, r1
 8002ea8:	43d2      	mvns	r2, r2
 8002eaa:	401a      	ands	r2, r3
 8002eac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	019b      	lsls	r3, r3, #6
 8002eb2:	22ff      	movs	r2, #255	@ 0xff
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	1dfb      	adds	r3, r7, #7
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	4003      	ands	r3, r0
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ec4:	481f      	ldr	r0, [pc, #124]	@ (8002f44 <__NVIC_SetPriority+0xd4>)
 8002ec6:	1dfb      	adds	r3, r7, #7
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	b25b      	sxtb	r3, r3
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	33c0      	adds	r3, #192	@ 0xc0
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002ed6:	e031      	b.n	8002f3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f48 <__NVIC_SetPriority+0xd8>)
 8002eda:	1dfb      	adds	r3, r7, #7
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	0019      	movs	r1, r3
 8002ee0:	230f      	movs	r3, #15
 8002ee2:	400b      	ands	r3, r1
 8002ee4:	3b08      	subs	r3, #8
 8002ee6:	089b      	lsrs	r3, r3, #2
 8002ee8:	3306      	adds	r3, #6
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	18d3      	adds	r3, r2, r3
 8002eee:	3304      	adds	r3, #4
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	1dfa      	adds	r2, r7, #7
 8002ef4:	7812      	ldrb	r2, [r2, #0]
 8002ef6:	0011      	movs	r1, r2
 8002ef8:	2203      	movs	r2, #3
 8002efa:	400a      	ands	r2, r1
 8002efc:	00d2      	lsls	r2, r2, #3
 8002efe:	21ff      	movs	r1, #255	@ 0xff
 8002f00:	4091      	lsls	r1, r2
 8002f02:	000a      	movs	r2, r1
 8002f04:	43d2      	mvns	r2, r2
 8002f06:	401a      	ands	r2, r3
 8002f08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	019b      	lsls	r3, r3, #6
 8002f0e:	22ff      	movs	r2, #255	@ 0xff
 8002f10:	401a      	ands	r2, r3
 8002f12:	1dfb      	adds	r3, r7, #7
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	0018      	movs	r0, r3
 8002f18:	2303      	movs	r3, #3
 8002f1a:	4003      	ands	r3, r0
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f20:	4809      	ldr	r0, [pc, #36]	@ (8002f48 <__NVIC_SetPriority+0xd8>)
 8002f22:	1dfb      	adds	r3, r7, #7
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	001c      	movs	r4, r3
 8002f28:	230f      	movs	r3, #15
 8002f2a:	4023      	ands	r3, r4
 8002f2c:	3b08      	subs	r3, #8
 8002f2e:	089b      	lsrs	r3, r3, #2
 8002f30:	430a      	orrs	r2, r1
 8002f32:	3306      	adds	r3, #6
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	18c3      	adds	r3, r0, r3
 8002f38:	3304      	adds	r3, #4
 8002f3a:	601a      	str	r2, [r3, #0]
}
 8002f3c:	46c0      	nop			@ (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b003      	add	sp, #12
 8002f42:	bd90      	pop	{r4, r7, pc}
 8002f44:	e000e100 	.word	0xe000e100
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	1e5a      	subs	r2, r3, #1
 8002f58:	2380      	movs	r3, #128	@ 0x80
 8002f5a:	045b      	lsls	r3, r3, #17
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d301      	bcc.n	8002f64 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f60:	2301      	movs	r3, #1
 8002f62:	e010      	b.n	8002f86 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f64:	4b0a      	ldr	r3, [pc, #40]	@ (8002f90 <SysTick_Config+0x44>)
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	3a01      	subs	r2, #1
 8002f6a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	425b      	negs	r3, r3
 8002f70:	2103      	movs	r1, #3
 8002f72:	0018      	movs	r0, r3
 8002f74:	f7ff ff7c 	bl	8002e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <SysTick_Config+0x44>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f7e:	4b04      	ldr	r3, [pc, #16]	@ (8002f90 <SysTick_Config+0x44>)
 8002f80:	2207      	movs	r2, #7
 8002f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	0018      	movs	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b002      	add	sp, #8
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	e000e010 	.word	0xe000e010

08002f94 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	210f      	movs	r1, #15
 8002fa0:	187b      	adds	r3, r7, r1
 8002fa2:	1c02      	adds	r2, r0, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	187b      	adds	r3, r7, r1
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	b25b      	sxtb	r3, r3
 8002fae:	0011      	movs	r1, r2
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7ff ff5d 	bl	8002e70 <__NVIC_SetPriority>
}
 8002fb6:	46c0      	nop			@ (mov r8, r8)
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b004      	add	sp, #16
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	0002      	movs	r2, r0
 8002fc6:	1dfb      	adds	r3, r7, #7
 8002fc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fca:	1dfb      	adds	r3, r7, #7
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	b25b      	sxtb	r3, r3
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f7ff ff33 	bl	8002e3c <__NVIC_EnableIRQ>
}
 8002fd6:	46c0      	nop			@ (mov r8, r8)
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b002      	add	sp, #8
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7ff ffaf 	bl	8002f4c <SysTick_Config>
 8002fee:	0003      	movs	r3, r0
}
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b002      	add	sp, #8
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e077      	b.n	80030fa <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a3d      	ldr	r2, [pc, #244]	@ (8003104 <HAL_DMA_Init+0x10c>)
 8003010:	4694      	mov	ip, r2
 8003012:	4463      	add	r3, ip
 8003014:	2114      	movs	r1, #20
 8003016:	0018      	movs	r0, r3
 8003018:	f7fd f880 	bl	800011c <__udivsi3>
 800301c:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 800301e:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2225      	movs	r2, #37	@ 0x25
 8003028:	2102      	movs	r1, #2
 800302a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4934      	ldr	r1, [pc, #208]	@ (8003108 <HAL_DMA_Init+0x110>)
 8003038:	400a      	ands	r2, r1
 800303a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6819      	ldr	r1, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	0018      	movs	r0, r3
 8003076:	f000 fa49 	bl	800350c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	2380      	movs	r3, #128	@ 0x80
 8003080:	01db      	lsls	r3, r3, #7
 8003082:	429a      	cmp	r2, r3
 8003084:	d102      	bne.n	800308c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003094:	21ff      	movs	r1, #255	@ 0xff
 8003096:	400a      	ands	r2, r1
 8003098:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80030a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d011      	beq.n	80030d0 <HAL_DMA_Init+0xd8>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d80d      	bhi.n	80030d0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 fa54 	bl	8003564 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	e008      	b.n	80030e2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2225      	movs	r2, #37	@ 0x25
 80030ec:	2101      	movs	r1, #1
 80030ee:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	@ 0x24
 80030f4:	2100      	movs	r1, #0
 80030f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	0018      	movs	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b002      	add	sp, #8
 8003100:	bd80      	pop	{r7, pc}
 8003102:	46c0      	nop			@ (mov r8, r8)
 8003104:	bffdfff8 	.word	0xbffdfff8
 8003108:	ffff800f 	.word	0xffff800f

0800310c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
 8003118:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800311a:	2317      	movs	r3, #23
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2224      	movs	r2, #36	@ 0x24
 8003126:	5c9b      	ldrb	r3, [r3, r2]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_DMA_Start_IT+0x24>
 800312c:	2302      	movs	r3, #2
 800312e:	e070      	b.n	8003212 <HAL_DMA_Start_IT+0x106>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2224      	movs	r2, #36	@ 0x24
 8003134:	2101      	movs	r1, #1
 8003136:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2225      	movs	r2, #37	@ 0x25
 800313c:	5c9b      	ldrb	r3, [r3, r2]
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d157      	bne.n	80031f4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2225      	movs	r2, #37	@ 0x25
 8003148:	2102      	movs	r1, #2
 800314a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2101      	movs	r1, #1
 800315e:	438a      	bics	r2, r1
 8003160:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f98f 	bl	800348c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	210e      	movs	r1, #14
 8003182:	430a      	orrs	r2, r1
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e00f      	b.n	80031a8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2104      	movs	r1, #4
 8003194:	438a      	bics	r2, r1
 8003196:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	210a      	movs	r1, #10
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	2380      	movs	r3, #128	@ 0x80
 80031b0:	025b      	lsls	r3, r3, #9
 80031b2:	4013      	ands	r3, r2
 80031b4:	d008      	beq.n	80031c8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c0:	2180      	movs	r1, #128	@ 0x80
 80031c2:	0049      	lsls	r1, r1, #1
 80031c4:	430a      	orrs	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031da:	2180      	movs	r1, #128	@ 0x80
 80031dc:	0049      	lsls	r1, r1, #1
 80031de:	430a      	orrs	r2, r1
 80031e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2101      	movs	r1, #1
 80031ee:	430a      	orrs	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e007      	b.n	8003204 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2224      	movs	r2, #36	@ 0x24
 80031f8:	2100      	movs	r1, #0
 80031fa:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80031fc:	2317      	movs	r3, #23
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	2202      	movs	r2, #2
 8003202:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2224      	movs	r2, #36	@ 0x24
 8003208:	2100      	movs	r1, #0
 800320a:	5499      	strb	r1, [r3, r2]

  return status;
 800320c:	2317      	movs	r3, #23
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	781b      	ldrb	r3, [r3, #0]
}
 8003212:	0018      	movs	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	b006      	add	sp, #24
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003224:	230f      	movs	r3, #15
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2224      	movs	r2, #36	@ 0x24
 8003230:	2100      	movs	r1, #0
 8003232:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2224      	movs	r2, #36	@ 0x24
 8003238:	5c9b      	ldrb	r3, [r3, r2]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_DMA_Abort_IT+0x26>
 800323e:	2302      	movs	r3, #2
 8003240:	e05e      	b.n	8003300 <HAL_DMA_Abort_IT+0xe4>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2224      	movs	r2, #36	@ 0x24
 8003246:	2101      	movs	r1, #1
 8003248:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2225      	movs	r2, #37	@ 0x25
 800324e:	5c9b      	ldrb	r3, [r3, r2]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d007      	beq.n	8003266 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2204      	movs	r2, #4
 800325a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800325c:	230f      	movs	r3, #15
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	2201      	movs	r2, #1
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	e049      	b.n	80032fa <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	210e      	movs	r1, #14
 8003272:	438a      	bics	r2, r1
 8003274:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	438a      	bics	r2, r1
 8003284:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003290:	491d      	ldr	r1, [pc, #116]	@ (8003308 <HAL_DMA_Abort_IT+0xec>)
 8003292:	400a      	ands	r2, r1
 8003294:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8003296:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <HAL_DMA_Abort_IT+0xf0>)
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	221c      	movs	r2, #28
 80032a0:	4013      	ands	r3, r2
 80032a2:	2201      	movs	r2, #1
 80032a4:	409a      	lsls	r2, r3
 80032a6:	4b19      	ldr	r3, [pc, #100]	@ (800330c <HAL_DMA_Abort_IT+0xf0>)
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00c      	beq.n	80032d8 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c8:	490f      	ldr	r1, [pc, #60]	@ (8003308 <HAL_DMA_Abort_IT+0xec>)
 80032ca:	400a      	ands	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80032d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2225      	movs	r2, #37	@ 0x25
 80032dc:	2101      	movs	r1, #1
 80032de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	@ 0x24
 80032e4:	2100      	movs	r1, #0
 80032e6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d004      	beq.n	80032fa <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	0010      	movs	r0, r2
 80032f8:	4798      	blx	r3
    }
  }
  return status;
 80032fa:	230f      	movs	r3, #15
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	781b      	ldrb	r3, [r3, #0]
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b004      	add	sp, #16
 8003306:	bd80      	pop	{r7, pc}
 8003308:	fffffeff 	.word	0xfffffeff
 800330c:	40020000 	.word	0x40020000

08003310 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8003318:	4b55      	ldr	r3, [pc, #340]	@ (8003470 <HAL_DMA_IRQHandler+0x160>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	221c      	movs	r2, #28
 800332c:	4013      	ands	r3, r2
 800332e:	2204      	movs	r2, #4
 8003330:	409a      	lsls	r2, r3
 8003332:	0013      	movs	r3, r2
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4013      	ands	r3, r2
 8003338:	d027      	beq.n	800338a <HAL_DMA_IRQHandler+0x7a>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2204      	movs	r2, #4
 800333e:	4013      	ands	r3, r2
 8003340:	d023      	beq.n	800338a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2220      	movs	r2, #32
 800334a:	4013      	ands	r3, r2
 800334c:	d107      	bne.n	800335e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2104      	movs	r1, #4
 800335a:	438a      	bics	r2, r1
 800335c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800335e:	4b44      	ldr	r3, [pc, #272]	@ (8003470 <HAL_DMA_IRQHandler+0x160>)
 8003360:	6859      	ldr	r1, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	221c      	movs	r2, #28
 8003368:	4013      	ands	r3, r2
 800336a:	2204      	movs	r2, #4
 800336c:	409a      	lsls	r2, r3
 800336e:	4b40      	ldr	r3, [pc, #256]	@ (8003470 <HAL_DMA_IRQHandler+0x160>)
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003378:	2b00      	cmp	r3, #0
 800337a:	d100      	bne.n	800337e <HAL_DMA_IRQHandler+0x6e>
 800337c:	e073      	b.n	8003466 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	0010      	movs	r0, r2
 8003386:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003388:	e06d      	b.n	8003466 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	221c      	movs	r2, #28
 8003390:	4013      	ands	r3, r2
 8003392:	2202      	movs	r2, #2
 8003394:	409a      	lsls	r2, r3
 8003396:	0013      	movs	r3, r2
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4013      	ands	r3, r2
 800339c:	d02e      	beq.n	80033fc <HAL_DMA_IRQHandler+0xec>
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2202      	movs	r2, #2
 80033a2:	4013      	ands	r3, r2
 80033a4:	d02a      	beq.n	80033fc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2220      	movs	r2, #32
 80033ae:	4013      	ands	r3, r2
 80033b0:	d10b      	bne.n	80033ca <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	210a      	movs	r1, #10
 80033be:	438a      	bics	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2225      	movs	r2, #37	@ 0x25
 80033c6:	2101      	movs	r1, #1
 80033c8:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80033ca:	4b29      	ldr	r3, [pc, #164]	@ (8003470 <HAL_DMA_IRQHandler+0x160>)
 80033cc:	6859      	ldr	r1, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	221c      	movs	r2, #28
 80033d4:	4013      	ands	r3, r2
 80033d6:	2202      	movs	r2, #2
 80033d8:	409a      	lsls	r2, r3
 80033da:	4b25      	ldr	r3, [pc, #148]	@ (8003470 <HAL_DMA_IRQHandler+0x160>)
 80033dc:	430a      	orrs	r2, r1
 80033de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2224      	movs	r2, #36	@ 0x24
 80033e4:	2100      	movs	r1, #0
 80033e6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d03a      	beq.n	8003466 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	0010      	movs	r0, r2
 80033f8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033fa:	e034      	b.n	8003466 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003400:	221c      	movs	r2, #28
 8003402:	4013      	ands	r3, r2
 8003404:	2208      	movs	r2, #8
 8003406:	409a      	lsls	r2, r3
 8003408:	0013      	movs	r3, r2
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4013      	ands	r3, r2
 800340e:	d02b      	beq.n	8003468 <HAL_DMA_IRQHandler+0x158>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2208      	movs	r2, #8
 8003414:	4013      	ands	r3, r2
 8003416:	d027      	beq.n	8003468 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	210e      	movs	r1, #14
 8003424:	438a      	bics	r2, r1
 8003426:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003428:	4b11      	ldr	r3, [pc, #68]	@ (8003470 <HAL_DMA_IRQHandler+0x160>)
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	221c      	movs	r2, #28
 8003432:	4013      	ands	r3, r2
 8003434:	2201      	movs	r2, #1
 8003436:	409a      	lsls	r2, r3
 8003438:	4b0d      	ldr	r3, [pc, #52]	@ (8003470 <HAL_DMA_IRQHandler+0x160>)
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2225      	movs	r2, #37	@ 0x25
 8003448:	2101      	movs	r1, #1
 800344a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2224      	movs	r2, #36	@ 0x24
 8003450:	2100      	movs	r1, #0
 8003452:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	0010      	movs	r0, r2
 8003464:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003466:	46c0      	nop			@ (mov r8, r8)
 8003468:	46c0      	nop			@ (mov r8, r8)
}
 800346a:	46bd      	mov	sp, r7
 800346c:	b004      	add	sp, #16
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40020000 	.word	0x40020000

08003474 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2225      	movs	r2, #37	@ 0x25
 8003480:	5c9b      	ldrb	r3, [r3, r2]
 8003482:	b2db      	uxtb	r3, r3
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}

0800348c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d004      	beq.n	80034b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80034b4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80034b6:	4b14      	ldr	r3, [pc, #80]	@ (8003508 <DMA_SetConfig+0x7c>)
 80034b8:	6859      	ldr	r1, [r3, #4]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	221c      	movs	r2, #28
 80034c0:	4013      	ands	r3, r2
 80034c2:	2201      	movs	r2, #1
 80034c4:	409a      	lsls	r2, r3
 80034c6:	4b10      	ldr	r3, [pc, #64]	@ (8003508 <DMA_SetConfig+0x7c>)
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d108      	bne.n	80034ee <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034ec:	e007      	b.n	80034fe <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	60da      	str	r2, [r3, #12]
}
 80034fe:	46c0      	nop			@ (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	b004      	add	sp, #16
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			@ (mov r8, r8)
 8003508:	40020000 	.word	0x40020000

0800350c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	001a      	movs	r2, r3
 800351a:	23ff      	movs	r3, #255	@ 0xff
 800351c:	4013      	ands	r3, r2
 800351e:	3b08      	subs	r3, #8
 8003520:	2114      	movs	r1, #20
 8003522:	0018      	movs	r0, r3
 8003524:	f7fc fdfa 	bl	800011c <__udivsi3>
 8003528:	0003      	movs	r3, r0
 800352a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8003532:	4a0a      	ldr	r2, [pc, #40]	@ (800355c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003534:	4694      	mov	ip, r2
 8003536:	4463      	add	r3, ip
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	001a      	movs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a07      	ldr	r2, [pc, #28]	@ (8003560 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003544:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	221c      	movs	r2, #28
 800354a:	4013      	ands	r3, r2
 800354c:	2201      	movs	r2, #1
 800354e:	409a      	lsls	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003554:	46c0      	nop			@ (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b004      	add	sp, #16
 800355a:	bd80      	pop	{r7, pc}
 800355c:	10008200 	.word	0x10008200
 8003560:	40020880 	.word	0x40020880

08003564 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	22ff      	movs	r2, #255	@ 0xff
 8003572:	4013      	ands	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4a0a      	ldr	r2, [pc, #40]	@ (80035a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800357a:	4694      	mov	ip, r2
 800357c:	4463      	add	r3, ip
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	001a      	movs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a07      	ldr	r2, [pc, #28]	@ (80035a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800358a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3b01      	subs	r3, #1
 8003590:	2203      	movs	r2, #3
 8003592:	4013      	ands	r3, r2
 8003594:	2201      	movs	r2, #1
 8003596:	409a      	lsls	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800359c:	46c0      	nop			@ (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b004      	add	sp, #16
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	1000823f 	.word	0x1000823f
 80035a8:	40020940 	.word	0x40020940

080035ac <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80035ba:	e153      	b.n	8003864 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2101      	movs	r1, #1
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4091      	lsls	r1, r2
 80035c6:	000a      	movs	r2, r1
 80035c8:	4013      	ands	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d100      	bne.n	80035d4 <HAL_GPIO_Init+0x28>
 80035d2:	e144      	b.n	800385e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d003      	beq.n	80035e4 <HAL_GPIO_Init+0x38>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b12      	cmp	r3, #18
 80035e2:	d125      	bne.n	8003630 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	08da      	lsrs	r2, r3, #3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3208      	adds	r2, #8
 80035ec:	0092      	lsls	r2, r2, #2
 80035ee:	58d3      	ldr	r3, [r2, r3]
 80035f0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2207      	movs	r2, #7
 80035f6:	4013      	ands	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	220f      	movs	r2, #15
 80035fc:	409a      	lsls	r2, r3
 80035fe:	0013      	movs	r3, r2
 8003600:	43da      	mvns	r2, r3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	4013      	ands	r3, r2
 8003606:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	220f      	movs	r2, #15
 800360e:	401a      	ands	r2, r3
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2107      	movs	r1, #7
 8003614:	400b      	ands	r3, r1
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	409a      	lsls	r2, r3
 800361a:	0013      	movs	r3, r2
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	08da      	lsrs	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3208      	adds	r2, #8
 800362a:	0092      	lsls	r2, r2, #2
 800362c:	6979      	ldr	r1, [r7, #20]
 800362e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	2203      	movs	r2, #3
 800363c:	409a      	lsls	r2, r3
 800363e:	0013      	movs	r3, r2
 8003640:	43da      	mvns	r2, r3
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	4013      	ands	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2203      	movs	r2, #3
 800364e:	401a      	ands	r2, r3
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	409a      	lsls	r2, r3
 8003656:	0013      	movs	r3, r2
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d00b      	beq.n	8003684 <HAL_GPIO_Init+0xd8>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d007      	beq.n	8003684 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003678:	2b11      	cmp	r3, #17
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b12      	cmp	r3, #18
 8003682:	d130      	bne.n	80036e6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	2203      	movs	r2, #3
 8003690:	409a      	lsls	r2, r3
 8003692:	0013      	movs	r3, r2
 8003694:	43da      	mvns	r2, r3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	4013      	ands	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	409a      	lsls	r2, r3
 80036a6:	0013      	movs	r3, r2
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036ba:	2201      	movs	r2, #1
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	409a      	lsls	r2, r3
 80036c0:	0013      	movs	r3, r2
 80036c2:	43da      	mvns	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	4013      	ands	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	2201      	movs	r2, #1
 80036d2:	401a      	ands	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	409a      	lsls	r2, r3
 80036d8:	0013      	movs	r3, r2
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d017      	beq.n	800371e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	2203      	movs	r2, #3
 80036fa:	409a      	lsls	r2, r3
 80036fc:	0013      	movs	r3, r2
 80036fe:	43da      	mvns	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	4013      	ands	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	409a      	lsls	r2, r3
 8003710:	0013      	movs	r3, r2
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	2380      	movs	r3, #128	@ 0x80
 8003724:	055b      	lsls	r3, r3, #21
 8003726:	4013      	ands	r3, r2
 8003728:	d100      	bne.n	800372c <HAL_GPIO_Init+0x180>
 800372a:	e098      	b.n	800385e <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800372c:	4a53      	ldr	r2, [pc, #332]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	3318      	adds	r3, #24
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	589b      	ldr	r3, [r3, r2]
 8003738:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2203      	movs	r2, #3
 800373e:	4013      	ands	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	220f      	movs	r2, #15
 8003744:	409a      	lsls	r2, r3
 8003746:	0013      	movs	r3, r2
 8003748:	43da      	mvns	r2, r3
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	4013      	ands	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	23a0      	movs	r3, #160	@ 0xa0
 8003754:	05db      	lsls	r3, r3, #23
 8003756:	429a      	cmp	r2, r3
 8003758:	d019      	beq.n	800378e <HAL_GPIO_Init+0x1e2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a48      	ldr	r2, [pc, #288]	@ (8003880 <HAL_GPIO_Init+0x2d4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <HAL_GPIO_Init+0x1de>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a47      	ldr	r2, [pc, #284]	@ (8003884 <HAL_GPIO_Init+0x2d8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00d      	beq.n	8003786 <HAL_GPIO_Init+0x1da>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a46      	ldr	r2, [pc, #280]	@ (8003888 <HAL_GPIO_Init+0x2dc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d007      	beq.n	8003782 <HAL_GPIO_Init+0x1d6>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a45      	ldr	r2, [pc, #276]	@ (800388c <HAL_GPIO_Init+0x2e0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d101      	bne.n	800377e <HAL_GPIO_Init+0x1d2>
 800377a:	2305      	movs	r3, #5
 800377c:	e008      	b.n	8003790 <HAL_GPIO_Init+0x1e4>
 800377e:	2306      	movs	r3, #6
 8003780:	e006      	b.n	8003790 <HAL_GPIO_Init+0x1e4>
 8003782:	2303      	movs	r3, #3
 8003784:	e004      	b.n	8003790 <HAL_GPIO_Init+0x1e4>
 8003786:	2302      	movs	r3, #2
 8003788:	e002      	b.n	8003790 <HAL_GPIO_Init+0x1e4>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <HAL_GPIO_Init+0x1e4>
 800378e:	2300      	movs	r3, #0
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	2103      	movs	r1, #3
 8003794:	400a      	ands	r2, r1
 8003796:	00d2      	lsls	r2, r2, #3
 8003798:	4093      	lsls	r3, r2
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80037a0:	4936      	ldr	r1, [pc, #216]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	089b      	lsrs	r3, r3, #2
 80037a6:	3318      	adds	r3, #24
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80037ae:	4a33      	ldr	r2, [pc, #204]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 80037b0:	2380      	movs	r3, #128	@ 0x80
 80037b2:	58d3      	ldr	r3, [r2, r3]
 80037b4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	43da      	mvns	r2, r3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	4013      	ands	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	2380      	movs	r3, #128	@ 0x80
 80037c6:	025b      	lsls	r3, r3, #9
 80037c8:	4013      	ands	r3, r2
 80037ca:	d003      	beq.n	80037d4 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80037d4:	4929      	ldr	r1, [pc, #164]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 80037d6:	2280      	movs	r2, #128	@ 0x80
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80037dc:	4a27      	ldr	r2, [pc, #156]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 80037de:	2384      	movs	r3, #132	@ 0x84
 80037e0:	58d3      	ldr	r3, [r2, r3]
 80037e2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	43da      	mvns	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	4013      	ands	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	2380      	movs	r3, #128	@ 0x80
 80037f4:	029b      	lsls	r3, r3, #10
 80037f6:	4013      	ands	r3, r2
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003802:	491e      	ldr	r1, [pc, #120]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 8003804:	2284      	movs	r2, #132	@ 0x84
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800380a:	4b1c      	ldr	r3, [pc, #112]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	43da      	mvns	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4013      	ands	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	2380      	movs	r3, #128	@ 0x80
 8003820:	035b      	lsls	r3, r3, #13
 8003822:	4013      	ands	r3, r2
 8003824:	d003      	beq.n	800382e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800382e:	4b13      	ldr	r3, [pc, #76]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003834:	4b11      	ldr	r3, [pc, #68]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	43da      	mvns	r2, r3
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	4013      	ands	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	2380      	movs	r3, #128	@ 0x80
 800384a:	039b      	lsls	r3, r3, #14
 800384c:	4013      	ands	r3, r2
 800384e:	d003      	beq.n	8003858 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003858:	4b08      	ldr	r3, [pc, #32]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	3301      	adds	r3, #1
 8003862:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	40da      	lsrs	r2, r3
 800386c:	1e13      	subs	r3, r2, #0
 800386e:	d000      	beq.n	8003872 <HAL_GPIO_Init+0x2c6>
 8003870:	e6a4      	b.n	80035bc <HAL_GPIO_Init+0x10>
  }
}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	46c0      	nop			@ (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	b006      	add	sp, #24
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40021800 	.word	0x40021800
 8003880:	50000400 	.word	0x50000400
 8003884:	50000800 	.word	0x50000800
 8003888:	50000c00 	.word	0x50000c00
 800388c:	50001400 	.word	0x50001400

08003890 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	000a      	movs	r2, r1
 800389a:	1cbb      	adds	r3, r7, #2
 800389c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	1cba      	adds	r2, r7, #2
 80038a4:	8812      	ldrh	r2, [r2, #0]
 80038a6:	4013      	ands	r3, r2
 80038a8:	d004      	beq.n	80038b4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80038aa:	230f      	movs	r3, #15
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	2201      	movs	r2, #1
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	e003      	b.n	80038bc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038b4:	230f      	movs	r3, #15
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80038bc:	230f      	movs	r3, #15
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	781b      	ldrb	r3, [r3, #0]
}
 80038c2:	0018      	movs	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b004      	add	sp, #16
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	0008      	movs	r0, r1
 80038d4:	0011      	movs	r1, r2
 80038d6:	1cbb      	adds	r3, r7, #2
 80038d8:	1c02      	adds	r2, r0, #0
 80038da:	801a      	strh	r2, [r3, #0]
 80038dc:	1c7b      	adds	r3, r7, #1
 80038de:	1c0a      	adds	r2, r1, #0
 80038e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038e2:	1c7b      	adds	r3, r7, #1
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d004      	beq.n	80038f4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038ea:	1cbb      	adds	r3, r7, #2
 80038ec:	881a      	ldrh	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038f2:	e003      	b.n	80038fc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038f4:	1cbb      	adds	r3, r7, #2
 80038f6:	881a      	ldrh	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038fc:	46c0      	nop			@ (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	0002      	movs	r2, r0
 800390c:	1dbb      	adds	r3, r7, #6
 800390e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003910:	4b10      	ldr	r3, [pc, #64]	@ (8003954 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	1dba      	adds	r2, r7, #6
 8003916:	8812      	ldrh	r2, [r2, #0]
 8003918:	4013      	ands	r3, r2
 800391a:	d008      	beq.n	800392e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800391c:	4b0d      	ldr	r3, [pc, #52]	@ (8003954 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800391e:	1dba      	adds	r2, r7, #6
 8003920:	8812      	ldrh	r2, [r2, #0]
 8003922:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003924:	1dbb      	adds	r3, r7, #6
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	0018      	movs	r0, r3
 800392a:	f000 f815 	bl	8003958 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800392e:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	1dba      	adds	r2, r7, #6
 8003934:	8812      	ldrh	r2, [r2, #0]
 8003936:	4013      	ands	r3, r2
 8003938:	d008      	beq.n	800394c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800393a:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800393c:	1dba      	adds	r2, r7, #6
 800393e:	8812      	ldrh	r2, [r2, #0]
 8003940:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003942:	1dbb      	adds	r3, r7, #6
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	0018      	movs	r0, r3
 8003948:	f000 f810 	bl	800396c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800394c:	46c0      	nop			@ (mov r8, r8)
 800394e:	46bd      	mov	sp, r7
 8003950:	b002      	add	sp, #8
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021800 	.word	0x40021800

08003958 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	0002      	movs	r2, r0
 8003960:	1dbb      	adds	r3, r7, #6
 8003962:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003964:	46c0      	nop			@ (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	0002      	movs	r2, r0
 8003974:	1dbb      	adds	r3, r7, #6
 8003976:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003978:	46c0      	nop			@ (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b002      	add	sp, #8
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e08f      	b.n	8003ab2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2241      	movs	r2, #65	@ 0x41
 8003996:	5c9b      	ldrb	r3, [r3, r2]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d107      	bne.n	80039ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2240      	movs	r2, #64	@ 0x40
 80039a2:	2100      	movs	r1, #0
 80039a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	0018      	movs	r0, r3
 80039aa:	f7fd f9e7 	bl	8000d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2241      	movs	r2, #65	@ 0x41
 80039b2:	2124      	movs	r1, #36	@ 0x24
 80039b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2101      	movs	r1, #1
 80039c2:	438a      	bics	r2, r1
 80039c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	493b      	ldr	r1, [pc, #236]	@ (8003abc <HAL_I2C_Init+0x13c>)
 80039d0:	400a      	ands	r2, r1
 80039d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4938      	ldr	r1, [pc, #224]	@ (8003ac0 <HAL_I2C_Init+0x140>)
 80039e0:	400a      	ands	r2, r1
 80039e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d108      	bne.n	80039fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2180      	movs	r1, #128	@ 0x80
 80039f6:	0209      	lsls	r1, r1, #8
 80039f8:	430a      	orrs	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]
 80039fc:	e007      	b.n	8003a0e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2184      	movs	r1, #132	@ 0x84
 8003a08:	0209      	lsls	r1, r1, #8
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d109      	bne.n	8003a2a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2180      	movs	r1, #128	@ 0x80
 8003a22:	0109      	lsls	r1, r1, #4
 8003a24:	430a      	orrs	r2, r1
 8003a26:	605a      	str	r2, [r3, #4]
 8003a28:	e007      	b.n	8003a3a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4923      	ldr	r1, [pc, #140]	@ (8003ac4 <HAL_I2C_Init+0x144>)
 8003a36:	400a      	ands	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4920      	ldr	r1, [pc, #128]	@ (8003ac8 <HAL_I2C_Init+0x148>)
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	491a      	ldr	r1, [pc, #104]	@ (8003ac0 <HAL_I2C_Init+0x140>)
 8003a56:	400a      	ands	r2, r1
 8003a58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69d9      	ldr	r1, [r3, #28]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1a      	ldr	r2, [r3, #32]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2101      	movs	r1, #1
 8003a90:	430a      	orrs	r2, r1
 8003a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2241      	movs	r2, #65	@ 0x41
 8003a9e:	2120      	movs	r1, #32
 8003aa0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2242      	movs	r2, #66	@ 0x42
 8003aac:	2100      	movs	r1, #0
 8003aae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b002      	add	sp, #8
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	46c0      	nop			@ (mov r8, r8)
 8003abc:	f0ffffff 	.word	0xf0ffffff
 8003ac0:	ffff7fff 	.word	0xffff7fff
 8003ac4:	fffff7ff 	.word	0xfffff7ff
 8003ac8:	02008000 	.word	0x02008000

08003acc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003acc:	b590      	push	{r4, r7, lr}
 8003ace:	b089      	sub	sp, #36	@ 0x24
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	000c      	movs	r4, r1
 8003ad6:	0010      	movs	r0, r2
 8003ad8:	0019      	movs	r1, r3
 8003ada:	230a      	movs	r3, #10
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	1c22      	adds	r2, r4, #0
 8003ae0:	801a      	strh	r2, [r3, #0]
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	1c02      	adds	r2, r0, #0
 8003ae8:	801a      	strh	r2, [r3, #0]
 8003aea:	1dbb      	adds	r3, r7, #6
 8003aec:	1c0a      	adds	r2, r1, #0
 8003aee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2241      	movs	r2, #65	@ 0x41
 8003af4:	5c9b      	ldrb	r3, [r3, r2]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d000      	beq.n	8003afe <HAL_I2C_Mem_Write+0x32>
 8003afc:	e10c      	b.n	8003d18 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <HAL_I2C_Mem_Write+0x42>
 8003b04:	232c      	movs	r3, #44	@ 0x2c
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d105      	bne.n	8003b1a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2280      	movs	r2, #128	@ 0x80
 8003b12:	0092      	lsls	r2, r2, #2
 8003b14:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e0ff      	b.n	8003d1a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2240      	movs	r2, #64	@ 0x40
 8003b1e:	5c9b      	ldrb	r3, [r3, r2]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_I2C_Mem_Write+0x5c>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e0f8      	b.n	8003d1a <HAL_I2C_Mem_Write+0x24e>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2240      	movs	r2, #64	@ 0x40
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b30:	f7fe fae8 	bl	8002104 <HAL_GetTick>
 8003b34:	0003      	movs	r3, r0
 8003b36:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b38:	2380      	movs	r3, #128	@ 0x80
 8003b3a:	0219      	lsls	r1, r3, #8
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	2319      	movs	r3, #25
 8003b44:	2201      	movs	r2, #1
 8003b46:	f001 fcf7 	bl	8005538 <I2C_WaitOnFlagUntilTimeout>
 8003b4a:	1e03      	subs	r3, r0, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e0e3      	b.n	8003d1a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2241      	movs	r2, #65	@ 0x41
 8003b56:	2121      	movs	r1, #33	@ 0x21
 8003b58:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2242      	movs	r2, #66	@ 0x42
 8003b5e:	2140      	movs	r1, #64	@ 0x40
 8003b60:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	222c      	movs	r2, #44	@ 0x2c
 8003b72:	18ba      	adds	r2, r7, r2
 8003b74:	8812      	ldrh	r2, [r2, #0]
 8003b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b7e:	1dbb      	adds	r3, r7, #6
 8003b80:	881c      	ldrh	r4, [r3, #0]
 8003b82:	2308      	movs	r3, #8
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	881a      	ldrh	r2, [r3, #0]
 8003b88:	230a      	movs	r3, #10
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	8819      	ldrh	r1, [r3, #0]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	0023      	movs	r3, r4
 8003b9a:	f000 fe9b 	bl	80048d4 <I2C_RequestMemoryWrite>
 8003b9e:	1e03      	subs	r3, r0, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2240      	movs	r2, #64	@ 0x40
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e0b5      	b.n	8003d1a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2bff      	cmp	r3, #255	@ 0xff
 8003bb6:	d911      	bls.n	8003bdc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	22ff      	movs	r2, #255	@ 0xff
 8003bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	2380      	movs	r3, #128	@ 0x80
 8003bc6:	045c      	lsls	r4, r3, #17
 8003bc8:	230a      	movs	r3, #10
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	8819      	ldrh	r1, [r3, #0]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	0023      	movs	r3, r4
 8003bd6:	f001 fe89 	bl	80058ec <I2C_TransferConfig>
 8003bda:	e012      	b.n	8003c02 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	2380      	movs	r3, #128	@ 0x80
 8003bee:	049c      	lsls	r4, r3, #18
 8003bf0:	230a      	movs	r3, #10
 8003bf2:	18fb      	adds	r3, r7, r3
 8003bf4:	8819      	ldrh	r1, [r3, #0]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	0023      	movs	r3, r4
 8003bfe:	f001 fe75 	bl	80058ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f001 fced 	bl	80055e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c0e:	1e03      	subs	r3, r0, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e081      	b.n	8003d1a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1a:	781a      	ldrb	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d03a      	beq.n	8003cc6 <HAL_I2C_Mem_Write+0x1fa>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d136      	bne.n	8003cc6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	0013      	movs	r3, r2
 8003c62:	2200      	movs	r2, #0
 8003c64:	2180      	movs	r1, #128	@ 0x80
 8003c66:	f001 fc67 	bl	8005538 <I2C_WaitOnFlagUntilTimeout>
 8003c6a:	1e03      	subs	r3, r0, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e053      	b.n	8003d1a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2bff      	cmp	r3, #255	@ 0xff
 8003c7a:	d911      	bls.n	8003ca0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	22ff      	movs	r2, #255	@ 0xff
 8003c80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	2380      	movs	r3, #128	@ 0x80
 8003c8a:	045c      	lsls	r4, r3, #17
 8003c8c:	230a      	movs	r3, #10
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	8819      	ldrh	r1, [r3, #0]
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	2300      	movs	r3, #0
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	0023      	movs	r3, r4
 8003c9a:	f001 fe27 	bl	80058ec <I2C_TransferConfig>
 8003c9e:	e012      	b.n	8003cc6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	2380      	movs	r3, #128	@ 0x80
 8003cb2:	049c      	lsls	r4, r3, #18
 8003cb4:	230a      	movs	r3, #10
 8003cb6:	18fb      	adds	r3, r7, r3
 8003cb8:	8819      	ldrh	r1, [r3, #0]
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	0023      	movs	r3, r4
 8003cc2:	f001 fe13 	bl	80058ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d198      	bne.n	8003c02 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f001 fccc 	bl	8005674 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cdc:	1e03      	subs	r3, r0, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e01a      	b.n	8003d1a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	490b      	ldr	r1, [pc, #44]	@ (8003d24 <HAL_I2C_Mem_Write+0x258>)
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2241      	movs	r2, #65	@ 0x41
 8003d00:	2120      	movs	r1, #32
 8003d02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2242      	movs	r2, #66	@ 0x42
 8003d08:	2100      	movs	r1, #0
 8003d0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2240      	movs	r2, #64	@ 0x40
 8003d10:	2100      	movs	r1, #0
 8003d12:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	e000      	b.n	8003d1a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003d18:	2302      	movs	r3, #2
  }
}
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b007      	add	sp, #28
 8003d20:	bd90      	pop	{r4, r7, pc}
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	fe00e800 	.word	0xfe00e800

08003d28 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003d28:	b5b0      	push	{r4, r5, r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	000c      	movs	r4, r1
 8003d32:	0010      	movs	r0, r2
 8003d34:	0019      	movs	r1, r3
 8003d36:	230a      	movs	r3, #10
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	1c22      	adds	r2, r4, #0
 8003d3c:	801a      	strh	r2, [r3, #0]
 8003d3e:	2308      	movs	r3, #8
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	1c02      	adds	r2, r0, #0
 8003d44:	801a      	strh	r2, [r3, #0]
 8003d46:	1dbb      	adds	r3, r7, #6
 8003d48:	1c0a      	adds	r2, r1, #0
 8003d4a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2241      	movs	r2, #65	@ 0x41
 8003d50:	5c9b      	ldrb	r3, [r3, r2]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b20      	cmp	r3, #32
 8003d56:	d000      	beq.n	8003d5a <HAL_I2C_Mem_Write_DMA+0x32>
 8003d58:	e0d8      	b.n	8003f0c <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d004      	beq.n	8003d6a <HAL_I2C_Mem_Write_DMA+0x42>
 8003d60:	232c      	movs	r3, #44	@ 0x2c
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d105      	bne.n	8003d76 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2280      	movs	r2, #128	@ 0x80
 8003d6e:	0092      	lsls	r2, r2, #2
 8003d70:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e0cb      	b.n	8003f0e <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699a      	ldr	r2, [r3, #24]
 8003d7c:	2380      	movs	r3, #128	@ 0x80
 8003d7e:	021b      	lsls	r3, r3, #8
 8003d80:	401a      	ands	r2, r3
 8003d82:	2380      	movs	r3, #128	@ 0x80
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d101      	bne.n	8003d8e <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e0bf      	b.n	8003f0e <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2240      	movs	r2, #64	@ 0x40
 8003d92:	5c9b      	ldrb	r3, [r3, r2]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_I2C_Mem_Write_DMA+0x74>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e0b8      	b.n	8003f0e <HAL_I2C_Mem_Write_DMA+0x1e6>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2240      	movs	r2, #64	@ 0x40
 8003da0:	2101      	movs	r1, #1
 8003da2:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2241      	movs	r2, #65	@ 0x41
 8003da8:	2121      	movs	r1, #33	@ 0x21
 8003daa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2242      	movs	r2, #66	@ 0x42
 8003db0:	2140      	movs	r1, #64	@ 0x40
 8003db2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	222c      	movs	r2, #44	@ 0x2c
 8003dc4:	18ba      	adds	r2, r7, r2
 8003dc6:	8812      	ldrh	r2, [r2, #0]
 8003dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4a52      	ldr	r2, [pc, #328]	@ (8003f18 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 8003dce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4a52      	ldr	r2, [pc, #328]	@ (8003f1c <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8003dd4:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8003dd6:	230a      	movs	r3, #10
 8003dd8:	18fb      	adds	r3, r7, r3
 8003dda:	881a      	ldrh	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2bff      	cmp	r3, #255	@ 0xff
 8003de8:	d903      	bls.n	8003df2 <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	22ff      	movs	r2, #255	@ 0xff
 8003dee:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003df0:	e004      	b.n	8003dfc <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dfc:	1dbb      	adds	r3, r7, #6
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d10b      	bne.n	8003e1c <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e04:	2308      	movs	r3, #8
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	4252      	negs	r2, r2
 8003e18:	651a      	str	r2, [r3, #80]	@ 0x50
 8003e1a:	e00e      	b.n	8003e3a <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e1c:	2108      	movs	r1, #8
 8003e1e:	187b      	adds	r3, r7, r1
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	0a1b      	lsrs	r3, r3, #8
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8003e2e:	187b      	adds	r3, r7, r1
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	001a      	movs	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d023      	beq.n	8003e8a <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e46:	4a36      	ldr	r2, [pc, #216]	@ (8003f20 <HAL_I2C_Mem_Write_DMA+0x1f8>)
 8003e48:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4e:	4a35      	ldr	r2, [pc, #212]	@ (8003f24 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 8003e50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e56:	2200      	movs	r2, #0
 8003e58:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5e:	2200      	movs	r2, #0
 8003e60:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003e66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3328      	adds	r3, #40	@ 0x28
 8003e6e:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003e74:	2517      	movs	r5, #23
 8003e76:	197c      	adds	r4, r7, r5
 8003e78:	f7ff f948 	bl	800310c <HAL_DMA_Start_IT>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003e80:	197b      	adds	r3, r7, r5
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d12d      	bne.n	8003ee4 <HAL_I2C_Mem_Write_DMA+0x1bc>
 8003e88:	e013      	b.n	8003eb2 <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2241      	movs	r2, #65	@ 0x41
 8003e8e:	2120      	movs	r1, #32
 8003e90:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2242      	movs	r2, #66	@ 0x42
 8003e96:	2100      	movs	r1, #0
 8003e98:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	2280      	movs	r2, #128	@ 0x80
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2240      	movs	r2, #64	@ 0x40
 8003eaa:	2100      	movs	r1, #0
 8003eac:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e02d      	b.n	8003f0e <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003eb2:	1dbb      	adds	r3, r7, #6
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	2380      	movs	r3, #128	@ 0x80
 8003eba:	045c      	lsls	r4, r3, #17
 8003ebc:	230a      	movs	r3, #10
 8003ebe:	18fb      	adds	r3, r7, r3
 8003ec0:	8819      	ldrh	r1, [r3, #0]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	4b18      	ldr	r3, [pc, #96]	@ (8003f28 <HAL_I2C_Mem_Write_DMA+0x200>)
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	0023      	movs	r3, r4
 8003eca:	f001 fd0f 	bl	80058ec <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2240      	movs	r2, #64	@ 0x40
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2101      	movs	r1, #1
 8003eda:	0018      	movs	r0, r3
 8003edc:	f001 fd40 	bl	8005960 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e014      	b.n	8003f0e <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2241      	movs	r2, #65	@ 0x41
 8003ee8:	2120      	movs	r1, #32
 8003eea:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2242      	movs	r2, #66	@ 0x42
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef8:	2210      	movs	r2, #16
 8003efa:	431a      	orrs	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2240      	movs	r2, #64	@ 0x40
 8003f04:	2100      	movs	r1, #0
 8003f06:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8003f0c:	2302      	movs	r3, #2
  }
}
 8003f0e:	0018      	movs	r0, r3
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b006      	add	sp, #24
 8003f14:	bdb0      	pop	{r4, r5, r7, pc}
 8003f16:	46c0      	nop			@ (mov r8, r8)
 8003f18:	ffff0000 	.word	0xffff0000
 8003f1c:	080044ad 	.word	0x080044ad
 8003f20:	08005429 	.word	0x08005429
 8003f24:	080054c9 	.word	0x080054c9
 8003f28:	80002000 	.word	0x80002000

08003f2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	68f9      	ldr	r1, [r7, #12]
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	4798      	blx	r3
  }
}
 8003f58:	46c0      	nop			@ (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b004      	add	sp, #16
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	2380      	movs	r3, #128	@ 0x80
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d00e      	beq.n	8003fa0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2280      	movs	r2, #128	@ 0x80
 8003f86:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003f88:	d00a      	beq.n	8003fa0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8e:	2201      	movs	r2, #1
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2280      	movs	r2, #128	@ 0x80
 8003f9c:	0052      	lsls	r2, r2, #1
 8003f9e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	2380      	movs	r3, #128	@ 0x80
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d00e      	beq.n	8003fc8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2280      	movs	r2, #128	@ 0x80
 8003fae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb6:	2208      	movs	r2, #8
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2280      	movs	r2, #128	@ 0x80
 8003fc4:	00d2      	lsls	r2, r2, #3
 8003fc6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	2380      	movs	r3, #128	@ 0x80
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d00e      	beq.n	8003ff0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2280      	movs	r2, #128	@ 0x80
 8003fd6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	2202      	movs	r2, #2
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2280      	movs	r2, #128	@ 0x80
 8003fec:	0092      	lsls	r2, r2, #2
 8003fee:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	220b      	movs	r2, #11
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d005      	beq.n	800400a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	0011      	movs	r1, r2
 8004004:	0018      	movs	r0, r3
 8004006:	f001 f8c1 	bl	800518c <I2C_ITError>
  }
}
 800400a:	46c0      	nop			@ (mov r8, r8)
 800400c:	46bd      	mov	sp, r7
 800400e:	b006      	add	sp, #24
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800401a:	46c0      	nop			@ (mov r8, r8)
 800401c:	46bd      	mov	sp, r7
 800401e:	b002      	add	sp, #8
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800402a:	46c0      	nop			@ (mov r8, r8)
 800402c:	46bd      	mov	sp, r7
 800402e:	b002      	add	sp, #8
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800403a:	46c0      	nop			@ (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	b002      	add	sp, #8
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b082      	sub	sp, #8
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800404a:	46c0      	nop			@ (mov r8, r8)
 800404c:	46bd      	mov	sp, r7
 800404e:	b002      	add	sp, #8
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	0008      	movs	r0, r1
 800405c:	0011      	movs	r1, r2
 800405e:	1cfb      	adds	r3, r7, #3
 8004060:	1c02      	adds	r2, r0, #0
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	003b      	movs	r3, r7
 8004066:	1c0a      	adds	r2, r1, #0
 8004068:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800406a:	46c0      	nop			@ (mov r8, r8)
 800406c:	46bd      	mov	sp, r7
 800406e:	b002      	add	sp, #8
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800407a:	46c0      	nop			@ (mov r8, r8)
 800407c:	46bd      	mov	sp, r7
 800407e:	b002      	add	sp, #8
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	46bd      	mov	sp, r7
 800408e:	b002      	add	sp, #8
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800409a:	46c0      	nop			@ (mov r8, r8)
 800409c:	46bd      	mov	sp, r7
 800409e:	b002      	add	sp, #8
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80040aa:	46c0      	nop			@ (mov r8, r8)
 80040ac:	46bd      	mov	sp, r7
 80040ae:	b002      	add	sp, #8
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2240      	movs	r2, #64	@ 0x40
 80040ce:	5c9b      	ldrb	r3, [r3, r2]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <I2C_Slave_ISR_IT+0x24>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e0e7      	b.n	80042a8 <I2C_Slave_ISR_IT+0x1f4>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2240      	movs	r2, #64	@ 0x40
 80040dc:	2101      	movs	r1, #1
 80040de:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	2220      	movs	r2, #32
 80040e4:	4013      	ands	r3, r2
 80040e6:	d00a      	beq.n	80040fe <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80040ee:	d006      	beq.n	80040fe <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	0011      	movs	r1, r2
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 fe68 	bl	8004dcc <I2C_ITSlaveCplt>
 80040fc:	e0cf      	b.n	800429e <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2210      	movs	r2, #16
 8004102:	4013      	ands	r3, r2
 8004104:	d052      	beq.n	80041ac <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2210      	movs	r2, #16
 800410a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800410c:	d04e      	beq.n	80041ac <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d12d      	bne.n	8004174 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2241      	movs	r2, #65	@ 0x41
 800411c:	5c9b      	ldrb	r3, [r3, r2]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b28      	cmp	r3, #40	@ 0x28
 8004122:	d10b      	bne.n	800413c <I2C_Slave_ISR_IT+0x88>
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	2380      	movs	r3, #128	@ 0x80
 8004128:	049b      	lsls	r3, r3, #18
 800412a:	429a      	cmp	r2, r3
 800412c:	d106      	bne.n	800413c <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	0011      	movs	r1, r2
 8004134:	0018      	movs	r0, r3
 8004136:	f000 ffd1 	bl	80050dc <I2C_ITListenCplt>
 800413a:	e036      	b.n	80041aa <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2241      	movs	r2, #65	@ 0x41
 8004140:	5c9b      	ldrb	r3, [r3, r2]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b29      	cmp	r3, #41	@ 0x29
 8004146:	d110      	bne.n	800416a <I2C_Slave_ISR_IT+0xb6>
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	4a59      	ldr	r2, [pc, #356]	@ (80042b0 <I2C_Slave_ISR_IT+0x1fc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00c      	beq.n	800416a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2210      	movs	r2, #16
 8004156:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	0018      	movs	r0, r3
 800415c:	f001 f941 	bl	80053e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	0018      	movs	r0, r3
 8004164:	f000 fd00 	bl	8004b68 <I2C_ITSlaveSeqCplt>
 8004168:	e01f      	b.n	80041aa <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2210      	movs	r2, #16
 8004170:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004172:	e091      	b.n	8004298 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2210      	movs	r2, #16
 800417a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004180:	2204      	movs	r2, #4
 8004182:	431a      	orrs	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <I2C_Slave_ISR_IT+0xe6>
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	2380      	movs	r3, #128	@ 0x80
 8004192:	045b      	lsls	r3, r3, #17
 8004194:	429a      	cmp	r2, r3
 8004196:	d000      	beq.n	800419a <I2C_Slave_ISR_IT+0xe6>
 8004198:	e07e      	b.n	8004298 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	0011      	movs	r1, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f000 fff2 	bl	800518c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80041a8:	e076      	b.n	8004298 <I2C_Slave_ISR_IT+0x1e4>
 80041aa:	e075      	b.n	8004298 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	2204      	movs	r2, #4
 80041b0:	4013      	ands	r3, r2
 80041b2:	d02f      	beq.n	8004214 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2204      	movs	r2, #4
 80041b8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80041ba:	d02b      	beq.n	8004214 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d018      	beq.n	80041f8 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d14c      	bne.n	800429c <I2C_Slave_ISR_IT+0x1e8>
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	4a2a      	ldr	r2, [pc, #168]	@ (80042b0 <I2C_Slave_ISR_IT+0x1fc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d048      	beq.n	800429c <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	0018      	movs	r0, r3
 800420e:	f000 fcab 	bl	8004b68 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004212:	e043      	b.n	800429c <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	2208      	movs	r2, #8
 8004218:	4013      	ands	r3, r2
 800421a:	d00a      	beq.n	8004232 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2208      	movs	r2, #8
 8004220:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004222:	d006      	beq.n	8004232 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	0011      	movs	r1, r2
 800422a:	0018      	movs	r0, r3
 800422c:	f000 fbb6 	bl	800499c <I2C_ITAddrCplt>
 8004230:	e035      	b.n	800429e <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2202      	movs	r2, #2
 8004236:	4013      	ands	r3, r2
 8004238:	d031      	beq.n	800429e <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2202      	movs	r2, #2
 800423e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004240:	d02d      	beq.n	800429e <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d018      	beq.n	800427e <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	781a      	ldrb	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800427c:	e00f      	b.n	800429e <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	2380      	movs	r3, #128	@ 0x80
 8004282:	045b      	lsls	r3, r3, #17
 8004284:	429a      	cmp	r2, r3
 8004286:	d002      	beq.n	800428e <I2C_Slave_ISR_IT+0x1da>
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d107      	bne.n	800429e <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	0018      	movs	r0, r3
 8004292:	f000 fc69 	bl	8004b68 <I2C_ITSlaveSeqCplt>
 8004296:	e002      	b.n	800429e <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8004298:	46c0      	nop			@ (mov r8, r8)
 800429a:	e000      	b.n	800429e <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 800429c:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2240      	movs	r2, #64	@ 0x40
 80042a2:	2100      	movs	r1, #0
 80042a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	0018      	movs	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b006      	add	sp, #24
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	ffff0000 	.word	0xffff0000

080042b4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80042b4:	b590      	push	{r4, r7, lr}
 80042b6:	b089      	sub	sp, #36	@ 0x24
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2240      	movs	r2, #64	@ 0x40
 80042c4:	5c9b      	ldrb	r3, [r3, r2]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <I2C_Master_ISR_DMA+0x1a>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e0e7      	b.n	800449e <I2C_Master_ISR_DMA+0x1ea>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2240      	movs	r2, #64	@ 0x40
 80042d2:	2101      	movs	r1, #1
 80042d4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2210      	movs	r2, #16
 80042da:	4013      	ands	r3, r2
 80042dc:	d017      	beq.n	800430e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2210      	movs	r2, #16
 80042e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80042e4:	d013      	beq.n	800430e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2210      	movs	r2, #16
 80042ec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f2:	2204      	movs	r2, #4
 80042f4:	431a      	orrs	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2120      	movs	r1, #32
 80042fe:	0018      	movs	r0, r3
 8004300:	f001 fb2e 	bl	8005960 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	0018      	movs	r0, r3
 8004308:	f001 f86b 	bl	80053e2 <I2C_Flush_TXDR>
 800430c:	e0c2      	b.n	8004494 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2280      	movs	r2, #128	@ 0x80
 8004312:	4013      	ands	r3, r2
 8004314:	d100      	bne.n	8004318 <I2C_Master_ISR_DMA+0x64>
 8004316:	e07c      	b.n	8004412 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2240      	movs	r2, #64	@ 0x40
 800431c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800431e:	d100      	bne.n	8004322 <I2C_Master_ISR_DMA+0x6e>
 8004320:	e077      	b.n	8004412 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2140      	movs	r1, #64	@ 0x40
 800432e:	438a      	bics	r2, r1
 8004330:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d055      	beq.n	80043e8 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	b29a      	uxth	r2, r3
 8004344:	2312      	movs	r3, #18
 8004346:	18fb      	adds	r3, r7, r3
 8004348:	0592      	lsls	r2, r2, #22
 800434a:	0d92      	lsrs	r2, r2, #22
 800434c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	2bff      	cmp	r3, #255	@ 0xff
 8004356:	d906      	bls.n	8004366 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	22ff      	movs	r2, #255	@ 0xff
 800435c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800435e:	2380      	movs	r3, #128	@ 0x80
 8004360:	045b      	lsls	r3, r3, #17
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	e010      	b.n	8004388 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004374:	4a4c      	ldr	r2, [pc, #304]	@ (80044a8 <I2C_Master_ISR_DMA+0x1f4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d003      	beq.n	8004382 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e002      	b.n	8004388 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004382:	2380      	movs	r3, #128	@ 0x80
 8004384:	049b      	lsls	r3, r3, #18
 8004386:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438c:	b2da      	uxtb	r2, r3
 800438e:	697c      	ldr	r4, [r7, #20]
 8004390:	2312      	movs	r3, #18
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	8819      	ldrh	r1, [r3, #0]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	2300      	movs	r3, #0
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	0023      	movs	r3, r4
 800439e:	f001 faa5 	bl	80058ec <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2241      	movs	r2, #65	@ 0x41
 80043b8:	5c9b      	ldrb	r3, [r3, r2]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b22      	cmp	r3, #34	@ 0x22
 80043be:	d109      	bne.n	80043d4 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2180      	movs	r1, #128	@ 0x80
 80043cc:	0209      	lsls	r1, r1, #8
 80043ce:	430a      	orrs	r2, r1
 80043d0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80043d2:	e05f      	b.n	8004494 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2180      	movs	r1, #128	@ 0x80
 80043e0:	01c9      	lsls	r1, r1, #7
 80043e2:	430a      	orrs	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80043e6:	e055      	b.n	8004494 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	2380      	movs	r3, #128	@ 0x80
 80043f0:	049b      	lsls	r3, r3, #18
 80043f2:	401a      	ands	r2, r3
 80043f4:	2380      	movs	r3, #128	@ 0x80
 80043f6:	049b      	lsls	r3, r3, #18
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d004      	beq.n	8004406 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	0018      	movs	r0, r3
 8004400:	f000 fb70 	bl	8004ae4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004404:	e046      	b.n	8004494 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2140      	movs	r1, #64	@ 0x40
 800440a:	0018      	movs	r0, r3
 800440c:	f000 febe 	bl	800518c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004410:	e040      	b.n	8004494 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2240      	movs	r2, #64	@ 0x40
 8004416:	4013      	ands	r3, r2
 8004418:	d02c      	beq.n	8004474 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2240      	movs	r2, #64	@ 0x40
 800441e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004420:	d028      	beq.n	8004474 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d11d      	bne.n	8004468 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	2380      	movs	r3, #128	@ 0x80
 8004434:	049b      	lsls	r3, r3, #18
 8004436:	401a      	ands	r2, r3
 8004438:	2380      	movs	r3, #128	@ 0x80
 800443a:	049b      	lsls	r3, r3, #18
 800443c:	429a      	cmp	r2, r3
 800443e:	d028      	beq.n	8004492 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004444:	4a18      	ldr	r2, [pc, #96]	@ (80044a8 <I2C_Master_ISR_DMA+0x1f4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d109      	bne.n	800445e <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2180      	movs	r1, #128	@ 0x80
 8004456:	01c9      	lsls	r1, r1, #7
 8004458:	430a      	orrs	r2, r1
 800445a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800445c:	e019      	b.n	8004492 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	0018      	movs	r0, r3
 8004462:	f000 fb3f 	bl	8004ae4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004466:	e014      	b.n	8004492 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2140      	movs	r1, #64	@ 0x40
 800446c:	0018      	movs	r0, r3
 800446e:	f000 fe8d 	bl	800518c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004472:	e00e      	b.n	8004492 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2220      	movs	r2, #32
 8004478:	4013      	ands	r3, r2
 800447a:	d00b      	beq.n	8004494 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004482:	d007      	beq.n	8004494 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	0011      	movs	r1, r2
 800448a:	0018      	movs	r0, r3
 800448c:	f000 fbd0 	bl	8004c30 <I2C_ITMasterCplt>
 8004490:	e000      	b.n	8004494 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8004492:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2240      	movs	r2, #64	@ 0x40
 8004498:	2100      	movs	r1, #0
 800449a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	0018      	movs	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b007      	add	sp, #28
 80044a4:	bd90      	pop	{r4, r7, pc}
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	ffff0000 	.word	0xffff0000

080044ac <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b089      	sub	sp, #36	@ 0x24
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80044b8:	4b90      	ldr	r3, [pc, #576]	@ (80046fc <I2C_Mem_ISR_DMA+0x250>)
 80044ba:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2240      	movs	r2, #64	@ 0x40
 80044c0:	5c9b      	ldrb	r3, [r3, r2]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <I2C_Mem_ISR_DMA+0x1e>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e113      	b.n	80046f2 <I2C_Mem_ISR_DMA+0x246>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2240      	movs	r2, #64	@ 0x40
 80044ce:	2101      	movs	r1, #1
 80044d0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2210      	movs	r2, #16
 80044d6:	4013      	ands	r3, r2
 80044d8:	d017      	beq.n	800450a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2210      	movs	r2, #16
 80044de:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80044e0:	d013      	beq.n	800450a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2210      	movs	r2, #16
 80044e8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ee:	2204      	movs	r2, #4
 80044f0:	431a      	orrs	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2120      	movs	r1, #32
 80044fa:	0018      	movs	r0, r3
 80044fc:	f001 fa30 	bl	8005960 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	0018      	movs	r0, r3
 8004504:	f000 ff6d 	bl	80053e2 <I2C_Flush_TXDR>
 8004508:	e0ee      	b.n	80046e8 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2202      	movs	r2, #2
 800450e:	4013      	ands	r3, r2
 8004510:	d00d      	beq.n	800452e <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2202      	movs	r2, #2
 8004516:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004518:	d009      	beq.n	800452e <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004522:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	4252      	negs	r2, r2
 800452a:	651a      	str	r2, [r3, #80]	@ 0x50
 800452c:	e0dc      	b.n	80046e8 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2280      	movs	r2, #128	@ 0x80
 8004532:	4013      	ands	r3, r2
 8004534:	d063      	beq.n	80045fe <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2240      	movs	r2, #64	@ 0x40
 800453a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800453c:	d05f      	beq.n	80045fe <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2101      	movs	r1, #1
 8004542:	0018      	movs	r0, r3
 8004544:	f001 fa96 	bl	8005a74 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2110      	movs	r1, #16
 800454c:	0018      	movs	r0, r3
 800454e:	f001 fa07 	bl	8005960 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d04a      	beq.n	80045f2 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	2bff      	cmp	r3, #255	@ 0xff
 8004564:	d910      	bls.n	8004588 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	22ff      	movs	r2, #255	@ 0xff
 800456a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004570:	b299      	uxth	r1, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004576:	b2da      	uxtb	r2, r3
 8004578:	2380      	movs	r3, #128	@ 0x80
 800457a:	045b      	lsls	r3, r3, #17
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	2400      	movs	r4, #0
 8004580:	9400      	str	r4, [sp, #0]
 8004582:	f001 f9b3 	bl	80058ec <I2C_TransferConfig>
 8004586:	e011      	b.n	80045ac <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004596:	b299      	uxth	r1, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800459c:	b2da      	uxtb	r2, r3
 800459e:	2380      	movs	r3, #128	@ 0x80
 80045a0:	049b      	lsls	r3, r3, #18
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	2400      	movs	r4, #0
 80045a6:	9400      	str	r4, [sp, #0]
 80045a8:	f001 f9a0 	bl	80058ec <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2241      	movs	r2, #65	@ 0x41
 80045c2:	5c9b      	ldrb	r3, [r3, r2]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b22      	cmp	r3, #34	@ 0x22
 80045c8:	d109      	bne.n	80045de <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2180      	movs	r1, #128	@ 0x80
 80045d6:	0209      	lsls	r1, r1, #8
 80045d8:	430a      	orrs	r2, r1
 80045da:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80045dc:	e084      	b.n	80046e8 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2180      	movs	r1, #128	@ 0x80
 80045ea:	01c9      	lsls	r1, r1, #7
 80045ec:	430a      	orrs	r2, r1
 80045ee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80045f0:	e07a      	b.n	80046e8 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2140      	movs	r1, #64	@ 0x40
 80045f6:	0018      	movs	r0, r3
 80045f8:	f000 fdc8 	bl	800518c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80045fc:	e074      	b.n	80046e8 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2240      	movs	r2, #64	@ 0x40
 8004602:	4013      	ands	r3, r2
 8004604:	d062      	beq.n	80046cc <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2240      	movs	r2, #64	@ 0x40
 800460a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800460c:	d05e      	beq.n	80046cc <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2101      	movs	r1, #1
 8004612:	0018      	movs	r0, r3
 8004614:	f001 fa2e 	bl	8005a74 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2110      	movs	r1, #16
 800461c:	0018      	movs	r0, r3
 800461e:	f001 f99f 	bl	8005960 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2241      	movs	r2, #65	@ 0x41
 8004626:	5c9b      	ldrb	r3, [r3, r2]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b22      	cmp	r3, #34	@ 0x22
 800462c:	d101      	bne.n	8004632 <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 800462e:	4b34      	ldr	r3, [pc, #208]	@ (8004700 <I2C_Mem_ISR_DMA+0x254>)
 8004630:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	2bff      	cmp	r3, #255	@ 0xff
 800463a:	d911      	bls.n	8004660 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	22ff      	movs	r2, #255	@ 0xff
 8004640:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004646:	b299      	uxth	r1, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464c:	b2da      	uxtb	r2, r3
 800464e:	2380      	movs	r3, #128	@ 0x80
 8004650:	045c      	lsls	r4, r3, #17
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	0023      	movs	r3, r4
 800465a:	f001 f947 	bl	80058ec <I2C_TransferConfig>
 800465e:	e012      	b.n	8004686 <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466e:	b299      	uxth	r1, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004674:	b2da      	uxtb	r2, r3
 8004676:	2380      	movs	r3, #128	@ 0x80
 8004678:	049c      	lsls	r4, r3, #18
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	0023      	movs	r3, r4
 8004682:	f001 f933 	bl	80058ec <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2241      	movs	r2, #65	@ 0x41
 800469c:	5c9b      	ldrb	r3, [r3, r2]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b22      	cmp	r3, #34	@ 0x22
 80046a2:	d109      	bne.n	80046b8 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2180      	movs	r1, #128	@ 0x80
 80046b0:	0209      	lsls	r1, r1, #8
 80046b2:	430a      	orrs	r2, r1
 80046b4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046b6:	e017      	b.n	80046e8 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2180      	movs	r1, #128	@ 0x80
 80046c4:	01c9      	lsls	r1, r1, #7
 80046c6:	430a      	orrs	r2, r1
 80046c8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046ca:	e00d      	b.n	80046e8 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2220      	movs	r2, #32
 80046d0:	4013      	ands	r3, r2
 80046d2:	d009      	beq.n	80046e8 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80046da:	d005      	beq.n	80046e8 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	0011      	movs	r1, r2
 80046e2:	0018      	movs	r0, r3
 80046e4:	f000 faa4 	bl	8004c30 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2240      	movs	r2, #64	@ 0x40
 80046ec:	2100      	movs	r1, #0
 80046ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	0018      	movs	r0, r3
 80046f4:	46bd      	mov	sp, r7
 80046f6:	b007      	add	sp, #28
 80046f8:	bd90      	pop	{r4, r7, pc}
 80046fa:	46c0      	nop			@ (mov r8, r8)
 80046fc:	80002000 	.word	0x80002000
 8004700:	80002400 	.word	0x80002400

08004704 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004714:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2240      	movs	r2, #64	@ 0x40
 800471e:	5c9b      	ldrb	r3, [r3, r2]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <I2C_Slave_ISR_DMA+0x24>
 8004724:	2302      	movs	r3, #2
 8004726:	e0ce      	b.n	80048c6 <I2C_Slave_ISR_DMA+0x1c2>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2240      	movs	r2, #64	@ 0x40
 800472c:	2101      	movs	r1, #1
 800472e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2220      	movs	r2, #32
 8004734:	4013      	ands	r3, r2
 8004736:	d00a      	beq.n	800474e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800473e:	d006      	beq.n	800474e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	0011      	movs	r1, r2
 8004746:	0018      	movs	r0, r3
 8004748:	f000 fb40 	bl	8004dcc <I2C_ITSlaveCplt>
 800474c:	e0b6      	b.n	80048bc <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2210      	movs	r2, #16
 8004752:	4013      	ands	r3, r2
 8004754:	d100      	bne.n	8004758 <I2C_Slave_ISR_DMA+0x54>
 8004756:	e0a3      	b.n	80048a0 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2210      	movs	r2, #16
 800475c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800475e:	d100      	bne.n	8004762 <I2C_Slave_ISR_DMA+0x5e>
 8004760:	e09e      	b.n	80048a0 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	2380      	movs	r3, #128	@ 0x80
 8004766:	01db      	lsls	r3, r3, #7
 8004768:	4013      	ands	r3, r2
 800476a:	d105      	bne.n	8004778 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	2380      	movs	r3, #128	@ 0x80
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004774:	d100      	bne.n	8004778 <I2C_Slave_ISR_DMA+0x74>
 8004776:	e08c      	b.n	8004892 <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00c      	beq.n	800479a <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	2380      	movs	r3, #128	@ 0x80
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	4013      	ands	r3, r2
 8004788:	d007      	beq.n	800479a <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8004796:	2301      	movs	r3, #1
 8004798:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00c      	beq.n	80047bc <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	2380      	movs	r3, #128	@ 0x80
 80047a6:	01db      	lsls	r3, r3, #7
 80047a8:	4013      	ands	r3, r2
 80047aa:	d007      	beq.n	80047bc <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80047b8:	2301      	movs	r3, #1
 80047ba:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d12d      	bne.n	800481e <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2241      	movs	r2, #65	@ 0x41
 80047c6:	5c9b      	ldrb	r3, [r3, r2]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b28      	cmp	r3, #40	@ 0x28
 80047cc:	d10b      	bne.n	80047e6 <I2C_Slave_ISR_DMA+0xe2>
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	2380      	movs	r3, #128	@ 0x80
 80047d2:	049b      	lsls	r3, r3, #18
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d106      	bne.n	80047e6 <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	0011      	movs	r1, r2
 80047de:	0018      	movs	r0, r3
 80047e0:	f000 fc7c 	bl	80050dc <I2C_ITListenCplt>
 80047e4:	e054      	b.n	8004890 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2241      	movs	r2, #65	@ 0x41
 80047ea:	5c9b      	ldrb	r3, [r3, r2]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b29      	cmp	r3, #41	@ 0x29
 80047f0:	d110      	bne.n	8004814 <I2C_Slave_ISR_DMA+0x110>
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	4a36      	ldr	r2, [pc, #216]	@ (80048d0 <I2C_Slave_ISR_DMA+0x1cc>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00c      	beq.n	8004814 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2210      	movs	r2, #16
 8004800:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	0018      	movs	r0, r3
 8004806:	f000 fdec 	bl	80053e2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	0018      	movs	r0, r3
 800480e:	f000 f9ab 	bl	8004b68 <I2C_ITSlaveSeqCplt>
 8004812:	e03d      	b.n	8004890 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2210      	movs	r2, #16
 800481a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800481c:	e03e      	b.n	800489c <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2210      	movs	r2, #16
 8004824:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482a:	2204      	movs	r2, #4
 800482c:	431a      	orrs	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004832:	2317      	movs	r3, #23
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	2141      	movs	r1, #65	@ 0x41
 800483a:	5c52      	ldrb	r2, [r2, r1]
 800483c:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d004      	beq.n	800484e <I2C_Slave_ISR_DMA+0x14a>
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	2380      	movs	r3, #128	@ 0x80
 8004848:	045b      	lsls	r3, r3, #17
 800484a:	429a      	cmp	r2, r3
 800484c:	d126      	bne.n	800489c <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800484e:	2217      	movs	r2, #23
 8004850:	18bb      	adds	r3, r7, r2
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b21      	cmp	r3, #33	@ 0x21
 8004856:	d003      	beq.n	8004860 <I2C_Slave_ISR_DMA+0x15c>
 8004858:	18bb      	adds	r3, r7, r2
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b29      	cmp	r3, #41	@ 0x29
 800485e:	d103      	bne.n	8004868 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2221      	movs	r2, #33	@ 0x21
 8004864:	631a      	str	r2, [r3, #48]	@ 0x30
 8004866:	e00b      	b.n	8004880 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004868:	2217      	movs	r2, #23
 800486a:	18bb      	adds	r3, r7, r2
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b22      	cmp	r3, #34	@ 0x22
 8004870:	d003      	beq.n	800487a <I2C_Slave_ISR_DMA+0x176>
 8004872:	18bb      	adds	r3, r7, r2
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b2a      	cmp	r3, #42	@ 0x2a
 8004878:	d102      	bne.n	8004880 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2222      	movs	r2, #34	@ 0x22
 800487e:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	0011      	movs	r1, r2
 8004888:	0018      	movs	r0, r3
 800488a:	f000 fc7f 	bl	800518c <I2C_ITError>
      if (treatdmanack == 1U)
 800488e:	e005      	b.n	800489c <I2C_Slave_ISR_DMA+0x198>
 8004890:	e004      	b.n	800489c <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2210      	movs	r2, #16
 8004898:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800489a:	e00f      	b.n	80048bc <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 800489c:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800489e:	e00d      	b.n	80048bc <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2208      	movs	r2, #8
 80048a4:	4013      	ands	r3, r2
 80048a6:	d009      	beq.n	80048bc <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2208      	movs	r2, #8
 80048ac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80048ae:	d005      	beq.n	80048bc <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	0011      	movs	r1, r2
 80048b6:	0018      	movs	r0, r3
 80048b8:	f000 f870 	bl	800499c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2240      	movs	r2, #64	@ 0x40
 80048c0:	2100      	movs	r1, #0
 80048c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	0018      	movs	r0, r3
 80048c8:	46bd      	mov	sp, r7
 80048ca:	b008      	add	sp, #32
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	ffff0000 	.word	0xffff0000

080048d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80048d4:	b5b0      	push	{r4, r5, r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af02      	add	r7, sp, #8
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	000c      	movs	r4, r1
 80048de:	0010      	movs	r0, r2
 80048e0:	0019      	movs	r1, r3
 80048e2:	250a      	movs	r5, #10
 80048e4:	197b      	adds	r3, r7, r5
 80048e6:	1c22      	adds	r2, r4, #0
 80048e8:	801a      	strh	r2, [r3, #0]
 80048ea:	2308      	movs	r3, #8
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	1c02      	adds	r2, r0, #0
 80048f0:	801a      	strh	r2, [r3, #0]
 80048f2:	1dbb      	adds	r3, r7, #6
 80048f4:	1c0a      	adds	r2, r1, #0
 80048f6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048f8:	1dbb      	adds	r3, r7, #6
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	2380      	movs	r3, #128	@ 0x80
 8004900:	045c      	lsls	r4, r3, #17
 8004902:	197b      	adds	r3, r7, r5
 8004904:	8819      	ldrh	r1, [r3, #0]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	4b23      	ldr	r3, [pc, #140]	@ (8004998 <I2C_RequestMemoryWrite+0xc4>)
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	0023      	movs	r3, r4
 800490e:	f000 ffed 	bl	80058ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004914:	6a39      	ldr	r1, [r7, #32]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	0018      	movs	r0, r3
 800491a:	f000 fe65 	bl	80055e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800491e:	1e03      	subs	r3, r0, #0
 8004920:	d001      	beq.n	8004926 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e033      	b.n	800498e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004926:	1dbb      	adds	r3, r7, #6
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d107      	bne.n	800493e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800492e:	2308      	movs	r3, #8
 8004930:	18fb      	adds	r3, r7, r3
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	629a      	str	r2, [r3, #40]	@ 0x28
 800493c:	e019      	b.n	8004972 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800493e:	2308      	movs	r3, #8
 8004940:	18fb      	adds	r3, r7, r3
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	0a1b      	lsrs	r3, r3, #8
 8004946:	b29b      	uxth	r3, r3
 8004948:	b2da      	uxtb	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004952:	6a39      	ldr	r1, [r7, #32]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	0018      	movs	r0, r3
 8004958:	f000 fe46 	bl	80055e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800495c:	1e03      	subs	r3, r0, #0
 800495e:	d001      	beq.n	8004964 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e014      	b.n	800498e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004964:	2308      	movs	r3, #8
 8004966:	18fb      	adds	r3, r7, r3
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b2da      	uxtb	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004972:	6a3a      	ldr	r2, [r7, #32]
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	0013      	movs	r3, r2
 800497c:	2200      	movs	r2, #0
 800497e:	2180      	movs	r1, #128	@ 0x80
 8004980:	f000 fdda 	bl	8005538 <I2C_WaitOnFlagUntilTimeout>
 8004984:	1e03      	subs	r3, r0, #0
 8004986:	d001      	beq.n	800498c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	0018      	movs	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	b004      	add	sp, #16
 8004994:	bdb0      	pop	{r4, r5, r7, pc}
 8004996:	46c0      	nop			@ (mov r8, r8)
 8004998:	80002000 	.word	0x80002000

0800499c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800499c:	b5b0      	push	{r4, r5, r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2241      	movs	r2, #65	@ 0x41
 80049aa:	5c9b      	ldrb	r3, [r3, r2]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	001a      	movs	r2, r3
 80049b0:	2328      	movs	r3, #40	@ 0x28
 80049b2:	4013      	ands	r3, r2
 80049b4:	2b28      	cmp	r3, #40	@ 0x28
 80049b6:	d000      	beq.n	80049ba <I2C_ITAddrCplt+0x1e>
 80049b8:	e088      	b.n	8004acc <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	0c1b      	lsrs	r3, r3, #16
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	250f      	movs	r5, #15
 80049c6:	197b      	adds	r3, r7, r5
 80049c8:	2101      	movs	r1, #1
 80049ca:	400a      	ands	r2, r1
 80049cc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	0c1b      	lsrs	r3, r3, #16
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	200c      	movs	r0, #12
 80049da:	183b      	adds	r3, r7, r0
 80049dc:	21fe      	movs	r1, #254	@ 0xfe
 80049de:	400a      	ands	r2, r1
 80049e0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	240a      	movs	r4, #10
 80049ec:	193b      	adds	r3, r7, r4
 80049ee:	0592      	lsls	r2, r2, #22
 80049f0:	0d92      	lsrs	r2, r2, #22
 80049f2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	2308      	movs	r3, #8
 80049fe:	18fb      	adds	r3, r7, r3
 8004a00:	21fe      	movs	r1, #254	@ 0xfe
 8004a02:	400a      	ands	r2, r1
 8004a04:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d148      	bne.n	8004aa0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004a0e:	0021      	movs	r1, r4
 8004a10:	187b      	adds	r3, r7, r1
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	09db      	lsrs	r3, r3, #7
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	183b      	adds	r3, r7, r0
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	4053      	eors	r3, r2
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	001a      	movs	r2, r3
 8004a22:	2306      	movs	r3, #6
 8004a24:	4013      	ands	r3, r2
 8004a26:	d120      	bne.n	8004a6a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004a28:	183b      	adds	r3, r7, r0
 8004a2a:	187a      	adds	r2, r7, r1
 8004a2c:	8812      	ldrh	r2, [r2, #0]
 8004a2e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d14c      	bne.n	8004adc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2240      	movs	r2, #64	@ 0x40
 8004a54:	2100      	movs	r1, #0
 8004a56:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a58:	183b      	adds	r3, r7, r0
 8004a5a:	881a      	ldrh	r2, [r3, #0]
 8004a5c:	197b      	adds	r3, r7, r5
 8004a5e:	7819      	ldrb	r1, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	0018      	movs	r0, r3
 8004a64:	f7ff faf5 	bl	8004052 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a68:	e038      	b.n	8004adc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004a6a:	240c      	movs	r4, #12
 8004a6c:	193b      	adds	r3, r7, r4
 8004a6e:	2208      	movs	r2, #8
 8004a70:	18ba      	adds	r2, r7, r2
 8004a72:	8812      	ldrh	r2, [r2, #0]
 8004a74:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a76:	2380      	movs	r3, #128	@ 0x80
 8004a78:	021a      	lsls	r2, r3, #8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	0011      	movs	r1, r2
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f000 fff8 	bl	8005a74 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2240      	movs	r2, #64	@ 0x40
 8004a88:	2100      	movs	r1, #0
 8004a8a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a8c:	193b      	adds	r3, r7, r4
 8004a8e:	881a      	ldrh	r2, [r3, #0]
 8004a90:	230f      	movs	r3, #15
 8004a92:	18fb      	adds	r3, r7, r3
 8004a94:	7819      	ldrb	r1, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f7ff fada 	bl	8004052 <HAL_I2C_AddrCallback>
}
 8004a9e:	e01d      	b.n	8004adc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004aa0:	2380      	movs	r3, #128	@ 0x80
 8004aa2:	021a      	lsls	r2, r3, #8
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	0011      	movs	r1, r2
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f000 ffe3 	bl	8005a74 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2240      	movs	r2, #64	@ 0x40
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ab6:	230c      	movs	r3, #12
 8004ab8:	18fb      	adds	r3, r7, r3
 8004aba:	881a      	ldrh	r2, [r3, #0]
 8004abc:	230f      	movs	r3, #15
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	7819      	ldrb	r1, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f7ff fac4 	bl	8004052 <HAL_I2C_AddrCallback>
}
 8004aca:	e007      	b.n	8004adc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2240      	movs	r2, #64	@ 0x40
 8004ad8:	2100      	movs	r1, #0
 8004ada:	5499      	strb	r1, [r3, r2]
}
 8004adc:	46c0      	nop			@ (mov r8, r8)
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b004      	add	sp, #16
 8004ae2:	bdb0      	pop	{r4, r5, r7, pc}

08004ae4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2242      	movs	r2, #66	@ 0x42
 8004af0:	2100      	movs	r1, #0
 8004af2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2241      	movs	r2, #65	@ 0x41
 8004af8:	5c9b      	ldrb	r3, [r3, r2]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b21      	cmp	r3, #33	@ 0x21
 8004afe:	d117      	bne.n	8004b30 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2241      	movs	r2, #65	@ 0x41
 8004b04:	2120      	movs	r1, #32
 8004b06:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2211      	movs	r2, #17
 8004b0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2101      	movs	r1, #1
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f000 ffab 	bl	8005a74 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2240      	movs	r2, #64	@ 0x40
 8004b22:	2100      	movs	r1, #0
 8004b24:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f7ff fa72 	bl	8004012 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b2e:	e016      	b.n	8004b5e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2241      	movs	r2, #65	@ 0x41
 8004b34:	2120      	movs	r1, #32
 8004b36:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2212      	movs	r2, #18
 8004b3c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2102      	movs	r1, #2
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f000 ff93 	bl	8005a74 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2240      	movs	r2, #64	@ 0x40
 8004b52:	2100      	movs	r1, #0
 8004b54:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f7ff fa62 	bl	8004022 <HAL_I2C_MasterRxCpltCallback>
}
 8004b5e:	46c0      	nop			@ (mov r8, r8)
 8004b60:	46bd      	mov	sp, r7
 8004b62:	b002      	add	sp, #8
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2242      	movs	r2, #66	@ 0x42
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	2380      	movs	r3, #128	@ 0x80
 8004b84:	01db      	lsls	r3, r3, #7
 8004b86:	4013      	ands	r3, r2
 8004b88:	d008      	beq.n	8004b9c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4924      	ldr	r1, [pc, #144]	@ (8004c28 <I2C_ITSlaveSeqCplt+0xc0>)
 8004b96:	400a      	ands	r2, r1
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	e00c      	b.n	8004bb6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	2380      	movs	r3, #128	@ 0x80
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	d007      	beq.n	8004bb6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	491e      	ldr	r1, [pc, #120]	@ (8004c2c <I2C_ITSlaveSeqCplt+0xc4>)
 8004bb2:	400a      	ands	r2, r1
 8004bb4:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2241      	movs	r2, #65	@ 0x41
 8004bba:	5c9b      	ldrb	r3, [r3, r2]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b29      	cmp	r3, #41	@ 0x29
 8004bc0:	d114      	bne.n	8004bec <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2241      	movs	r2, #65	@ 0x41
 8004bc6:	2128      	movs	r1, #40	@ 0x28
 8004bc8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2221      	movs	r2, #33	@ 0x21
 8004bce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f000 ff4d 	bl	8005a74 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2240      	movs	r2, #64	@ 0x40
 8004bde:	2100      	movs	r1, #0
 8004be0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	0018      	movs	r0, r3
 8004be6:	f7ff fa24 	bl	8004032 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004bea:	e019      	b.n	8004c20 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2241      	movs	r2, #65	@ 0x41
 8004bf0:	5c9b      	ldrb	r3, [r3, r2]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bf6:	d113      	bne.n	8004c20 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2241      	movs	r2, #65	@ 0x41
 8004bfc:	2128      	movs	r1, #40	@ 0x28
 8004bfe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2222      	movs	r2, #34	@ 0x22
 8004c04:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2102      	movs	r1, #2
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 ff32 	bl	8005a74 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2240      	movs	r2, #64	@ 0x40
 8004c14:	2100      	movs	r1, #0
 8004c16:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	f7ff fa11 	bl	8004042 <HAL_I2C_SlaveRxCpltCallback>
}
 8004c20:	46c0      	nop			@ (mov r8, r8)
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b004      	add	sp, #16
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	ffffbfff 	.word	0xffffbfff
 8004c2c:	ffff7fff 	.word	0xffff7fff

08004c30 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2220      	movs	r2, #32
 8004c44:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2241      	movs	r2, #65	@ 0x41
 8004c4a:	5c9b      	ldrb	r3, [r3, r2]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b21      	cmp	r3, #33	@ 0x21
 8004c50:	d108      	bne.n	8004c64 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2101      	movs	r1, #1
 8004c56:	0018      	movs	r0, r3
 8004c58:	f000 ff0c 	bl	8005a74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2211      	movs	r2, #17
 8004c60:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c62:	e00d      	b.n	8004c80 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2241      	movs	r2, #65	@ 0x41
 8004c68:	5c9b      	ldrb	r3, [r3, r2]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b22      	cmp	r3, #34	@ 0x22
 8004c6e:	d107      	bne.n	8004c80 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2102      	movs	r1, #2
 8004c74:	0018      	movs	r0, r3
 8004c76:	f000 fefd 	bl	8005a74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2212      	movs	r2, #18
 8004c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	494e      	ldr	r1, [pc, #312]	@ (8004dc4 <I2C_ITMasterCplt+0x194>)
 8004c8c:	400a      	ands	r2, r1
 8004c8e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a4b      	ldr	r2, [pc, #300]	@ (8004dc8 <I2C_ITMasterCplt+0x198>)
 8004c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	2210      	movs	r2, #16
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	d009      	beq.n	8004cb8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2210      	movs	r2, #16
 8004caa:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb0:	2204      	movs	r2, #4
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2241      	movs	r2, #65	@ 0x41
 8004cbc:	5c9b      	ldrb	r3, [r3, r2]
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b60      	cmp	r3, #96	@ 0x60
 8004cc2:	d109      	bne.n	8004cd8 <I2C_ITMasterCplt+0xa8>
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2204      	movs	r2, #4
 8004cc8:	4013      	ands	r3, r2
 8004cca:	d005      	beq.n	8004cd8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f000 fb81 	bl	80053e2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce4:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2241      	movs	r2, #65	@ 0x41
 8004cea:	5c9b      	ldrb	r3, [r3, r2]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b60      	cmp	r3, #96	@ 0x60
 8004cf0:	d002      	beq.n	8004cf8 <I2C_ITMasterCplt+0xc8>
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d007      	beq.n	8004d08 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	0011      	movs	r1, r2
 8004d00:	0018      	movs	r0, r3
 8004d02:	f000 fa43 	bl	800518c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d06:	e058      	b.n	8004dba <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2241      	movs	r2, #65	@ 0x41
 8004d0c:	5c9b      	ldrb	r3, [r3, r2]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b21      	cmp	r3, #33	@ 0x21
 8004d12:	d126      	bne.n	8004d62 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2241      	movs	r2, #65	@ 0x41
 8004d18:	2120      	movs	r1, #32
 8004d1a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2242      	movs	r2, #66	@ 0x42
 8004d26:	5c9b      	ldrb	r3, [r3, r2]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b40      	cmp	r3, #64	@ 0x40
 8004d2c:	d10c      	bne.n	8004d48 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2242      	movs	r2, #66	@ 0x42
 8004d32:	2100      	movs	r1, #0
 8004d34:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2240      	movs	r2, #64	@ 0x40
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	0018      	movs	r0, r3
 8004d42:	f7fc fa4f 	bl	80011e4 <HAL_I2C_MemTxCpltCallback>
}
 8004d46:	e038      	b.n	8004dba <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2242      	movs	r2, #66	@ 0x42
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2240      	movs	r2, #64	@ 0x40
 8004d54:	2100      	movs	r1, #0
 8004d56:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f7ff f959 	bl	8004012 <HAL_I2C_MasterTxCpltCallback>
}
 8004d60:	e02b      	b.n	8004dba <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2241      	movs	r2, #65	@ 0x41
 8004d66:	5c9b      	ldrb	r3, [r3, r2]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b22      	cmp	r3, #34	@ 0x22
 8004d6c:	d125      	bne.n	8004dba <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2241      	movs	r2, #65	@ 0x41
 8004d72:	2120      	movs	r1, #32
 8004d74:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2242      	movs	r2, #66	@ 0x42
 8004d80:	5c9b      	ldrb	r3, [r3, r2]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b40      	cmp	r3, #64	@ 0x40
 8004d86:	d10c      	bne.n	8004da2 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2242      	movs	r2, #66	@ 0x42
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2240      	movs	r2, #64	@ 0x40
 8004d94:	2100      	movs	r1, #0
 8004d96:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f7ff f971 	bl	8004082 <HAL_I2C_MemRxCpltCallback>
}
 8004da0:	e00b      	b.n	8004dba <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2242      	movs	r2, #66	@ 0x42
 8004da6:	2100      	movs	r1, #0
 8004da8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2240      	movs	r2, #64	@ 0x40
 8004dae:	2100      	movs	r1, #0
 8004db0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	0018      	movs	r0, r3
 8004db6:	f7ff f934 	bl	8004022 <HAL_I2C_MasterRxCpltCallback>
}
 8004dba:	46c0      	nop			@ (mov r8, r8)
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	b006      	add	sp, #24
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	46c0      	nop			@ (mov r8, r8)
 8004dc4:	fe00e800 	.word	0xfe00e800
 8004dc8:	ffff0000 	.word	0xffff0000

08004dcc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004de8:	200b      	movs	r0, #11
 8004dea:	183b      	adds	r3, r7, r0
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	2141      	movs	r1, #65	@ 0x41
 8004df0:	5c52      	ldrb	r2, [r2, r1]
 8004df2:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004dfc:	183b      	adds	r3, r7, r0
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b21      	cmp	r3, #33	@ 0x21
 8004e02:	d003      	beq.n	8004e0c <I2C_ITSlaveCplt+0x40>
 8004e04:	183b      	adds	r3, r7, r0
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b29      	cmp	r3, #41	@ 0x29
 8004e0a:	d109      	bne.n	8004e20 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004e0c:	4aac      	ldr	r2, [pc, #688]	@ (80050c0 <I2C_ITSlaveCplt+0x2f4>)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	0011      	movs	r1, r2
 8004e12:	0018      	movs	r0, r3
 8004e14:	f000 fe2e 	bl	8005a74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2221      	movs	r2, #33	@ 0x21
 8004e1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e1e:	e020      	b.n	8004e62 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e20:	220b      	movs	r2, #11
 8004e22:	18bb      	adds	r3, r7, r2
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b22      	cmp	r3, #34	@ 0x22
 8004e28:	d003      	beq.n	8004e32 <I2C_ITSlaveCplt+0x66>
 8004e2a:	18bb      	adds	r3, r7, r2
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e30:	d109      	bne.n	8004e46 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004e32:	4aa4      	ldr	r2, [pc, #656]	@ (80050c4 <I2C_ITSlaveCplt+0x2f8>)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	0011      	movs	r1, r2
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f000 fe1b 	bl	8005a74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2222      	movs	r2, #34	@ 0x22
 8004e42:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e44:	e00d      	b.n	8004e62 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004e46:	230b      	movs	r3, #11
 8004e48:	18fb      	adds	r3, r7, r3
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b28      	cmp	r3, #40	@ 0x28
 8004e4e:	d108      	bne.n	8004e62 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004e50:	4a9d      	ldr	r2, [pc, #628]	@ (80050c8 <I2C_ITSlaveCplt+0x2fc>)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	0011      	movs	r1, r2
 8004e56:	0018      	movs	r0, r3
 8004e58:	f000 fe0c 	bl	8005a74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2180      	movs	r1, #128	@ 0x80
 8004e6e:	0209      	lsls	r1, r1, #8
 8004e70:	430a      	orrs	r2, r1
 8004e72:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4993      	ldr	r1, [pc, #588]	@ (80050cc <I2C_ITSlaveCplt+0x300>)
 8004e80:	400a      	ands	r2, r1
 8004e82:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	0018      	movs	r0, r3
 8004e88:	f000 faab 	bl	80053e2 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	2380      	movs	r3, #128	@ 0x80
 8004e90:	01db      	lsls	r3, r3, #7
 8004e92:	4013      	ands	r3, r2
 8004e94:	d013      	beq.n	8004ebe <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	498b      	ldr	r1, [pc, #556]	@ (80050d0 <I2C_ITSlaveCplt+0x304>)
 8004ea2:	400a      	ands	r2, r1
 8004ea4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d01f      	beq.n	8004eee <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ebc:	e017      	b.n	8004eee <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	2380      	movs	r3, #128	@ 0x80
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d012      	beq.n	8004eee <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4980      	ldr	r1, [pc, #512]	@ (80050d4 <I2C_ITSlaveCplt+0x308>)
 8004ed4:	400a      	ands	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d006      	beq.n	8004eee <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d020      	beq.n	8004f38 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	4393      	bics	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00c      	beq.n	8004f38 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f46:	2204      	movs	r2, #4
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2210      	movs	r2, #16
 8004f52:	4013      	ands	r3, r2
 8004f54:	d04f      	beq.n	8004ff6 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2210      	movs	r2, #16
 8004f5a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f5c:	d04b      	beq.n	8004ff6 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d12d      	bne.n	8004fc4 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2241      	movs	r2, #65	@ 0x41
 8004f6c:	5c9b      	ldrb	r3, [r3, r2]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b28      	cmp	r3, #40	@ 0x28
 8004f72:	d10b      	bne.n	8004f8c <I2C_ITSlaveCplt+0x1c0>
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	2380      	movs	r3, #128	@ 0x80
 8004f78:	049b      	lsls	r3, r3, #18
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d106      	bne.n	8004f8c <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	0011      	movs	r1, r2
 8004f84:	0018      	movs	r0, r3
 8004f86:	f000 f8a9 	bl	80050dc <I2C_ITListenCplt>
 8004f8a:	e034      	b.n	8004ff6 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2241      	movs	r2, #65	@ 0x41
 8004f90:	5c9b      	ldrb	r3, [r3, r2]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b29      	cmp	r3, #41	@ 0x29
 8004f96:	d110      	bne.n	8004fba <I2C_ITSlaveCplt+0x1ee>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4a4f      	ldr	r2, [pc, #316]	@ (80050d8 <I2C_ITSlaveCplt+0x30c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00c      	beq.n	8004fba <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2210      	movs	r2, #16
 8004fa6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	0018      	movs	r0, r3
 8004fac:	f000 fa19 	bl	80053e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	f7ff fdd8 	bl	8004b68 <I2C_ITSlaveSeqCplt>
 8004fb8:	e01d      	b.n	8004ff6 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	61da      	str	r2, [r3, #28]
 8004fc2:	e018      	b.n	8004ff6 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2210      	movs	r2, #16
 8004fca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d004      	beq.n	8004fe8 <I2C_ITSlaveCplt+0x21c>
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	2380      	movs	r3, #128	@ 0x80
 8004fe2:	045b      	lsls	r3, r3, #17
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d106      	bne.n	8004ff6 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	0011      	movs	r1, r2
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	f000 f8cb 	bl	800518c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2242      	movs	r2, #66	@ 0x42
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005008:	2b00      	cmp	r3, #0
 800500a:	d013      	beq.n	8005034 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	0011      	movs	r1, r2
 8005014:	0018      	movs	r0, r3
 8005016:	f000 f8b9 	bl	800518c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2241      	movs	r2, #65	@ 0x41
 800501e:	5c9b      	ldrb	r3, [r3, r2]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b28      	cmp	r3, #40	@ 0x28
 8005024:	d147      	bne.n	80050b6 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	0011      	movs	r1, r2
 800502c:	0018      	movs	r0, r3
 800502e:	f000 f855 	bl	80050dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005032:	e040      	b.n	80050b6 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005038:	4a27      	ldr	r2, [pc, #156]	@ (80050d8 <I2C_ITSlaveCplt+0x30c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d016      	beq.n	800506c <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	0018      	movs	r0, r3
 8005042:	f7ff fd91 	bl	8004b68 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a23      	ldr	r2, [pc, #140]	@ (80050d8 <I2C_ITSlaveCplt+0x30c>)
 800504a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2241      	movs	r2, #65	@ 0x41
 8005050:	2120      	movs	r1, #32
 8005052:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2240      	movs	r2, #64	@ 0x40
 800505e:	2100      	movs	r1, #0
 8005060:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	0018      	movs	r0, r3
 8005066:	f7ff f804 	bl	8004072 <HAL_I2C_ListenCpltCallback>
}
 800506a:	e024      	b.n	80050b6 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2241      	movs	r2, #65	@ 0x41
 8005070:	5c9b      	ldrb	r3, [r3, r2]
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b22      	cmp	r3, #34	@ 0x22
 8005076:	d10f      	bne.n	8005098 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2241      	movs	r2, #65	@ 0x41
 800507c:	2120      	movs	r1, #32
 800507e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2240      	movs	r2, #64	@ 0x40
 800508a:	2100      	movs	r1, #0
 800508c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	0018      	movs	r0, r3
 8005092:	f7fe ffd6 	bl	8004042 <HAL_I2C_SlaveRxCpltCallback>
}
 8005096:	e00e      	b.n	80050b6 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2241      	movs	r2, #65	@ 0x41
 800509c:	2120      	movs	r1, #32
 800509e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2240      	movs	r2, #64	@ 0x40
 80050aa:	2100      	movs	r1, #0
 80050ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	0018      	movs	r0, r3
 80050b2:	f7fe ffbe 	bl	8004032 <HAL_I2C_SlaveTxCpltCallback>
}
 80050b6:	46c0      	nop			@ (mov r8, r8)
 80050b8:	46bd      	mov	sp, r7
 80050ba:	b006      	add	sp, #24
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	46c0      	nop			@ (mov r8, r8)
 80050c0:	00008001 	.word	0x00008001
 80050c4:	00008002 	.word	0x00008002
 80050c8:	00008003 	.word	0x00008003
 80050cc:	fe00e800 	.word	0xfe00e800
 80050d0:	ffffbfff 	.word	0xffffbfff
 80050d4:	ffff7fff 	.word	0xffff7fff
 80050d8:	ffff0000 	.word	0xffff0000

080050dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a26      	ldr	r2, [pc, #152]	@ (8005184 <I2C_ITListenCplt+0xa8>)
 80050ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2241      	movs	r2, #65	@ 0x41
 80050f6:	2120      	movs	r1, #32
 80050f8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2242      	movs	r2, #66	@ 0x42
 80050fe:	2100      	movs	r1, #0
 8005100:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2204      	movs	r2, #4
 800510c:	4013      	ands	r3, r2
 800510e:	d022      	beq.n	8005156 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800512c:	2b00      	cmp	r3, #0
 800512e:	d012      	beq.n	8005156 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514e:	2204      	movs	r2, #4
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005156:	4a0c      	ldr	r2, [pc, #48]	@ (8005188 <I2C_ITListenCplt+0xac>)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	0011      	movs	r1, r2
 800515c:	0018      	movs	r0, r3
 800515e:	f000 fc89 	bl	8005a74 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2210      	movs	r2, #16
 8005168:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2240      	movs	r2, #64	@ 0x40
 800516e:	2100      	movs	r1, #0
 8005170:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	0018      	movs	r0, r3
 8005176:	f7fe ff7c 	bl	8004072 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800517a:	46c0      	nop			@ (mov r8, r8)
 800517c:	46bd      	mov	sp, r7
 800517e:	b002      	add	sp, #8
 8005180:	bd80      	pop	{r7, pc}
 8005182:	46c0      	nop			@ (mov r8, r8)
 8005184:	ffff0000 	.word	0xffff0000
 8005188:	00008003 	.word	0x00008003

0800518c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005196:	200f      	movs	r0, #15
 8005198:	183b      	adds	r3, r7, r0
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	2141      	movs	r1, #65	@ 0x41
 800519e:	5c52      	ldrb	r2, [r2, r1]
 80051a0:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2242      	movs	r2, #66	@ 0x42
 80051a6:	2100      	movs	r1, #0
 80051a8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a72      	ldr	r2, [pc, #456]	@ (8005378 <I2C_ITError+0x1ec>)
 80051ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80051c2:	183b      	adds	r3, r7, r0
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b28      	cmp	r3, #40	@ 0x28
 80051c8:	d007      	beq.n	80051da <I2C_ITError+0x4e>
 80051ca:	183b      	adds	r3, r7, r0
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b29      	cmp	r3, #41	@ 0x29
 80051d0:	d003      	beq.n	80051da <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80051d2:	183b      	adds	r3, r7, r0
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80051d8:	d10c      	bne.n	80051f4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2103      	movs	r1, #3
 80051de:	0018      	movs	r0, r3
 80051e0:	f000 fc48 	bl	8005a74 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2241      	movs	r2, #65	@ 0x41
 80051e8:	2128      	movs	r1, #40	@ 0x28
 80051ea:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a63      	ldr	r2, [pc, #396]	@ (800537c <I2C_ITError+0x1f0>)
 80051f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80051f2:	e032      	b.n	800525a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80051f4:	4a62      	ldr	r2, [pc, #392]	@ (8005380 <I2C_ITError+0x1f4>)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	0011      	movs	r1, r2
 80051fa:	0018      	movs	r0, r3
 80051fc:	f000 fc3a 	bl	8005a74 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	0018      	movs	r0, r3
 8005204:	f000 f8ed 	bl	80053e2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2241      	movs	r2, #65	@ 0x41
 800520c:	5c9b      	ldrb	r3, [r3, r2]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b60      	cmp	r3, #96	@ 0x60
 8005212:	d01f      	beq.n	8005254 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2241      	movs	r2, #65	@ 0x41
 8005218:	2120      	movs	r1, #32
 800521a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	2220      	movs	r2, #32
 8005224:	4013      	ands	r3, r2
 8005226:	2b20      	cmp	r3, #32
 8005228:	d114      	bne.n	8005254 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	2210      	movs	r2, #16
 8005232:	4013      	ands	r3, r2
 8005234:	2b10      	cmp	r3, #16
 8005236:	d109      	bne.n	800524c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2210      	movs	r2, #16
 800523e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005244:	2204      	movs	r2, #4
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2220      	movs	r2, #32
 8005252:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005264:	2b00      	cmp	r3, #0
 8005266:	d03b      	beq.n	80052e0 <I2C_ITError+0x154>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b11      	cmp	r3, #17
 800526c:	d002      	beq.n	8005274 <I2C_ITError+0xe8>
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b21      	cmp	r3, #33	@ 0x21
 8005272:	d135      	bne.n	80052e0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	2380      	movs	r3, #128	@ 0x80
 800527c:	01db      	lsls	r3, r3, #7
 800527e:	401a      	ands	r2, r3
 8005280:	2380      	movs	r3, #128	@ 0x80
 8005282:	01db      	lsls	r3, r3, #7
 8005284:	429a      	cmp	r2, r3
 8005286:	d107      	bne.n	8005298 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	493c      	ldr	r1, [pc, #240]	@ (8005384 <I2C_ITError+0x1f8>)
 8005294:	400a      	ands	r2, r1
 8005296:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529c:	0018      	movs	r0, r3
 800529e:	f7fe f8e9 	bl	8003474 <HAL_DMA_GetState>
 80052a2:	0003      	movs	r3, r0
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d016      	beq.n	80052d6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ac:	4a36      	ldr	r2, [pc, #216]	@ (8005388 <I2C_ITError+0x1fc>)
 80052ae:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2240      	movs	r2, #64	@ 0x40
 80052b4:	2100      	movs	r1, #0
 80052b6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052bc:	0018      	movs	r0, r3
 80052be:	f7fd ffad 	bl	800321c <HAL_DMA_Abort_IT>
 80052c2:	1e03      	subs	r3, r0, #0
 80052c4:	d051      	beq.n	800536a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d0:	0018      	movs	r0, r3
 80052d2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052d4:	e049      	b.n	800536a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	0018      	movs	r0, r3
 80052da:	f000 f859 	bl	8005390 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052de:	e044      	b.n	800536a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d03b      	beq.n	8005360 <I2C_ITError+0x1d4>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b12      	cmp	r3, #18
 80052ec:	d002      	beq.n	80052f4 <I2C_ITError+0x168>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b22      	cmp	r3, #34	@ 0x22
 80052f2:	d135      	bne.n	8005360 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	2380      	movs	r3, #128	@ 0x80
 80052fc:	021b      	lsls	r3, r3, #8
 80052fe:	401a      	ands	r2, r3
 8005300:	2380      	movs	r3, #128	@ 0x80
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	429a      	cmp	r2, r3
 8005306:	d107      	bne.n	8005318 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	491e      	ldr	r1, [pc, #120]	@ (800538c <I2C_ITError+0x200>)
 8005314:	400a      	ands	r2, r1
 8005316:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800531c:	0018      	movs	r0, r3
 800531e:	f7fe f8a9 	bl	8003474 <HAL_DMA_GetState>
 8005322:	0003      	movs	r3, r0
 8005324:	2b01      	cmp	r3, #1
 8005326:	d016      	beq.n	8005356 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532c:	4a16      	ldr	r2, [pc, #88]	@ (8005388 <I2C_ITError+0x1fc>)
 800532e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2240      	movs	r2, #64	@ 0x40
 8005334:	2100      	movs	r1, #0
 8005336:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533c:	0018      	movs	r0, r3
 800533e:	f7fd ff6d 	bl	800321c <HAL_DMA_Abort_IT>
 8005342:	1e03      	subs	r3, r0, #0
 8005344:	d013      	beq.n	800536e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800534a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005350:	0018      	movs	r0, r3
 8005352:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005354:	e00b      	b.n	800536e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	0018      	movs	r0, r3
 800535a:	f000 f819 	bl	8005390 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800535e:	e006      	b.n	800536e <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	0018      	movs	r0, r3
 8005364:	f000 f814 	bl	8005390 <I2C_TreatErrorCallback>
  }
}
 8005368:	e002      	b.n	8005370 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800536a:	46c0      	nop			@ (mov r8, r8)
 800536c:	e000      	b.n	8005370 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800536e:	46c0      	nop			@ (mov r8, r8)
}
 8005370:	46c0      	nop			@ (mov r8, r8)
 8005372:	46bd      	mov	sp, r7
 8005374:	b004      	add	sp, #16
 8005376:	bd80      	pop	{r7, pc}
 8005378:	ffff0000 	.word	0xffff0000
 800537c:	080040b5 	.word	0x080040b5
 8005380:	00008003 	.word	0x00008003
 8005384:	ffffbfff 	.word	0xffffbfff
 8005388:	080054fb 	.word	0x080054fb
 800538c:	ffff7fff 	.word	0xffff7fff

08005390 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2241      	movs	r2, #65	@ 0x41
 800539c:	5c9b      	ldrb	r3, [r3, r2]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b60      	cmp	r3, #96	@ 0x60
 80053a2:	d10f      	bne.n	80053c4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2241      	movs	r2, #65	@ 0x41
 80053a8:	2120      	movs	r1, #32
 80053aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2240      	movs	r2, #64	@ 0x40
 80053b6:	2100      	movs	r1, #0
 80053b8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	0018      	movs	r0, r3
 80053be:	f7fe fe70 	bl	80040a2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053c2:	e00a      	b.n	80053da <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2240      	movs	r2, #64	@ 0x40
 80053ce:	2100      	movs	r1, #0
 80053d0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	0018      	movs	r0, r3
 80053d6:	f7fe fe5c 	bl	8004092 <HAL_I2C_ErrorCallback>
}
 80053da:	46c0      	nop			@ (mov r8, r8)
 80053dc:	46bd      	mov	sp, r7
 80053de:	b002      	add	sp, #8
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	2202      	movs	r2, #2
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d103      	bne.n	8005400 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2200      	movs	r2, #0
 80053fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	2201      	movs	r2, #1
 8005408:	4013      	ands	r3, r2
 800540a:	2b01      	cmp	r3, #1
 800540c:	d007      	beq.n	800541e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	699a      	ldr	r2, [r3, #24]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2101      	movs	r1, #1
 800541a:	430a      	orrs	r2, r1
 800541c:	619a      	str	r2, [r3, #24]
  }
}
 800541e:	46c0      	nop			@ (mov r8, r8)
 8005420:	46bd      	mov	sp, r7
 8005422:	b002      	add	sp, #8
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005434:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4920      	ldr	r1, [pc, #128]	@ (80054c4 <I2C_DMAMasterTransmitCplt+0x9c>)
 8005442:	400a      	ands	r2, r1
 8005444:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d105      	bne.n	800545c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2120      	movs	r1, #32
 8005454:	0018      	movs	r0, r3
 8005456:	f000 fa83 	bl	8005960 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800545a:	e02e      	b.n	80054ba <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005464:	189a      	adds	r2, r3, r2
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800546e:	b29b      	uxth	r3, r3
 8005470:	2bff      	cmp	r3, #255	@ 0xff
 8005472:	d903      	bls.n	800547c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	22ff      	movs	r2, #255	@ 0xff
 8005478:	851a      	strh	r2, [r3, #40]	@ 0x28
 800547a:	e004      	b.n	8005486 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548e:	0019      	movs	r1, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3328      	adds	r3, #40	@ 0x28
 8005496:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800549c:	f7fd fe36 	bl	800310c <HAL_DMA_Start_IT>
 80054a0:	1e03      	subs	r3, r0, #0
 80054a2:	d005      	beq.n	80054b0 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2110      	movs	r1, #16
 80054a8:	0018      	movs	r0, r3
 80054aa:	f7ff fe6f 	bl	800518c <I2C_ITError>
}
 80054ae:	e004      	b.n	80054ba <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2140      	movs	r1, #64	@ 0x40
 80054b4:	0018      	movs	r0, r3
 80054b6:	f000 fa53 	bl	8005960 <I2C_Enable_IRQ>
}
 80054ba:	46c0      	nop			@ (mov r8, r8)
 80054bc:	46bd      	mov	sp, r7
 80054be:	b004      	add	sp, #16
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	46c0      	nop			@ (mov r8, r8)
 80054c4:	ffffbfff 	.word	0xffffbfff

080054c8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2180      	movs	r1, #128	@ 0x80
 80054e2:	0209      	lsls	r1, r1, #8
 80054e4:	430a      	orrs	r2, r1
 80054e6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2110      	movs	r1, #16
 80054ec:	0018      	movs	r0, r3
 80054ee:	f7ff fe4d 	bl	800518c <I2C_ITError>
}
 80054f2:	46c0      	nop			@ (mov r8, r8)
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b004      	add	sp, #16
 80054f8:	bd80      	pop	{r7, pc}

080054fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005506:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005514:	2200      	movs	r2, #0
 8005516:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005524:	2200      	movs	r2, #0
 8005526:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	0018      	movs	r0, r3
 800552c:	f7ff ff30 	bl	8005390 <I2C_TreatErrorCallback>
}
 8005530:	46c0      	nop			@ (mov r8, r8)
 8005532:	46bd      	mov	sp, r7
 8005534:	b004      	add	sp, #16
 8005536:	bd80      	pop	{r7, pc}

08005538 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	1dfb      	adds	r3, r7, #7
 8005546:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005548:	e03a      	b.n	80055c0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	6839      	ldr	r1, [r7, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	0018      	movs	r0, r3
 8005552:	f000 f8d3 	bl	80056fc <I2C_IsErrorOccurred>
 8005556:	1e03      	subs	r3, r0, #0
 8005558:	d001      	beq.n	800555e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e040      	b.n	80055e0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	3301      	adds	r3, #1
 8005562:	d02d      	beq.n	80055c0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005564:	f7fc fdce 	bl	8002104 <HAL_GetTick>
 8005568:	0002      	movs	r2, r0
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d302      	bcc.n	800557a <I2C_WaitOnFlagUntilTimeout+0x42>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d122      	bne.n	80055c0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	4013      	ands	r3, r2
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	425a      	negs	r2, r3
 800558a:	4153      	adcs	r3, r2
 800558c:	b2db      	uxtb	r3, r3
 800558e:	001a      	movs	r2, r3
 8005590:	1dfb      	adds	r3, r7, #7
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d113      	bne.n	80055c0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559c:	2220      	movs	r2, #32
 800559e:	431a      	orrs	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2241      	movs	r2, #65	@ 0x41
 80055a8:	2120      	movs	r1, #32
 80055aa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2242      	movs	r2, #66	@ 0x42
 80055b0:	2100      	movs	r1, #0
 80055b2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2240      	movs	r2, #64	@ 0x40
 80055b8:	2100      	movs	r1, #0
 80055ba:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e00f      	b.n	80055e0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	4013      	ands	r3, r2
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	425a      	negs	r2, r3
 80055d0:	4153      	adcs	r3, r2
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	001a      	movs	r2, r3
 80055d6:	1dfb      	adds	r3, r7, #7
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d0b5      	beq.n	800554a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	0018      	movs	r0, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	b004      	add	sp, #16
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055f4:	e032      	b.n	800565c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	0018      	movs	r0, r3
 80055fe:	f000 f87d 	bl	80056fc <I2C_IsErrorOccurred>
 8005602:	1e03      	subs	r3, r0, #0
 8005604:	d001      	beq.n	800560a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e030      	b.n	800566c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	3301      	adds	r3, #1
 800560e:	d025      	beq.n	800565c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005610:	f7fc fd78 	bl	8002104 <HAL_GetTick>
 8005614:	0002      	movs	r2, r0
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	429a      	cmp	r2, r3
 800561e:	d302      	bcc.n	8005626 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d11a      	bne.n	800565c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	2202      	movs	r2, #2
 800562e:	4013      	ands	r3, r2
 8005630:	2b02      	cmp	r3, #2
 8005632:	d013      	beq.n	800565c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005638:	2220      	movs	r2, #32
 800563a:	431a      	orrs	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2241      	movs	r2, #65	@ 0x41
 8005644:	2120      	movs	r1, #32
 8005646:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2242      	movs	r2, #66	@ 0x42
 800564c:	2100      	movs	r1, #0
 800564e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2240      	movs	r2, #64	@ 0x40
 8005654:	2100      	movs	r1, #0
 8005656:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e007      	b.n	800566c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	2202      	movs	r2, #2
 8005664:	4013      	ands	r3, r2
 8005666:	2b02      	cmp	r3, #2
 8005668:	d1c5      	bne.n	80055f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	0018      	movs	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	b004      	add	sp, #16
 8005672:	bd80      	pop	{r7, pc}

08005674 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005680:	e02f      	b.n	80056e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	0018      	movs	r0, r3
 800568a:	f000 f837 	bl	80056fc <I2C_IsErrorOccurred>
 800568e:	1e03      	subs	r3, r0, #0
 8005690:	d001      	beq.n	8005696 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e02d      	b.n	80056f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005696:	f7fc fd35 	bl	8002104 <HAL_GetTick>
 800569a:	0002      	movs	r2, r0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d302      	bcc.n	80056ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d11a      	bne.n	80056e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	2220      	movs	r2, #32
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d013      	beq.n	80056e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056be:	2220      	movs	r2, #32
 80056c0:	431a      	orrs	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2241      	movs	r2, #65	@ 0x41
 80056ca:	2120      	movs	r1, #32
 80056cc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2242      	movs	r2, #66	@ 0x42
 80056d2:	2100      	movs	r1, #0
 80056d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2240      	movs	r2, #64	@ 0x40
 80056da:	2100      	movs	r1, #0
 80056dc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e007      	b.n	80056f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	2220      	movs	r2, #32
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	d1c8      	bne.n	8005682 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	0018      	movs	r0, r3
 80056f4:	46bd      	mov	sp, r7
 80056f6:	b004      	add	sp, #16
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08a      	sub	sp, #40	@ 0x28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005708:	2327      	movs	r3, #39	@ 0x27
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	2200      	movs	r2, #0
 800570e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	2210      	movs	r2, #16
 8005724:	4013      	ands	r3, r2
 8005726:	d100      	bne.n	800572a <I2C_IsErrorOccurred+0x2e>
 8005728:	e079      	b.n	800581e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2210      	movs	r2, #16
 8005730:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005732:	e057      	b.n	80057e4 <I2C_IsErrorOccurred+0xe8>
 8005734:	2227      	movs	r2, #39	@ 0x27
 8005736:	18bb      	adds	r3, r7, r2
 8005738:	18ba      	adds	r2, r7, r2
 800573a:	7812      	ldrb	r2, [r2, #0]
 800573c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	3301      	adds	r3, #1
 8005742:	d04f      	beq.n	80057e4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005744:	f7fc fcde 	bl	8002104 <HAL_GetTick>
 8005748:	0002      	movs	r2, r0
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	429a      	cmp	r2, r3
 8005752:	d302      	bcc.n	800575a <I2C_IsErrorOccurred+0x5e>
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d144      	bne.n	80057e4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	2380      	movs	r3, #128	@ 0x80
 8005762:	01db      	lsls	r3, r3, #7
 8005764:	4013      	ands	r3, r2
 8005766:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005768:	2013      	movs	r0, #19
 800576a:	183b      	adds	r3, r7, r0
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	2142      	movs	r1, #66	@ 0x42
 8005770:	5c52      	ldrb	r2, [r2, r1]
 8005772:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	2380      	movs	r3, #128	@ 0x80
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	401a      	ands	r2, r3
 8005780:	2380      	movs	r3, #128	@ 0x80
 8005782:	021b      	lsls	r3, r3, #8
 8005784:	429a      	cmp	r2, r3
 8005786:	d126      	bne.n	80057d6 <I2C_IsErrorOccurred+0xda>
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	2380      	movs	r3, #128	@ 0x80
 800578c:	01db      	lsls	r3, r3, #7
 800578e:	429a      	cmp	r2, r3
 8005790:	d021      	beq.n	80057d6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005792:	183b      	adds	r3, r7, r0
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	2b20      	cmp	r3, #32
 8005798:	d01d      	beq.n	80057d6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2180      	movs	r1, #128	@ 0x80
 80057a6:	01c9      	lsls	r1, r1, #7
 80057a8:	430a      	orrs	r2, r1
 80057aa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80057ac:	f7fc fcaa 	bl	8002104 <HAL_GetTick>
 80057b0:	0003      	movs	r3, r0
 80057b2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057b4:	e00f      	b.n	80057d6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80057b6:	f7fc fca5 	bl	8002104 <HAL_GetTick>
 80057ba:	0002      	movs	r2, r0
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b19      	cmp	r3, #25
 80057c2:	d908      	bls.n	80057d6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	2220      	movs	r2, #32
 80057c8:	4313      	orrs	r3, r2
 80057ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80057cc:	2327      	movs	r3, #39	@ 0x27
 80057ce:	18fb      	adds	r3, r7, r3
 80057d0:	2201      	movs	r2, #1
 80057d2:	701a      	strb	r2, [r3, #0]

              break;
 80057d4:	e006      	b.n	80057e4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	2220      	movs	r2, #32
 80057de:	4013      	ands	r3, r2
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d1e8      	bne.n	80057b6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2220      	movs	r2, #32
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	d004      	beq.n	80057fc <I2C_IsErrorOccurred+0x100>
 80057f2:	2327      	movs	r3, #39	@ 0x27
 80057f4:	18fb      	adds	r3, r7, r3
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d09b      	beq.n	8005734 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80057fc:	2327      	movs	r3, #39	@ 0x27
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d103      	bne.n	800580e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2220      	movs	r2, #32
 800580c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	2204      	movs	r2, #4
 8005812:	4313      	orrs	r3, r2
 8005814:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005816:	2327      	movs	r3, #39	@ 0x27
 8005818:	18fb      	adds	r3, r7, r3
 800581a:	2201      	movs	r2, #1
 800581c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	2380      	movs	r3, #128	@ 0x80
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	4013      	ands	r3, r2
 800582e:	d00c      	beq.n	800584a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	2201      	movs	r2, #1
 8005834:	4313      	orrs	r3, r2
 8005836:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2280      	movs	r2, #128	@ 0x80
 800583e:	0052      	lsls	r2, r2, #1
 8005840:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005842:	2327      	movs	r3, #39	@ 0x27
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	2201      	movs	r2, #1
 8005848:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	2380      	movs	r3, #128	@ 0x80
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	4013      	ands	r3, r2
 8005852:	d00c      	beq.n	800586e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	2208      	movs	r2, #8
 8005858:	4313      	orrs	r3, r2
 800585a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2280      	movs	r2, #128	@ 0x80
 8005862:	00d2      	lsls	r2, r2, #3
 8005864:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005866:	2327      	movs	r3, #39	@ 0x27
 8005868:	18fb      	adds	r3, r7, r3
 800586a:	2201      	movs	r2, #1
 800586c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	2380      	movs	r3, #128	@ 0x80
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4013      	ands	r3, r2
 8005876:	d00c      	beq.n	8005892 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	2202      	movs	r2, #2
 800587c:	4313      	orrs	r3, r2
 800587e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2280      	movs	r2, #128	@ 0x80
 8005886:	0092      	lsls	r2, r2, #2
 8005888:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800588a:	2327      	movs	r3, #39	@ 0x27
 800588c:	18fb      	adds	r3, r7, r3
 800588e:	2201      	movs	r2, #1
 8005890:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005892:	2327      	movs	r3, #39	@ 0x27
 8005894:	18fb      	adds	r3, r7, r3
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01d      	beq.n	80058d8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	0018      	movs	r0, r3
 80058a0:	f7ff fd9f 	bl	80053e2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	490e      	ldr	r1, [pc, #56]	@ (80058e8 <I2C_IsErrorOccurred+0x1ec>)
 80058b0:	400a      	ands	r2, r1
 80058b2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	431a      	orrs	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2241      	movs	r2, #65	@ 0x41
 80058c4:	2120      	movs	r1, #32
 80058c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2242      	movs	r2, #66	@ 0x42
 80058cc:	2100      	movs	r1, #0
 80058ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2240      	movs	r2, #64	@ 0x40
 80058d4:	2100      	movs	r1, #0
 80058d6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80058d8:	2327      	movs	r3, #39	@ 0x27
 80058da:	18fb      	adds	r3, r7, r3
 80058dc:	781b      	ldrb	r3, [r3, #0]
}
 80058de:	0018      	movs	r0, r3
 80058e0:	46bd      	mov	sp, r7
 80058e2:	b00a      	add	sp, #40	@ 0x28
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	46c0      	nop			@ (mov r8, r8)
 80058e8:	fe00e800 	.word	0xfe00e800

080058ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80058ec:	b590      	push	{r4, r7, lr}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	0008      	movs	r0, r1
 80058f6:	0011      	movs	r1, r2
 80058f8:	607b      	str	r3, [r7, #4]
 80058fa:	240a      	movs	r4, #10
 80058fc:	193b      	adds	r3, r7, r4
 80058fe:	1c02      	adds	r2, r0, #0
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	2009      	movs	r0, #9
 8005904:	183b      	adds	r3, r7, r0
 8005906:	1c0a      	adds	r2, r1, #0
 8005908:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800590a:	193b      	adds	r3, r7, r4
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	059b      	lsls	r3, r3, #22
 8005910:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005912:	183b      	adds	r3, r7, r0
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	0419      	lsls	r1, r3, #16
 8005918:	23ff      	movs	r3, #255	@ 0xff
 800591a:	041b      	lsls	r3, r3, #16
 800591c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800591e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005926:	4313      	orrs	r3, r2
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	085b      	lsrs	r3, r3, #1
 800592c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005936:	0d51      	lsrs	r1, r2, #21
 8005938:	2280      	movs	r2, #128	@ 0x80
 800593a:	00d2      	lsls	r2, r2, #3
 800593c:	400a      	ands	r2, r1
 800593e:	4907      	ldr	r1, [pc, #28]	@ (800595c <I2C_TransferConfig+0x70>)
 8005940:	430a      	orrs	r2, r1
 8005942:	43d2      	mvns	r2, r2
 8005944:	401a      	ands	r2, r3
 8005946:	0011      	movs	r1, r2
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	430a      	orrs	r2, r1
 8005950:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005952:	46c0      	nop			@ (mov r8, r8)
 8005954:	46bd      	mov	sp, r7
 8005956:	b007      	add	sp, #28
 8005958:	bd90      	pop	{r4, r7, pc}
 800595a:	46c0      	nop			@ (mov r8, r8)
 800595c:	03ff63ff 	.word	0x03ff63ff

08005960 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	000a      	movs	r2, r1
 800596a:	1cbb      	adds	r3, r7, #2
 800596c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005976:	4b3c      	ldr	r3, [pc, #240]	@ (8005a68 <I2C_Enable_IRQ+0x108>)
 8005978:	429a      	cmp	r2, r3
 800597a:	d035      	beq.n	80059e8 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005980:	4b3a      	ldr	r3, [pc, #232]	@ (8005a6c <I2C_Enable_IRQ+0x10c>)
 8005982:	429a      	cmp	r2, r3
 8005984:	d030      	beq.n	80059e8 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800598a:	4b39      	ldr	r3, [pc, #228]	@ (8005a70 <I2C_Enable_IRQ+0x110>)
 800598c:	429a      	cmp	r2, r3
 800598e:	d02b      	beq.n	80059e8 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005990:	1cbb      	adds	r3, r7, #2
 8005992:	2200      	movs	r2, #0
 8005994:	5e9b      	ldrsh	r3, [r3, r2]
 8005996:	2b00      	cmp	r3, #0
 8005998:	da03      	bge.n	80059a2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	22b8      	movs	r2, #184	@ 0xb8
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80059a2:	1cbb      	adds	r3, r7, #2
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	2201      	movs	r2, #1
 80059a8:	4013      	ands	r3, r2
 80059aa:	d003      	beq.n	80059b4 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	22f2      	movs	r2, #242	@ 0xf2
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80059b4:	1cbb      	adds	r3, r7, #2
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	2202      	movs	r2, #2
 80059ba:	4013      	ands	r3, r2
 80059bc:	d003      	beq.n	80059c6 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	22f4      	movs	r2, #244	@ 0xf4
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80059c6:	1cbb      	adds	r3, r7, #2
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	2b10      	cmp	r3, #16
 80059cc:	d103      	bne.n	80059d6 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2290      	movs	r2, #144	@ 0x90
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80059d6:	1cbb      	adds	r3, r7, #2
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	2b20      	cmp	r3, #32
 80059dc:	d137      	bne.n	8005a4e <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2220      	movs	r2, #32
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80059e6:	e032      	b.n	8005a4e <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80059e8:	1cbb      	adds	r3, r7, #2
 80059ea:	2200      	movs	r2, #0
 80059ec:	5e9b      	ldrsh	r3, [r3, r2]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	da03      	bge.n	80059fa <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	22b8      	movs	r2, #184	@ 0xb8
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80059fa:	1cbb      	adds	r3, r7, #2
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	2201      	movs	r2, #1
 8005a00:	4013      	ands	r3, r2
 8005a02:	d003      	beq.n	8005a0c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	22f2      	movs	r2, #242	@ 0xf2
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005a0c:	1cbb      	adds	r3, r7, #2
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	2202      	movs	r2, #2
 8005a12:	4013      	ands	r3, r2
 8005a14:	d003      	beq.n	8005a1e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	22f4      	movs	r2, #244	@ 0xf4
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005a1e:	1cbb      	adds	r3, r7, #2
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	2b10      	cmp	r3, #16
 8005a24:	d103      	bne.n	8005a2e <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2290      	movs	r2, #144	@ 0x90
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005a2e:	1cbb      	adds	r3, r7, #2
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	2b20      	cmp	r3, #32
 8005a34:	d103      	bne.n	8005a3e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2260      	movs	r2, #96	@ 0x60
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005a3e:	1cbb      	adds	r3, r7, #2
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	2b40      	cmp	r3, #64	@ 0x40
 8005a44:	d103      	bne.n	8005a4e <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2240      	movs	r2, #64	@ 0x40
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6819      	ldr	r1, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	601a      	str	r2, [r3, #0]
}
 8005a5e:	46c0      	nop			@ (mov r8, r8)
 8005a60:	46bd      	mov	sp, r7
 8005a62:	b004      	add	sp, #16
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	46c0      	nop			@ (mov r8, r8)
 8005a68:	080042b5 	.word	0x080042b5
 8005a6c:	08004705 	.word	0x08004705
 8005a70:	080044ad 	.word	0x080044ad

08005a74 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	000a      	movs	r2, r1
 8005a7e:	1cbb      	adds	r3, r7, #2
 8005a80:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005a86:	1cbb      	adds	r3, r7, #2
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d010      	beq.n	8005ab2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2242      	movs	r2, #66	@ 0x42
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2241      	movs	r2, #65	@ 0x41
 8005a9c:	5c9b      	ldrb	r3, [r3, r2]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	001a      	movs	r2, r3
 8005aa2:	2328      	movs	r3, #40	@ 0x28
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	2b28      	cmp	r3, #40	@ 0x28
 8005aa8:	d003      	beq.n	8005ab2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	22b0      	movs	r2, #176	@ 0xb0
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005ab2:	1cbb      	adds	r3, r7, #2
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	4013      	ands	r3, r2
 8005aba:	d010      	beq.n	8005ade <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2244      	movs	r2, #68	@ 0x44
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2241      	movs	r2, #65	@ 0x41
 8005ac8:	5c9b      	ldrb	r3, [r3, r2]
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	001a      	movs	r2, r3
 8005ace:	2328      	movs	r3, #40	@ 0x28
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	2b28      	cmp	r3, #40	@ 0x28
 8005ad4:	d003      	beq.n	8005ade <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	22b0      	movs	r2, #176	@ 0xb0
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005ade:	1cbb      	adds	r3, r7, #2
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	5e9b      	ldrsh	r3, [r3, r2]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	da03      	bge.n	8005af0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	22b8      	movs	r2, #184	@ 0xb8
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005af0:	1cbb      	adds	r3, r7, #2
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	2b10      	cmp	r3, #16
 8005af6:	d103      	bne.n	8005b00 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2290      	movs	r2, #144	@ 0x90
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005b00:	1cbb      	adds	r3, r7, #2
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	d103      	bne.n	8005b10 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005b10:	1cbb      	adds	r3, r7, #2
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	2b40      	cmp	r3, #64	@ 0x40
 8005b16:	d103      	bne.n	8005b20 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2240      	movs	r2, #64	@ 0x40
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	43d9      	mvns	r1, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	400a      	ands	r2, r1
 8005b30:	601a      	str	r2, [r3, #0]
}
 8005b32:	46c0      	nop			@ (mov r8, r8)
 8005b34:	46bd      	mov	sp, r7
 8005b36:	b004      	add	sp, #16
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2241      	movs	r2, #65	@ 0x41
 8005b4a:	5c9b      	ldrb	r3, [r3, r2]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b20      	cmp	r3, #32
 8005b50:	d138      	bne.n	8005bc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2240      	movs	r2, #64	@ 0x40
 8005b56:	5c9b      	ldrb	r3, [r3, r2]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e032      	b.n	8005bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2240      	movs	r2, #64	@ 0x40
 8005b64:	2101      	movs	r1, #1
 8005b66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2241      	movs	r2, #65	@ 0x41
 8005b6c:	2124      	movs	r1, #36	@ 0x24
 8005b6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	438a      	bics	r2, r1
 8005b7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4911      	ldr	r1, [pc, #68]	@ (8005bd0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005b8c:	400a      	ands	r2, r1
 8005b8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6819      	ldr	r1, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2101      	movs	r1, #1
 8005bac:	430a      	orrs	r2, r1
 8005bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2241      	movs	r2, #65	@ 0x41
 8005bb4:	2120      	movs	r1, #32
 8005bb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2240      	movs	r2, #64	@ 0x40
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	e000      	b.n	8005bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005bc4:	2302      	movs	r3, #2
  }
}
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	b002      	add	sp, #8
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	46c0      	nop			@ (mov r8, r8)
 8005bd0:	ffffefff 	.word	0xffffefff

08005bd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2241      	movs	r2, #65	@ 0x41
 8005be2:	5c9b      	ldrb	r3, [r3, r2]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	d139      	bne.n	8005c5e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2240      	movs	r2, #64	@ 0x40
 8005bee:	5c9b      	ldrb	r3, [r3, r2]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e033      	b.n	8005c60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2240      	movs	r2, #64	@ 0x40
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2241      	movs	r2, #65	@ 0x41
 8005c04:	2124      	movs	r1, #36	@ 0x24
 8005c06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2101      	movs	r1, #1
 8005c14:	438a      	bics	r2, r1
 8005c16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4a11      	ldr	r2, [pc, #68]	@ (8005c68 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2101      	movs	r1, #1
 8005c46:	430a      	orrs	r2, r1
 8005c48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2241      	movs	r2, #65	@ 0x41
 8005c4e:	2120      	movs	r1, #32
 8005c50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2240      	movs	r2, #64	@ 0x40
 8005c56:	2100      	movs	r1, #0
 8005c58:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e000      	b.n	8005c60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c5e:	2302      	movs	r3, #2
  }
}
 8005c60:	0018      	movs	r0, r3
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b004      	add	sp, #16
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	fffff0ff 	.word	0xfffff0ff

08005c6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e20f      	b.n	800609e <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2201      	movs	r2, #1
 8005c84:	4013      	ands	r3, r2
 8005c86:	d100      	bne.n	8005c8a <HAL_RCC_OscConfig+0x1e>
 8005c88:	e069      	b.n	8005d5e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c8a:	4bc8      	ldr	r3, [pc, #800]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	2238      	movs	r2, #56	@ 0x38
 8005c90:	4013      	ands	r3, r2
 8005c92:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d105      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d15d      	bne.n	8005d5e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e1fb      	b.n	800609e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	2380      	movs	r3, #128	@ 0x80
 8005cac:	025b      	lsls	r3, r3, #9
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d107      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x56>
 8005cb2:	4bbe      	ldr	r3, [pc, #760]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	4bbd      	ldr	r3, [pc, #756]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005cb8:	2180      	movs	r1, #128	@ 0x80
 8005cba:	0249      	lsls	r1, r1, #9
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	e020      	b.n	8005d04 <HAL_RCC_OscConfig+0x98>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	23a0      	movs	r3, #160	@ 0xa0
 8005cc8:	02db      	lsls	r3, r3, #11
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d10e      	bne.n	8005cec <HAL_RCC_OscConfig+0x80>
 8005cce:	4bb7      	ldr	r3, [pc, #732]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4bb6      	ldr	r3, [pc, #728]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005cd4:	2180      	movs	r1, #128	@ 0x80
 8005cd6:	02c9      	lsls	r1, r1, #11
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	4bb3      	ldr	r3, [pc, #716]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	4bb2      	ldr	r3, [pc, #712]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005ce2:	2180      	movs	r1, #128	@ 0x80
 8005ce4:	0249      	lsls	r1, r1, #9
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	e00b      	b.n	8005d04 <HAL_RCC_OscConfig+0x98>
 8005cec:	4baf      	ldr	r3, [pc, #700]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	4bae      	ldr	r3, [pc, #696]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005cf2:	49af      	ldr	r1, [pc, #700]	@ (8005fb0 <HAL_RCC_OscConfig+0x344>)
 8005cf4:	400a      	ands	r2, r1
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	4bac      	ldr	r3, [pc, #688]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4bab      	ldr	r3, [pc, #684]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005cfe:	49ad      	ldr	r1, [pc, #692]	@ (8005fb4 <HAL_RCC_OscConfig+0x348>)
 8005d00:	400a      	ands	r2, r1
 8005d02:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d014      	beq.n	8005d36 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0c:	f7fc f9fa 	bl	8002104 <HAL_GetTick>
 8005d10:	0003      	movs	r3, r0
 8005d12:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d14:	e008      	b.n	8005d28 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005d16:	f7fc f9f5 	bl	8002104 <HAL_GetTick>
 8005d1a:	0002      	movs	r2, r0
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b64      	cmp	r3, #100	@ 0x64
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e1ba      	b.n	800609e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d28:	4ba0      	ldr	r3, [pc, #640]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	2380      	movs	r3, #128	@ 0x80
 8005d2e:	029b      	lsls	r3, r3, #10
 8005d30:	4013      	ands	r3, r2
 8005d32:	d0f0      	beq.n	8005d16 <HAL_RCC_OscConfig+0xaa>
 8005d34:	e013      	b.n	8005d5e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d36:	f7fc f9e5 	bl	8002104 <HAL_GetTick>
 8005d3a:	0003      	movs	r3, r0
 8005d3c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005d40:	f7fc f9e0 	bl	8002104 <HAL_GetTick>
 8005d44:	0002      	movs	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b64      	cmp	r3, #100	@ 0x64
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e1a5      	b.n	800609e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d52:	4b96      	ldr	r3, [pc, #600]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	2380      	movs	r3, #128	@ 0x80
 8005d58:	029b      	lsls	r3, r3, #10
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	d1f0      	bne.n	8005d40 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2202      	movs	r2, #2
 8005d64:	4013      	ands	r3, r2
 8005d66:	d100      	bne.n	8005d6a <HAL_RCC_OscConfig+0xfe>
 8005d68:	e086      	b.n	8005e78 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d6a:	4b90      	ldr	r3, [pc, #576]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	2238      	movs	r2, #56	@ 0x38
 8005d70:	4013      	ands	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d12f      	bne.n	8005dda <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e18b      	b.n	800609e <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d86:	4b89      	ldr	r3, [pc, #548]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	4a8b      	ldr	r2, [pc, #556]	@ (8005fb8 <HAL_RCC_OscConfig+0x34c>)
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	0019      	movs	r1, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	021a      	lsls	r2, r3, #8
 8005d96:	4b85      	ldr	r3, [pc, #532]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d112      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005da2:	4b82      	ldr	r3, [pc, #520]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a85      	ldr	r2, [pc, #532]	@ (8005fbc <HAL_RCC_OscConfig+0x350>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	0019      	movs	r1, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	4b7e      	ldr	r3, [pc, #504]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005db2:	430a      	orrs	r2, r1
 8005db4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005db6:	4b7d      	ldr	r3, [pc, #500]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	0adb      	lsrs	r3, r3, #11
 8005dbc:	2207      	movs	r2, #7
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	4a7f      	ldr	r2, [pc, #508]	@ (8005fc0 <HAL_RCC_OscConfig+0x354>)
 8005dc2:	40da      	lsrs	r2, r3
 8005dc4:	4b7f      	ldr	r3, [pc, #508]	@ (8005fc4 <HAL_RCC_OscConfig+0x358>)
 8005dc6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005dc8:	4b7f      	ldr	r3, [pc, #508]	@ (8005fc8 <HAL_RCC_OscConfig+0x35c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	0018      	movs	r0, r3
 8005dce:	f7fc f93d 	bl	800204c <HAL_InitTick>
 8005dd2:	1e03      	subs	r3, r0, #0
 8005dd4:	d050      	beq.n	8005e78 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e161      	b.n	800609e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d030      	beq.n	8005e44 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005de2:	4b72      	ldr	r3, [pc, #456]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a75      	ldr	r2, [pc, #468]	@ (8005fbc <HAL_RCC_OscConfig+0x350>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	0019      	movs	r1, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691a      	ldr	r2, [r3, #16]
 8005df0:	4b6e      	ldr	r3, [pc, #440]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005df2:	430a      	orrs	r2, r1
 8005df4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8005df6:	4b6d      	ldr	r3, [pc, #436]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4b6c      	ldr	r3, [pc, #432]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005dfc:	2180      	movs	r1, #128	@ 0x80
 8005dfe:	0049      	lsls	r1, r1, #1
 8005e00:	430a      	orrs	r2, r1
 8005e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e04:	f7fc f97e 	bl	8002104 <HAL_GetTick>
 8005e08:	0003      	movs	r3, r0
 8005e0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005e0e:	f7fc f979 	bl	8002104 <HAL_GetTick>
 8005e12:	0002      	movs	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e13e      	b.n	800609e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e20:	4b62      	ldr	r3, [pc, #392]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	2380      	movs	r3, #128	@ 0x80
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	4013      	ands	r3, r2
 8005e2a:	d0f0      	beq.n	8005e0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e2c:	4b5f      	ldr	r3, [pc, #380]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	4a61      	ldr	r2, [pc, #388]	@ (8005fb8 <HAL_RCC_OscConfig+0x34c>)
 8005e32:	4013      	ands	r3, r2
 8005e34:	0019      	movs	r1, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	021a      	lsls	r2, r3, #8
 8005e3c:	4b5b      	ldr	r3, [pc, #364]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]
 8005e42:	e019      	b.n	8005e78 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8005e44:	4b59      	ldr	r3, [pc, #356]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	4b58      	ldr	r3, [pc, #352]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005e4a:	4960      	ldr	r1, [pc, #384]	@ (8005fcc <HAL_RCC_OscConfig+0x360>)
 8005e4c:	400a      	ands	r2, r1
 8005e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e50:	f7fc f958 	bl	8002104 <HAL_GetTick>
 8005e54:	0003      	movs	r3, r0
 8005e56:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005e5a:	f7fc f953 	bl	8002104 <HAL_GetTick>
 8005e5e:	0002      	movs	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e118      	b.n	800609e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e6c:	4b4f      	ldr	r3, [pc, #316]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	2380      	movs	r3, #128	@ 0x80
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	4013      	ands	r3, r2
 8005e76:	d1f0      	bne.n	8005e5a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2208      	movs	r2, #8
 8005e7e:	4013      	ands	r3, r2
 8005e80:	d042      	beq.n	8005f08 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005e82:	4b4a      	ldr	r3, [pc, #296]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	2238      	movs	r2, #56	@ 0x38
 8005e88:	4013      	ands	r3, r2
 8005e8a:	2b18      	cmp	r3, #24
 8005e8c:	d105      	bne.n	8005e9a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d138      	bne.n	8005f08 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e101      	b.n	800609e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d019      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005ea2:	4b42      	ldr	r3, [pc, #264]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005ea4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ea6:	4b41      	ldr	r3, [pc, #260]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eae:	f7fc f929 	bl	8002104 <HAL_GetTick>
 8005eb2:	0003      	movs	r3, r0
 8005eb4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005eb8:	f7fc f924 	bl	8002104 <HAL_GetTick>
 8005ebc:	0002      	movs	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e0e9      	b.n	800609e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005eca:	4b38      	ldr	r3, [pc, #224]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ece:	2202      	movs	r2, #2
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	d0f1      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x24c>
 8005ed4:	e018      	b.n	8005f08 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005ed6:	4b35      	ldr	r3, [pc, #212]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005ed8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005eda:	4b34      	ldr	r3, [pc, #208]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005edc:	2101      	movs	r1, #1
 8005ede:	438a      	bics	r2, r1
 8005ee0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee2:	f7fc f90f 	bl	8002104 <HAL_GetTick>
 8005ee6:	0003      	movs	r3, r0
 8005ee8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005eec:	f7fc f90a 	bl	8002104 <HAL_GetTick>
 8005ef0:	0002      	movs	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e0cf      	b.n	800609e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8005efe:	4b2b      	ldr	r3, [pc, #172]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f02:	2202      	movs	r2, #2
 8005f04:	4013      	ands	r3, r2
 8005f06:	d1f1      	bne.n	8005eec <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2204      	movs	r2, #4
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d100      	bne.n	8005f14 <HAL_RCC_OscConfig+0x2a8>
 8005f12:	e084      	b.n	800601e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f14:	230f      	movs	r3, #15
 8005f16:	18fb      	adds	r3, r7, r3
 8005f18:	2200      	movs	r2, #0
 8005f1a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005f1c:	4b23      	ldr	r3, [pc, #140]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	2238      	movs	r2, #56	@ 0x38
 8005f22:	4013      	ands	r3, r2
 8005f24:	2b20      	cmp	r3, #32
 8005f26:	d106      	bne.n	8005f36 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d000      	beq.n	8005f32 <HAL_RCC_OscConfig+0x2c6>
 8005f30:	e075      	b.n	800601e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e0b3      	b.n	800609e <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d106      	bne.n	8005f4c <HAL_RCC_OscConfig+0x2e0>
 8005f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005f40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f42:	4b1a      	ldr	r3, [pc, #104]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005f44:	2101      	movs	r1, #1
 8005f46:	430a      	orrs	r2, r1
 8005f48:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f4a:	e01c      	b.n	8005f86 <HAL_RCC_OscConfig+0x31a>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	2b05      	cmp	r3, #5
 8005f52:	d10c      	bne.n	8005f6e <HAL_RCC_OscConfig+0x302>
 8005f54:	4b15      	ldr	r3, [pc, #84]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005f56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f58:	4b14      	ldr	r3, [pc, #80]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005f5a:	2104      	movs	r1, #4
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f60:	4b12      	ldr	r3, [pc, #72]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005f62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f64:	4b11      	ldr	r3, [pc, #68]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005f66:	2101      	movs	r1, #1
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f6c:	e00b      	b.n	8005f86 <HAL_RCC_OscConfig+0x31a>
 8005f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005f70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f72:	4b0e      	ldr	r3, [pc, #56]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005f74:	2101      	movs	r1, #1
 8005f76:	438a      	bics	r2, r1
 8005f78:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005f7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005f80:	2104      	movs	r1, #4
 8005f82:	438a      	bics	r2, r1
 8005f84:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d028      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8e:	f7fc f8b9 	bl	8002104 <HAL_GetTick>
 8005f92:	0003      	movs	r3, r0
 8005f94:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005f96:	e01d      	b.n	8005fd4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f98:	f7fc f8b4 	bl	8002104 <HAL_GetTick>
 8005f9c:	0002      	movs	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	4a0b      	ldr	r2, [pc, #44]	@ (8005fd0 <HAL_RCC_OscConfig+0x364>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d915      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e078      	b.n	800609e <HAL_RCC_OscConfig+0x432>
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	fffeffff 	.word	0xfffeffff
 8005fb4:	fffbffff 	.word	0xfffbffff
 8005fb8:	ffff80ff 	.word	0xffff80ff
 8005fbc:	ffffc7ff 	.word	0xffffc7ff
 8005fc0:	02dc6c00 	.word	0x02dc6c00
 8005fc4:	20000068 	.word	0x20000068
 8005fc8:	20000070 	.word	0x20000070
 8005fcc:	fffffeff 	.word	0xfffffeff
 8005fd0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005fd4:	4b34      	ldr	r3, [pc, #208]	@ (80060a8 <HAL_RCC_OscConfig+0x43c>)
 8005fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd8:	2202      	movs	r2, #2
 8005fda:	4013      	ands	r3, r2
 8005fdc:	d0dc      	beq.n	8005f98 <HAL_RCC_OscConfig+0x32c>
 8005fde:	e013      	b.n	8006008 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe0:	f7fc f890 	bl	8002104 <HAL_GetTick>
 8005fe4:	0003      	movs	r3, r0
 8005fe6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005fe8:	e009      	b.n	8005ffe <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fea:	f7fc f88b 	bl	8002104 <HAL_GetTick>
 8005fee:	0002      	movs	r2, r0
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80060ac <HAL_RCC_OscConfig+0x440>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e04f      	b.n	800609e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80060a8 <HAL_RCC_OscConfig+0x43c>)
 8006000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006002:	2202      	movs	r2, #2
 8006004:	4013      	ands	r3, r2
 8006006:	d1f0      	bne.n	8005fea <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006008:	230f      	movs	r3, #15
 800600a:	18fb      	adds	r3, r7, r3
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d105      	bne.n	800601e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006012:	4b25      	ldr	r3, [pc, #148]	@ (80060a8 <HAL_RCC_OscConfig+0x43c>)
 8006014:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006016:	4b24      	ldr	r3, [pc, #144]	@ (80060a8 <HAL_RCC_OscConfig+0x43c>)
 8006018:	4925      	ldr	r1, [pc, #148]	@ (80060b0 <HAL_RCC_OscConfig+0x444>)
 800601a:	400a      	ands	r2, r1
 800601c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2210      	movs	r2, #16
 8006024:	4013      	ands	r3, r2
 8006026:	d039      	beq.n	800609c <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01b      	beq.n	8006068 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006030:	4b1d      	ldr	r3, [pc, #116]	@ (80060a8 <HAL_RCC_OscConfig+0x43c>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	4b1c      	ldr	r3, [pc, #112]	@ (80060a8 <HAL_RCC_OscConfig+0x43c>)
 8006036:	2180      	movs	r1, #128	@ 0x80
 8006038:	03c9      	lsls	r1, r1, #15
 800603a:	430a      	orrs	r2, r1
 800603c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800603e:	f7fc f861 	bl	8002104 <HAL_GetTick>
 8006042:	0003      	movs	r3, r0
 8006044:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006048:	f7fc f85c 	bl	8002104 <HAL_GetTick>
 800604c:	0002      	movs	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e021      	b.n	800609e <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800605a:	4b13      	ldr	r3, [pc, #76]	@ (80060a8 <HAL_RCC_OscConfig+0x43c>)
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	2380      	movs	r3, #128	@ 0x80
 8006060:	041b      	lsls	r3, r3, #16
 8006062:	4013      	ands	r3, r2
 8006064:	d0f0      	beq.n	8006048 <HAL_RCC_OscConfig+0x3dc>
 8006066:	e019      	b.n	800609c <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006068:	4b0f      	ldr	r3, [pc, #60]	@ (80060a8 <HAL_RCC_OscConfig+0x43c>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	4b0e      	ldr	r3, [pc, #56]	@ (80060a8 <HAL_RCC_OscConfig+0x43c>)
 800606e:	4911      	ldr	r1, [pc, #68]	@ (80060b4 <HAL_RCC_OscConfig+0x448>)
 8006070:	400a      	ands	r2, r1
 8006072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006074:	f7fc f846 	bl	8002104 <HAL_GetTick>
 8006078:	0003      	movs	r3, r0
 800607a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 800607c:	e008      	b.n	8006090 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800607e:	f7fc f841 	bl	8002104 <HAL_GetTick>
 8006082:	0002      	movs	r2, r0
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e006      	b.n	800609e <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8006090:	4b05      	ldr	r3, [pc, #20]	@ (80060a8 <HAL_RCC_OscConfig+0x43c>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	2380      	movs	r3, #128	@ 0x80
 8006096:	041b      	lsls	r3, r3, #16
 8006098:	4013      	ands	r3, r2
 800609a:	d1f0      	bne.n	800607e <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	0018      	movs	r0, r3
 80060a0:	46bd      	mov	sp, r7
 80060a2:	b006      	add	sp, #24
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	46c0      	nop			@ (mov r8, r8)
 80060a8:	40021000 	.word	0x40021000
 80060ac:	00001388 	.word	0x00001388
 80060b0:	efffffff 	.word	0xefffffff
 80060b4:	ffbfffff 	.word	0xffbfffff

080060b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e0f6      	b.n	80062ba <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060cc:	4b7d      	ldr	r3, [pc, #500]	@ (80062c4 <HAL_RCC_ClockConfig+0x20c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2207      	movs	r2, #7
 80060d2:	4013      	ands	r3, r2
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d91e      	bls.n	8006118 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060da:	4b7a      	ldr	r3, [pc, #488]	@ (80062c4 <HAL_RCC_ClockConfig+0x20c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2207      	movs	r2, #7
 80060e0:	4393      	bics	r3, r2
 80060e2:	0019      	movs	r1, r3
 80060e4:	4b77      	ldr	r3, [pc, #476]	@ (80062c4 <HAL_RCC_ClockConfig+0x20c>)
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80060ec:	f7fc f80a 	bl	8002104 <HAL_GetTick>
 80060f0:	0003      	movs	r3, r0
 80060f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80060f4:	e009      	b.n	800610a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80060f6:	f7fc f805 	bl	8002104 <HAL_GetTick>
 80060fa:	0002      	movs	r2, r0
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	4a71      	ldr	r2, [pc, #452]	@ (80062c8 <HAL_RCC_ClockConfig+0x210>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d901      	bls.n	800610a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e0d7      	b.n	80062ba <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800610a:	4b6e      	ldr	r3, [pc, #440]	@ (80062c4 <HAL_RCC_ClockConfig+0x20c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2207      	movs	r2, #7
 8006110:	4013      	ands	r3, r2
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	429a      	cmp	r2, r3
 8006116:	d1ee      	bne.n	80060f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2202      	movs	r2, #2
 800611e:	4013      	ands	r3, r2
 8006120:	d017      	beq.n	8006152 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2204      	movs	r2, #4
 8006128:	4013      	ands	r3, r2
 800612a:	d008      	beq.n	800613e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800612c:	4b67      	ldr	r3, [pc, #412]	@ (80062cc <HAL_RCC_ClockConfig+0x214>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	4a67      	ldr	r2, [pc, #412]	@ (80062d0 <HAL_RCC_ClockConfig+0x218>)
 8006132:	401a      	ands	r2, r3
 8006134:	4b65      	ldr	r3, [pc, #404]	@ (80062cc <HAL_RCC_ClockConfig+0x214>)
 8006136:	21b0      	movs	r1, #176	@ 0xb0
 8006138:	0109      	lsls	r1, r1, #4
 800613a:	430a      	orrs	r2, r1
 800613c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800613e:	4b63      	ldr	r3, [pc, #396]	@ (80062cc <HAL_RCC_ClockConfig+0x214>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	4a64      	ldr	r2, [pc, #400]	@ (80062d4 <HAL_RCC_ClockConfig+0x21c>)
 8006144:	4013      	ands	r3, r2
 8006146:	0019      	movs	r1, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	4b5f      	ldr	r3, [pc, #380]	@ (80062cc <HAL_RCC_ClockConfig+0x214>)
 800614e:	430a      	orrs	r2, r1
 8006150:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2201      	movs	r2, #1
 8006158:	4013      	ands	r3, r2
 800615a:	d100      	bne.n	800615e <HAL_RCC_ClockConfig+0xa6>
 800615c:	e061      	b.n	8006222 <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800615e:	4b5b      	ldr	r3, [pc, #364]	@ (80062cc <HAL_RCC_ClockConfig+0x214>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	221c      	movs	r2, #28
 8006164:	4393      	bics	r3, r2
 8006166:	0019      	movs	r1, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	4b57      	ldr	r3, [pc, #348]	@ (80062cc <HAL_RCC_ClockConfig+0x214>)
 800616e:	430a      	orrs	r2, r1
 8006170:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d107      	bne.n	800618a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800617a:	4b54      	ldr	r3, [pc, #336]	@ (80062cc <HAL_RCC_ClockConfig+0x214>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	2380      	movs	r3, #128	@ 0x80
 8006180:	029b      	lsls	r3, r3, #10
 8006182:	4013      	ands	r3, r2
 8006184:	d12b      	bne.n	80061de <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e097      	b.n	80062ba <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d107      	bne.n	80061a2 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006192:	4b4e      	ldr	r3, [pc, #312]	@ (80062cc <HAL_RCC_ClockConfig+0x214>)
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	2380      	movs	r3, #128	@ 0x80
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	4013      	ands	r3, r2
 800619c:	d11f      	bne.n	80061de <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e08b      	b.n	80062ba <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d107      	bne.n	80061ba <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80061aa:	4b48      	ldr	r3, [pc, #288]	@ (80062cc <HAL_RCC_ClockConfig+0x214>)
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	2380      	movs	r3, #128	@ 0x80
 80061b0:	041b      	lsls	r3, r3, #16
 80061b2:	4013      	ands	r3, r2
 80061b4:	d113      	bne.n	80061de <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e07f      	b.n	80062ba <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d106      	bne.n	80061d0 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80061c2:	4b42      	ldr	r3, [pc, #264]	@ (80062cc <HAL_RCC_ClockConfig+0x214>)
 80061c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061c6:	2202      	movs	r2, #2
 80061c8:	4013      	ands	r3, r2
 80061ca:	d108      	bne.n	80061de <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e074      	b.n	80062ba <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80061d0:	4b3e      	ldr	r3, [pc, #248]	@ (80062cc <HAL_RCC_ClockConfig+0x214>)
 80061d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061d4:	2202      	movs	r2, #2
 80061d6:	4013      	ands	r3, r2
 80061d8:	d101      	bne.n	80061de <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e06d      	b.n	80062ba <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061de:	4b3b      	ldr	r3, [pc, #236]	@ (80062cc <HAL_RCC_ClockConfig+0x214>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	2207      	movs	r2, #7
 80061e4:	4393      	bics	r3, r2
 80061e6:	0019      	movs	r1, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	4b37      	ldr	r3, [pc, #220]	@ (80062cc <HAL_RCC_ClockConfig+0x214>)
 80061ee:	430a      	orrs	r2, r1
 80061f0:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061f2:	f7fb ff87 	bl	8002104 <HAL_GetTick>
 80061f6:	0003      	movs	r3, r0
 80061f8:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061fa:	e009      	b.n	8006210 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80061fc:	f7fb ff82 	bl	8002104 <HAL_GetTick>
 8006200:	0002      	movs	r2, r0
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	4a30      	ldr	r2, [pc, #192]	@ (80062c8 <HAL_RCC_ClockConfig+0x210>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d901      	bls.n	8006210 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e054      	b.n	80062ba <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006210:	4b2e      	ldr	r3, [pc, #184]	@ (80062cc <HAL_RCC_ClockConfig+0x214>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2238      	movs	r2, #56	@ 0x38
 8006216:	401a      	ands	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	429a      	cmp	r2, r3
 8006220:	d1ec      	bne.n	80061fc <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006222:	4b28      	ldr	r3, [pc, #160]	@ (80062c4 <HAL_RCC_ClockConfig+0x20c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2207      	movs	r2, #7
 8006228:	4013      	ands	r3, r2
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d21e      	bcs.n	800626e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006230:	4b24      	ldr	r3, [pc, #144]	@ (80062c4 <HAL_RCC_ClockConfig+0x20c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2207      	movs	r2, #7
 8006236:	4393      	bics	r3, r2
 8006238:	0019      	movs	r1, r3
 800623a:	4b22      	ldr	r3, [pc, #136]	@ (80062c4 <HAL_RCC_ClockConfig+0x20c>)
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006242:	f7fb ff5f 	bl	8002104 <HAL_GetTick>
 8006246:	0003      	movs	r3, r0
 8006248:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800624a:	e009      	b.n	8006260 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800624c:	f7fb ff5a 	bl	8002104 <HAL_GetTick>
 8006250:	0002      	movs	r2, r0
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	4a1c      	ldr	r2, [pc, #112]	@ (80062c8 <HAL_RCC_ClockConfig+0x210>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d901      	bls.n	8006260 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e02c      	b.n	80062ba <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006260:	4b18      	ldr	r3, [pc, #96]	@ (80062c4 <HAL_RCC_ClockConfig+0x20c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2207      	movs	r2, #7
 8006266:	4013      	ands	r3, r2
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	429a      	cmp	r2, r3
 800626c:	d1ee      	bne.n	800624c <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2204      	movs	r2, #4
 8006274:	4013      	ands	r3, r2
 8006276:	d009      	beq.n	800628c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006278:	4b14      	ldr	r3, [pc, #80]	@ (80062cc <HAL_RCC_ClockConfig+0x214>)
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	4a16      	ldr	r2, [pc, #88]	@ (80062d8 <HAL_RCC_ClockConfig+0x220>)
 800627e:	4013      	ands	r3, r2
 8006280:	0019      	movs	r1, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691a      	ldr	r2, [r3, #16]
 8006286:	4b11      	ldr	r3, [pc, #68]	@ (80062cc <HAL_RCC_ClockConfig+0x214>)
 8006288:	430a      	orrs	r2, r1
 800628a:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800628c:	f000 f82c 	bl	80062e8 <HAL_RCC_GetSysClockFreq>
 8006290:	0001      	movs	r1, r0
 8006292:	4b0e      	ldr	r3, [pc, #56]	@ (80062cc <HAL_RCC_ClockConfig+0x214>)
 8006294:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006296:	0a1b      	lsrs	r3, r3, #8
 8006298:	220f      	movs	r2, #15
 800629a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800629c:	4b0f      	ldr	r3, [pc, #60]	@ (80062dc <HAL_RCC_ClockConfig+0x224>)
 800629e:	0092      	lsls	r2, r2, #2
 80062a0:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80062a2:	221f      	movs	r2, #31
 80062a4:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80062a6:	000a      	movs	r2, r1
 80062a8:	40da      	lsrs	r2, r3
 80062aa:	4b0d      	ldr	r3, [pc, #52]	@ (80062e0 <HAL_RCC_ClockConfig+0x228>)
 80062ac:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80062ae:	4b0d      	ldr	r3, [pc, #52]	@ (80062e4 <HAL_RCC_ClockConfig+0x22c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	0018      	movs	r0, r3
 80062b4:	f7fb feca 	bl	800204c <HAL_InitTick>
 80062b8:	0003      	movs	r3, r0
}
 80062ba:	0018      	movs	r0, r3
 80062bc:	46bd      	mov	sp, r7
 80062be:	b004      	add	sp, #16
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	46c0      	nop			@ (mov r8, r8)
 80062c4:	40022000 	.word	0x40022000
 80062c8:	00001388 	.word	0x00001388
 80062cc:	40021000 	.word	0x40021000
 80062d0:	ffff84ff 	.word	0xffff84ff
 80062d4:	fffff0ff 	.word	0xfffff0ff
 80062d8:	ffff8fff 	.word	0xffff8fff
 80062dc:	08008b74 	.word	0x08008b74
 80062e0:	20000068 	.word	0x20000068
 80062e4:	20000070 	.word	0x20000070

080062e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 80062ee:	4b27      	ldr	r3, [pc, #156]	@ (800638c <HAL_RCC_GetSysClockFreq+0xa4>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	089b      	lsrs	r3, r3, #2
 80062f4:	2207      	movs	r2, #7
 80062f6:	4013      	ands	r3, r2
 80062f8:	3301      	adds	r3, #1
 80062fa:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80062fc:	4b23      	ldr	r3, [pc, #140]	@ (800638c <HAL_RCC_GetSysClockFreq+0xa4>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	2238      	movs	r2, #56	@ 0x38
 8006302:	4013      	ands	r3, r2
 8006304:	d10f      	bne.n	8006326 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006306:	4b21      	ldr	r3, [pc, #132]	@ (800638c <HAL_RCC_GetSysClockFreq+0xa4>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	0adb      	lsrs	r3, r3, #11
 800630c:	2207      	movs	r2, #7
 800630e:	4013      	ands	r3, r2
 8006310:	2201      	movs	r2, #1
 8006312:	409a      	lsls	r2, r3
 8006314:	0013      	movs	r3, r2
 8006316:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	481d      	ldr	r0, [pc, #116]	@ (8006390 <HAL_RCC_GetSysClockFreq+0xa8>)
 800631c:	f7f9 fefe 	bl	800011c <__udivsi3>
 8006320:	0003      	movs	r3, r0
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	e027      	b.n	8006376 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006326:	4b19      	ldr	r3, [pc, #100]	@ (800638c <HAL_RCC_GetSysClockFreq+0xa4>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2238      	movs	r2, #56	@ 0x38
 800632c:	4013      	ands	r3, r2
 800632e:	2b08      	cmp	r3, #8
 8006330:	d102      	bne.n	8006338 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006332:	4b18      	ldr	r3, [pc, #96]	@ (8006394 <HAL_RCC_GetSysClockFreq+0xac>)
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	e01e      	b.n	8006376 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8006338:	4b14      	ldr	r3, [pc, #80]	@ (800638c <HAL_RCC_GetSysClockFreq+0xa4>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	2238      	movs	r2, #56	@ 0x38
 800633e:	4013      	ands	r3, r2
 8006340:	2b20      	cmp	r3, #32
 8006342:	d103      	bne.n	800634c <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006344:	2380      	movs	r3, #128	@ 0x80
 8006346:	021b      	lsls	r3, r3, #8
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	e014      	b.n	8006376 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800634c:	4b0f      	ldr	r3, [pc, #60]	@ (800638c <HAL_RCC_GetSysClockFreq+0xa4>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2238      	movs	r2, #56	@ 0x38
 8006352:	4013      	ands	r3, r2
 8006354:	2b18      	cmp	r3, #24
 8006356:	d103      	bne.n	8006360 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006358:	23fa      	movs	r3, #250	@ 0xfa
 800635a:	01db      	lsls	r3, r3, #7
 800635c:	60fb      	str	r3, [r7, #12]
 800635e:	e00a      	b.n	8006376 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8006360:	4b0a      	ldr	r3, [pc, #40]	@ (800638c <HAL_RCC_GetSysClockFreq+0xa4>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2238      	movs	r2, #56	@ 0x38
 8006366:	4013      	ands	r3, r2
 8006368:	2b10      	cmp	r3, #16
 800636a:	d102      	bne.n	8006372 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 800636c:	4b08      	ldr	r3, [pc, #32]	@ (8006390 <HAL_RCC_GetSysClockFreq+0xa8>)
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	e001      	b.n	8006376 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8006376:	68b9      	ldr	r1, [r7, #8]
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f7f9 fecf 	bl	800011c <__udivsi3>
 800637e:	0003      	movs	r3, r0
 8006380:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8006382:	68fb      	ldr	r3, [r7, #12]
}
 8006384:	0018      	movs	r0, r3
 8006386:	46bd      	mov	sp, r7
 8006388:	b004      	add	sp, #16
 800638a:	bd80      	pop	{r7, pc}
 800638c:	40021000 	.word	0x40021000
 8006390:	02dc6c00 	.word	0x02dc6c00
 8006394:	007a1200 	.word	0x007a1200

08006398 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800639c:	f7ff ffa4 	bl	80062e8 <HAL_RCC_GetSysClockFreq>
 80063a0:	0001      	movs	r1, r0
 80063a2:	4b09      	ldr	r3, [pc, #36]	@ (80063c8 <HAL_RCC_GetHCLKFreq+0x30>)
 80063a4:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80063a6:	0a1b      	lsrs	r3, r3, #8
 80063a8:	220f      	movs	r2, #15
 80063aa:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80063ac:	4b07      	ldr	r3, [pc, #28]	@ (80063cc <HAL_RCC_GetHCLKFreq+0x34>)
 80063ae:	0092      	lsls	r2, r2, #2
 80063b0:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80063b2:	221f      	movs	r2, #31
 80063b4:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80063b6:	000a      	movs	r2, r1
 80063b8:	40da      	lsrs	r2, r3
 80063ba:	4b05      	ldr	r3, [pc, #20]	@ (80063d0 <HAL_RCC_GetHCLKFreq+0x38>)
 80063bc:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 80063be:	4b04      	ldr	r3, [pc, #16]	@ (80063d0 <HAL_RCC_GetHCLKFreq+0x38>)
 80063c0:	681b      	ldr	r3, [r3, #0]
}
 80063c2:	0018      	movs	r0, r3
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	40021000 	.word	0x40021000
 80063cc:	08008b74 	.word	0x08008b74
 80063d0:	20000068 	.word	0x20000068

080063d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80063d8:	f7ff ffde 	bl	8006398 <HAL_RCC_GetHCLKFreq>
 80063dc:	0001      	movs	r1, r0
 80063de:	4b07      	ldr	r3, [pc, #28]	@ (80063fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	0b1b      	lsrs	r3, r3, #12
 80063e4:	2207      	movs	r2, #7
 80063e6:	401a      	ands	r2, r3
 80063e8:	4b05      	ldr	r3, [pc, #20]	@ (8006400 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80063ea:	0092      	lsls	r2, r2, #2
 80063ec:	58d3      	ldr	r3, [r2, r3]
 80063ee:	221f      	movs	r2, #31
 80063f0:	4013      	ands	r3, r2
 80063f2:	40d9      	lsrs	r1, r3
 80063f4:	000b      	movs	r3, r1
}
 80063f6:	0018      	movs	r0, r3
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	40021000 	.word	0x40021000
 8006400:	08008bb4 	.word	0x08008bb4

08006404 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800640c:	2313      	movs	r3, #19
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	2200      	movs	r2, #0
 8006412:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006414:	2312      	movs	r3, #18
 8006416:	18fb      	adds	r3, r7, r3
 8006418:	2200      	movs	r2, #0
 800641a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2240      	movs	r2, #64	@ 0x40
 8006422:	4013      	ands	r3, r2
 8006424:	d100      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8006426:	e079      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006428:	2011      	movs	r0, #17
 800642a:	183b      	adds	r3, r7, r0
 800642c:	2200      	movs	r2, #0
 800642e:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006430:	4b6a      	ldr	r3, [pc, #424]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006432:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006434:	2380      	movs	r3, #128	@ 0x80
 8006436:	055b      	lsls	r3, r3, #21
 8006438:	4013      	ands	r3, r2
 800643a:	d110      	bne.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800643c:	4b67      	ldr	r3, [pc, #412]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800643e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006440:	4b66      	ldr	r3, [pc, #408]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006442:	2180      	movs	r1, #128	@ 0x80
 8006444:	0549      	lsls	r1, r1, #21
 8006446:	430a      	orrs	r2, r1
 8006448:	63da      	str	r2, [r3, #60]	@ 0x3c
 800644a:	4b64      	ldr	r3, [pc, #400]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800644c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800644e:	2380      	movs	r3, #128	@ 0x80
 8006450:	055b      	lsls	r3, r3, #21
 8006452:	4013      	ands	r3, r2
 8006454:	60bb      	str	r3, [r7, #8]
 8006456:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006458:	183b      	adds	r3, r7, r0
 800645a:	2201      	movs	r2, #1
 800645c:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800645e:	4b5f      	ldr	r3, [pc, #380]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006460:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006462:	23c0      	movs	r3, #192	@ 0xc0
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4013      	ands	r3, r2
 8006468:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d019      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	429a      	cmp	r2, r3
 8006478:	d014      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800647a:	4b58      	ldr	r3, [pc, #352]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800647c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800647e:	4a58      	ldr	r2, [pc, #352]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006480:	4013      	ands	r3, r2
 8006482:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006484:	4b55      	ldr	r3, [pc, #340]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006486:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006488:	4b54      	ldr	r3, [pc, #336]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800648a:	2180      	movs	r1, #128	@ 0x80
 800648c:	0249      	lsls	r1, r1, #9
 800648e:	430a      	orrs	r2, r1
 8006490:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006492:	4b52      	ldr	r3, [pc, #328]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006494:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006496:	4b51      	ldr	r3, [pc, #324]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006498:	4952      	ldr	r1, [pc, #328]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800649a:	400a      	ands	r2, r1
 800649c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800649e:	4b4f      	ldr	r3, [pc, #316]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	2201      	movs	r2, #1
 80064a8:	4013      	ands	r3, r2
 80064aa:	d016      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ac:	f7fb fe2a 	bl	8002104 <HAL_GetTick>
 80064b0:	0003      	movs	r3, r0
 80064b2:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80064b4:	e00c      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064b6:	f7fb fe25 	bl	8002104 <HAL_GetTick>
 80064ba:	0002      	movs	r2, r0
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	4a49      	ldr	r2, [pc, #292]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d904      	bls.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80064c6:	2313      	movs	r3, #19
 80064c8:	18fb      	adds	r3, r7, r3
 80064ca:	2203      	movs	r2, #3
 80064cc:	701a      	strb	r2, [r3, #0]
          break;
 80064ce:	e004      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80064d0:	4b42      	ldr	r3, [pc, #264]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80064d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d4:	2202      	movs	r2, #2
 80064d6:	4013      	ands	r3, r2
 80064d8:	d0ed      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80064da:	2313      	movs	r3, #19
 80064dc:	18fb      	adds	r3, r7, r3
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064e4:	4b3d      	ldr	r3, [pc, #244]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80064e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064e8:	4a3d      	ldr	r2, [pc, #244]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80064ea:	4013      	ands	r3, r2
 80064ec:	0019      	movs	r1, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	69da      	ldr	r2, [r3, #28]
 80064f2:	4b3a      	ldr	r3, [pc, #232]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80064f4:	430a      	orrs	r2, r1
 80064f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80064f8:	e005      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fa:	2312      	movs	r3, #18
 80064fc:	18fb      	adds	r3, r7, r3
 80064fe:	2213      	movs	r2, #19
 8006500:	18ba      	adds	r2, r7, r2
 8006502:	7812      	ldrb	r2, [r2, #0]
 8006504:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006506:	2311      	movs	r3, #17
 8006508:	18fb      	adds	r3, r7, r3
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d105      	bne.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006510:	4b32      	ldr	r3, [pc, #200]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006512:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006514:	4b31      	ldr	r3, [pc, #196]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006516:	4935      	ldr	r1, [pc, #212]	@ (80065ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006518:	400a      	ands	r2, r1
 800651a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2201      	movs	r2, #1
 8006522:	4013      	ands	r3, r2
 8006524:	d009      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006526:	4b2d      	ldr	r3, [pc, #180]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652a:	2203      	movs	r2, #3
 800652c:	4393      	bics	r3, r2
 800652e:	0019      	movs	r1, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	4b29      	ldr	r3, [pc, #164]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006536:	430a      	orrs	r2, r1
 8006538:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2202      	movs	r2, #2
 8006540:	4013      	ands	r3, r2
 8006542:	d009      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006544:	4b25      	ldr	r3, [pc, #148]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006548:	4a29      	ldr	r2, [pc, #164]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800654a:	4013      	ands	r3, r2
 800654c:	0019      	movs	r1, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	4b22      	ldr	r3, [pc, #136]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006554:	430a      	orrs	r2, r1
 8006556:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2220      	movs	r2, #32
 800655e:	4013      	ands	r3, r2
 8006560:	d008      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006562:	4b1e      	ldr	r3, [pc, #120]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	0899      	lsrs	r1, r3, #2
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699a      	ldr	r2, [r3, #24]
 800656e:	4b1b      	ldr	r3, [pc, #108]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006570:	430a      	orrs	r2, r1
 8006572:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2208      	movs	r2, #8
 800657a:	4013      	ands	r3, r2
 800657c:	d009      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800657e:	4b17      	ldr	r3, [pc, #92]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006582:	4a1c      	ldr	r2, [pc, #112]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006584:	4013      	ands	r3, r2
 8006586:	0019      	movs	r1, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	695a      	ldr	r2, [r3, #20]
 800658c:	4b13      	ldr	r3, [pc, #76]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800658e:	430a      	orrs	r2, r1
 8006590:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2204      	movs	r2, #4
 8006598:	4013      	ands	r3, r2
 800659a:	d009      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800659c:	4b0f      	ldr	r3, [pc, #60]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800659e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a0:	4a15      	ldr	r2, [pc, #84]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80065a2:	4013      	ands	r3, r2
 80065a4:	0019      	movs	r1, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691a      	ldr	r2, [r3, #16]
 80065aa:	4b0c      	ldr	r3, [pc, #48]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80065ac:	430a      	orrs	r2, r1
 80065ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2280      	movs	r2, #128	@ 0x80
 80065b6:	4013      	ands	r3, r2
 80065b8:	d009      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80065ba:	4b08      	ldr	r3, [pc, #32]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	22e0      	movs	r2, #224	@ 0xe0
 80065c0:	4393      	bics	r3, r2
 80065c2:	0019      	movs	r1, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	4b04      	ldr	r3, [pc, #16]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80065ca:	430a      	orrs	r2, r1
 80065cc:	601a      	str	r2, [r3, #0]
  }
  return status;
 80065ce:	2312      	movs	r3, #18
 80065d0:	18fb      	adds	r3, r7, r3
 80065d2:	781b      	ldrb	r3, [r3, #0]
}
 80065d4:	0018      	movs	r0, r3
 80065d6:	46bd      	mov	sp, r7
 80065d8:	b006      	add	sp, #24
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	40021000 	.word	0x40021000
 80065e0:	fffffcff 	.word	0xfffffcff
 80065e4:	fffeffff 	.word	0xfffeffff
 80065e8:	00001388 	.word	0x00001388
 80065ec:	efffffff 	.word	0xefffffff
 80065f0:	ffffcfff 	.word	0xffffcfff
 80065f4:	ffffefff 	.word	0xffffefff
 80065f8:	ffff3fff 	.word	0xffff3fff

080065fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e04a      	b.n	80066a4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	223d      	movs	r2, #61	@ 0x3d
 8006612:	5c9b      	ldrb	r3, [r3, r2]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d107      	bne.n	800662a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	223c      	movs	r2, #60	@ 0x3c
 800661e:	2100      	movs	r1, #0
 8006620:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	0018      	movs	r0, r3
 8006626:	f7fb fbe1 	bl	8001dec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	223d      	movs	r2, #61	@ 0x3d
 800662e:	2102      	movs	r1, #2
 8006630:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3304      	adds	r3, #4
 800663a:	0019      	movs	r1, r3
 800663c:	0010      	movs	r0, r2
 800663e:	f000 f935 	bl	80068ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2248      	movs	r2, #72	@ 0x48
 8006646:	2101      	movs	r1, #1
 8006648:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	223e      	movs	r2, #62	@ 0x3e
 800664e:	2101      	movs	r1, #1
 8006650:	5499      	strb	r1, [r3, r2]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	223f      	movs	r2, #63	@ 0x3f
 8006656:	2101      	movs	r1, #1
 8006658:	5499      	strb	r1, [r3, r2]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2240      	movs	r2, #64	@ 0x40
 800665e:	2101      	movs	r1, #1
 8006660:	5499      	strb	r1, [r3, r2]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2241      	movs	r2, #65	@ 0x41
 8006666:	2101      	movs	r1, #1
 8006668:	5499      	strb	r1, [r3, r2]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2242      	movs	r2, #66	@ 0x42
 800666e:	2101      	movs	r1, #1
 8006670:	5499      	strb	r1, [r3, r2]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2243      	movs	r2, #67	@ 0x43
 8006676:	2101      	movs	r1, #1
 8006678:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2244      	movs	r2, #68	@ 0x44
 800667e:	2101      	movs	r1, #1
 8006680:	5499      	strb	r1, [r3, r2]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2245      	movs	r2, #69	@ 0x45
 8006686:	2101      	movs	r1, #1
 8006688:	5499      	strb	r1, [r3, r2]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2246      	movs	r2, #70	@ 0x46
 800668e:	2101      	movs	r1, #1
 8006690:	5499      	strb	r1, [r3, r2]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2247      	movs	r2, #71	@ 0x47
 8006696:	2101      	movs	r1, #1
 8006698:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	223d      	movs	r2, #61	@ 0x3d
 800669e:	2101      	movs	r1, #1
 80066a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	0018      	movs	r0, r3
 80066a6:	46bd      	mov	sp, r7
 80066a8:	b002      	add	sp, #8
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066b8:	2317      	movs	r3, #23
 80066ba:	18fb      	adds	r3, r7, r3
 80066bc:	2200      	movs	r2, #0
 80066be:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	223c      	movs	r2, #60	@ 0x3c
 80066c4:	5c9b      	ldrb	r3, [r3, r2]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_TIM_PWM_ConfigChannel+0x22>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e0e5      	b.n	800689a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	223c      	movs	r2, #60	@ 0x3c
 80066d2:	2101      	movs	r1, #1
 80066d4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b14      	cmp	r3, #20
 80066da:	d900      	bls.n	80066de <HAL_TIM_PWM_ConfigChannel+0x32>
 80066dc:	e0d1      	b.n	8006882 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	009a      	lsls	r2, r3, #2
 80066e2:	4b70      	ldr	r3, [pc, #448]	@ (80068a4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80066e4:	18d3      	adds	r3, r2, r3
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	0011      	movs	r1, r2
 80066f2:	0018      	movs	r0, r3
 80066f4:	f000 f95e 	bl	80069b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2108      	movs	r1, #8
 8006704:	430a      	orrs	r2, r1
 8006706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699a      	ldr	r2, [r3, #24]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2104      	movs	r1, #4
 8006714:	438a      	bics	r2, r1
 8006716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6999      	ldr	r1, [r3, #24]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	691a      	ldr	r2, [r3, #16]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	619a      	str	r2, [r3, #24]
      break;
 800672a:	e0af      	b.n	800688c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	0011      	movs	r1, r2
 8006734:	0018      	movs	r0, r3
 8006736:	f000 f9bd 	bl	8006ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699a      	ldr	r2, [r3, #24]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2180      	movs	r1, #128	@ 0x80
 8006746:	0109      	lsls	r1, r1, #4
 8006748:	430a      	orrs	r2, r1
 800674a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699a      	ldr	r2, [r3, #24]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4954      	ldr	r1, [pc, #336]	@ (80068a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006758:	400a      	ands	r2, r1
 800675a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6999      	ldr	r1, [r3, #24]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	021a      	lsls	r2, r3, #8
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	619a      	str	r2, [r3, #24]
      break;
 8006770:	e08c      	b.n	800688c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	0011      	movs	r1, r2
 800677a:	0018      	movs	r0, r3
 800677c:	f000 fa18 	bl	8006bb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69da      	ldr	r2, [r3, #28]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2108      	movs	r1, #8
 800678c:	430a      	orrs	r2, r1
 800678e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	69da      	ldr	r2, [r3, #28]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2104      	movs	r1, #4
 800679c:	438a      	bics	r2, r1
 800679e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	69d9      	ldr	r1, [r3, #28]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	61da      	str	r2, [r3, #28]
      break;
 80067b2:	e06b      	b.n	800688c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	0011      	movs	r1, r2
 80067bc:	0018      	movs	r0, r3
 80067be:	f000 fa79 	bl	8006cb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	69da      	ldr	r2, [r3, #28]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2180      	movs	r1, #128	@ 0x80
 80067ce:	0109      	lsls	r1, r1, #4
 80067d0:	430a      	orrs	r2, r1
 80067d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69da      	ldr	r2, [r3, #28]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4932      	ldr	r1, [pc, #200]	@ (80068a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80067e0:	400a      	ands	r2, r1
 80067e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	69d9      	ldr	r1, [r3, #28]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	021a      	lsls	r2, r3, #8
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	61da      	str	r2, [r3, #28]
      break;
 80067f8:	e048      	b.n	800688c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	0011      	movs	r1, r2
 8006802:	0018      	movs	r0, r3
 8006804:	f000 faba 	bl	8006d7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2108      	movs	r1, #8
 8006814:	430a      	orrs	r2, r1
 8006816:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2104      	movs	r1, #4
 8006824:	438a      	bics	r2, r1
 8006826:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	691a      	ldr	r2, [r3, #16]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800683a:	e027      	b.n	800688c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	0011      	movs	r1, r2
 8006844:	0018      	movs	r0, r3
 8006846:	f000 faf3 	bl	8006e30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2180      	movs	r1, #128	@ 0x80
 8006856:	0109      	lsls	r1, r1, #4
 8006858:	430a      	orrs	r2, r1
 800685a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4910      	ldr	r1, [pc, #64]	@ (80068a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006868:	400a      	ands	r2, r1
 800686a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	021a      	lsls	r2, r3, #8
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006880:	e004      	b.n	800688c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8006882:	2317      	movs	r3, #23
 8006884:	18fb      	adds	r3, r7, r3
 8006886:	2201      	movs	r2, #1
 8006888:	701a      	strb	r2, [r3, #0]
      break;
 800688a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	223c      	movs	r2, #60	@ 0x3c
 8006890:	2100      	movs	r1, #0
 8006892:	5499      	strb	r1, [r3, r2]

  return status;
 8006894:	2317      	movs	r3, #23
 8006896:	18fb      	adds	r3, r7, r3
 8006898:	781b      	ldrb	r3, [r3, #0]
}
 800689a:	0018      	movs	r0, r3
 800689c:	46bd      	mov	sp, r7
 800689e:	b006      	add	sp, #24
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	46c0      	nop			@ (mov r8, r8)
 80068a4:	08008bfc 	.word	0x08008bfc
 80068a8:	fffffbff 	.word	0xfffffbff

080068ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a37      	ldr	r2, [pc, #220]	@ (800699c <TIM_Base_SetConfig+0xf0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d008      	beq.n	80068d6 <TIM_Base_SetConfig+0x2a>
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	2380      	movs	r3, #128	@ 0x80
 80068c8:	05db      	lsls	r3, r3, #23
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d003      	beq.n	80068d6 <TIM_Base_SetConfig+0x2a>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a33      	ldr	r2, [pc, #204]	@ (80069a0 <TIM_Base_SetConfig+0xf4>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d108      	bne.n	80068e8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2270      	movs	r2, #112	@ 0x70
 80068da:	4393      	bics	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a2c      	ldr	r2, [pc, #176]	@ (800699c <TIM_Base_SetConfig+0xf0>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d014      	beq.n	800691a <TIM_Base_SetConfig+0x6e>
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	2380      	movs	r3, #128	@ 0x80
 80068f4:	05db      	lsls	r3, r3, #23
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d00f      	beq.n	800691a <TIM_Base_SetConfig+0x6e>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a28      	ldr	r2, [pc, #160]	@ (80069a0 <TIM_Base_SetConfig+0xf4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00b      	beq.n	800691a <TIM_Base_SetConfig+0x6e>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a27      	ldr	r2, [pc, #156]	@ (80069a4 <TIM_Base_SetConfig+0xf8>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d007      	beq.n	800691a <TIM_Base_SetConfig+0x6e>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a26      	ldr	r2, [pc, #152]	@ (80069a8 <TIM_Base_SetConfig+0xfc>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d003      	beq.n	800691a <TIM_Base_SetConfig+0x6e>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a25      	ldr	r2, [pc, #148]	@ (80069ac <TIM_Base_SetConfig+0x100>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d108      	bne.n	800692c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4a24      	ldr	r2, [pc, #144]	@ (80069b0 <TIM_Base_SetConfig+0x104>)
 800691e:	4013      	ands	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	4313      	orrs	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2280      	movs	r2, #128	@ 0x80
 8006930:	4393      	bics	r3, r2
 8006932:	001a      	movs	r2, r3
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a11      	ldr	r2, [pc, #68]	@ (800699c <TIM_Base_SetConfig+0xf0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d007      	beq.n	800696a <TIM_Base_SetConfig+0xbe>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a12      	ldr	r2, [pc, #72]	@ (80069a8 <TIM_Base_SetConfig+0xfc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d003      	beq.n	800696a <TIM_Base_SetConfig+0xbe>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a11      	ldr	r2, [pc, #68]	@ (80069ac <TIM_Base_SetConfig+0x100>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d103      	bne.n	8006972 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	691a      	ldr	r2, [r3, #16]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	2201      	movs	r2, #1
 800697e:	4013      	ands	r3, r2
 8006980:	2b01      	cmp	r3, #1
 8006982:	d106      	bne.n	8006992 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	2201      	movs	r2, #1
 800698a:	4393      	bics	r3, r2
 800698c:	001a      	movs	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	611a      	str	r2, [r3, #16]
  }
}
 8006992:	46c0      	nop			@ (mov r8, r8)
 8006994:	46bd      	mov	sp, r7
 8006996:	b004      	add	sp, #16
 8006998:	bd80      	pop	{r7, pc}
 800699a:	46c0      	nop			@ (mov r8, r8)
 800699c:	40012c00 	.word	0x40012c00
 80069a0:	40000400 	.word	0x40000400
 80069a4:	40002000 	.word	0x40002000
 80069a8:	40014400 	.word	0x40014400
 80069ac:	40014800 	.word	0x40014800
 80069b0:	fffffcff 	.word	0xfffffcff

080069b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	2201      	movs	r2, #1
 80069ca:	4393      	bics	r3, r2
 80069cc:	001a      	movs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4a2e      	ldr	r2, [pc, #184]	@ (8006a9c <TIM_OC1_SetConfig+0xe8>)
 80069e2:	4013      	ands	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2203      	movs	r2, #3
 80069ea:	4393      	bics	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2202      	movs	r2, #2
 80069fc:	4393      	bics	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a24      	ldr	r2, [pc, #144]	@ (8006aa0 <TIM_OC1_SetConfig+0xec>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d007      	beq.n	8006a22 <TIM_OC1_SetConfig+0x6e>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a23      	ldr	r2, [pc, #140]	@ (8006aa4 <TIM_OC1_SetConfig+0xf0>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d003      	beq.n	8006a22 <TIM_OC1_SetConfig+0x6e>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a22      	ldr	r2, [pc, #136]	@ (8006aa8 <TIM_OC1_SetConfig+0xf4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d10c      	bne.n	8006a3c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2208      	movs	r2, #8
 8006a26:	4393      	bics	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2204      	movs	r2, #4
 8006a38:	4393      	bics	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a18      	ldr	r2, [pc, #96]	@ (8006aa0 <TIM_OC1_SetConfig+0xec>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d007      	beq.n	8006a54 <TIM_OC1_SetConfig+0xa0>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a17      	ldr	r2, [pc, #92]	@ (8006aa4 <TIM_OC1_SetConfig+0xf0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d003      	beq.n	8006a54 <TIM_OC1_SetConfig+0xa0>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a16      	ldr	r2, [pc, #88]	@ (8006aa8 <TIM_OC1_SetConfig+0xf4>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d111      	bne.n	8006a78 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	4a15      	ldr	r2, [pc, #84]	@ (8006aac <TIM_OC1_SetConfig+0xf8>)
 8006a58:	4013      	ands	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	4a14      	ldr	r2, [pc, #80]	@ (8006ab0 <TIM_OC1_SetConfig+0xfc>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	621a      	str	r2, [r3, #32]
}
 8006a92:	46c0      	nop			@ (mov r8, r8)
 8006a94:	46bd      	mov	sp, r7
 8006a96:	b006      	add	sp, #24
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	46c0      	nop			@ (mov r8, r8)
 8006a9c:	fffeff8f 	.word	0xfffeff8f
 8006aa0:	40012c00 	.word	0x40012c00
 8006aa4:	40014400 	.word	0x40014400
 8006aa8:	40014800 	.word	0x40014800
 8006aac:	fffffeff 	.word	0xfffffeff
 8006ab0:	fffffdff 	.word	0xfffffdff

08006ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	2210      	movs	r2, #16
 8006aca:	4393      	bics	r3, r2
 8006acc:	001a      	movs	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8006b94 <TIM_OC2_SetConfig+0xe0>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8006b98 <TIM_OC2_SetConfig+0xe4>)
 8006aea:	4013      	ands	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2220      	movs	r2, #32
 8006afe:	4393      	bics	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	011b      	lsls	r3, r3, #4
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a22      	ldr	r2, [pc, #136]	@ (8006b9c <TIM_OC2_SetConfig+0xe8>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d10d      	bne.n	8006b32 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2280      	movs	r2, #128	@ 0x80
 8006b1a:	4393      	bics	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	011b      	lsls	r3, r3, #4
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2240      	movs	r2, #64	@ 0x40
 8006b2e:	4393      	bics	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a19      	ldr	r2, [pc, #100]	@ (8006b9c <TIM_OC2_SetConfig+0xe8>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d007      	beq.n	8006b4a <TIM_OC2_SetConfig+0x96>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a18      	ldr	r2, [pc, #96]	@ (8006ba0 <TIM_OC2_SetConfig+0xec>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d003      	beq.n	8006b4a <TIM_OC2_SetConfig+0x96>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a17      	ldr	r2, [pc, #92]	@ (8006ba4 <TIM_OC2_SetConfig+0xf0>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d113      	bne.n	8006b72 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	4a16      	ldr	r2, [pc, #88]	@ (8006ba8 <TIM_OC2_SetConfig+0xf4>)
 8006b4e:	4013      	ands	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	4a15      	ldr	r2, [pc, #84]	@ (8006bac <TIM_OC2_SetConfig+0xf8>)
 8006b56:	4013      	ands	r3, r2
 8006b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	621a      	str	r2, [r3, #32]
}
 8006b8c:	46c0      	nop			@ (mov r8, r8)
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	b006      	add	sp, #24
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	feff8fff 	.word	0xfeff8fff
 8006b98:	fffffcff 	.word	0xfffffcff
 8006b9c:	40012c00 	.word	0x40012c00
 8006ba0:	40014400 	.word	0x40014400
 8006ba4:	40014800 	.word	0x40014800
 8006ba8:	fffffbff 	.word	0xfffffbff
 8006bac:	fffff7ff 	.word	0xfffff7ff

08006bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	4a31      	ldr	r2, [pc, #196]	@ (8006c8c <TIM_OC3_SetConfig+0xdc>)
 8006bc6:	401a      	ands	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4a2d      	ldr	r2, [pc, #180]	@ (8006c90 <TIM_OC3_SetConfig+0xe0>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2203      	movs	r2, #3
 8006be4:	4393      	bics	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	4a27      	ldr	r2, [pc, #156]	@ (8006c94 <TIM_OC3_SetConfig+0xe4>)
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	021b      	lsls	r3, r3, #8
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a23      	ldr	r2, [pc, #140]	@ (8006c98 <TIM_OC3_SetConfig+0xe8>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d10d      	bne.n	8006c2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	4a22      	ldr	r2, [pc, #136]	@ (8006c9c <TIM_OC3_SetConfig+0xec>)
 8006c12:	4013      	ands	r3, r2
 8006c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	4a1e      	ldr	r2, [pc, #120]	@ (8006ca0 <TIM_OC3_SetConfig+0xf0>)
 8006c26:	4013      	ands	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8006c98 <TIM_OC3_SetConfig+0xe8>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d007      	beq.n	8006c42 <TIM_OC3_SetConfig+0x92>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a1b      	ldr	r2, [pc, #108]	@ (8006ca4 <TIM_OC3_SetConfig+0xf4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d003      	beq.n	8006c42 <TIM_OC3_SetConfig+0x92>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a1a      	ldr	r2, [pc, #104]	@ (8006ca8 <TIM_OC3_SetConfig+0xf8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d113      	bne.n	8006c6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	4a19      	ldr	r2, [pc, #100]	@ (8006cac <TIM_OC3_SetConfig+0xfc>)
 8006c46:	4013      	ands	r3, r2
 8006c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	4a18      	ldr	r2, [pc, #96]	@ (8006cb0 <TIM_OC3_SetConfig+0x100>)
 8006c4e:	4013      	ands	r3, r2
 8006c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	011b      	lsls	r3, r3, #4
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	621a      	str	r2, [r3, #32]
}
 8006c84:	46c0      	nop			@ (mov r8, r8)
 8006c86:	46bd      	mov	sp, r7
 8006c88:	b006      	add	sp, #24
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	fffffeff 	.word	0xfffffeff
 8006c90:	fffeff8f 	.word	0xfffeff8f
 8006c94:	fffffdff 	.word	0xfffffdff
 8006c98:	40012c00 	.word	0x40012c00
 8006c9c:	fffff7ff 	.word	0xfffff7ff
 8006ca0:	fffffbff 	.word	0xfffffbff
 8006ca4:	40014400 	.word	0x40014400
 8006ca8:	40014800 	.word	0x40014800
 8006cac:	ffffefff 	.word	0xffffefff
 8006cb0:	ffffdfff 	.word	0xffffdfff

08006cb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	4a24      	ldr	r2, [pc, #144]	@ (8006d5c <TIM_OC4_SetConfig+0xa8>)
 8006cca:	401a      	ands	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4a20      	ldr	r2, [pc, #128]	@ (8006d60 <TIM_OC4_SetConfig+0xac>)
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8006d64 <TIM_OC4_SetConfig+0xb0>)
 8006ce8:	4013      	ands	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	021b      	lsls	r3, r3, #8
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8006d68 <TIM_OC4_SetConfig+0xb4>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	031b      	lsls	r3, r3, #12
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a17      	ldr	r2, [pc, #92]	@ (8006d6c <TIM_OC4_SetConfig+0xb8>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d007      	beq.n	8006d24 <TIM_OC4_SetConfig+0x70>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a16      	ldr	r2, [pc, #88]	@ (8006d70 <TIM_OC4_SetConfig+0xbc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d003      	beq.n	8006d24 <TIM_OC4_SetConfig+0x70>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a15      	ldr	r2, [pc, #84]	@ (8006d74 <TIM_OC4_SetConfig+0xc0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d109      	bne.n	8006d38 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	4a14      	ldr	r2, [pc, #80]	@ (8006d78 <TIM_OC4_SetConfig+0xc4>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	019b      	lsls	r3, r3, #6
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	621a      	str	r2, [r3, #32]
}
 8006d52:	46c0      	nop			@ (mov r8, r8)
 8006d54:	46bd      	mov	sp, r7
 8006d56:	b006      	add	sp, #24
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	46c0      	nop			@ (mov r8, r8)
 8006d5c:	ffffefff 	.word	0xffffefff
 8006d60:	feff8fff 	.word	0xfeff8fff
 8006d64:	fffffcff 	.word	0xfffffcff
 8006d68:	ffffdfff 	.word	0xffffdfff
 8006d6c:	40012c00 	.word	0x40012c00
 8006d70:	40014400 	.word	0x40014400
 8006d74:	40014800 	.word	0x40014800
 8006d78:	ffffbfff 	.word	0xffffbfff

08006d7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	4a21      	ldr	r2, [pc, #132]	@ (8006e18 <TIM_OC5_SetConfig+0x9c>)
 8006d92:	401a      	ands	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4a1d      	ldr	r2, [pc, #116]	@ (8006e1c <TIM_OC5_SetConfig+0xa0>)
 8006da8:	4013      	ands	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	4a19      	ldr	r2, [pc, #100]	@ (8006e20 <TIM_OC5_SetConfig+0xa4>)
 8006dba:	4013      	ands	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	041b      	lsls	r3, r3, #16
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a15      	ldr	r2, [pc, #84]	@ (8006e24 <TIM_OC5_SetConfig+0xa8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d007      	beq.n	8006de2 <TIM_OC5_SetConfig+0x66>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a14      	ldr	r2, [pc, #80]	@ (8006e28 <TIM_OC5_SetConfig+0xac>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d003      	beq.n	8006de2 <TIM_OC5_SetConfig+0x66>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a13      	ldr	r2, [pc, #76]	@ (8006e2c <TIM_OC5_SetConfig+0xb0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d109      	bne.n	8006df6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	4a0c      	ldr	r2, [pc, #48]	@ (8006e18 <TIM_OC5_SetConfig+0x9c>)
 8006de6:	4013      	ands	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	021b      	lsls	r3, r3, #8
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	621a      	str	r2, [r3, #32]
}
 8006e10:	46c0      	nop			@ (mov r8, r8)
 8006e12:	46bd      	mov	sp, r7
 8006e14:	b006      	add	sp, #24
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	fffeffff 	.word	0xfffeffff
 8006e1c:	fffeff8f 	.word	0xfffeff8f
 8006e20:	fffdffff 	.word	0xfffdffff
 8006e24:	40012c00 	.word	0x40012c00
 8006e28:	40014400 	.word	0x40014400
 8006e2c:	40014800 	.word	0x40014800

08006e30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	4a22      	ldr	r2, [pc, #136]	@ (8006ed0 <TIM_OC6_SetConfig+0xa0>)
 8006e46:	401a      	ands	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ed4 <TIM_OC6_SetConfig+0xa4>)
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ed8 <TIM_OC6_SetConfig+0xa8>)
 8006e70:	4013      	ands	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	051b      	lsls	r3, r3, #20
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a16      	ldr	r2, [pc, #88]	@ (8006edc <TIM_OC6_SetConfig+0xac>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d007      	beq.n	8006e98 <TIM_OC6_SetConfig+0x68>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a15      	ldr	r2, [pc, #84]	@ (8006ee0 <TIM_OC6_SetConfig+0xb0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d003      	beq.n	8006e98 <TIM_OC6_SetConfig+0x68>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a14      	ldr	r2, [pc, #80]	@ (8006ee4 <TIM_OC6_SetConfig+0xb4>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d109      	bne.n	8006eac <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	4a13      	ldr	r2, [pc, #76]	@ (8006ee8 <TIM_OC6_SetConfig+0xb8>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	029b      	lsls	r3, r3, #10
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	621a      	str	r2, [r3, #32]
}
 8006ec6:	46c0      	nop			@ (mov r8, r8)
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	b006      	add	sp, #24
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	46c0      	nop			@ (mov r8, r8)
 8006ed0:	ffefffff 	.word	0xffefffff
 8006ed4:	feff8fff 	.word	0xfeff8fff
 8006ed8:	ffdfffff 	.word	0xffdfffff
 8006edc:	40012c00 	.word	0x40012c00
 8006ee0:	40014400 	.word	0x40014400
 8006ee4:	40014800 	.word	0x40014800
 8006ee8:	fffbffff 	.word	0xfffbffff

08006eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	223c      	movs	r2, #60	@ 0x3c
 8006efa:	5c9b      	ldrb	r3, [r3, r2]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d101      	bne.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f00:	2302      	movs	r3, #2
 8006f02:	e050      	b.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	223c      	movs	r2, #60	@ 0x3c
 8006f08:	2101      	movs	r1, #1
 8006f0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	223d      	movs	r2, #61	@ 0x3d
 8006f10:	2102      	movs	r1, #2
 8006f12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a21      	ldr	r2, [pc, #132]	@ (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d108      	bne.n	8006f40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4a20      	ldr	r2, [pc, #128]	@ (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f32:	4013      	ands	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2270      	movs	r2, #112	@ 0x70
 8006f44:	4393      	bics	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a14      	ldr	r2, [pc, #80]	@ (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00a      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	2380      	movs	r3, #128	@ 0x80
 8006f6a:	05db      	lsls	r3, r3, #23
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d004      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a10      	ldr	r2, [pc, #64]	@ (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d10c      	bne.n	8006f94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2280      	movs	r2, #128	@ 0x80
 8006f7e:	4393      	bics	r3, r2
 8006f80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	223d      	movs	r2, #61	@ 0x3d
 8006f98:	2101      	movs	r1, #1
 8006f9a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	223c      	movs	r2, #60	@ 0x3c
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	0018      	movs	r0, r3
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	b004      	add	sp, #16
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	46c0      	nop			@ (mov r8, r8)
 8006fb0:	40012c00 	.word	0x40012c00
 8006fb4:	ff0fffff 	.word	0xff0fffff
 8006fb8:	40000400 	.word	0x40000400

08006fbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e046      	b.n	800705c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2288      	movs	r2, #136	@ 0x88
 8006fd2:	589b      	ldr	r3, [r3, r2]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d107      	bne.n	8006fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2284      	movs	r2, #132	@ 0x84
 8006fdc:	2100      	movs	r1, #0
 8006fde:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	f7fa ffa8 	bl	8001f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2288      	movs	r2, #136	@ 0x88
 8006fec:	2124      	movs	r1, #36	@ 0x24
 8006fee:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	438a      	bics	r2, r1
 8006ffe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	0018      	movs	r0, r3
 800700c:	f000 f9aa 	bl	8007364 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	0018      	movs	r0, r3
 8007014:	f000 f828 	bl	8007068 <UART_SetConfig>
 8007018:	0003      	movs	r3, r0
 800701a:	2b01      	cmp	r3, #1
 800701c:	d101      	bne.n	8007022 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e01c      	b.n	800705c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	490d      	ldr	r1, [pc, #52]	@ (8007064 <HAL_UART_Init+0xa8>)
 800702e:	400a      	ands	r2, r1
 8007030:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	212a      	movs	r1, #42	@ 0x2a
 800703e:	438a      	bics	r2, r1
 8007040:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2101      	movs	r1, #1
 800704e:	430a      	orrs	r2, r1
 8007050:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	0018      	movs	r0, r3
 8007056:	f000 fa39 	bl	80074cc <UART_CheckIdleState>
 800705a:	0003      	movs	r3, r0
}
 800705c:	0018      	movs	r0, r3
 800705e:	46bd      	mov	sp, r7
 8007060:	b002      	add	sp, #8
 8007062:	bd80      	pop	{r7, pc}
 8007064:	ffffb7ff 	.word	0xffffb7ff

08007068 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b088      	sub	sp, #32
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007070:	231e      	movs	r3, #30
 8007072:	18fb      	adds	r3, r7, r3
 8007074:	2200      	movs	r2, #0
 8007076:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	431a      	orrs	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	431a      	orrs	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	4313      	orrs	r3, r2
 800708e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4aab      	ldr	r2, [pc, #684]	@ (8007344 <UART_SetConfig+0x2dc>)
 8007098:	4013      	ands	r3, r2
 800709a:	0019      	movs	r1, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	4aa6      	ldr	r2, [pc, #664]	@ (8007348 <UART_SetConfig+0x2e0>)
 80070ae:	4013      	ands	r3, r2
 80070b0:	0019      	movs	r1, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	4a9d      	ldr	r2, [pc, #628]	@ (800734c <UART_SetConfig+0x2e4>)
 80070d6:	4013      	ands	r3, r2
 80070d8:	0019      	movs	r1, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ea:	220f      	movs	r2, #15
 80070ec:	4393      	bics	r3, r2
 80070ee:	0019      	movs	r1, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a93      	ldr	r2, [pc, #588]	@ (8007350 <UART_SetConfig+0x2e8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d127      	bne.n	8007156 <UART_SetConfig+0xee>
 8007106:	4b93      	ldr	r3, [pc, #588]	@ (8007354 <UART_SetConfig+0x2ec>)
 8007108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800710a:	2203      	movs	r2, #3
 800710c:	4013      	ands	r3, r2
 800710e:	2b03      	cmp	r3, #3
 8007110:	d017      	beq.n	8007142 <UART_SetConfig+0xda>
 8007112:	d81b      	bhi.n	800714c <UART_SetConfig+0xe4>
 8007114:	2b02      	cmp	r3, #2
 8007116:	d00a      	beq.n	800712e <UART_SetConfig+0xc6>
 8007118:	d818      	bhi.n	800714c <UART_SetConfig+0xe4>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <UART_SetConfig+0xbc>
 800711e:	2b01      	cmp	r3, #1
 8007120:	d00a      	beq.n	8007138 <UART_SetConfig+0xd0>
 8007122:	e013      	b.n	800714c <UART_SetConfig+0xe4>
 8007124:	231f      	movs	r3, #31
 8007126:	18fb      	adds	r3, r7, r3
 8007128:	2200      	movs	r2, #0
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	e021      	b.n	8007172 <UART_SetConfig+0x10a>
 800712e:	231f      	movs	r3, #31
 8007130:	18fb      	adds	r3, r7, r3
 8007132:	2202      	movs	r2, #2
 8007134:	701a      	strb	r2, [r3, #0]
 8007136:	e01c      	b.n	8007172 <UART_SetConfig+0x10a>
 8007138:	231f      	movs	r3, #31
 800713a:	18fb      	adds	r3, r7, r3
 800713c:	2204      	movs	r2, #4
 800713e:	701a      	strb	r2, [r3, #0]
 8007140:	e017      	b.n	8007172 <UART_SetConfig+0x10a>
 8007142:	231f      	movs	r3, #31
 8007144:	18fb      	adds	r3, r7, r3
 8007146:	2208      	movs	r2, #8
 8007148:	701a      	strb	r2, [r3, #0]
 800714a:	e012      	b.n	8007172 <UART_SetConfig+0x10a>
 800714c:	231f      	movs	r3, #31
 800714e:	18fb      	adds	r3, r7, r3
 8007150:	2210      	movs	r2, #16
 8007152:	701a      	strb	r2, [r3, #0]
 8007154:	e00d      	b.n	8007172 <UART_SetConfig+0x10a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a7f      	ldr	r2, [pc, #508]	@ (8007358 <UART_SetConfig+0x2f0>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d104      	bne.n	800716a <UART_SetConfig+0x102>
 8007160:	231f      	movs	r3, #31
 8007162:	18fb      	adds	r3, r7, r3
 8007164:	2200      	movs	r2, #0
 8007166:	701a      	strb	r2, [r3, #0]
 8007168:	e003      	b.n	8007172 <UART_SetConfig+0x10a>
 800716a:	231f      	movs	r3, #31
 800716c:	18fb      	adds	r3, r7, r3
 800716e:	2210      	movs	r2, #16
 8007170:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	69da      	ldr	r2, [r3, #28]
 8007176:	2380      	movs	r3, #128	@ 0x80
 8007178:	021b      	lsls	r3, r3, #8
 800717a:	429a      	cmp	r2, r3
 800717c:	d000      	beq.n	8007180 <UART_SetConfig+0x118>
 800717e:	e06f      	b.n	8007260 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8007180:	231f      	movs	r3, #31
 8007182:	18fb      	adds	r3, r7, r3
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b08      	cmp	r3, #8
 8007188:	d01f      	beq.n	80071ca <UART_SetConfig+0x162>
 800718a:	dc22      	bgt.n	80071d2 <UART_SetConfig+0x16a>
 800718c:	2b04      	cmp	r3, #4
 800718e:	d017      	beq.n	80071c0 <UART_SetConfig+0x158>
 8007190:	dc1f      	bgt.n	80071d2 <UART_SetConfig+0x16a>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <UART_SetConfig+0x134>
 8007196:	2b02      	cmp	r3, #2
 8007198:	d005      	beq.n	80071a6 <UART_SetConfig+0x13e>
 800719a:	e01a      	b.n	80071d2 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800719c:	f7ff f91a 	bl	80063d4 <HAL_RCC_GetPCLK1Freq>
 80071a0:	0003      	movs	r3, r0
 80071a2:	61bb      	str	r3, [r7, #24]
        break;
 80071a4:	e01c      	b.n	80071e0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80071a6:	4b6b      	ldr	r3, [pc, #428]	@ (8007354 <UART_SetConfig+0x2ec>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	095b      	lsrs	r3, r3, #5
 80071ac:	2207      	movs	r2, #7
 80071ae:	4013      	ands	r3, r2
 80071b0:	3301      	adds	r3, #1
 80071b2:	0019      	movs	r1, r3
 80071b4:	4869      	ldr	r0, [pc, #420]	@ (800735c <UART_SetConfig+0x2f4>)
 80071b6:	f7f8 ffb1 	bl	800011c <__udivsi3>
 80071ba:	0003      	movs	r3, r0
 80071bc:	61bb      	str	r3, [r7, #24]
        break;
 80071be:	e00f      	b.n	80071e0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071c0:	f7ff f892 	bl	80062e8 <HAL_RCC_GetSysClockFreq>
 80071c4:	0003      	movs	r3, r0
 80071c6:	61bb      	str	r3, [r7, #24]
        break;
 80071c8:	e00a      	b.n	80071e0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ca:	2380      	movs	r3, #128	@ 0x80
 80071cc:	021b      	lsls	r3, r3, #8
 80071ce:	61bb      	str	r3, [r7, #24]
        break;
 80071d0:	e006      	b.n	80071e0 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071d6:	231e      	movs	r3, #30
 80071d8:	18fb      	adds	r3, r7, r3
 80071da:	2201      	movs	r2, #1
 80071dc:	701a      	strb	r2, [r3, #0]
        break;
 80071de:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d100      	bne.n	80071e8 <UART_SetConfig+0x180>
 80071e6:	e097      	b.n	8007318 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071ec:	4b5c      	ldr	r3, [pc, #368]	@ (8007360 <UART_SetConfig+0x2f8>)
 80071ee:	0052      	lsls	r2, r2, #1
 80071f0:	5ad3      	ldrh	r3, [r2, r3]
 80071f2:	0019      	movs	r1, r3
 80071f4:	69b8      	ldr	r0, [r7, #24]
 80071f6:	f7f8 ff91 	bl	800011c <__udivsi3>
 80071fa:	0003      	movs	r3, r0
 80071fc:	005a      	lsls	r2, r3, #1
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	085b      	lsrs	r3, r3, #1
 8007204:	18d2      	adds	r2, r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	0019      	movs	r1, r3
 800720c:	0010      	movs	r0, r2
 800720e:	f7f8 ff85 	bl	800011c <__udivsi3>
 8007212:	0003      	movs	r3, r0
 8007214:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	2b0f      	cmp	r3, #15
 800721a:	d91c      	bls.n	8007256 <UART_SetConfig+0x1ee>
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	2380      	movs	r3, #128	@ 0x80
 8007220:	025b      	lsls	r3, r3, #9
 8007222:	429a      	cmp	r2, r3
 8007224:	d217      	bcs.n	8007256 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	b29a      	uxth	r2, r3
 800722a:	200e      	movs	r0, #14
 800722c:	183b      	adds	r3, r7, r0
 800722e:	210f      	movs	r1, #15
 8007230:	438a      	bics	r2, r1
 8007232:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	085b      	lsrs	r3, r3, #1
 8007238:	b29b      	uxth	r3, r3
 800723a:	2207      	movs	r2, #7
 800723c:	4013      	ands	r3, r2
 800723e:	b299      	uxth	r1, r3
 8007240:	183b      	adds	r3, r7, r0
 8007242:	183a      	adds	r2, r7, r0
 8007244:	8812      	ldrh	r2, [r2, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	183a      	adds	r2, r7, r0
 8007250:	8812      	ldrh	r2, [r2, #0]
 8007252:	60da      	str	r2, [r3, #12]
 8007254:	e060      	b.n	8007318 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8007256:	231e      	movs	r3, #30
 8007258:	18fb      	adds	r3, r7, r3
 800725a:	2201      	movs	r2, #1
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	e05b      	b.n	8007318 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007260:	231f      	movs	r3, #31
 8007262:	18fb      	adds	r3, r7, r3
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b08      	cmp	r3, #8
 8007268:	d01f      	beq.n	80072aa <UART_SetConfig+0x242>
 800726a:	dc22      	bgt.n	80072b2 <UART_SetConfig+0x24a>
 800726c:	2b04      	cmp	r3, #4
 800726e:	d017      	beq.n	80072a0 <UART_SetConfig+0x238>
 8007270:	dc1f      	bgt.n	80072b2 <UART_SetConfig+0x24a>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <UART_SetConfig+0x214>
 8007276:	2b02      	cmp	r3, #2
 8007278:	d005      	beq.n	8007286 <UART_SetConfig+0x21e>
 800727a:	e01a      	b.n	80072b2 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800727c:	f7ff f8aa 	bl	80063d4 <HAL_RCC_GetPCLK1Freq>
 8007280:	0003      	movs	r3, r0
 8007282:	61bb      	str	r3, [r7, #24]
        break;
 8007284:	e01c      	b.n	80072c0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8007286:	4b33      	ldr	r3, [pc, #204]	@ (8007354 <UART_SetConfig+0x2ec>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	2207      	movs	r2, #7
 800728e:	4013      	ands	r3, r2
 8007290:	3301      	adds	r3, #1
 8007292:	0019      	movs	r1, r3
 8007294:	4831      	ldr	r0, [pc, #196]	@ (800735c <UART_SetConfig+0x2f4>)
 8007296:	f7f8 ff41 	bl	800011c <__udivsi3>
 800729a:	0003      	movs	r3, r0
 800729c:	61bb      	str	r3, [r7, #24]
        break;
 800729e:	e00f      	b.n	80072c0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072a0:	f7ff f822 	bl	80062e8 <HAL_RCC_GetSysClockFreq>
 80072a4:	0003      	movs	r3, r0
 80072a6:	61bb      	str	r3, [r7, #24]
        break;
 80072a8:	e00a      	b.n	80072c0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072aa:	2380      	movs	r3, #128	@ 0x80
 80072ac:	021b      	lsls	r3, r3, #8
 80072ae:	61bb      	str	r3, [r7, #24]
        break;
 80072b0:	e006      	b.n	80072c0 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072b6:	231e      	movs	r3, #30
 80072b8:	18fb      	adds	r3, r7, r3
 80072ba:	2201      	movs	r2, #1
 80072bc:	701a      	strb	r2, [r3, #0]
        break;
 80072be:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d028      	beq.n	8007318 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072ca:	4b25      	ldr	r3, [pc, #148]	@ (8007360 <UART_SetConfig+0x2f8>)
 80072cc:	0052      	lsls	r2, r2, #1
 80072ce:	5ad3      	ldrh	r3, [r2, r3]
 80072d0:	0019      	movs	r1, r3
 80072d2:	69b8      	ldr	r0, [r7, #24]
 80072d4:	f7f8 ff22 	bl	800011c <__udivsi3>
 80072d8:	0003      	movs	r3, r0
 80072da:	001a      	movs	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	085b      	lsrs	r3, r3, #1
 80072e2:	18d2      	adds	r2, r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	0019      	movs	r1, r3
 80072ea:	0010      	movs	r0, r2
 80072ec:	f7f8 ff16 	bl	800011c <__udivsi3>
 80072f0:	0003      	movs	r3, r0
 80072f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	2b0f      	cmp	r3, #15
 80072f8:	d90a      	bls.n	8007310 <UART_SetConfig+0x2a8>
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	2380      	movs	r3, #128	@ 0x80
 80072fe:	025b      	lsls	r3, r3, #9
 8007300:	429a      	cmp	r2, r3
 8007302:	d205      	bcs.n	8007310 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	b29a      	uxth	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60da      	str	r2, [r3, #12]
 800730e:	e003      	b.n	8007318 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8007310:	231e      	movs	r3, #30
 8007312:	18fb      	adds	r3, r7, r3
 8007314:	2201      	movs	r2, #1
 8007316:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	226a      	movs	r2, #106	@ 0x6a
 800731c:	2101      	movs	r1, #1
 800731e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2268      	movs	r2, #104	@ 0x68
 8007324:	2101      	movs	r1, #1
 8007326:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007334:	231e      	movs	r3, #30
 8007336:	18fb      	adds	r3, r7, r3
 8007338:	781b      	ldrb	r3, [r3, #0]
}
 800733a:	0018      	movs	r0, r3
 800733c:	46bd      	mov	sp, r7
 800733e:	b008      	add	sp, #32
 8007340:	bd80      	pop	{r7, pc}
 8007342:	46c0      	nop			@ (mov r8, r8)
 8007344:	cfff69f3 	.word	0xcfff69f3
 8007348:	ffffcfff 	.word	0xffffcfff
 800734c:	11fff4ff 	.word	0x11fff4ff
 8007350:	40013800 	.word	0x40013800
 8007354:	40021000 	.word	0x40021000
 8007358:	40004400 	.word	0x40004400
 800735c:	02dc6c00 	.word	0x02dc6c00
 8007360:	08008c50 	.word	0x08008c50

08007364 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007370:	2208      	movs	r2, #8
 8007372:	4013      	ands	r3, r2
 8007374:	d00b      	beq.n	800738e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	4a4a      	ldr	r2, [pc, #296]	@ (80074a8 <UART_AdvFeatureConfig+0x144>)
 800737e:	4013      	ands	r3, r2
 8007380:	0019      	movs	r1, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007392:	2201      	movs	r2, #1
 8007394:	4013      	ands	r3, r2
 8007396:	d00b      	beq.n	80073b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	4a43      	ldr	r2, [pc, #268]	@ (80074ac <UART_AdvFeatureConfig+0x148>)
 80073a0:	4013      	ands	r3, r2
 80073a2:	0019      	movs	r1, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b4:	2202      	movs	r2, #2
 80073b6:	4013      	ands	r3, r2
 80073b8:	d00b      	beq.n	80073d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	4a3b      	ldr	r2, [pc, #236]	@ (80074b0 <UART_AdvFeatureConfig+0x14c>)
 80073c2:	4013      	ands	r3, r2
 80073c4:	0019      	movs	r1, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d6:	2204      	movs	r2, #4
 80073d8:	4013      	ands	r3, r2
 80073da:	d00b      	beq.n	80073f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	4a34      	ldr	r2, [pc, #208]	@ (80074b4 <UART_AdvFeatureConfig+0x150>)
 80073e4:	4013      	ands	r3, r2
 80073e6:	0019      	movs	r1, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f8:	2210      	movs	r2, #16
 80073fa:	4013      	ands	r3, r2
 80073fc:	d00b      	beq.n	8007416 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	4a2c      	ldr	r2, [pc, #176]	@ (80074b8 <UART_AdvFeatureConfig+0x154>)
 8007406:	4013      	ands	r3, r2
 8007408:	0019      	movs	r1, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741a:	2220      	movs	r2, #32
 800741c:	4013      	ands	r3, r2
 800741e:	d00b      	beq.n	8007438 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	4a25      	ldr	r2, [pc, #148]	@ (80074bc <UART_AdvFeatureConfig+0x158>)
 8007428:	4013      	ands	r3, r2
 800742a:	0019      	movs	r1, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800743c:	2240      	movs	r2, #64	@ 0x40
 800743e:	4013      	ands	r3, r2
 8007440:	d01d      	beq.n	800747e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	4a1d      	ldr	r2, [pc, #116]	@ (80074c0 <UART_AdvFeatureConfig+0x15c>)
 800744a:	4013      	ands	r3, r2
 800744c:	0019      	movs	r1, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800745e:	2380      	movs	r3, #128	@ 0x80
 8007460:	035b      	lsls	r3, r3, #13
 8007462:	429a      	cmp	r2, r3
 8007464:	d10b      	bne.n	800747e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	4a15      	ldr	r2, [pc, #84]	@ (80074c4 <UART_AdvFeatureConfig+0x160>)
 800746e:	4013      	ands	r3, r2
 8007470:	0019      	movs	r1, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007482:	2280      	movs	r2, #128	@ 0x80
 8007484:	4013      	ands	r3, r2
 8007486:	d00b      	beq.n	80074a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	4a0e      	ldr	r2, [pc, #56]	@ (80074c8 <UART_AdvFeatureConfig+0x164>)
 8007490:	4013      	ands	r3, r2
 8007492:	0019      	movs	r1, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	605a      	str	r2, [r3, #4]
  }
}
 80074a0:	46c0      	nop			@ (mov r8, r8)
 80074a2:	46bd      	mov	sp, r7
 80074a4:	b002      	add	sp, #8
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	ffff7fff 	.word	0xffff7fff
 80074ac:	fffdffff 	.word	0xfffdffff
 80074b0:	fffeffff 	.word	0xfffeffff
 80074b4:	fffbffff 	.word	0xfffbffff
 80074b8:	ffffefff 	.word	0xffffefff
 80074bc:	ffffdfff 	.word	0xffffdfff
 80074c0:	ffefffff 	.word	0xffefffff
 80074c4:	ff9fffff 	.word	0xff9fffff
 80074c8:	fff7ffff 	.word	0xfff7ffff

080074cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b092      	sub	sp, #72	@ 0x48
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2290      	movs	r2, #144	@ 0x90
 80074d8:	2100      	movs	r1, #0
 80074da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074dc:	f7fa fe12 	bl	8002104 <HAL_GetTick>
 80074e0:	0003      	movs	r3, r0
 80074e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2208      	movs	r2, #8
 80074ec:	4013      	ands	r3, r2
 80074ee:	2b08      	cmp	r3, #8
 80074f0:	d12d      	bne.n	800754e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074f4:	2280      	movs	r2, #128	@ 0x80
 80074f6:	0391      	lsls	r1, r2, #14
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	4a47      	ldr	r2, [pc, #284]	@ (8007618 <UART_CheckIdleState+0x14c>)
 80074fc:	9200      	str	r2, [sp, #0]
 80074fe:	2200      	movs	r2, #0
 8007500:	f000 f88e 	bl	8007620 <UART_WaitOnFlagUntilTimeout>
 8007504:	1e03      	subs	r3, r0, #0
 8007506:	d022      	beq.n	800754e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007508:	f3ef 8310 	mrs	r3, PRIMASK
 800750c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007510:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007512:	2301      	movs	r3, #1
 8007514:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007518:	f383 8810 	msr	PRIMASK, r3
}
 800751c:	46c0      	nop			@ (mov r8, r8)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2180      	movs	r1, #128	@ 0x80
 800752a:	438a      	bics	r2, r1
 800752c:	601a      	str	r2, [r3, #0]
 800752e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007530:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007534:	f383 8810 	msr	PRIMASK, r3
}
 8007538:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2288      	movs	r2, #136	@ 0x88
 800753e:	2120      	movs	r1, #32
 8007540:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2284      	movs	r2, #132	@ 0x84
 8007546:	2100      	movs	r1, #0
 8007548:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e060      	b.n	8007610 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2204      	movs	r2, #4
 8007556:	4013      	ands	r3, r2
 8007558:	2b04      	cmp	r3, #4
 800755a:	d146      	bne.n	80075ea <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800755c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800755e:	2280      	movs	r2, #128	@ 0x80
 8007560:	03d1      	lsls	r1, r2, #15
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	4a2c      	ldr	r2, [pc, #176]	@ (8007618 <UART_CheckIdleState+0x14c>)
 8007566:	9200      	str	r2, [sp, #0]
 8007568:	2200      	movs	r2, #0
 800756a:	f000 f859 	bl	8007620 <UART_WaitOnFlagUntilTimeout>
 800756e:	1e03      	subs	r3, r0, #0
 8007570:	d03b      	beq.n	80075ea <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007572:	f3ef 8310 	mrs	r3, PRIMASK
 8007576:	60fb      	str	r3, [r7, #12]
  return(result);
 8007578:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800757a:	637b      	str	r3, [r7, #52]	@ 0x34
 800757c:	2301      	movs	r3, #1
 800757e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f383 8810 	msr	PRIMASK, r3
}
 8007586:	46c0      	nop			@ (mov r8, r8)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4922      	ldr	r1, [pc, #136]	@ (800761c <UART_CheckIdleState+0x150>)
 8007594:	400a      	ands	r2, r1
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800759a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f383 8810 	msr	PRIMASK, r3
}
 80075a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80075a4:	f3ef 8310 	mrs	r3, PRIMASK
 80075a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80075aa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80075ae:	2301      	movs	r3, #1
 80075b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	f383 8810 	msr	PRIMASK, r3
}
 80075b8:	46c0      	nop			@ (mov r8, r8)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689a      	ldr	r2, [r3, #8]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2101      	movs	r1, #1
 80075c6:	438a      	bics	r2, r1
 80075c8:	609a      	str	r2, [r3, #8]
 80075ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	f383 8810 	msr	PRIMASK, r3
}
 80075d4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	228c      	movs	r2, #140	@ 0x8c
 80075da:	2120      	movs	r1, #32
 80075dc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2284      	movs	r2, #132	@ 0x84
 80075e2:	2100      	movs	r1, #0
 80075e4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e012      	b.n	8007610 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2288      	movs	r2, #136	@ 0x88
 80075ee:	2120      	movs	r1, #32
 80075f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	228c      	movs	r2, #140	@ 0x8c
 80075f6:	2120      	movs	r1, #32
 80075f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2284      	movs	r2, #132	@ 0x84
 800760a:	2100      	movs	r1, #0
 800760c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	0018      	movs	r0, r3
 8007612:	46bd      	mov	sp, r7
 8007614:	b010      	add	sp, #64	@ 0x40
 8007616:	bd80      	pop	{r7, pc}
 8007618:	01ffffff 	.word	0x01ffffff
 800761c:	fffffedf 	.word	0xfffffedf

08007620 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	1dfb      	adds	r3, r7, #7
 800762e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007630:	e051      	b.n	80076d6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	3301      	adds	r3, #1
 8007636:	d04e      	beq.n	80076d6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007638:	f7fa fd64 	bl	8002104 <HAL_GetTick>
 800763c:	0002      	movs	r2, r0
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	429a      	cmp	r2, r3
 8007646:	d302      	bcc.n	800764e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e051      	b.n	80076f6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2204      	movs	r2, #4
 800765a:	4013      	ands	r3, r2
 800765c:	d03b      	beq.n	80076d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2b80      	cmp	r3, #128	@ 0x80
 8007662:	d038      	beq.n	80076d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2b40      	cmp	r3, #64	@ 0x40
 8007668:	d035      	beq.n	80076d6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	2208      	movs	r2, #8
 8007672:	4013      	ands	r3, r2
 8007674:	2b08      	cmp	r3, #8
 8007676:	d111      	bne.n	800769c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2208      	movs	r2, #8
 800767e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	0018      	movs	r0, r3
 8007684:	f000 f83c 	bl	8007700 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2290      	movs	r2, #144	@ 0x90
 800768c:	2108      	movs	r1, #8
 800768e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2284      	movs	r2, #132	@ 0x84
 8007694:	2100      	movs	r1, #0
 8007696:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e02c      	b.n	80076f6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	69da      	ldr	r2, [r3, #28]
 80076a2:	2380      	movs	r3, #128	@ 0x80
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	401a      	ands	r2, r3
 80076a8:	2380      	movs	r3, #128	@ 0x80
 80076aa:	011b      	lsls	r3, r3, #4
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d112      	bne.n	80076d6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2280      	movs	r2, #128	@ 0x80
 80076b6:	0112      	lsls	r2, r2, #4
 80076b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	0018      	movs	r0, r3
 80076be:	f000 f81f 	bl	8007700 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2290      	movs	r2, #144	@ 0x90
 80076c6:	2120      	movs	r1, #32
 80076c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2284      	movs	r2, #132	@ 0x84
 80076ce:	2100      	movs	r1, #0
 80076d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e00f      	b.n	80076f6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	4013      	ands	r3, r2
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	425a      	negs	r2, r3
 80076e6:	4153      	adcs	r3, r2
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	001a      	movs	r2, r3
 80076ec:	1dfb      	adds	r3, r7, #7
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d09e      	beq.n	8007632 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	0018      	movs	r0, r3
 80076f8:	46bd      	mov	sp, r7
 80076fa:	b004      	add	sp, #16
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08e      	sub	sp, #56	@ 0x38
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007708:	f3ef 8310 	mrs	r3, PRIMASK
 800770c:	617b      	str	r3, [r7, #20]
  return(result);
 800770e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007710:	637b      	str	r3, [r7, #52]	@ 0x34
 8007712:	2301      	movs	r3, #1
 8007714:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	f383 8810 	msr	PRIMASK, r3
}
 800771c:	46c0      	nop			@ (mov r8, r8)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4926      	ldr	r1, [pc, #152]	@ (80077c4 <UART_EndRxTransfer+0xc4>)
 800772a:	400a      	ands	r2, r1
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007730:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	f383 8810 	msr	PRIMASK, r3
}
 8007738:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800773a:	f3ef 8310 	mrs	r3, PRIMASK
 800773e:	623b      	str	r3, [r7, #32]
  return(result);
 8007740:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007742:	633b      	str	r3, [r7, #48]	@ 0x30
 8007744:	2301      	movs	r3, #1
 8007746:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774a:	f383 8810 	msr	PRIMASK, r3
}
 800774e:	46c0      	nop			@ (mov r8, r8)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689a      	ldr	r2, [r3, #8]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	491b      	ldr	r1, [pc, #108]	@ (80077c8 <UART_EndRxTransfer+0xc8>)
 800775c:	400a      	ands	r2, r1
 800775e:	609a      	str	r2, [r3, #8]
 8007760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007762:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007766:	f383 8810 	msr	PRIMASK, r3
}
 800776a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007770:	2b01      	cmp	r3, #1
 8007772:	d118      	bne.n	80077a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007774:	f3ef 8310 	mrs	r3, PRIMASK
 8007778:	60bb      	str	r3, [r7, #8]
  return(result);
 800777a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800777c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800777e:	2301      	movs	r3, #1
 8007780:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f383 8810 	msr	PRIMASK, r3
}
 8007788:	46c0      	nop			@ (mov r8, r8)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2110      	movs	r1, #16
 8007796:	438a      	bics	r2, r1
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f383 8810 	msr	PRIMASK, r3
}
 80077a4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	228c      	movs	r2, #140	@ 0x8c
 80077aa:	2120      	movs	r1, #32
 80077ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80077ba:	46c0      	nop			@ (mov r8, r8)
 80077bc:	46bd      	mov	sp, r7
 80077be:	b00e      	add	sp, #56	@ 0x38
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	46c0      	nop			@ (mov r8, r8)
 80077c4:	fffffedf 	.word	0xfffffedf
 80077c8:	effffffe 	.word	0xeffffffe

080077cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2284      	movs	r2, #132	@ 0x84
 80077d8:	5c9b      	ldrb	r3, [r3, r2]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d101      	bne.n	80077e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80077de:	2302      	movs	r3, #2
 80077e0:	e027      	b.n	8007832 <HAL_UARTEx_DisableFifoMode+0x66>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2284      	movs	r2, #132	@ 0x84
 80077e6:	2101      	movs	r1, #1
 80077e8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2288      	movs	r2, #136	@ 0x88
 80077ee:	2124      	movs	r1, #36	@ 0x24
 80077f0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2101      	movs	r1, #1
 8007806:	438a      	bics	r2, r1
 8007808:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4a0b      	ldr	r2, [pc, #44]	@ (800783c <HAL_UARTEx_DisableFifoMode+0x70>)
 800780e:	4013      	ands	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2288      	movs	r2, #136	@ 0x88
 8007824:	2120      	movs	r1, #32
 8007826:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2284      	movs	r2, #132	@ 0x84
 800782c:	2100      	movs	r1, #0
 800782e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	0018      	movs	r0, r3
 8007834:	46bd      	mov	sp, r7
 8007836:	b004      	add	sp, #16
 8007838:	bd80      	pop	{r7, pc}
 800783a:	46c0      	nop			@ (mov r8, r8)
 800783c:	dfffffff 	.word	0xdfffffff

08007840 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2284      	movs	r2, #132	@ 0x84
 800784e:	5c9b      	ldrb	r3, [r3, r2]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d101      	bne.n	8007858 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007854:	2302      	movs	r3, #2
 8007856:	e02e      	b.n	80078b6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2284      	movs	r2, #132	@ 0x84
 800785c:	2101      	movs	r1, #1
 800785e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2288      	movs	r2, #136	@ 0x88
 8007864:	2124      	movs	r1, #36	@ 0x24
 8007866:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2101      	movs	r1, #1
 800787c:	438a      	bics	r2, r1
 800787e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	08d9      	lsrs	r1, r3, #3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	0018      	movs	r0, r3
 8007898:	f000 f854 	bl	8007944 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2288      	movs	r2, #136	@ 0x88
 80078a8:	2120      	movs	r1, #32
 80078aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2284      	movs	r2, #132	@ 0x84
 80078b0:	2100      	movs	r1, #0
 80078b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	0018      	movs	r0, r3
 80078b8:	46bd      	mov	sp, r7
 80078ba:	b004      	add	sp, #16
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2284      	movs	r2, #132	@ 0x84
 80078ce:	5c9b      	ldrb	r3, [r3, r2]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d101      	bne.n	80078d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80078d4:	2302      	movs	r3, #2
 80078d6:	e02f      	b.n	8007938 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2284      	movs	r2, #132	@ 0x84
 80078dc:	2101      	movs	r1, #1
 80078de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2288      	movs	r2, #136	@ 0x88
 80078e4:	2124      	movs	r1, #36	@ 0x24
 80078e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2101      	movs	r1, #1
 80078fc:	438a      	bics	r2, r1
 80078fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	4a0e      	ldr	r2, [pc, #56]	@ (8007940 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007908:	4013      	ands	r3, r2
 800790a:	0019      	movs	r1, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	0018      	movs	r0, r3
 800791a:	f000 f813 	bl	8007944 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2288      	movs	r2, #136	@ 0x88
 800792a:	2120      	movs	r1, #32
 800792c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2284      	movs	r2, #132	@ 0x84
 8007932:	2100      	movs	r1, #0
 8007934:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	0018      	movs	r0, r3
 800793a:	46bd      	mov	sp, r7
 800793c:	b004      	add	sp, #16
 800793e:	bd80      	pop	{r7, pc}
 8007940:	f1ffffff 	.word	0xf1ffffff

08007944 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007950:	2b00      	cmp	r3, #0
 8007952:	d108      	bne.n	8007966 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	226a      	movs	r2, #106	@ 0x6a
 8007958:	2101      	movs	r1, #1
 800795a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2268      	movs	r2, #104	@ 0x68
 8007960:	2101      	movs	r1, #1
 8007962:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007964:	e043      	b.n	80079ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007966:	260f      	movs	r6, #15
 8007968:	19bb      	adds	r3, r7, r6
 800796a:	2208      	movs	r2, #8
 800796c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800796e:	200e      	movs	r0, #14
 8007970:	183b      	adds	r3, r7, r0
 8007972:	2208      	movs	r2, #8
 8007974:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	0e5b      	lsrs	r3, r3, #25
 800797e:	b2da      	uxtb	r2, r3
 8007980:	240d      	movs	r4, #13
 8007982:	193b      	adds	r3, r7, r4
 8007984:	2107      	movs	r1, #7
 8007986:	400a      	ands	r2, r1
 8007988:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	0f5b      	lsrs	r3, r3, #29
 8007992:	b2da      	uxtb	r2, r3
 8007994:	250c      	movs	r5, #12
 8007996:	197b      	adds	r3, r7, r5
 8007998:	2107      	movs	r1, #7
 800799a:	400a      	ands	r2, r1
 800799c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800799e:	183b      	adds	r3, r7, r0
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	197a      	adds	r2, r7, r5
 80079a4:	7812      	ldrb	r2, [r2, #0]
 80079a6:	4914      	ldr	r1, [pc, #80]	@ (80079f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80079a8:	5c8a      	ldrb	r2, [r1, r2]
 80079aa:	435a      	muls	r2, r3
 80079ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80079ae:	197b      	adds	r3, r7, r5
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	4a12      	ldr	r2, [pc, #72]	@ (80079fc <UARTEx_SetNbDataToProcess+0xb8>)
 80079b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079b6:	0019      	movs	r1, r3
 80079b8:	f7f8 fc3a 	bl	8000230 <__divsi3>
 80079bc:	0003      	movs	r3, r0
 80079be:	b299      	uxth	r1, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	226a      	movs	r2, #106	@ 0x6a
 80079c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079c6:	19bb      	adds	r3, r7, r6
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	193a      	adds	r2, r7, r4
 80079cc:	7812      	ldrb	r2, [r2, #0]
 80079ce:	490a      	ldr	r1, [pc, #40]	@ (80079f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80079d0:	5c8a      	ldrb	r2, [r1, r2]
 80079d2:	435a      	muls	r2, r3
 80079d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80079d6:	193b      	adds	r3, r7, r4
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	4a08      	ldr	r2, [pc, #32]	@ (80079fc <UARTEx_SetNbDataToProcess+0xb8>)
 80079dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079de:	0019      	movs	r1, r3
 80079e0:	f7f8 fc26 	bl	8000230 <__divsi3>
 80079e4:	0003      	movs	r3, r0
 80079e6:	b299      	uxth	r1, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2268      	movs	r2, #104	@ 0x68
 80079ec:	5299      	strh	r1, [r3, r2]
}
 80079ee:	46c0      	nop			@ (mov r8, r8)
 80079f0:	46bd      	mov	sp, r7
 80079f2:	b005      	add	sp, #20
 80079f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079f6:	46c0      	nop			@ (mov r8, r8)
 80079f8:	08008c68 	.word	0x08008c68
 80079fc:	08008c70 	.word	0x08008c70

08007a00 <sniprintf>:
 8007a00:	b40c      	push	{r2, r3}
 8007a02:	b530      	push	{r4, r5, lr}
 8007a04:	4b17      	ldr	r3, [pc, #92]	@ (8007a64 <sniprintf+0x64>)
 8007a06:	000c      	movs	r4, r1
 8007a08:	681d      	ldr	r5, [r3, #0]
 8007a0a:	b09d      	sub	sp, #116	@ 0x74
 8007a0c:	2900      	cmp	r1, #0
 8007a0e:	da08      	bge.n	8007a22 <sniprintf+0x22>
 8007a10:	238b      	movs	r3, #139	@ 0x8b
 8007a12:	2001      	movs	r0, #1
 8007a14:	602b      	str	r3, [r5, #0]
 8007a16:	4240      	negs	r0, r0
 8007a18:	b01d      	add	sp, #116	@ 0x74
 8007a1a:	bc30      	pop	{r4, r5}
 8007a1c:	bc08      	pop	{r3}
 8007a1e:	b002      	add	sp, #8
 8007a20:	4718      	bx	r3
 8007a22:	2382      	movs	r3, #130	@ 0x82
 8007a24:	466a      	mov	r2, sp
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	8293      	strh	r3, [r2, #20]
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	9002      	str	r0, [sp, #8]
 8007a2e:	9006      	str	r0, [sp, #24]
 8007a30:	4299      	cmp	r1, r3
 8007a32:	d000      	beq.n	8007a36 <sniprintf+0x36>
 8007a34:	1e4b      	subs	r3, r1, #1
 8007a36:	9304      	str	r3, [sp, #16]
 8007a38:	9307      	str	r3, [sp, #28]
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	466a      	mov	r2, sp
 8007a3e:	425b      	negs	r3, r3
 8007a40:	82d3      	strh	r3, [r2, #22]
 8007a42:	0028      	movs	r0, r5
 8007a44:	ab21      	add	r3, sp, #132	@ 0x84
 8007a46:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007a48:	a902      	add	r1, sp, #8
 8007a4a:	9301      	str	r3, [sp, #4]
 8007a4c:	f000 f9a6 	bl	8007d9c <_svfiprintf_r>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	da01      	bge.n	8007a58 <sniprintf+0x58>
 8007a54:	238b      	movs	r3, #139	@ 0x8b
 8007a56:	602b      	str	r3, [r5, #0]
 8007a58:	2c00      	cmp	r4, #0
 8007a5a:	d0dd      	beq.n	8007a18 <sniprintf+0x18>
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	9b02      	ldr	r3, [sp, #8]
 8007a60:	701a      	strb	r2, [r3, #0]
 8007a62:	e7d9      	b.n	8007a18 <sniprintf+0x18>
 8007a64:	20000078 	.word	0x20000078

08007a68 <memset>:
 8007a68:	0003      	movs	r3, r0
 8007a6a:	1882      	adds	r2, r0, r2
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d100      	bne.n	8007a72 <memset+0xa>
 8007a70:	4770      	bx	lr
 8007a72:	7019      	strb	r1, [r3, #0]
 8007a74:	3301      	adds	r3, #1
 8007a76:	e7f9      	b.n	8007a6c <memset+0x4>

08007a78 <__errno>:
 8007a78:	4b01      	ldr	r3, [pc, #4]	@ (8007a80 <__errno+0x8>)
 8007a7a:	6818      	ldr	r0, [r3, #0]
 8007a7c:	4770      	bx	lr
 8007a7e:	46c0      	nop			@ (mov r8, r8)
 8007a80:	20000078 	.word	0x20000078

08007a84 <__libc_init_array>:
 8007a84:	b570      	push	{r4, r5, r6, lr}
 8007a86:	2600      	movs	r6, #0
 8007a88:	4c0c      	ldr	r4, [pc, #48]	@ (8007abc <__libc_init_array+0x38>)
 8007a8a:	4d0d      	ldr	r5, [pc, #52]	@ (8007ac0 <__libc_init_array+0x3c>)
 8007a8c:	1b64      	subs	r4, r4, r5
 8007a8e:	10a4      	asrs	r4, r4, #2
 8007a90:	42a6      	cmp	r6, r4
 8007a92:	d109      	bne.n	8007aa8 <__libc_init_array+0x24>
 8007a94:	2600      	movs	r6, #0
 8007a96:	f000 fc65 	bl	8008364 <_init>
 8007a9a:	4c0a      	ldr	r4, [pc, #40]	@ (8007ac4 <__libc_init_array+0x40>)
 8007a9c:	4d0a      	ldr	r5, [pc, #40]	@ (8007ac8 <__libc_init_array+0x44>)
 8007a9e:	1b64      	subs	r4, r4, r5
 8007aa0:	10a4      	asrs	r4, r4, #2
 8007aa2:	42a6      	cmp	r6, r4
 8007aa4:	d105      	bne.n	8007ab2 <__libc_init_array+0x2e>
 8007aa6:	bd70      	pop	{r4, r5, r6, pc}
 8007aa8:	00b3      	lsls	r3, r6, #2
 8007aaa:	58eb      	ldr	r3, [r5, r3]
 8007aac:	4798      	blx	r3
 8007aae:	3601      	adds	r6, #1
 8007ab0:	e7ee      	b.n	8007a90 <__libc_init_array+0xc>
 8007ab2:	00b3      	lsls	r3, r6, #2
 8007ab4:	58eb      	ldr	r3, [r5, r3]
 8007ab6:	4798      	blx	r3
 8007ab8:	3601      	adds	r6, #1
 8007aba:	e7f2      	b.n	8007aa2 <__libc_init_array+0x1e>
 8007abc:	08008cac 	.word	0x08008cac
 8007ac0:	08008cac 	.word	0x08008cac
 8007ac4:	08008cb0 	.word	0x08008cb0
 8007ac8:	08008cac 	.word	0x08008cac

08007acc <__retarget_lock_acquire_recursive>:
 8007acc:	4770      	bx	lr

08007ace <__retarget_lock_release_recursive>:
 8007ace:	4770      	bx	lr

08007ad0 <memcpy>:
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	b510      	push	{r4, lr}
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d100      	bne.n	8007ada <memcpy+0xa>
 8007ad8:	bd10      	pop	{r4, pc}
 8007ada:	5ccc      	ldrb	r4, [r1, r3]
 8007adc:	54c4      	strb	r4, [r0, r3]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	e7f8      	b.n	8007ad4 <memcpy+0x4>
	...

08007ae4 <_free_r>:
 8007ae4:	b570      	push	{r4, r5, r6, lr}
 8007ae6:	0005      	movs	r5, r0
 8007ae8:	1e0c      	subs	r4, r1, #0
 8007aea:	d010      	beq.n	8007b0e <_free_r+0x2a>
 8007aec:	3c04      	subs	r4, #4
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	da00      	bge.n	8007af6 <_free_r+0x12>
 8007af4:	18e4      	adds	r4, r4, r3
 8007af6:	0028      	movs	r0, r5
 8007af8:	f000 f8e0 	bl	8007cbc <__malloc_lock>
 8007afc:	4a1d      	ldr	r2, [pc, #116]	@ (8007b74 <_free_r+0x90>)
 8007afe:	6813      	ldr	r3, [r2, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d105      	bne.n	8007b10 <_free_r+0x2c>
 8007b04:	6063      	str	r3, [r4, #4]
 8007b06:	6014      	str	r4, [r2, #0]
 8007b08:	0028      	movs	r0, r5
 8007b0a:	f000 f8df 	bl	8007ccc <__malloc_unlock>
 8007b0e:	bd70      	pop	{r4, r5, r6, pc}
 8007b10:	42a3      	cmp	r3, r4
 8007b12:	d908      	bls.n	8007b26 <_free_r+0x42>
 8007b14:	6820      	ldr	r0, [r4, #0]
 8007b16:	1821      	adds	r1, r4, r0
 8007b18:	428b      	cmp	r3, r1
 8007b1a:	d1f3      	bne.n	8007b04 <_free_r+0x20>
 8007b1c:	6819      	ldr	r1, [r3, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	1809      	adds	r1, r1, r0
 8007b22:	6021      	str	r1, [r4, #0]
 8007b24:	e7ee      	b.n	8007b04 <_free_r+0x20>
 8007b26:	001a      	movs	r2, r3
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <_free_r+0x4e>
 8007b2e:	42a3      	cmp	r3, r4
 8007b30:	d9f9      	bls.n	8007b26 <_free_r+0x42>
 8007b32:	6811      	ldr	r1, [r2, #0]
 8007b34:	1850      	adds	r0, r2, r1
 8007b36:	42a0      	cmp	r0, r4
 8007b38:	d10b      	bne.n	8007b52 <_free_r+0x6e>
 8007b3a:	6820      	ldr	r0, [r4, #0]
 8007b3c:	1809      	adds	r1, r1, r0
 8007b3e:	1850      	adds	r0, r2, r1
 8007b40:	6011      	str	r1, [r2, #0]
 8007b42:	4283      	cmp	r3, r0
 8007b44:	d1e0      	bne.n	8007b08 <_free_r+0x24>
 8007b46:	6818      	ldr	r0, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	1841      	adds	r1, r0, r1
 8007b4c:	6011      	str	r1, [r2, #0]
 8007b4e:	6053      	str	r3, [r2, #4]
 8007b50:	e7da      	b.n	8007b08 <_free_r+0x24>
 8007b52:	42a0      	cmp	r0, r4
 8007b54:	d902      	bls.n	8007b5c <_free_r+0x78>
 8007b56:	230c      	movs	r3, #12
 8007b58:	602b      	str	r3, [r5, #0]
 8007b5a:	e7d5      	b.n	8007b08 <_free_r+0x24>
 8007b5c:	6820      	ldr	r0, [r4, #0]
 8007b5e:	1821      	adds	r1, r4, r0
 8007b60:	428b      	cmp	r3, r1
 8007b62:	d103      	bne.n	8007b6c <_free_r+0x88>
 8007b64:	6819      	ldr	r1, [r3, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	1809      	adds	r1, r1, r0
 8007b6a:	6021      	str	r1, [r4, #0]
 8007b6c:	6063      	str	r3, [r4, #4]
 8007b6e:	6054      	str	r4, [r2, #4]
 8007b70:	e7ca      	b.n	8007b08 <_free_r+0x24>
 8007b72:	46c0      	nop			@ (mov r8, r8)
 8007b74:	20000910 	.word	0x20000910

08007b78 <sbrk_aligned>:
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	4e0f      	ldr	r6, [pc, #60]	@ (8007bb8 <sbrk_aligned+0x40>)
 8007b7c:	000d      	movs	r5, r1
 8007b7e:	6831      	ldr	r1, [r6, #0]
 8007b80:	0004      	movs	r4, r0
 8007b82:	2900      	cmp	r1, #0
 8007b84:	d102      	bne.n	8007b8c <sbrk_aligned+0x14>
 8007b86:	f000 fb99 	bl	80082bc <_sbrk_r>
 8007b8a:	6030      	str	r0, [r6, #0]
 8007b8c:	0029      	movs	r1, r5
 8007b8e:	0020      	movs	r0, r4
 8007b90:	f000 fb94 	bl	80082bc <_sbrk_r>
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	d103      	bne.n	8007ba0 <sbrk_aligned+0x28>
 8007b98:	2501      	movs	r5, #1
 8007b9a:	426d      	negs	r5, r5
 8007b9c:	0028      	movs	r0, r5
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	1cc5      	adds	r5, r0, #3
 8007ba4:	439d      	bics	r5, r3
 8007ba6:	42a8      	cmp	r0, r5
 8007ba8:	d0f8      	beq.n	8007b9c <sbrk_aligned+0x24>
 8007baa:	1a29      	subs	r1, r5, r0
 8007bac:	0020      	movs	r0, r4
 8007bae:	f000 fb85 	bl	80082bc <_sbrk_r>
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	d1f2      	bne.n	8007b9c <sbrk_aligned+0x24>
 8007bb6:	e7ef      	b.n	8007b98 <sbrk_aligned+0x20>
 8007bb8:	2000090c 	.word	0x2000090c

08007bbc <_malloc_r>:
 8007bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bbe:	2203      	movs	r2, #3
 8007bc0:	1ccb      	adds	r3, r1, #3
 8007bc2:	4393      	bics	r3, r2
 8007bc4:	3308      	adds	r3, #8
 8007bc6:	0005      	movs	r5, r0
 8007bc8:	001f      	movs	r7, r3
 8007bca:	2b0c      	cmp	r3, #12
 8007bcc:	d234      	bcs.n	8007c38 <_malloc_r+0x7c>
 8007bce:	270c      	movs	r7, #12
 8007bd0:	42b9      	cmp	r1, r7
 8007bd2:	d833      	bhi.n	8007c3c <_malloc_r+0x80>
 8007bd4:	0028      	movs	r0, r5
 8007bd6:	f000 f871 	bl	8007cbc <__malloc_lock>
 8007bda:	4e37      	ldr	r6, [pc, #220]	@ (8007cb8 <_malloc_r+0xfc>)
 8007bdc:	6833      	ldr	r3, [r6, #0]
 8007bde:	001c      	movs	r4, r3
 8007be0:	2c00      	cmp	r4, #0
 8007be2:	d12f      	bne.n	8007c44 <_malloc_r+0x88>
 8007be4:	0039      	movs	r1, r7
 8007be6:	0028      	movs	r0, r5
 8007be8:	f7ff ffc6 	bl	8007b78 <sbrk_aligned>
 8007bec:	0004      	movs	r4, r0
 8007bee:	1c43      	adds	r3, r0, #1
 8007bf0:	d15f      	bne.n	8007cb2 <_malloc_r+0xf6>
 8007bf2:	6834      	ldr	r4, [r6, #0]
 8007bf4:	9400      	str	r4, [sp, #0]
 8007bf6:	9b00      	ldr	r3, [sp, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d14a      	bne.n	8007c92 <_malloc_r+0xd6>
 8007bfc:	2c00      	cmp	r4, #0
 8007bfe:	d052      	beq.n	8007ca6 <_malloc_r+0xea>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	0028      	movs	r0, r5
 8007c04:	18e3      	adds	r3, r4, r3
 8007c06:	9900      	ldr	r1, [sp, #0]
 8007c08:	9301      	str	r3, [sp, #4]
 8007c0a:	f000 fb57 	bl	80082bc <_sbrk_r>
 8007c0e:	9b01      	ldr	r3, [sp, #4]
 8007c10:	4283      	cmp	r3, r0
 8007c12:	d148      	bne.n	8007ca6 <_malloc_r+0xea>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	0028      	movs	r0, r5
 8007c18:	1aff      	subs	r7, r7, r3
 8007c1a:	0039      	movs	r1, r7
 8007c1c:	f7ff ffac 	bl	8007b78 <sbrk_aligned>
 8007c20:	3001      	adds	r0, #1
 8007c22:	d040      	beq.n	8007ca6 <_malloc_r+0xea>
 8007c24:	6823      	ldr	r3, [r4, #0]
 8007c26:	19db      	adds	r3, r3, r7
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	6833      	ldr	r3, [r6, #0]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	2a00      	cmp	r2, #0
 8007c30:	d133      	bne.n	8007c9a <_malloc_r+0xde>
 8007c32:	9b00      	ldr	r3, [sp, #0]
 8007c34:	6033      	str	r3, [r6, #0]
 8007c36:	e019      	b.n	8007c6c <_malloc_r+0xb0>
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	dac9      	bge.n	8007bd0 <_malloc_r+0x14>
 8007c3c:	230c      	movs	r3, #12
 8007c3e:	602b      	str	r3, [r5, #0]
 8007c40:	2000      	movs	r0, #0
 8007c42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c44:	6821      	ldr	r1, [r4, #0]
 8007c46:	1bc9      	subs	r1, r1, r7
 8007c48:	d420      	bmi.n	8007c8c <_malloc_r+0xd0>
 8007c4a:	290b      	cmp	r1, #11
 8007c4c:	d90a      	bls.n	8007c64 <_malloc_r+0xa8>
 8007c4e:	19e2      	adds	r2, r4, r7
 8007c50:	6027      	str	r7, [r4, #0]
 8007c52:	42a3      	cmp	r3, r4
 8007c54:	d104      	bne.n	8007c60 <_malloc_r+0xa4>
 8007c56:	6032      	str	r2, [r6, #0]
 8007c58:	6863      	ldr	r3, [r4, #4]
 8007c5a:	6011      	str	r1, [r2, #0]
 8007c5c:	6053      	str	r3, [r2, #4]
 8007c5e:	e005      	b.n	8007c6c <_malloc_r+0xb0>
 8007c60:	605a      	str	r2, [r3, #4]
 8007c62:	e7f9      	b.n	8007c58 <_malloc_r+0x9c>
 8007c64:	6862      	ldr	r2, [r4, #4]
 8007c66:	42a3      	cmp	r3, r4
 8007c68:	d10e      	bne.n	8007c88 <_malloc_r+0xcc>
 8007c6a:	6032      	str	r2, [r6, #0]
 8007c6c:	0028      	movs	r0, r5
 8007c6e:	f000 f82d 	bl	8007ccc <__malloc_unlock>
 8007c72:	0020      	movs	r0, r4
 8007c74:	2207      	movs	r2, #7
 8007c76:	300b      	adds	r0, #11
 8007c78:	1d23      	adds	r3, r4, #4
 8007c7a:	4390      	bics	r0, r2
 8007c7c:	1ac2      	subs	r2, r0, r3
 8007c7e:	4298      	cmp	r0, r3
 8007c80:	d0df      	beq.n	8007c42 <_malloc_r+0x86>
 8007c82:	1a1b      	subs	r3, r3, r0
 8007c84:	50a3      	str	r3, [r4, r2]
 8007c86:	e7dc      	b.n	8007c42 <_malloc_r+0x86>
 8007c88:	605a      	str	r2, [r3, #4]
 8007c8a:	e7ef      	b.n	8007c6c <_malloc_r+0xb0>
 8007c8c:	0023      	movs	r3, r4
 8007c8e:	6864      	ldr	r4, [r4, #4]
 8007c90:	e7a6      	b.n	8007be0 <_malloc_r+0x24>
 8007c92:	9c00      	ldr	r4, [sp, #0]
 8007c94:	6863      	ldr	r3, [r4, #4]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	e7ad      	b.n	8007bf6 <_malloc_r+0x3a>
 8007c9a:	001a      	movs	r2, r3
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	42a3      	cmp	r3, r4
 8007ca0:	d1fb      	bne.n	8007c9a <_malloc_r+0xde>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e7da      	b.n	8007c5c <_malloc_r+0xa0>
 8007ca6:	230c      	movs	r3, #12
 8007ca8:	0028      	movs	r0, r5
 8007caa:	602b      	str	r3, [r5, #0]
 8007cac:	f000 f80e 	bl	8007ccc <__malloc_unlock>
 8007cb0:	e7c6      	b.n	8007c40 <_malloc_r+0x84>
 8007cb2:	6007      	str	r7, [r0, #0]
 8007cb4:	e7da      	b.n	8007c6c <_malloc_r+0xb0>
 8007cb6:	46c0      	nop			@ (mov r8, r8)
 8007cb8:	20000910 	.word	0x20000910

08007cbc <__malloc_lock>:
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	4802      	ldr	r0, [pc, #8]	@ (8007cc8 <__malloc_lock+0xc>)
 8007cc0:	f7ff ff04 	bl	8007acc <__retarget_lock_acquire_recursive>
 8007cc4:	bd10      	pop	{r4, pc}
 8007cc6:	46c0      	nop			@ (mov r8, r8)
 8007cc8:	20000908 	.word	0x20000908

08007ccc <__malloc_unlock>:
 8007ccc:	b510      	push	{r4, lr}
 8007cce:	4802      	ldr	r0, [pc, #8]	@ (8007cd8 <__malloc_unlock+0xc>)
 8007cd0:	f7ff fefd 	bl	8007ace <__retarget_lock_release_recursive>
 8007cd4:	bd10      	pop	{r4, pc}
 8007cd6:	46c0      	nop			@ (mov r8, r8)
 8007cd8:	20000908 	.word	0x20000908

08007cdc <__ssputs_r>:
 8007cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cde:	688e      	ldr	r6, [r1, #8]
 8007ce0:	b085      	sub	sp, #20
 8007ce2:	001f      	movs	r7, r3
 8007ce4:	000c      	movs	r4, r1
 8007ce6:	680b      	ldr	r3, [r1, #0]
 8007ce8:	9002      	str	r0, [sp, #8]
 8007cea:	9203      	str	r2, [sp, #12]
 8007cec:	42be      	cmp	r6, r7
 8007cee:	d830      	bhi.n	8007d52 <__ssputs_r+0x76>
 8007cf0:	210c      	movs	r1, #12
 8007cf2:	5e62      	ldrsh	r2, [r4, r1]
 8007cf4:	2190      	movs	r1, #144	@ 0x90
 8007cf6:	00c9      	lsls	r1, r1, #3
 8007cf8:	420a      	tst	r2, r1
 8007cfa:	d028      	beq.n	8007d4e <__ssputs_r+0x72>
 8007cfc:	2003      	movs	r0, #3
 8007cfe:	6921      	ldr	r1, [r4, #16]
 8007d00:	1a5b      	subs	r3, r3, r1
 8007d02:	9301      	str	r3, [sp, #4]
 8007d04:	6963      	ldr	r3, [r4, #20]
 8007d06:	4343      	muls	r3, r0
 8007d08:	9801      	ldr	r0, [sp, #4]
 8007d0a:	0fdd      	lsrs	r5, r3, #31
 8007d0c:	18ed      	adds	r5, r5, r3
 8007d0e:	1c7b      	adds	r3, r7, #1
 8007d10:	181b      	adds	r3, r3, r0
 8007d12:	106d      	asrs	r5, r5, #1
 8007d14:	42ab      	cmp	r3, r5
 8007d16:	d900      	bls.n	8007d1a <__ssputs_r+0x3e>
 8007d18:	001d      	movs	r5, r3
 8007d1a:	0552      	lsls	r2, r2, #21
 8007d1c:	d528      	bpl.n	8007d70 <__ssputs_r+0x94>
 8007d1e:	0029      	movs	r1, r5
 8007d20:	9802      	ldr	r0, [sp, #8]
 8007d22:	f7ff ff4b 	bl	8007bbc <_malloc_r>
 8007d26:	1e06      	subs	r6, r0, #0
 8007d28:	d02c      	beq.n	8007d84 <__ssputs_r+0xa8>
 8007d2a:	9a01      	ldr	r2, [sp, #4]
 8007d2c:	6921      	ldr	r1, [r4, #16]
 8007d2e:	f7ff fecf 	bl	8007ad0 <memcpy>
 8007d32:	89a2      	ldrh	r2, [r4, #12]
 8007d34:	4b18      	ldr	r3, [pc, #96]	@ (8007d98 <__ssputs_r+0xbc>)
 8007d36:	401a      	ands	r2, r3
 8007d38:	2380      	movs	r3, #128	@ 0x80
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	81a3      	strh	r3, [r4, #12]
 8007d3e:	9b01      	ldr	r3, [sp, #4]
 8007d40:	6126      	str	r6, [r4, #16]
 8007d42:	18f6      	adds	r6, r6, r3
 8007d44:	6026      	str	r6, [r4, #0]
 8007d46:	003e      	movs	r6, r7
 8007d48:	6165      	str	r5, [r4, #20]
 8007d4a:	1aed      	subs	r5, r5, r3
 8007d4c:	60a5      	str	r5, [r4, #8]
 8007d4e:	42be      	cmp	r6, r7
 8007d50:	d900      	bls.n	8007d54 <__ssputs_r+0x78>
 8007d52:	003e      	movs	r6, r7
 8007d54:	0032      	movs	r2, r6
 8007d56:	9903      	ldr	r1, [sp, #12]
 8007d58:	6820      	ldr	r0, [r4, #0]
 8007d5a:	f000 fa9b 	bl	8008294 <memmove>
 8007d5e:	2000      	movs	r0, #0
 8007d60:	68a3      	ldr	r3, [r4, #8]
 8007d62:	1b9b      	subs	r3, r3, r6
 8007d64:	60a3      	str	r3, [r4, #8]
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	199b      	adds	r3, r3, r6
 8007d6a:	6023      	str	r3, [r4, #0]
 8007d6c:	b005      	add	sp, #20
 8007d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d70:	002a      	movs	r2, r5
 8007d72:	9802      	ldr	r0, [sp, #8]
 8007d74:	f000 fabf 	bl	80082f6 <_realloc_r>
 8007d78:	1e06      	subs	r6, r0, #0
 8007d7a:	d1e0      	bne.n	8007d3e <__ssputs_r+0x62>
 8007d7c:	6921      	ldr	r1, [r4, #16]
 8007d7e:	9802      	ldr	r0, [sp, #8]
 8007d80:	f7ff feb0 	bl	8007ae4 <_free_r>
 8007d84:	230c      	movs	r3, #12
 8007d86:	2001      	movs	r0, #1
 8007d88:	9a02      	ldr	r2, [sp, #8]
 8007d8a:	4240      	negs	r0, r0
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	89a2      	ldrh	r2, [r4, #12]
 8007d90:	3334      	adds	r3, #52	@ 0x34
 8007d92:	4313      	orrs	r3, r2
 8007d94:	81a3      	strh	r3, [r4, #12]
 8007d96:	e7e9      	b.n	8007d6c <__ssputs_r+0x90>
 8007d98:	fffffb7f 	.word	0xfffffb7f

08007d9c <_svfiprintf_r>:
 8007d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d9e:	b0a1      	sub	sp, #132	@ 0x84
 8007da0:	9003      	str	r0, [sp, #12]
 8007da2:	001d      	movs	r5, r3
 8007da4:	898b      	ldrh	r3, [r1, #12]
 8007da6:	000f      	movs	r7, r1
 8007da8:	0016      	movs	r6, r2
 8007daa:	061b      	lsls	r3, r3, #24
 8007dac:	d511      	bpl.n	8007dd2 <_svfiprintf_r+0x36>
 8007dae:	690b      	ldr	r3, [r1, #16]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10e      	bne.n	8007dd2 <_svfiprintf_r+0x36>
 8007db4:	2140      	movs	r1, #64	@ 0x40
 8007db6:	f7ff ff01 	bl	8007bbc <_malloc_r>
 8007dba:	6038      	str	r0, [r7, #0]
 8007dbc:	6138      	str	r0, [r7, #16]
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d105      	bne.n	8007dce <_svfiprintf_r+0x32>
 8007dc2:	230c      	movs	r3, #12
 8007dc4:	9a03      	ldr	r2, [sp, #12]
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	2001      	movs	r0, #1
 8007dca:	4240      	negs	r0, r0
 8007dcc:	e0cf      	b.n	8007f6e <_svfiprintf_r+0x1d2>
 8007dce:	2340      	movs	r3, #64	@ 0x40
 8007dd0:	617b      	str	r3, [r7, #20]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	ac08      	add	r4, sp, #32
 8007dd6:	6163      	str	r3, [r4, #20]
 8007dd8:	3320      	adds	r3, #32
 8007dda:	7663      	strb	r3, [r4, #25]
 8007ddc:	3310      	adds	r3, #16
 8007dde:	76a3      	strb	r3, [r4, #26]
 8007de0:	9507      	str	r5, [sp, #28]
 8007de2:	0035      	movs	r5, r6
 8007de4:	782b      	ldrb	r3, [r5, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <_svfiprintf_r+0x52>
 8007dea:	2b25      	cmp	r3, #37	@ 0x25
 8007dec:	d148      	bne.n	8007e80 <_svfiprintf_r+0xe4>
 8007dee:	1bab      	subs	r3, r5, r6
 8007df0:	9305      	str	r3, [sp, #20]
 8007df2:	42b5      	cmp	r5, r6
 8007df4:	d00b      	beq.n	8007e0e <_svfiprintf_r+0x72>
 8007df6:	0032      	movs	r2, r6
 8007df8:	0039      	movs	r1, r7
 8007dfa:	9803      	ldr	r0, [sp, #12]
 8007dfc:	f7ff ff6e 	bl	8007cdc <__ssputs_r>
 8007e00:	3001      	adds	r0, #1
 8007e02:	d100      	bne.n	8007e06 <_svfiprintf_r+0x6a>
 8007e04:	e0ae      	b.n	8007f64 <_svfiprintf_r+0x1c8>
 8007e06:	6963      	ldr	r3, [r4, #20]
 8007e08:	9a05      	ldr	r2, [sp, #20]
 8007e0a:	189b      	adds	r3, r3, r2
 8007e0c:	6163      	str	r3, [r4, #20]
 8007e0e:	782b      	ldrb	r3, [r5, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d100      	bne.n	8007e16 <_svfiprintf_r+0x7a>
 8007e14:	e0a6      	b.n	8007f64 <_svfiprintf_r+0x1c8>
 8007e16:	2201      	movs	r2, #1
 8007e18:	2300      	movs	r3, #0
 8007e1a:	4252      	negs	r2, r2
 8007e1c:	6062      	str	r2, [r4, #4]
 8007e1e:	a904      	add	r1, sp, #16
 8007e20:	3254      	adds	r2, #84	@ 0x54
 8007e22:	1852      	adds	r2, r2, r1
 8007e24:	1c6e      	adds	r6, r5, #1
 8007e26:	6023      	str	r3, [r4, #0]
 8007e28:	60e3      	str	r3, [r4, #12]
 8007e2a:	60a3      	str	r3, [r4, #8]
 8007e2c:	7013      	strb	r3, [r2, #0]
 8007e2e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007e30:	4b54      	ldr	r3, [pc, #336]	@ (8007f84 <_svfiprintf_r+0x1e8>)
 8007e32:	2205      	movs	r2, #5
 8007e34:	0018      	movs	r0, r3
 8007e36:	7831      	ldrb	r1, [r6, #0]
 8007e38:	9305      	str	r3, [sp, #20]
 8007e3a:	f000 fa51 	bl	80082e0 <memchr>
 8007e3e:	1c75      	adds	r5, r6, #1
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d11f      	bne.n	8007e84 <_svfiprintf_r+0xe8>
 8007e44:	6822      	ldr	r2, [r4, #0]
 8007e46:	06d3      	lsls	r3, r2, #27
 8007e48:	d504      	bpl.n	8007e54 <_svfiprintf_r+0xb8>
 8007e4a:	2353      	movs	r3, #83	@ 0x53
 8007e4c:	a904      	add	r1, sp, #16
 8007e4e:	185b      	adds	r3, r3, r1
 8007e50:	2120      	movs	r1, #32
 8007e52:	7019      	strb	r1, [r3, #0]
 8007e54:	0713      	lsls	r3, r2, #28
 8007e56:	d504      	bpl.n	8007e62 <_svfiprintf_r+0xc6>
 8007e58:	2353      	movs	r3, #83	@ 0x53
 8007e5a:	a904      	add	r1, sp, #16
 8007e5c:	185b      	adds	r3, r3, r1
 8007e5e:	212b      	movs	r1, #43	@ 0x2b
 8007e60:	7019      	strb	r1, [r3, #0]
 8007e62:	7833      	ldrb	r3, [r6, #0]
 8007e64:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e66:	d016      	beq.n	8007e96 <_svfiprintf_r+0xfa>
 8007e68:	0035      	movs	r5, r6
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	200a      	movs	r0, #10
 8007e6e:	68e3      	ldr	r3, [r4, #12]
 8007e70:	782a      	ldrb	r2, [r5, #0]
 8007e72:	1c6e      	adds	r6, r5, #1
 8007e74:	3a30      	subs	r2, #48	@ 0x30
 8007e76:	2a09      	cmp	r2, #9
 8007e78:	d950      	bls.n	8007f1c <_svfiprintf_r+0x180>
 8007e7a:	2900      	cmp	r1, #0
 8007e7c:	d111      	bne.n	8007ea2 <_svfiprintf_r+0x106>
 8007e7e:	e017      	b.n	8007eb0 <_svfiprintf_r+0x114>
 8007e80:	3501      	adds	r5, #1
 8007e82:	e7af      	b.n	8007de4 <_svfiprintf_r+0x48>
 8007e84:	9b05      	ldr	r3, [sp, #20]
 8007e86:	6822      	ldr	r2, [r4, #0]
 8007e88:	1ac0      	subs	r0, r0, r3
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	4083      	lsls	r3, r0
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	002e      	movs	r6, r5
 8007e92:	6023      	str	r3, [r4, #0]
 8007e94:	e7cc      	b.n	8007e30 <_svfiprintf_r+0x94>
 8007e96:	9b07      	ldr	r3, [sp, #28]
 8007e98:	1d19      	adds	r1, r3, #4
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	9107      	str	r1, [sp, #28]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	db01      	blt.n	8007ea6 <_svfiprintf_r+0x10a>
 8007ea2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ea4:	e004      	b.n	8007eb0 <_svfiprintf_r+0x114>
 8007ea6:	425b      	negs	r3, r3
 8007ea8:	60e3      	str	r3, [r4, #12]
 8007eaa:	2302      	movs	r3, #2
 8007eac:	4313      	orrs	r3, r2
 8007eae:	6023      	str	r3, [r4, #0]
 8007eb0:	782b      	ldrb	r3, [r5, #0]
 8007eb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007eb4:	d10c      	bne.n	8007ed0 <_svfiprintf_r+0x134>
 8007eb6:	786b      	ldrb	r3, [r5, #1]
 8007eb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eba:	d134      	bne.n	8007f26 <_svfiprintf_r+0x18a>
 8007ebc:	9b07      	ldr	r3, [sp, #28]
 8007ebe:	3502      	adds	r5, #2
 8007ec0:	1d1a      	adds	r2, r3, #4
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	9207      	str	r2, [sp, #28]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	da01      	bge.n	8007ece <_svfiprintf_r+0x132>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	425b      	negs	r3, r3
 8007ece:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ed0:	4e2d      	ldr	r6, [pc, #180]	@ (8007f88 <_svfiprintf_r+0x1ec>)
 8007ed2:	2203      	movs	r2, #3
 8007ed4:	0030      	movs	r0, r6
 8007ed6:	7829      	ldrb	r1, [r5, #0]
 8007ed8:	f000 fa02 	bl	80082e0 <memchr>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	d006      	beq.n	8007eee <_svfiprintf_r+0x152>
 8007ee0:	2340      	movs	r3, #64	@ 0x40
 8007ee2:	1b80      	subs	r0, r0, r6
 8007ee4:	4083      	lsls	r3, r0
 8007ee6:	6822      	ldr	r2, [r4, #0]
 8007ee8:	3501      	adds	r5, #1
 8007eea:	4313      	orrs	r3, r2
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	7829      	ldrb	r1, [r5, #0]
 8007ef0:	2206      	movs	r2, #6
 8007ef2:	4826      	ldr	r0, [pc, #152]	@ (8007f8c <_svfiprintf_r+0x1f0>)
 8007ef4:	1c6e      	adds	r6, r5, #1
 8007ef6:	7621      	strb	r1, [r4, #24]
 8007ef8:	f000 f9f2 	bl	80082e0 <memchr>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d038      	beq.n	8007f72 <_svfiprintf_r+0x1d6>
 8007f00:	4b23      	ldr	r3, [pc, #140]	@ (8007f90 <_svfiprintf_r+0x1f4>)
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d122      	bne.n	8007f4c <_svfiprintf_r+0x1b0>
 8007f06:	2207      	movs	r2, #7
 8007f08:	9b07      	ldr	r3, [sp, #28]
 8007f0a:	3307      	adds	r3, #7
 8007f0c:	4393      	bics	r3, r2
 8007f0e:	3308      	adds	r3, #8
 8007f10:	9307      	str	r3, [sp, #28]
 8007f12:	6963      	ldr	r3, [r4, #20]
 8007f14:	9a04      	ldr	r2, [sp, #16]
 8007f16:	189b      	adds	r3, r3, r2
 8007f18:	6163      	str	r3, [r4, #20]
 8007f1a:	e762      	b.n	8007de2 <_svfiprintf_r+0x46>
 8007f1c:	4343      	muls	r3, r0
 8007f1e:	0035      	movs	r5, r6
 8007f20:	2101      	movs	r1, #1
 8007f22:	189b      	adds	r3, r3, r2
 8007f24:	e7a4      	b.n	8007e70 <_svfiprintf_r+0xd4>
 8007f26:	2300      	movs	r3, #0
 8007f28:	200a      	movs	r0, #10
 8007f2a:	0019      	movs	r1, r3
 8007f2c:	3501      	adds	r5, #1
 8007f2e:	6063      	str	r3, [r4, #4]
 8007f30:	782a      	ldrb	r2, [r5, #0]
 8007f32:	1c6e      	adds	r6, r5, #1
 8007f34:	3a30      	subs	r2, #48	@ 0x30
 8007f36:	2a09      	cmp	r2, #9
 8007f38:	d903      	bls.n	8007f42 <_svfiprintf_r+0x1a6>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d0c8      	beq.n	8007ed0 <_svfiprintf_r+0x134>
 8007f3e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f40:	e7c6      	b.n	8007ed0 <_svfiprintf_r+0x134>
 8007f42:	4341      	muls	r1, r0
 8007f44:	0035      	movs	r5, r6
 8007f46:	2301      	movs	r3, #1
 8007f48:	1889      	adds	r1, r1, r2
 8007f4a:	e7f1      	b.n	8007f30 <_svfiprintf_r+0x194>
 8007f4c:	aa07      	add	r2, sp, #28
 8007f4e:	9200      	str	r2, [sp, #0]
 8007f50:	0021      	movs	r1, r4
 8007f52:	003a      	movs	r2, r7
 8007f54:	4b0f      	ldr	r3, [pc, #60]	@ (8007f94 <_svfiprintf_r+0x1f8>)
 8007f56:	9803      	ldr	r0, [sp, #12]
 8007f58:	e000      	b.n	8007f5c <_svfiprintf_r+0x1c0>
 8007f5a:	bf00      	nop
 8007f5c:	9004      	str	r0, [sp, #16]
 8007f5e:	9b04      	ldr	r3, [sp, #16]
 8007f60:	3301      	adds	r3, #1
 8007f62:	d1d6      	bne.n	8007f12 <_svfiprintf_r+0x176>
 8007f64:	89bb      	ldrh	r3, [r7, #12]
 8007f66:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007f68:	065b      	lsls	r3, r3, #25
 8007f6a:	d500      	bpl.n	8007f6e <_svfiprintf_r+0x1d2>
 8007f6c:	e72c      	b.n	8007dc8 <_svfiprintf_r+0x2c>
 8007f6e:	b021      	add	sp, #132	@ 0x84
 8007f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f72:	aa07      	add	r2, sp, #28
 8007f74:	9200      	str	r2, [sp, #0]
 8007f76:	0021      	movs	r1, r4
 8007f78:	003a      	movs	r2, r7
 8007f7a:	4b06      	ldr	r3, [pc, #24]	@ (8007f94 <_svfiprintf_r+0x1f8>)
 8007f7c:	9803      	ldr	r0, [sp, #12]
 8007f7e:	f000 f87b 	bl	8008078 <_printf_i>
 8007f82:	e7eb      	b.n	8007f5c <_svfiprintf_r+0x1c0>
 8007f84:	08008c78 	.word	0x08008c78
 8007f88:	08008c7e 	.word	0x08008c7e
 8007f8c:	08008c82 	.word	0x08008c82
 8007f90:	00000000 	.word	0x00000000
 8007f94:	08007cdd 	.word	0x08007cdd

08007f98 <_printf_common>:
 8007f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f9a:	0016      	movs	r6, r2
 8007f9c:	9301      	str	r3, [sp, #4]
 8007f9e:	688a      	ldr	r2, [r1, #8]
 8007fa0:	690b      	ldr	r3, [r1, #16]
 8007fa2:	000c      	movs	r4, r1
 8007fa4:	9000      	str	r0, [sp, #0]
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	da00      	bge.n	8007fac <_printf_common+0x14>
 8007faa:	0013      	movs	r3, r2
 8007fac:	0022      	movs	r2, r4
 8007fae:	6033      	str	r3, [r6, #0]
 8007fb0:	3243      	adds	r2, #67	@ 0x43
 8007fb2:	7812      	ldrb	r2, [r2, #0]
 8007fb4:	2a00      	cmp	r2, #0
 8007fb6:	d001      	beq.n	8007fbc <_printf_common+0x24>
 8007fb8:	3301      	adds	r3, #1
 8007fba:	6033      	str	r3, [r6, #0]
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	069b      	lsls	r3, r3, #26
 8007fc0:	d502      	bpl.n	8007fc8 <_printf_common+0x30>
 8007fc2:	6833      	ldr	r3, [r6, #0]
 8007fc4:	3302      	adds	r3, #2
 8007fc6:	6033      	str	r3, [r6, #0]
 8007fc8:	6822      	ldr	r2, [r4, #0]
 8007fca:	2306      	movs	r3, #6
 8007fcc:	0015      	movs	r5, r2
 8007fce:	401d      	ands	r5, r3
 8007fd0:	421a      	tst	r2, r3
 8007fd2:	d027      	beq.n	8008024 <_printf_common+0x8c>
 8007fd4:	0023      	movs	r3, r4
 8007fd6:	3343      	adds	r3, #67	@ 0x43
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	1e5a      	subs	r2, r3, #1
 8007fdc:	4193      	sbcs	r3, r2
 8007fde:	6822      	ldr	r2, [r4, #0]
 8007fe0:	0692      	lsls	r2, r2, #26
 8007fe2:	d430      	bmi.n	8008046 <_printf_common+0xae>
 8007fe4:	0022      	movs	r2, r4
 8007fe6:	9901      	ldr	r1, [sp, #4]
 8007fe8:	9800      	ldr	r0, [sp, #0]
 8007fea:	9d08      	ldr	r5, [sp, #32]
 8007fec:	3243      	adds	r2, #67	@ 0x43
 8007fee:	47a8      	blx	r5
 8007ff0:	3001      	adds	r0, #1
 8007ff2:	d025      	beq.n	8008040 <_printf_common+0xa8>
 8007ff4:	2206      	movs	r2, #6
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	2500      	movs	r5, #0
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	2b04      	cmp	r3, #4
 8007ffe:	d105      	bne.n	800800c <_printf_common+0x74>
 8008000:	6833      	ldr	r3, [r6, #0]
 8008002:	68e5      	ldr	r5, [r4, #12]
 8008004:	1aed      	subs	r5, r5, r3
 8008006:	43eb      	mvns	r3, r5
 8008008:	17db      	asrs	r3, r3, #31
 800800a:	401d      	ands	r5, r3
 800800c:	68a3      	ldr	r3, [r4, #8]
 800800e:	6922      	ldr	r2, [r4, #16]
 8008010:	4293      	cmp	r3, r2
 8008012:	dd01      	ble.n	8008018 <_printf_common+0x80>
 8008014:	1a9b      	subs	r3, r3, r2
 8008016:	18ed      	adds	r5, r5, r3
 8008018:	2600      	movs	r6, #0
 800801a:	42b5      	cmp	r5, r6
 800801c:	d120      	bne.n	8008060 <_printf_common+0xc8>
 800801e:	2000      	movs	r0, #0
 8008020:	e010      	b.n	8008044 <_printf_common+0xac>
 8008022:	3501      	adds	r5, #1
 8008024:	68e3      	ldr	r3, [r4, #12]
 8008026:	6832      	ldr	r2, [r6, #0]
 8008028:	1a9b      	subs	r3, r3, r2
 800802a:	42ab      	cmp	r3, r5
 800802c:	ddd2      	ble.n	8007fd4 <_printf_common+0x3c>
 800802e:	0022      	movs	r2, r4
 8008030:	2301      	movs	r3, #1
 8008032:	9901      	ldr	r1, [sp, #4]
 8008034:	9800      	ldr	r0, [sp, #0]
 8008036:	9f08      	ldr	r7, [sp, #32]
 8008038:	3219      	adds	r2, #25
 800803a:	47b8      	blx	r7
 800803c:	3001      	adds	r0, #1
 800803e:	d1f0      	bne.n	8008022 <_printf_common+0x8a>
 8008040:	2001      	movs	r0, #1
 8008042:	4240      	negs	r0, r0
 8008044:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008046:	2030      	movs	r0, #48	@ 0x30
 8008048:	18e1      	adds	r1, r4, r3
 800804a:	3143      	adds	r1, #67	@ 0x43
 800804c:	7008      	strb	r0, [r1, #0]
 800804e:	0021      	movs	r1, r4
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	3145      	adds	r1, #69	@ 0x45
 8008054:	7809      	ldrb	r1, [r1, #0]
 8008056:	18a2      	adds	r2, r4, r2
 8008058:	3243      	adds	r2, #67	@ 0x43
 800805a:	3302      	adds	r3, #2
 800805c:	7011      	strb	r1, [r2, #0]
 800805e:	e7c1      	b.n	8007fe4 <_printf_common+0x4c>
 8008060:	0022      	movs	r2, r4
 8008062:	2301      	movs	r3, #1
 8008064:	9901      	ldr	r1, [sp, #4]
 8008066:	9800      	ldr	r0, [sp, #0]
 8008068:	9f08      	ldr	r7, [sp, #32]
 800806a:	321a      	adds	r2, #26
 800806c:	47b8      	blx	r7
 800806e:	3001      	adds	r0, #1
 8008070:	d0e6      	beq.n	8008040 <_printf_common+0xa8>
 8008072:	3601      	adds	r6, #1
 8008074:	e7d1      	b.n	800801a <_printf_common+0x82>
	...

08008078 <_printf_i>:
 8008078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800807a:	b08b      	sub	sp, #44	@ 0x2c
 800807c:	9206      	str	r2, [sp, #24]
 800807e:	000a      	movs	r2, r1
 8008080:	3243      	adds	r2, #67	@ 0x43
 8008082:	9307      	str	r3, [sp, #28]
 8008084:	9005      	str	r0, [sp, #20]
 8008086:	9203      	str	r2, [sp, #12]
 8008088:	7e0a      	ldrb	r2, [r1, #24]
 800808a:	000c      	movs	r4, r1
 800808c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800808e:	2a78      	cmp	r2, #120	@ 0x78
 8008090:	d809      	bhi.n	80080a6 <_printf_i+0x2e>
 8008092:	2a62      	cmp	r2, #98	@ 0x62
 8008094:	d80b      	bhi.n	80080ae <_printf_i+0x36>
 8008096:	2a00      	cmp	r2, #0
 8008098:	d100      	bne.n	800809c <_printf_i+0x24>
 800809a:	e0bc      	b.n	8008216 <_printf_i+0x19e>
 800809c:	497b      	ldr	r1, [pc, #492]	@ (800828c <_printf_i+0x214>)
 800809e:	9104      	str	r1, [sp, #16]
 80080a0:	2a58      	cmp	r2, #88	@ 0x58
 80080a2:	d100      	bne.n	80080a6 <_printf_i+0x2e>
 80080a4:	e090      	b.n	80081c8 <_printf_i+0x150>
 80080a6:	0025      	movs	r5, r4
 80080a8:	3542      	adds	r5, #66	@ 0x42
 80080aa:	702a      	strb	r2, [r5, #0]
 80080ac:	e022      	b.n	80080f4 <_printf_i+0x7c>
 80080ae:	0010      	movs	r0, r2
 80080b0:	3863      	subs	r0, #99	@ 0x63
 80080b2:	2815      	cmp	r0, #21
 80080b4:	d8f7      	bhi.n	80080a6 <_printf_i+0x2e>
 80080b6:	f7f8 f827 	bl	8000108 <__gnu_thumb1_case_shi>
 80080ba:	0016      	.short	0x0016
 80080bc:	fff6001f 	.word	0xfff6001f
 80080c0:	fff6fff6 	.word	0xfff6fff6
 80080c4:	001ffff6 	.word	0x001ffff6
 80080c8:	fff6fff6 	.word	0xfff6fff6
 80080cc:	fff6fff6 	.word	0xfff6fff6
 80080d0:	003600a1 	.word	0x003600a1
 80080d4:	fff60080 	.word	0xfff60080
 80080d8:	00b2fff6 	.word	0x00b2fff6
 80080dc:	0036fff6 	.word	0x0036fff6
 80080e0:	fff6fff6 	.word	0xfff6fff6
 80080e4:	0084      	.short	0x0084
 80080e6:	0025      	movs	r5, r4
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	3542      	adds	r5, #66	@ 0x42
 80080ec:	1d11      	adds	r1, r2, #4
 80080ee:	6019      	str	r1, [r3, #0]
 80080f0:	6813      	ldr	r3, [r2, #0]
 80080f2:	702b      	strb	r3, [r5, #0]
 80080f4:	2301      	movs	r3, #1
 80080f6:	e0a0      	b.n	800823a <_printf_i+0x1c2>
 80080f8:	6818      	ldr	r0, [r3, #0]
 80080fa:	6809      	ldr	r1, [r1, #0]
 80080fc:	1d02      	adds	r2, r0, #4
 80080fe:	060d      	lsls	r5, r1, #24
 8008100:	d50b      	bpl.n	800811a <_printf_i+0xa2>
 8008102:	6806      	ldr	r6, [r0, #0]
 8008104:	601a      	str	r2, [r3, #0]
 8008106:	2e00      	cmp	r6, #0
 8008108:	da03      	bge.n	8008112 <_printf_i+0x9a>
 800810a:	232d      	movs	r3, #45	@ 0x2d
 800810c:	9a03      	ldr	r2, [sp, #12]
 800810e:	4276      	negs	r6, r6
 8008110:	7013      	strb	r3, [r2, #0]
 8008112:	4b5e      	ldr	r3, [pc, #376]	@ (800828c <_printf_i+0x214>)
 8008114:	270a      	movs	r7, #10
 8008116:	9304      	str	r3, [sp, #16]
 8008118:	e018      	b.n	800814c <_printf_i+0xd4>
 800811a:	6806      	ldr	r6, [r0, #0]
 800811c:	601a      	str	r2, [r3, #0]
 800811e:	0649      	lsls	r1, r1, #25
 8008120:	d5f1      	bpl.n	8008106 <_printf_i+0x8e>
 8008122:	b236      	sxth	r6, r6
 8008124:	e7ef      	b.n	8008106 <_printf_i+0x8e>
 8008126:	6808      	ldr	r0, [r1, #0]
 8008128:	6819      	ldr	r1, [r3, #0]
 800812a:	c940      	ldmia	r1!, {r6}
 800812c:	0605      	lsls	r5, r0, #24
 800812e:	d402      	bmi.n	8008136 <_printf_i+0xbe>
 8008130:	0640      	lsls	r0, r0, #25
 8008132:	d500      	bpl.n	8008136 <_printf_i+0xbe>
 8008134:	b2b6      	uxth	r6, r6
 8008136:	6019      	str	r1, [r3, #0]
 8008138:	4b54      	ldr	r3, [pc, #336]	@ (800828c <_printf_i+0x214>)
 800813a:	270a      	movs	r7, #10
 800813c:	9304      	str	r3, [sp, #16]
 800813e:	2a6f      	cmp	r2, #111	@ 0x6f
 8008140:	d100      	bne.n	8008144 <_printf_i+0xcc>
 8008142:	3f02      	subs	r7, #2
 8008144:	0023      	movs	r3, r4
 8008146:	2200      	movs	r2, #0
 8008148:	3343      	adds	r3, #67	@ 0x43
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	6863      	ldr	r3, [r4, #4]
 800814e:	60a3      	str	r3, [r4, #8]
 8008150:	2b00      	cmp	r3, #0
 8008152:	db03      	blt.n	800815c <_printf_i+0xe4>
 8008154:	2104      	movs	r1, #4
 8008156:	6822      	ldr	r2, [r4, #0]
 8008158:	438a      	bics	r2, r1
 800815a:	6022      	str	r2, [r4, #0]
 800815c:	2e00      	cmp	r6, #0
 800815e:	d102      	bne.n	8008166 <_printf_i+0xee>
 8008160:	9d03      	ldr	r5, [sp, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00c      	beq.n	8008180 <_printf_i+0x108>
 8008166:	9d03      	ldr	r5, [sp, #12]
 8008168:	0030      	movs	r0, r6
 800816a:	0039      	movs	r1, r7
 800816c:	f7f8 f85c 	bl	8000228 <__aeabi_uidivmod>
 8008170:	9b04      	ldr	r3, [sp, #16]
 8008172:	3d01      	subs	r5, #1
 8008174:	5c5b      	ldrb	r3, [r3, r1]
 8008176:	702b      	strb	r3, [r5, #0]
 8008178:	0033      	movs	r3, r6
 800817a:	0006      	movs	r6, r0
 800817c:	429f      	cmp	r7, r3
 800817e:	d9f3      	bls.n	8008168 <_printf_i+0xf0>
 8008180:	2f08      	cmp	r7, #8
 8008182:	d109      	bne.n	8008198 <_printf_i+0x120>
 8008184:	6823      	ldr	r3, [r4, #0]
 8008186:	07db      	lsls	r3, r3, #31
 8008188:	d506      	bpl.n	8008198 <_printf_i+0x120>
 800818a:	6862      	ldr	r2, [r4, #4]
 800818c:	6923      	ldr	r3, [r4, #16]
 800818e:	429a      	cmp	r2, r3
 8008190:	dc02      	bgt.n	8008198 <_printf_i+0x120>
 8008192:	2330      	movs	r3, #48	@ 0x30
 8008194:	3d01      	subs	r5, #1
 8008196:	702b      	strb	r3, [r5, #0]
 8008198:	9b03      	ldr	r3, [sp, #12]
 800819a:	1b5b      	subs	r3, r3, r5
 800819c:	6123      	str	r3, [r4, #16]
 800819e:	9b07      	ldr	r3, [sp, #28]
 80081a0:	0021      	movs	r1, r4
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	9805      	ldr	r0, [sp, #20]
 80081a6:	9b06      	ldr	r3, [sp, #24]
 80081a8:	aa09      	add	r2, sp, #36	@ 0x24
 80081aa:	f7ff fef5 	bl	8007f98 <_printf_common>
 80081ae:	3001      	adds	r0, #1
 80081b0:	d148      	bne.n	8008244 <_printf_i+0x1cc>
 80081b2:	2001      	movs	r0, #1
 80081b4:	4240      	negs	r0, r0
 80081b6:	b00b      	add	sp, #44	@ 0x2c
 80081b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ba:	2220      	movs	r2, #32
 80081bc:	6809      	ldr	r1, [r1, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	6022      	str	r2, [r4, #0]
 80081c2:	2278      	movs	r2, #120	@ 0x78
 80081c4:	4932      	ldr	r1, [pc, #200]	@ (8008290 <_printf_i+0x218>)
 80081c6:	9104      	str	r1, [sp, #16]
 80081c8:	0021      	movs	r1, r4
 80081ca:	3145      	adds	r1, #69	@ 0x45
 80081cc:	700a      	strb	r2, [r1, #0]
 80081ce:	6819      	ldr	r1, [r3, #0]
 80081d0:	6822      	ldr	r2, [r4, #0]
 80081d2:	c940      	ldmia	r1!, {r6}
 80081d4:	0610      	lsls	r0, r2, #24
 80081d6:	d402      	bmi.n	80081de <_printf_i+0x166>
 80081d8:	0650      	lsls	r0, r2, #25
 80081da:	d500      	bpl.n	80081de <_printf_i+0x166>
 80081dc:	b2b6      	uxth	r6, r6
 80081de:	6019      	str	r1, [r3, #0]
 80081e0:	07d3      	lsls	r3, r2, #31
 80081e2:	d502      	bpl.n	80081ea <_printf_i+0x172>
 80081e4:	2320      	movs	r3, #32
 80081e6:	4313      	orrs	r3, r2
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	2e00      	cmp	r6, #0
 80081ec:	d001      	beq.n	80081f2 <_printf_i+0x17a>
 80081ee:	2710      	movs	r7, #16
 80081f0:	e7a8      	b.n	8008144 <_printf_i+0xcc>
 80081f2:	2220      	movs	r2, #32
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	4393      	bics	r3, r2
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	e7f8      	b.n	80081ee <_printf_i+0x176>
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	680d      	ldr	r5, [r1, #0]
 8008200:	1d10      	adds	r0, r2, #4
 8008202:	6949      	ldr	r1, [r1, #20]
 8008204:	6018      	str	r0, [r3, #0]
 8008206:	6813      	ldr	r3, [r2, #0]
 8008208:	062e      	lsls	r6, r5, #24
 800820a:	d501      	bpl.n	8008210 <_printf_i+0x198>
 800820c:	6019      	str	r1, [r3, #0]
 800820e:	e002      	b.n	8008216 <_printf_i+0x19e>
 8008210:	066d      	lsls	r5, r5, #25
 8008212:	d5fb      	bpl.n	800820c <_printf_i+0x194>
 8008214:	8019      	strh	r1, [r3, #0]
 8008216:	2300      	movs	r3, #0
 8008218:	9d03      	ldr	r5, [sp, #12]
 800821a:	6123      	str	r3, [r4, #16]
 800821c:	e7bf      	b.n	800819e <_printf_i+0x126>
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	1d11      	adds	r1, r2, #4
 8008222:	6019      	str	r1, [r3, #0]
 8008224:	6815      	ldr	r5, [r2, #0]
 8008226:	2100      	movs	r1, #0
 8008228:	0028      	movs	r0, r5
 800822a:	6862      	ldr	r2, [r4, #4]
 800822c:	f000 f858 	bl	80082e0 <memchr>
 8008230:	2800      	cmp	r0, #0
 8008232:	d001      	beq.n	8008238 <_printf_i+0x1c0>
 8008234:	1b40      	subs	r0, r0, r5
 8008236:	6060      	str	r0, [r4, #4]
 8008238:	6863      	ldr	r3, [r4, #4]
 800823a:	6123      	str	r3, [r4, #16]
 800823c:	2300      	movs	r3, #0
 800823e:	9a03      	ldr	r2, [sp, #12]
 8008240:	7013      	strb	r3, [r2, #0]
 8008242:	e7ac      	b.n	800819e <_printf_i+0x126>
 8008244:	002a      	movs	r2, r5
 8008246:	6923      	ldr	r3, [r4, #16]
 8008248:	9906      	ldr	r1, [sp, #24]
 800824a:	9805      	ldr	r0, [sp, #20]
 800824c:	9d07      	ldr	r5, [sp, #28]
 800824e:	47a8      	blx	r5
 8008250:	3001      	adds	r0, #1
 8008252:	d0ae      	beq.n	80081b2 <_printf_i+0x13a>
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	079b      	lsls	r3, r3, #30
 8008258:	d415      	bmi.n	8008286 <_printf_i+0x20e>
 800825a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800825c:	68e0      	ldr	r0, [r4, #12]
 800825e:	4298      	cmp	r0, r3
 8008260:	daa9      	bge.n	80081b6 <_printf_i+0x13e>
 8008262:	0018      	movs	r0, r3
 8008264:	e7a7      	b.n	80081b6 <_printf_i+0x13e>
 8008266:	0022      	movs	r2, r4
 8008268:	2301      	movs	r3, #1
 800826a:	9906      	ldr	r1, [sp, #24]
 800826c:	9805      	ldr	r0, [sp, #20]
 800826e:	9e07      	ldr	r6, [sp, #28]
 8008270:	3219      	adds	r2, #25
 8008272:	47b0      	blx	r6
 8008274:	3001      	adds	r0, #1
 8008276:	d09c      	beq.n	80081b2 <_printf_i+0x13a>
 8008278:	3501      	adds	r5, #1
 800827a:	68e3      	ldr	r3, [r4, #12]
 800827c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800827e:	1a9b      	subs	r3, r3, r2
 8008280:	42ab      	cmp	r3, r5
 8008282:	dcf0      	bgt.n	8008266 <_printf_i+0x1ee>
 8008284:	e7e9      	b.n	800825a <_printf_i+0x1e2>
 8008286:	2500      	movs	r5, #0
 8008288:	e7f7      	b.n	800827a <_printf_i+0x202>
 800828a:	46c0      	nop			@ (mov r8, r8)
 800828c:	08008c89 	.word	0x08008c89
 8008290:	08008c9a 	.word	0x08008c9a

08008294 <memmove>:
 8008294:	b510      	push	{r4, lr}
 8008296:	4288      	cmp	r0, r1
 8008298:	d806      	bhi.n	80082a8 <memmove+0x14>
 800829a:	2300      	movs	r3, #0
 800829c:	429a      	cmp	r2, r3
 800829e:	d008      	beq.n	80082b2 <memmove+0x1e>
 80082a0:	5ccc      	ldrb	r4, [r1, r3]
 80082a2:	54c4      	strb	r4, [r0, r3]
 80082a4:	3301      	adds	r3, #1
 80082a6:	e7f9      	b.n	800829c <memmove+0x8>
 80082a8:	188b      	adds	r3, r1, r2
 80082aa:	4298      	cmp	r0, r3
 80082ac:	d2f5      	bcs.n	800829a <memmove+0x6>
 80082ae:	3a01      	subs	r2, #1
 80082b0:	d200      	bcs.n	80082b4 <memmove+0x20>
 80082b2:	bd10      	pop	{r4, pc}
 80082b4:	5c8b      	ldrb	r3, [r1, r2]
 80082b6:	5483      	strb	r3, [r0, r2]
 80082b8:	e7f9      	b.n	80082ae <memmove+0x1a>
	...

080082bc <_sbrk_r>:
 80082bc:	2300      	movs	r3, #0
 80082be:	b570      	push	{r4, r5, r6, lr}
 80082c0:	4d06      	ldr	r5, [pc, #24]	@ (80082dc <_sbrk_r+0x20>)
 80082c2:	0004      	movs	r4, r0
 80082c4:	0008      	movs	r0, r1
 80082c6:	602b      	str	r3, [r5, #0]
 80082c8:	f7f9 fb98 	bl	80019fc <_sbrk>
 80082cc:	1c43      	adds	r3, r0, #1
 80082ce:	d103      	bne.n	80082d8 <_sbrk_r+0x1c>
 80082d0:	682b      	ldr	r3, [r5, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d000      	beq.n	80082d8 <_sbrk_r+0x1c>
 80082d6:	6023      	str	r3, [r4, #0]
 80082d8:	bd70      	pop	{r4, r5, r6, pc}
 80082da:	46c0      	nop			@ (mov r8, r8)
 80082dc:	20000904 	.word	0x20000904

080082e0 <memchr>:
 80082e0:	b2c9      	uxtb	r1, r1
 80082e2:	1882      	adds	r2, r0, r2
 80082e4:	4290      	cmp	r0, r2
 80082e6:	d101      	bne.n	80082ec <memchr+0xc>
 80082e8:	2000      	movs	r0, #0
 80082ea:	4770      	bx	lr
 80082ec:	7803      	ldrb	r3, [r0, #0]
 80082ee:	428b      	cmp	r3, r1
 80082f0:	d0fb      	beq.n	80082ea <memchr+0xa>
 80082f2:	3001      	adds	r0, #1
 80082f4:	e7f6      	b.n	80082e4 <memchr+0x4>

080082f6 <_realloc_r>:
 80082f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082f8:	0006      	movs	r6, r0
 80082fa:	000c      	movs	r4, r1
 80082fc:	0015      	movs	r5, r2
 80082fe:	2900      	cmp	r1, #0
 8008300:	d105      	bne.n	800830e <_realloc_r+0x18>
 8008302:	0011      	movs	r1, r2
 8008304:	f7ff fc5a 	bl	8007bbc <_malloc_r>
 8008308:	0004      	movs	r4, r0
 800830a:	0020      	movs	r0, r4
 800830c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800830e:	2a00      	cmp	r2, #0
 8008310:	d103      	bne.n	800831a <_realloc_r+0x24>
 8008312:	f7ff fbe7 	bl	8007ae4 <_free_r>
 8008316:	2400      	movs	r4, #0
 8008318:	e7f7      	b.n	800830a <_realloc_r+0x14>
 800831a:	f000 f81b 	bl	8008354 <_malloc_usable_size_r>
 800831e:	0007      	movs	r7, r0
 8008320:	4285      	cmp	r5, r0
 8008322:	d802      	bhi.n	800832a <_realloc_r+0x34>
 8008324:	0843      	lsrs	r3, r0, #1
 8008326:	42ab      	cmp	r3, r5
 8008328:	d3ef      	bcc.n	800830a <_realloc_r+0x14>
 800832a:	0029      	movs	r1, r5
 800832c:	0030      	movs	r0, r6
 800832e:	f7ff fc45 	bl	8007bbc <_malloc_r>
 8008332:	9001      	str	r0, [sp, #4]
 8008334:	2800      	cmp	r0, #0
 8008336:	d0ee      	beq.n	8008316 <_realloc_r+0x20>
 8008338:	002a      	movs	r2, r5
 800833a:	42bd      	cmp	r5, r7
 800833c:	d900      	bls.n	8008340 <_realloc_r+0x4a>
 800833e:	003a      	movs	r2, r7
 8008340:	0021      	movs	r1, r4
 8008342:	9801      	ldr	r0, [sp, #4]
 8008344:	f7ff fbc4 	bl	8007ad0 <memcpy>
 8008348:	0021      	movs	r1, r4
 800834a:	0030      	movs	r0, r6
 800834c:	f7ff fbca 	bl	8007ae4 <_free_r>
 8008350:	9c01      	ldr	r4, [sp, #4]
 8008352:	e7da      	b.n	800830a <_realloc_r+0x14>

08008354 <_malloc_usable_size_r>:
 8008354:	1f0b      	subs	r3, r1, #4
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	1f18      	subs	r0, r3, #4
 800835a:	2b00      	cmp	r3, #0
 800835c:	da01      	bge.n	8008362 <_malloc_usable_size_r+0xe>
 800835e:	580b      	ldr	r3, [r1, r0]
 8008360:	18c0      	adds	r0, r0, r3
 8008362:	4770      	bx	lr

08008364 <_init>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	46c0      	nop			@ (mov r8, r8)
 8008368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800836a:	bc08      	pop	{r3}
 800836c:	469e      	mov	lr, r3
 800836e:	4770      	bx	lr

08008370 <_fini>:
 8008370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008372:	46c0      	nop			@ (mov r8, r8)
 8008374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008376:	bc08      	pop	{r3}
 8008378:	469e      	mov	lr, r3
 800837a:	4770      	bx	lr
