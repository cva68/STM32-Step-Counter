
StepCounter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008378  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  08008438  08008438  00009438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d4c  08008d4c  0000a08c  2**0
                  CONTENTS
  4 .ARM          00000000  08008d4c  08008d4c  0000a08c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d4c  08008d4c  0000a08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d4c  08008d4c  00009d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d50  08008d50  00009d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08008d54  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  2000008c  08008de0  0000a08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000880  08008de0  0000a880  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bee  00000000  00000000  0000a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004456  00000000  00000000  00023ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  000280f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116a  00000000  00000000  000297a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b199  00000000  00000000  0002a90a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022a62  00000000  00000000  00045aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a1cb  00000000  00000000  00068505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001026d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005370  00000000  00000000  00102714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00107a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008420 	.word	0x08008420

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08008420 	.word	0x08008420

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	@ 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			@ (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	@ 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	@ 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			@ (mov r8, r8)

0800041c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	0018      	movs	r0, r3
 8000426:	230c      	movs	r3, #12
 8000428:	001a      	movs	r2, r3
 800042a:	2100      	movs	r1, #0
 800042c:	f007 fb7a 	bl	8007b24 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000430:	4b31      	ldr	r3, [pc, #196]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 8000432:	4a32      	ldr	r2, [pc, #200]	@ (80004fc <MX_ADC1_Init+0xe0>)
 8000434:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000436:	4b30      	ldr	r3, [pc, #192]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 8000438:	22c0      	movs	r2, #192	@ 0xc0
 800043a:	0612      	lsls	r2, r2, #24
 800043c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800043e:	4b2e      	ldr	r3, [pc, #184]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000444:	4b2c      	ldr	r3, [pc, #176]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800044a:	4b2b      	ldr	r3, [pc, #172]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 800044c:	2280      	movs	r2, #128	@ 0x80
 800044e:	0612      	lsls	r2, r2, #24
 8000450:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000452:	4b29      	ldr	r3, [pc, #164]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 8000454:	2204      	movs	r2, #4
 8000456:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000458:	4b27      	ldr	r3, [pc, #156]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 800045a:	2200      	movs	r2, #0
 800045c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800045e:	4b26      	ldr	r3, [pc, #152]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 8000460:	2200      	movs	r2, #0
 8000462:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000464:	4b24      	ldr	r3, [pc, #144]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 8000466:	2200      	movs	r2, #0
 8000468:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 800046a:	4b23      	ldr	r3, [pc, #140]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 800046c:	2200      	movs	r2, #0
 800046e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000470:	4b21      	ldr	r3, [pc, #132]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 8000472:	2220      	movs	r2, #32
 8000474:	2100      	movs	r1, #0
 8000476:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000478:	4b1f      	ldr	r3, [pc, #124]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 800047a:	2200      	movs	r2, #0
 800047c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800047e:	4b1e      	ldr	r3, [pc, #120]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 8000480:	2200      	movs	r2, #0
 8000482:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000484:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 8000486:	222c      	movs	r2, #44	@ 0x2c
 8000488:	2100      	movs	r1, #0
 800048a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800048c:	4b1a      	ldr	r3, [pc, #104]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 800048e:	2200      	movs	r2, #0
 8000490:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000492:	4b19      	ldr	r3, [pc, #100]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 8000494:	2200      	movs	r2, #0
 8000496:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000498:	4b17      	ldr	r3, [pc, #92]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 800049a:	223c      	movs	r2, #60	@ 0x3c
 800049c:	2100      	movs	r1, #0
 800049e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80004a0:	4b15      	ldr	r3, [pc, #84]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004a6:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 fe03 	bl	80020b4 <HAL_ADC_Init>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80004b2:	f000 fda8 	bl	8001006 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	4a11      	ldr	r2, [pc, #68]	@ (8000500 <MX_ADC1_Init+0xe4>)
 80004ba:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2201      	movs	r2, #1
 80004c0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c2:	1d3a      	adds	r2, r7, #4
 80004c4:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 80004c6:	0011      	movs	r1, r2
 80004c8:	0018      	movs	r0, r3
 80004ca:	f002 f837 	bl	800253c <HAL_ADC_ConfigChannel>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d001      	beq.n	80004d6 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80004d2:	f000 fd98 	bl	8001006 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000504 <MX_ADC1_Init+0xe8>)
 80004da:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004dc:	1d3a      	adds	r2, r7, #4
 80004de:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <MX_ADC1_Init+0xdc>)
 80004e0:	0011      	movs	r1, r2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f002 f82a 	bl	800253c <HAL_ADC_ConfigChannel>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80004ec:	f000 fd8b 	bl	8001006 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004f0:	46c0      	nop			@ (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b004      	add	sp, #16
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200000a8 	.word	0x200000a8
 80004fc:	40012400 	.word	0x40012400
 8000500:	2c000800 	.word	0x2c000800
 8000504:	30001000 	.word	0x30001000

08000508 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b093      	sub	sp, #76	@ 0x4c
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000510:	2334      	movs	r3, #52	@ 0x34
 8000512:	18fb      	adds	r3, r7, r3
 8000514:	0018      	movs	r0, r3
 8000516:	2314      	movs	r3, #20
 8000518:	001a      	movs	r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	f007 fb02 	bl	8007b24 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000520:	2414      	movs	r4, #20
 8000522:	193b      	adds	r3, r7, r4
 8000524:	0018      	movs	r0, r3
 8000526:	2320      	movs	r3, #32
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f007 fafa 	bl	8007b24 <memset>
  if(adcHandle->Instance==ADC1)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a34      	ldr	r2, [pc, #208]	@ (8000608 <HAL_ADC_MspInit+0x100>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d162      	bne.n	8000600 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800053a:	193b      	adds	r3, r7, r4
 800053c:	2220      	movs	r2, #32
 800053e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000540:	193b      	adds	r3, r7, r4
 8000542:	2200      	movs	r2, #0
 8000544:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000546:	193b      	adds	r3, r7, r4
 8000548:	0018      	movs	r0, r3
 800054a:	f005 fdd9 	bl	8006100 <HAL_RCCEx_PeriphCLKConfig>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 8000552:	f000 fd58 	bl	8001006 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000556:	4b2d      	ldr	r3, [pc, #180]	@ (800060c <HAL_ADC_MspInit+0x104>)
 8000558:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800055a:	4b2c      	ldr	r3, [pc, #176]	@ (800060c <HAL_ADC_MspInit+0x104>)
 800055c:	2180      	movs	r1, #128	@ 0x80
 800055e:	0349      	lsls	r1, r1, #13
 8000560:	430a      	orrs	r2, r1
 8000562:	641a      	str	r2, [r3, #64]	@ 0x40
 8000564:	4b29      	ldr	r3, [pc, #164]	@ (800060c <HAL_ADC_MspInit+0x104>)
 8000566:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000568:	2380      	movs	r3, #128	@ 0x80
 800056a:	035b      	lsls	r3, r3, #13
 800056c:	4013      	ands	r3, r2
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b26      	ldr	r3, [pc, #152]	@ (800060c <HAL_ADC_MspInit+0x104>)
 8000574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000576:	4b25      	ldr	r3, [pc, #148]	@ (800060c <HAL_ADC_MspInit+0x104>)
 8000578:	2104      	movs	r1, #4
 800057a:	430a      	orrs	r2, r1
 800057c:	635a      	str	r2, [r3, #52]	@ 0x34
 800057e:	4b23      	ldr	r3, [pc, #140]	@ (800060c <HAL_ADC_MspInit+0x104>)
 8000580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000582:	2204      	movs	r2, #4
 8000584:	4013      	ands	r3, r2
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN11
    PC5     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = JOYSTICK_X_Pin|JOYSTICK_Y_Pin;
 800058a:	2134      	movs	r1, #52	@ 0x34
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2230      	movs	r2, #48	@ 0x30
 8000590:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2203      	movs	r2, #3
 8000596:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000610 <HAL_ADC_MspInit+0x108>)
 80005a2:	0019      	movs	r1, r3
 80005a4:	0010      	movs	r0, r2
 80005a6:	f002 fe63 	bl	8003270 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000614 <HAL_ADC_MspInit+0x10c>)
 80005ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000618 <HAL_ADC_MspInit+0x110>)
 80005ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80005b0:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <HAL_ADC_MspInit+0x10c>)
 80005b2:	2205      	movs	r2, #5
 80005b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005b6:	4b17      	ldr	r3, [pc, #92]	@ (8000614 <HAL_ADC_MspInit+0x10c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005bc:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <HAL_ADC_MspInit+0x10c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005c2:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <HAL_ADC_MspInit+0x10c>)
 80005c4:	2280      	movs	r2, #128	@ 0x80
 80005c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005c8:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <HAL_ADC_MspInit+0x10c>)
 80005ca:	2280      	movs	r2, #128	@ 0x80
 80005cc:	0052      	lsls	r2, r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005d0:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <HAL_ADC_MspInit+0x10c>)
 80005d2:	2280      	movs	r2, #128	@ 0x80
 80005d4:	00d2      	lsls	r2, r2, #3
 80005d6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80005d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <HAL_ADC_MspInit+0x10c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005de:	4b0d      	ldr	r3, [pc, #52]	@ (8000614 <HAL_ADC_MspInit+0x10c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <HAL_ADC_MspInit+0x10c>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f002 fb68 	bl	8002cbc <HAL_DMA_Init>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 80005f0:	f000 fd09 	bl	8001006 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a07      	ldr	r2, [pc, #28]	@ (8000614 <HAL_ADC_MspInit+0x10c>)
 80005f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80005fa:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <HAL_ADC_MspInit+0x10c>)
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b013      	add	sp, #76	@ 0x4c
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	40012400 	.word	0x40012400
 800060c:	40021000 	.word	0x40021000
 8000610:	50000800 	.word	0x50000800
 8000614:	2000010c 	.word	0x2000010c
 8000618:	40020008 	.word	0x40020008

0800061c <app_main>:
static uint32_t uartTaskNextRun = 0;
static bool SW2_state = 0; // This needs to be passed between button and UART layers.


void app_main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	// Initialise and start timer.
	uint32_t ticks;
	buttonTaskNextRun = HAL_GetTick() + BUTTON_TASK_PERIOD_TICKS;
 8000622:	f001 fbd1 	bl	8001dc8 <HAL_GetTick>
 8000626:	0003      	movs	r3, r0
 8000628:	330a      	adds	r3, #10
 800062a:	001a      	movs	r2, r3
 800062c:	4b35      	ldr	r3, [pc, #212]	@ (8000704 <app_main+0xe8>)
 800062e:	601a      	str	r2, [r3, #0]
	blinkyTaskNextRun = HAL_GetTick() + BLINKY_TASK_PERIOD_TICKS;
 8000630:	f001 fbca 	bl	8001dc8 <HAL_GetTick>
 8000634:	0003      	movs	r3, r0
 8000636:	33f5      	adds	r3, #245	@ 0xf5
 8000638:	33ff      	adds	r3, #255	@ 0xff
 800063a:	001a      	movs	r2, r3
 800063c:	4b32      	ldr	r3, [pc, #200]	@ (8000708 <app_main+0xec>)
 800063e:	601a      	str	r2, [r3, #0]
	joystickTaskNextRun = HAL_GetTick() + JOYSTICK_TASK_PERIOD_TICKS;
 8000640:	f001 fbc2 	bl	8001dc8 <HAL_GetTick>
 8000644:	0003      	movs	r3, r0
 8000646:	33f5      	adds	r3, #245	@ 0xf5
 8000648:	33ff      	adds	r3, #255	@ 0xff
 800064a:	001a      	movs	r2, r3
 800064c:	4b2f      	ldr	r3, [pc, #188]	@ (800070c <app_main+0xf0>)
 800064e:	601a      	str	r2, [r3, #0]
	displayTaskNextRun = HAL_GetTick() + DISPLAY_TASK_PERIOD_TICKS;
 8000650:	f001 fbba 	bl	8001dc8 <HAL_GetTick>
 8000654:	0003      	movs	r3, r0
 8000656:	33fa      	adds	r3, #250	@ 0xfa
 8000658:	001a      	movs	r2, r3
 800065a:	4b2d      	ldr	r3, [pc, #180]	@ (8000710 <app_main+0xf4>)
 800065c:	601a      	str	r2, [r3, #0]

	// Initialise tasks.
	buttons_task_init();
 800065e:	f001 f8c9 	bl	80017f4 <buttons_task_init>
	display_task_init();
 8000662:	f001 f937 	bl	80018d4 <display_task_init>


	// Periodically execute tasks at the frequency defined above.
	while(1)
	{
		ticks = HAL_GetTick();
 8000666:	f001 fbaf 	bl	8001dc8 <HAL_GetTick>
 800066a:	0003      	movs	r3, r0
 800066c:	607b      	str	r3, [r7, #4]

		if(ticks > buttonTaskNextRun) {
 800066e:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <app_main+0xe8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	429a      	cmp	r2, r3
 8000676:	d90b      	bls.n	8000690 <app_main+0x74>
			SW2_state = buttons_task_execute();
 8000678:	f001 f8d4 	bl	8001824 <buttons_task_execute>
 800067c:	0003      	movs	r3, r0
 800067e:	001a      	movs	r2, r3
 8000680:	4b24      	ldr	r3, [pc, #144]	@ (8000714 <app_main+0xf8>)
 8000682:	701a      	strb	r2, [r3, #0]
			buttonTaskNextRun += BUTTON_TASK_PERIOD_TICKS;
 8000684:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <app_main+0xe8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	330a      	adds	r3, #10
 800068a:	001a      	movs	r2, r3
 800068c:	4b1d      	ldr	r3, [pc, #116]	@ (8000704 <app_main+0xe8>)
 800068e:	601a      	str	r2, [r3, #0]
		}

		if (ticks > blinkyTaskNextRun) {
 8000690:	4b1d      	ldr	r3, [pc, #116]	@ (8000708 <app_main+0xec>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	429a      	cmp	r2, r3
 8000698:	d908      	bls.n	80006ac <app_main+0x90>
			blinky_task_execute();
 800069a:	f001 f8a3 	bl	80017e4 <blinky_task_execute>
			blinkyTaskNextRun += BLINKY_TASK_PERIOD_TICKS;
 800069e:	4b1a      	ldr	r3, [pc, #104]	@ (8000708 <app_main+0xec>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	33f5      	adds	r3, #245	@ 0xf5
 80006a4:	33ff      	adds	r3, #255	@ 0xff
 80006a6:	001a      	movs	r2, r3
 80006a8:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <app_main+0xec>)
 80006aa:	601a      	str	r2, [r3, #0]
		}

		if (ticks > joystickTaskNextRun) {
 80006ac:	4b17      	ldr	r3, [pc, #92]	@ (800070c <app_main+0xf0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d908      	bls.n	80006c8 <app_main+0xac>
			joystick_task_execute();
 80006b6:	f001 f969 	bl	800198c <joystick_task_execute>
			joystickTaskNextRun += JOYSTICK_TASK_PERIOD_TICKS;
 80006ba:	4b14      	ldr	r3, [pc, #80]	@ (800070c <app_main+0xf0>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	33f5      	adds	r3, #245	@ 0xf5
 80006c0:	33ff      	adds	r3, #255	@ 0xff
 80006c2:	001a      	movs	r2, r3
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <app_main+0xf0>)
 80006c6:	601a      	str	r2, [r3, #0]
		}

		if (ticks > displayTaskNextRun) {
 80006c8:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <app_main+0xf4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d907      	bls.n	80006e2 <app_main+0xc6>
			display_task_execute();
 80006d2:	f001 f90b 	bl	80018ec <display_task_execute>
			displayTaskNextRun += DISPLAY_TASK_PERIOD_TICKS;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <app_main+0xf4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	33fa      	adds	r3, #250	@ 0xfa
 80006dc:	001a      	movs	r2, r3
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <app_main+0xf4>)
 80006e0:	601a      	str	r2, [r3, #0]
		}

		if (ticks > uartTaskNextRun) {
 80006e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <app_main+0xfc>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d9bc      	bls.n	8000666 <app_main+0x4a>
			uart_task_execute(SW2_state);
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <app_main+0xf8>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	0018      	movs	r0, r3
 80006f2:	f001 f952 	bl	800199a <uart_task_execute>
			uartTaskNextRun += UART_TASK_PERIOD_TICKS;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <app_main+0xfc>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	33fa      	adds	r3, #250	@ 0xfa
 80006fc:	001a      	movs	r2, r3
 80006fe:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <app_main+0xfc>)
 8000700:	601a      	str	r2, [r3, #0]
		ticks = HAL_GetTick();
 8000702:	e7b0      	b.n	8000666 <app_main+0x4a>
 8000704:	20000168 	.word	0x20000168
 8000708:	2000016c 	.word	0x2000016c
 800070c:	20000170 	.word	0x20000170
 8000710:	20000174 	.word	0x20000174
 8000714:	2000017c 	.word	0x2000017c
 8000718:	20000178 	.word	0x20000178

0800071c <toggle_led>:
 */

#include "blinky.h"
#include "gpio.h"

void toggle_led(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(NUCLEO_LD1_GPIO_Port, NUCLEO_LD1_Pin);
 8000720:	23a0      	movs	r3, #160	@ 0xa0
 8000722:	05db      	lsls	r3, r3, #23
 8000724:	2120      	movs	r1, #32
 8000726:	0018      	movs	r0, r3
 8000728:	f002 ff4e 	bl	80035c8 <HAL_GPIO_TogglePin>
}
 800072c:	46c0      	nop			@ (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <buttons_init>:
};

// *******************************************************
// buttons_init: Initialise the variables associated with the set of buttons.
void buttons_init (void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++)
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	e029      	b.n	8000794 <buttons_init+0x60>
	{
		buttons[i].state = buttons[i].normalState;
 8000740:	4918      	ldr	r1, [pc, #96]	@ (80007a4 <buttons_init+0x70>)
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	0013      	movs	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	189b      	adds	r3, r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	18cb      	adds	r3, r1, r3
 800074e:	3306      	adds	r3, #6
 8000750:	7818      	ldrb	r0, [r3, #0]
 8000752:	4914      	ldr	r1, [pc, #80]	@ (80007a4 <buttons_init+0x70>)
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	0013      	movs	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	189b      	adds	r3, r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	18cb      	adds	r3, r1, r3
 8000760:	3307      	adds	r3, #7
 8000762:	1c02      	adds	r2, r0, #0
 8000764:	701a      	strb	r2, [r3, #0]
		buttons[i].newStateCount = 0;
 8000766:	490f      	ldr	r1, [pc, #60]	@ (80007a4 <buttons_init+0x70>)
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	0013      	movs	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	189b      	adds	r3, r3, r2
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	18cb      	adds	r3, r1, r3
 8000774:	3308      	adds	r3, #8
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
		buttons[i].hasChanged = false;
 800077a:	490a      	ldr	r1, [pc, #40]	@ (80007a4 <buttons_init+0x70>)
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	0013      	movs	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	189b      	adds	r3, r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	18cb      	adds	r3, r1, r3
 8000788:	3309      	adds	r3, #9
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BUTTONS; i++)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	3301      	adds	r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b03      	cmp	r3, #3
 8000798:	ddd2      	ble.n	8000740 <buttons_init+0xc>
	}
}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	46c0      	nop			@ (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b002      	add	sp, #8
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000000 	.word	0x20000000

080007a8 <buttons_update>:
// Debouncing algorithm: A finite state machine (FSM) is associated with each button.
// A state change can be declared only after NUM_BUT_POLLS consecutive polls have
// read the pin in the opposite condition, before the state changes and
// a flag is set. Set NUM_BUT_POLLS according to the polling rate.
void buttons_update (void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
	static uint8_t dutyCycle = 0;
	// Iterate through the buttons, updating button variables as required
	for (int i = 0; i < NUM_BUTTONS; i++)
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	e06f      	b.n	8000894 <buttons_update+0xec>
	{
		// Read the pin value
		GPIO_PinState rawState = HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin);
 80007b4:	493b      	ldr	r1, [pc, #236]	@ (80008a4 <buttons_update+0xfc>)
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	0013      	movs	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	189b      	adds	r3, r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	5858      	ldr	r0, [r3, r1]
 80007c2:	4938      	ldr	r1, [pc, #224]	@ (80008a4 <buttons_update+0xfc>)
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	0013      	movs	r3, r2
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	189b      	adds	r3, r3, r2
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	18cb      	adds	r3, r1, r3
 80007d0:	3304      	adds	r3, #4
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	1cfc      	adds	r4, r7, #3
 80007d6:	0019      	movs	r1, r3
 80007d8:	f002 febc 	bl	8003554 <HAL_GPIO_ReadPin>
 80007dc:	0003      	movs	r3, r0
 80007de:	7023      	strb	r3, [r4, #0]

		// If reading is different from last confirmed state, increment counter
        if (rawState != buttons[i].state)
 80007e0:	4930      	ldr	r1, [pc, #192]	@ (80008a4 <buttons_update+0xfc>)
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	0013      	movs	r3, r2
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	189b      	adds	r3, r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	18cb      	adds	r3, r1, r3
 80007ee:	3307      	adds	r3, #7
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	1cfa      	adds	r2, r7, #3
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d03f      	beq.n	800087a <buttons_update+0xd2>
        {
        	buttons[i].newStateCount++;
 80007fa:	492a      	ldr	r1, [pc, #168]	@ (80008a4 <buttons_update+0xfc>)
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	0013      	movs	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	189b      	adds	r3, r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	18cb      	adds	r3, r1, r3
 8000808:	3308      	adds	r3, #8
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	3301      	adds	r3, #1
 800080e:	b2d8      	uxtb	r0, r3
 8000810:	4924      	ldr	r1, [pc, #144]	@ (80008a4 <buttons_update+0xfc>)
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	0013      	movs	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	189b      	adds	r3, r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	18cb      	adds	r3, r1, r3
 800081e:	3308      	adds	r3, #8
 8000820:	1c02      	adds	r2, r0, #0
 8000822:	701a      	strb	r2, [r3, #0]

        	// If count exceeds poll count, confirm change of state
        	if (buttons[i].newStateCount >= NUM_BUT_POLLS)
 8000824:	491f      	ldr	r1, [pc, #124]	@ (80008a4 <buttons_update+0xfc>)
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	0013      	movs	r3, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	189b      	adds	r3, r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	18cb      	adds	r3, r1, r3
 8000832:	3308      	adds	r3, #8
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b02      	cmp	r3, #2
 8000838:	d929      	bls.n	800088e <buttons_update+0xe6>
        	{
        		buttons[i].state = rawState;
 800083a:	491a      	ldr	r1, [pc, #104]	@ (80008a4 <buttons_update+0xfc>)
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	0013      	movs	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	189b      	adds	r3, r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	18cb      	adds	r3, r1, r3
 8000848:	3307      	adds	r3, #7
 800084a:	1cfa      	adds	r2, r7, #3
 800084c:	7812      	ldrb	r2, [r2, #0]
 800084e:	701a      	strb	r2, [r3, #0]
        		buttons[i].hasChanged = true;	// Reset by call to buttons_checkButton()
 8000850:	4914      	ldr	r1, [pc, #80]	@ (80008a4 <buttons_update+0xfc>)
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	0013      	movs	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	189b      	adds	r3, r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	18cb      	adds	r3, r1, r3
 800085e:	3309      	adds	r3, #9
 8000860:	2201      	movs	r2, #1
 8000862:	701a      	strb	r2, [r3, #0]
        		buttons[i].newStateCount = 0;
 8000864:	490f      	ldr	r1, [pc, #60]	@ (80008a4 <buttons_update+0xfc>)
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	0013      	movs	r3, r2
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	189b      	adds	r3, r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	18cb      	adds	r3, r1, r3
 8000872:	3308      	adds	r3, #8
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
 8000878:	e009      	b.n	800088e <buttons_update+0xe6>
        	}
        }
        else
        {
        	buttons[i].newStateCount = 0;
 800087a:	490a      	ldr	r1, [pc, #40]	@ (80008a4 <buttons_update+0xfc>)
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	0013      	movs	r3, r2
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	189b      	adds	r3, r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	18cb      	adds	r3, r1, r3
 8000888:	3308      	adds	r3, #8
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BUTTONS; i++)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3301      	adds	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b03      	cmp	r3, #3
 8000898:	dd8c      	ble.n	80007b4 <buttons_update+0xc>
        }
	}
}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b003      	add	sp, #12
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	20000000 	.word	0x20000000

080008a8 <buttons_checkButton>:
// *******************************************************
// buttons_checkButton: Function returns the new button logical state if the button
// logical state (PUSHED or RELEASED) has changed since the last call,
// otherwise returns NO_CHANGE.
buttonState_t buttons_checkButton (buttonName_t butName)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	0002      	movs	r2, r0
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	701a      	strb	r2, [r3, #0]
	if (buttons[butName].hasChanged)
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	781a      	ldrb	r2, [r3, #0]
 80008b8:	4919      	ldr	r1, [pc, #100]	@ (8000920 <buttons_checkButton+0x78>)
 80008ba:	0013      	movs	r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	189b      	adds	r3, r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	18cb      	adds	r3, r1, r3
 80008c4:	3309      	adds	r3, #9
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d024      	beq.n	8000916 <buttons_checkButton+0x6e>
	{
		buttons[butName].hasChanged = false;
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	781a      	ldrb	r2, [r3, #0]
 80008d0:	4913      	ldr	r1, [pc, #76]	@ (8000920 <buttons_checkButton+0x78>)
 80008d2:	0013      	movs	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	189b      	adds	r3, r3, r2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	18cb      	adds	r3, r1, r3
 80008dc:	3309      	adds	r3, #9
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
		if (buttons[butName].state == buttons[butName].normalState)
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	490e      	ldr	r1, [pc, #56]	@ (8000920 <buttons_checkButton+0x78>)
 80008e8:	0013      	movs	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	189b      	adds	r3, r3, r2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	18cb      	adds	r3, r1, r3
 80008f2:	3307      	adds	r3, #7
 80008f4:	7819      	ldrb	r1, [r3, #0]
 80008f6:	1dfb      	adds	r3, r7, #7
 80008f8:	781a      	ldrb	r2, [r3, #0]
 80008fa:	4809      	ldr	r0, [pc, #36]	@ (8000920 <buttons_checkButton+0x78>)
 80008fc:	0013      	movs	r3, r2
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	189b      	adds	r3, r3, r2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	18c3      	adds	r3, r0, r3
 8000906:	3306      	adds	r3, #6
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	4299      	cmp	r1, r3
 800090c:	d101      	bne.n	8000912 <buttons_checkButton+0x6a>
			return RELEASED;
 800090e:	2300      	movs	r3, #0
 8000910:	e002      	b.n	8000918 <buttons_checkButton+0x70>
		else
			return PUSHED;
 8000912:	2301      	movs	r3, #1
 8000914:	e000      	b.n	8000918 <buttons_checkButton+0x70>
	}
	return NO_CHANGE;
 8000916:	2302      	movs	r3, #2
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	b002      	add	sp, #8
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000000 	.word	0x20000000

08000924 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <MX_DMA_Init+0x48>)
 800092c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800092e:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <MX_DMA_Init+0x48>)
 8000930:	2101      	movs	r1, #1
 8000932:	430a      	orrs	r2, r1
 8000934:	639a      	str	r2, [r3, #56]	@ 0x38
 8000936:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <MX_DMA_Init+0x48>)
 8000938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800093a:	2201      	movs	r2, #1
 800093c:	4013      	ands	r3, r2
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	2009      	movs	r0, #9
 8000948:	f002 f986 	bl	8002c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800094c:	2009      	movs	r0, #9
 800094e:	f002 f998 	bl	8002c82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	200a      	movs	r0, #10
 8000958:	f002 f97e 	bl	8002c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800095c:	200a      	movs	r0, #10
 800095e:	f002 f990 	bl	8002c82 <HAL_NVIC_EnableIRQ>

}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b002      	add	sp, #8
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	40021000 	.word	0x40021000

08000970 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b08b      	sub	sp, #44	@ 0x2c
 8000974:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	2414      	movs	r4, #20
 8000978:	193b      	adds	r3, r7, r4
 800097a:	0018      	movs	r0, r3
 800097c:	2314      	movs	r3, #20
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f007 f8cf 	bl	8007b24 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b79      	ldr	r3, [pc, #484]	@ (8000b6c <MX_GPIO_Init+0x1fc>)
 8000988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800098a:	4b78      	ldr	r3, [pc, #480]	@ (8000b6c <MX_GPIO_Init+0x1fc>)
 800098c:	2104      	movs	r1, #4
 800098e:	430a      	orrs	r2, r1
 8000990:	635a      	str	r2, [r3, #52]	@ 0x34
 8000992:	4b76      	ldr	r3, [pc, #472]	@ (8000b6c <MX_GPIO_Init+0x1fc>)
 8000994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000996:	2204      	movs	r2, #4
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800099e:	4b73      	ldr	r3, [pc, #460]	@ (8000b6c <MX_GPIO_Init+0x1fc>)
 80009a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009a2:	4b72      	ldr	r3, [pc, #456]	@ (8000b6c <MX_GPIO_Init+0x1fc>)
 80009a4:	2120      	movs	r1, #32
 80009a6:	430a      	orrs	r2, r1
 80009a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009aa:	4b70      	ldr	r3, [pc, #448]	@ (8000b6c <MX_GPIO_Init+0x1fc>)
 80009ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ae:	2220      	movs	r2, #32
 80009b0:	4013      	ands	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b6d      	ldr	r3, [pc, #436]	@ (8000b6c <MX_GPIO_Init+0x1fc>)
 80009b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ba:	4b6c      	ldr	r3, [pc, #432]	@ (8000b6c <MX_GPIO_Init+0x1fc>)
 80009bc:	2101      	movs	r1, #1
 80009be:	430a      	orrs	r2, r1
 80009c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80009c2:	4b6a      	ldr	r3, [pc, #424]	@ (8000b6c <MX_GPIO_Init+0x1fc>)
 80009c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009c6:	2201      	movs	r2, #1
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	4b67      	ldr	r3, [pc, #412]	@ (8000b6c <MX_GPIO_Init+0x1fc>)
 80009d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009d2:	4b66      	ldr	r3, [pc, #408]	@ (8000b6c <MX_GPIO_Init+0x1fc>)
 80009d4:	2102      	movs	r1, #2
 80009d6:	430a      	orrs	r2, r1
 80009d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009da:	4b64      	ldr	r3, [pc, #400]	@ (8000b6c <MX_GPIO_Init+0x1fc>)
 80009dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009de:	2202      	movs	r2, #2
 80009e0:	4013      	ands	r3, r2
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e6:	4b61      	ldr	r3, [pc, #388]	@ (8000b6c <MX_GPIO_Init+0x1fc>)
 80009e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ea:	4b60      	ldr	r3, [pc, #384]	@ (8000b6c <MX_GPIO_Init+0x1fc>)
 80009ec:	2108      	movs	r1, #8
 80009ee:	430a      	orrs	r2, r1
 80009f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80009f2:	4b5e      	ldr	r3, [pc, #376]	@ (8000b6c <MX_GPIO_Init+0x1fc>)
 80009f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009f6:	2208      	movs	r2, #8
 80009f8:	4013      	ands	r3, r2
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB_DS4_Pin|RGB_DS2_Pin, GPIO_PIN_SET);
 80009fe:	495c      	ldr	r1, [pc, #368]	@ (8000b70 <MX_GPIO_Init+0x200>)
 8000a00:	4b5c      	ldr	r3, [pc, #368]	@ (8000b74 <MX_GPIO_Init+0x204>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	0018      	movs	r0, r3
 8000a06:	f002 fdc2 	bl	800358e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_DS1_GPIO_Port, RGB_DS1_Pin, GPIO_PIN_SET);
 8000a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8000b78 <MX_GPIO_Init+0x208>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2108      	movs	r1, #8
 8000a10:	0018      	movs	r0, r3
 8000a12:	f002 fdbc 	bl	800358e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NUCLEO_LD1_GPIO_Port, NUCLEO_LD1_Pin, GPIO_PIN_RESET);
 8000a16:	23a0      	movs	r3, #160	@ 0xa0
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f002 fdb5 	bl	800358e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NUCLEO_LD2_GPIO_Port, NUCLEO_LD2_Pin, GPIO_PIN_RESET);
 8000a24:	2380      	movs	r3, #128	@ 0x80
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	4852      	ldr	r0, [pc, #328]	@ (8000b74 <MX_GPIO_Init+0x204>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	f002 fdae 	bl	800358e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin, GPIO_PIN_RESET);
 8000a32:	4b52      	ldr	r3, [pc, #328]	@ (8000b7c <MX_GPIO_Init+0x20c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	211c      	movs	r1, #28
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f002 fda8 	bl	800358e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	4a4f      	ldr	r2, [pc, #316]	@ (8000b80 <MX_GPIO_Init+0x210>)
 8000a42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	2200      	movs	r2, #0
 8000a48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	4a48      	ldr	r2, [pc, #288]	@ (8000b74 <MX_GPIO_Init+0x204>)
 8000a54:	0019      	movs	r1, r3
 8000a56:	0010      	movs	r0, r2
 8000a58:	f002 fc0a 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RGB_DS4_Pin|RGB_DS2_Pin|NUCLEO_LD2_Pin;
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	4a49      	ldr	r2, [pc, #292]	@ (8000b84 <MX_GPIO_Init+0x214>)
 8000a60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2201      	movs	r2, #1
 8000a66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	4a3f      	ldr	r2, [pc, #252]	@ (8000b74 <MX_GPIO_Init+0x204>)
 8000a78:	0019      	movs	r1, r3
 8000a7a:	0010      	movs	r0, r2
 8000a7c:	f002 fbf8 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW4_Pin;
 8000a80:	0021      	movs	r1, r4
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2280      	movs	r2, #128	@ 0x80
 8000a86:	0192      	lsls	r2, r2, #6
 8000a88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8a:	000c      	movs	r4, r1
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2201      	movs	r2, #1
 8000a96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW4_GPIO_Port, &GPIO_InitStruct);
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	4a36      	ldr	r2, [pc, #216]	@ (8000b74 <MX_GPIO_Init+0x204>)
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	0010      	movs	r0, r2
 8000aa0:	f002 fbe6 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RGB_DS1_Pin;
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	2208      	movs	r2, #8
 8000aa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	2201      	movs	r2, #1
 8000aae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RGB_DS1_GPIO_Port, &GPIO_InitStruct);
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	4a2e      	ldr	r2, [pc, #184]	@ (8000b78 <MX_GPIO_Init+0x208>)
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	0010      	movs	r0, r2
 8000ac4:	f002 fbd4 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUCLEO_LD1_Pin;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2220      	movs	r2, #32
 8000acc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NUCLEO_LD1_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	193a      	adds	r2, r7, r4
 8000ae2:	23a0      	movs	r3, #160	@ 0xa0
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f002 fbc1 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOYSTICK_CLICK_Pin;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2202      	movs	r2, #2
 8000af2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2200      	movs	r2, #0
 8000af8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	2202      	movs	r2, #2
 8000afe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(JOYSTICK_CLICK_GPIO_Port, &GPIO_InitStruct);
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	4a21      	ldr	r2, [pc, #132]	@ (8000b88 <MX_GPIO_Init+0x218>)
 8000b04:	0019      	movs	r1, r3
 8000b06:	0010      	movs	r0, r2
 8000b08:	f002 fbb2 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin;
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	221c      	movs	r2, #28
 8000b10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2201      	movs	r2, #1
 8000b16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	4a15      	ldr	r2, [pc, #84]	@ (8000b7c <MX_GPIO_Init+0x20c>)
 8000b28:	0019      	movs	r1, r3
 8000b2a:	0010      	movs	r0, r2
 8000b2c:	f002 fba0 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8000b30:	0021      	movs	r1, r4
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2280      	movs	r2, #128	@ 0x80
 8000b36:	00d2      	lsls	r2, r2, #3
 8000b38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	4a13      	ldr	r2, [pc, #76]	@ (8000b8c <MX_GPIO_Init+0x21c>)
 8000b3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2202      	movs	r2, #2
 8000b44:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <MX_GPIO_Init+0x204>)
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	0010      	movs	r0, r2
 8000b4e:	f002 fb8f 	bl	8003270 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	2007      	movs	r0, #7
 8000b58:	f002 f87e 	bl	8002c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000b5c:	2007      	movs	r0, #7
 8000b5e:	f002 f890 	bl	8002c82 <HAL_NVIC_EnableIRQ>

}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b00b      	add	sp, #44	@ 0x2c
 8000b68:	bd90      	pop	{r4, r7, pc}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	00001004 	.word	0x00001004
 8000b74:	50000800 	.word	0x50000800
 8000b78:	50001400 	.word	0x50001400
 8000b7c:	50000c00 	.word	0x50000c00
 8000b80:	00000802 	.word	0x00000802
 8000b84:	00001204 	.word	0x00001204
 8000b88:	50000400 	.word	0x50000400
 8000b8c:	10110000 	.word	0x10110000

08000b90 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b94:	4b1b      	ldr	r3, [pc, #108]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000b96:	4a1c      	ldr	r2, [pc, #112]	@ (8000c08 <MX_I2C1_Init+0x78>)
 8000b98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c0c <MX_I2C1_Init+0x7c>)
 8000b9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba0:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba6:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bac:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bb2:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bca:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f002 fd55 	bl	800367c <HAL_I2C_Init>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d001      	beq.n	8000bda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bd6:	f000 fa16 	bl	8001006 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bda:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000bdc:	2100      	movs	r1, #0
 8000bde:	0018      	movs	r0, r3
 8000be0:	f004 fe2a 	bl	8005838 <HAL_I2CEx_ConfigAnalogFilter>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d001      	beq.n	8000bec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000be8:	f000 fa0d 	bl	8001006 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bec:	4b05      	ldr	r3, [pc, #20]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f004 fe6d 	bl	80058d0 <HAL_I2CEx_ConfigDigitalFilter>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bfa:	f000 fa04 	bl	8001006 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000180 	.word	0x20000180
 8000c08:	40005400 	.word	0x40005400
 8000c0c:	00402d41 	.word	0x00402d41

08000c10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b093      	sub	sp, #76	@ 0x4c
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	2334      	movs	r3, #52	@ 0x34
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	2314      	movs	r3, #20
 8000c20:	001a      	movs	r2, r3
 8000c22:	2100      	movs	r1, #0
 8000c24:	f006 ff7e 	bl	8007b24 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c28:	2414      	movs	r4, #20
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	2320      	movs	r3, #32
 8000c30:	001a      	movs	r2, r3
 8000c32:	2100      	movs	r1, #0
 8000c34:	f006 ff76 	bl	8007b24 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a3b      	ldr	r2, [pc, #236]	@ (8000d2c <HAL_I2C_MspInit+0x11c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d16f      	bne.n	8000d22 <HAL_I2C_MspInit+0x112>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	2202      	movs	r2, #2
 8000c46:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	0018      	movs	r0, r3
 8000c52:	f005 fa55 	bl	8006100 <HAL_RCCEx_PeriphCLKConfig>
 8000c56:	1e03      	subs	r3, r0, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c5a:	f000 f9d4 	bl	8001006 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	4b34      	ldr	r3, [pc, #208]	@ (8000d30 <HAL_I2C_MspInit+0x120>)
 8000c60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c62:	4b33      	ldr	r3, [pc, #204]	@ (8000d30 <HAL_I2C_MspInit+0x120>)
 8000c64:	2102      	movs	r1, #2
 8000c66:	430a      	orrs	r2, r1
 8000c68:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c6a:	4b31      	ldr	r3, [pc, #196]	@ (8000d30 <HAL_I2C_MspInit+0x120>)
 8000c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c6e:	2202      	movs	r2, #2
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c76:	2134      	movs	r1, #52	@ 0x34
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	22c0      	movs	r2, #192	@ 0xc0
 8000c7c:	0092      	lsls	r2, r2, #2
 8000c7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2212      	movs	r2, #18
 8000c84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2206      	movs	r2, #6
 8000c96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	4a26      	ldr	r2, [pc, #152]	@ (8000d34 <HAL_I2C_MspInit+0x124>)
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	0010      	movs	r0, r2
 8000ca0:	f002 fae6 	bl	8003270 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca4:	4b22      	ldr	r3, [pc, #136]	@ (8000d30 <HAL_I2C_MspInit+0x120>)
 8000ca6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ca8:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <HAL_I2C_MspInit+0x120>)
 8000caa:	2180      	movs	r1, #128	@ 0x80
 8000cac:	0389      	lsls	r1, r1, #14
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <HAL_I2C_MspInit+0x120>)
 8000cb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cb6:	2380      	movs	r3, #128	@ 0x80
 8000cb8:	039b      	lsls	r3, r3, #14
 8000cba:	4013      	ands	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <HAL_I2C_MspInit+0x128>)
 8000cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d3c <HAL_I2C_MspInit+0x12c>)
 8000cc4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <HAL_I2C_MspInit+0x128>)
 8000cc8:	220b      	movs	r2, #11
 8000cca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <HAL_I2C_MspInit+0x128>)
 8000cce:	2210      	movs	r2, #16
 8000cd0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <HAL_I2C_MspInit+0x128>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <HAL_I2C_MspInit+0x128>)
 8000cda:	2280      	movs	r2, #128	@ 0x80
 8000cdc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cde:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <HAL_I2C_MspInit+0x128>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <HAL_I2C_MspInit+0x128>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000cea:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <HAL_I2C_MspInit+0x128>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <HAL_I2C_MspInit+0x128>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <HAL_I2C_MspInit+0x128>)
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f001 ffdf 	bl	8002cbc <HAL_DMA_Init>
 8000cfe:	1e03      	subs	r3, r0, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_I2C_MspInit+0xf6>
    {
      Error_Handler();
 8000d02:	f000 f980 	bl	8001006 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a0b      	ldr	r2, [pc, #44]	@ (8000d38 <HAL_I2C_MspInit+0x128>)
 8000d0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <HAL_I2C_MspInit+0x128>)
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	2017      	movs	r0, #23
 8000d18:	f001 ff9e 	bl	8002c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000d1c:	2017      	movs	r0, #23
 8000d1e:	f001 ffb0 	bl	8002c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b013      	add	sp, #76	@ 0x4c
 8000d28:	bd90      	pop	{r4, r7, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	40005400 	.word	0x40005400
 8000d30:	40021000 	.word	0x40021000
 8000d34:	50000400 	.word	0x50000400
 8000d38:	200001d4 	.word	0x200001d4
 8000d3c:	4002001c 	.word	0x4002001c

08000d40 <update_joystick>:

#define MIDDLE_ADC_VALUE 2047

static uint16_t raw_adc[2];

void update_joystick(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	// Update the ADC values of the JoyStick X and Y axis inputs
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)raw_adc, 2);
 8000d44:	4904      	ldr	r1, [pc, #16]	@ (8000d58 <update_joystick+0x18>)
 8000d46:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <update_joystick+0x1c>)
 8000d48:	2202      	movs	r2, #2
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f001 fb58 	bl	8002400 <HAL_ADC_Start_DMA>
}
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	20000230 	.word	0x20000230
 8000d5c:	200000a8 	.word	0x200000a8

08000d60 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	// No callback required as of yet
}
 8000d68:	46c0      	nop			@ (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b002      	add	sp, #8
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <get_percentage_coordinates>:
uint16_t* get_raw_values(void) {
	// Return raw values (between 0 and 4096) of the analog inputs of the joysticks
	return raw_adc;
}

struct percentage_coords get_percentage_coordinates(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
	// Convert raw values to percentage values, stored in percentage_coords struct
	struct percentage_coords output;
	output.x = (((int16_t)raw_adc[1] - MIDDLE_ADC_VALUE) * 100) / MIDDLE_ADC_VALUE;
 8000d76:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <get_percentage_coordinates+0x74>)
 8000d78:	885b      	ldrh	r3, [r3, #2]
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8000de8 <get_percentage_coordinates+0x78>)
 8000d7e:	4694      	mov	ip, r2
 8000d80:	4463      	add	r3, ip
 8000d82:	2264      	movs	r2, #100	@ 0x64
 8000d84:	4353      	muls	r3, r2
 8000d86:	4919      	ldr	r1, [pc, #100]	@ (8000dec <get_percentage_coordinates+0x7c>)
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff fa5b 	bl	8000244 <__divsi3>
 8000d8e:	0003      	movs	r3, r0
 8000d90:	b25a      	sxtb	r2, r3
 8000d92:	003b      	movs	r3, r7
 8000d94:	701a      	strb	r2, [r3, #0]
	output.y = (((int16_t)raw_adc[0] - MIDDLE_ADC_VALUE) * 100) / MIDDLE_ADC_VALUE;
 8000d96:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <get_percentage_coordinates+0x74>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	b21b      	sxth	r3, r3
 8000d9c:	4a12      	ldr	r2, [pc, #72]	@ (8000de8 <get_percentage_coordinates+0x78>)
 8000d9e:	4694      	mov	ip, r2
 8000da0:	4463      	add	r3, ip
 8000da2:	2264      	movs	r2, #100	@ 0x64
 8000da4:	4353      	muls	r3, r2
 8000da6:	4911      	ldr	r1, [pc, #68]	@ (8000dec <get_percentage_coordinates+0x7c>)
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff fa4b 	bl	8000244 <__divsi3>
 8000dae:	0003      	movs	r3, r0
 8000db0:	b25a      	sxtb	r2, r3
 8000db2:	003b      	movs	r3, r7
 8000db4:	705a      	strb	r2, [r3, #1]

	return output;
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	003a      	movs	r2, r7
 8000dba:	8812      	ldrh	r2, [r2, #0]
 8000dbc:	801a      	strh	r2, [r3, #0]
 8000dbe:	1d3a      	adds	r2, r7, #4
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	7811      	ldrb	r1, [r2, #0]
 8000dc4:	20ff      	movs	r0, #255	@ 0xff
 8000dc6:	4001      	ands	r1, r0
 8000dc8:	20ff      	movs	r0, #255	@ 0xff
 8000dca:	4383      	bics	r3, r0
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	7852      	ldrb	r2, [r2, #1]
 8000dd0:	21ff      	movs	r1, #255	@ 0xff
 8000dd2:	400a      	ands	r2, r1
 8000dd4:	0212      	lsls	r2, r2, #8
 8000dd6:	4906      	ldr	r1, [pc, #24]	@ (8000df0 <get_percentage_coordinates+0x80>)
 8000dd8:	400b      	ands	r3, r1
 8000dda:	4313      	orrs	r3, r2
}
 8000ddc:	1c18      	adds	r0, r3, #0
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b002      	add	sp, #8
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000230 	.word	0x20000230
 8000de8:	fffff801 	.word	0xfffff801
 8000dec:	000007ff 	.word	0x000007ff
 8000df0:	ffff00ff 	.word	0xffff00ff

08000df4 <get_coordinate_strings>:

struct coord_strings get_coordinate_strings(void) {
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b08f      	sub	sp, #60	@ 0x3c
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	6078      	str	r0, [r7, #4]
	// Get a coord_strings struct, containing two lines with string descriptors of the joystick position
	struct percentage_coords percentages;
	percentages = get_percentage_coordinates();
 8000dfc:	f7ff ffb8 	bl	8000d70 <get_percentage_coordinates>
 8000e00:	1c03      	adds	r3, r0, #0
 8000e02:	1c1a      	adds	r2, r3, #0
 8000e04:	2124      	movs	r1, #36	@ 0x24
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	801a      	strh	r2, [r3, #0]

	const char *x_direction;
	const char *y_direction;

	if (percentages.x > 10) {
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	2b0a      	cmp	r3, #10
 8000e12:	dd02      	ble.n	8000e1a <get_coordinate_strings+0x26>
	    x_direction = "Left";
 8000e14:	4b3b      	ldr	r3, [pc, #236]	@ (8000f04 <get_coordinate_strings+0x110>)
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e18:	e00a      	b.n	8000e30 <get_coordinate_strings+0x3c>
	} else if (percentages.x < -10) {
 8000e1a:	2324      	movs	r3, #36	@ 0x24
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	330a      	adds	r3, #10
 8000e24:	da02      	bge.n	8000e2c <get_coordinate_strings+0x38>
	    x_direction = "Right";
 8000e26:	4b38      	ldr	r3, [pc, #224]	@ (8000f08 <get_coordinate_strings+0x114>)
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e2a:	e001      	b.n	8000e30 <get_coordinate_strings+0x3c>
	} else {
	    x_direction = "Rest";
 8000e2c:	4b37      	ldr	r3, [pc, #220]	@ (8000f0c <get_coordinate_strings+0x118>)
 8000e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	if (percentages.y > 10) {
 8000e30:	2324      	movs	r3, #36	@ 0x24
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	785b      	ldrb	r3, [r3, #1]
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	2b0a      	cmp	r3, #10
 8000e3a:	dd02      	ble.n	8000e42 <get_coordinate_strings+0x4e>
	    y_direction = "Down";
 8000e3c:	4b34      	ldr	r3, [pc, #208]	@ (8000f10 <get_coordinate_strings+0x11c>)
 8000e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e40:	e00a      	b.n	8000e58 <get_coordinate_strings+0x64>
	} else if (percentages.y < -10) {
 8000e42:	2324      	movs	r3, #36	@ 0x24
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	785b      	ldrb	r3, [r3, #1]
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	330a      	adds	r3, #10
 8000e4c:	da02      	bge.n	8000e54 <get_coordinate_strings+0x60>
	    y_direction = "Up";
 8000e4e:	4b31      	ldr	r3, [pc, #196]	@ (8000f14 <get_coordinate_strings+0x120>)
 8000e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e52:	e001      	b.n	8000e58 <get_coordinate_strings+0x64>
	} else {
	    y_direction = "Rest";
 8000e54:	4b2d      	ldr	r3, [pc, #180]	@ (8000f0c <get_coordinate_strings+0x118>)
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	struct coord_strings output;

	if (strcmp(y_direction, "Rest") == 0) {
 8000e58:	4a2c      	ldr	r2, [pc, #176]	@ (8000f0c <get_coordinate_strings+0x118>)
 8000e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e5c:	0011      	movs	r1, r2
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f7ff f952 	bl	8000108 <strcmp>
 8000e64:	1e03      	subs	r3, r0, #0
 8000e66:	d10a      	bne.n	8000e7e <get_coordinate_strings+0x8a>
		snprintf(output.y, sizeof(output.y), "%s", y_direction);
 8000e68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000e6a:	4a2b      	ldr	r2, [pc, #172]	@ (8000f18 <get_coordinate_strings+0x124>)
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	330e      	adds	r3, #14
 8000e72:	0018      	movs	r0, r3
 8000e74:	000b      	movs	r3, r1
 8000e76:	210e      	movs	r1, #14
 8000e78:	f006 fe20 	bl	8007abc <sniprintf>
 8000e7c:	e013      	b.n	8000ea6 <get_coordinate_strings+0xb2>
	} else {
		snprintf(output.y, sizeof(output.y), "%s,%u%%\r\n", y_direction, abs(percentages.y));
 8000e7e:	2324      	movs	r3, #36	@ 0x24
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	785b      	ldrb	r3, [r3, #1]
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	17da      	asrs	r2, r3, #31
 8000e88:	189b      	adds	r3, r3, r2
 8000e8a:	4053      	eors	r3, r2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	001c      	movs	r4, r3
 8000e90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000e92:	4a22      	ldr	r2, [pc, #136]	@ (8000f1c <get_coordinate_strings+0x128>)
 8000e94:	2308      	movs	r3, #8
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	330e      	adds	r3, #14
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	9400      	str	r4, [sp, #0]
 8000e9e:	000b      	movs	r3, r1
 8000ea0:	210e      	movs	r1, #14
 8000ea2:	f006 fe0b 	bl	8007abc <sniprintf>
	}

	if (strcmp(x_direction, "Rest") == 0) {
 8000ea6:	4a19      	ldr	r2, [pc, #100]	@ (8000f0c <get_coordinate_strings+0x118>)
 8000ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff f92b 	bl	8000108 <strcmp>
 8000eb2:	1e03      	subs	r3, r0, #0
 8000eb4:	d107      	bne.n	8000ec6 <get_coordinate_strings+0xd2>
		snprintf(output.x, sizeof(output.x), "%s", x_direction);
 8000eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eb8:	4a17      	ldr	r2, [pc, #92]	@ (8000f18 <get_coordinate_strings+0x124>)
 8000eba:	2108      	movs	r1, #8
 8000ebc:	1878      	adds	r0, r7, r1
 8000ebe:	210e      	movs	r1, #14
 8000ec0:	f006 fdfc 	bl	8007abc <sniprintf>
 8000ec4:	e010      	b.n	8000ee8 <get_coordinate_strings+0xf4>
	} else {
		snprintf(output.x, sizeof(output.x), "%s,%u%%\r\n", x_direction, abs(percentages.x));
 8000ec6:	2324      	movs	r3, #36	@ 0x24
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	17da      	asrs	r2, r3, #31
 8000ed0:	189b      	adds	r3, r3, r2
 8000ed2:	4053      	eors	r3, r2
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eda:	4a10      	ldr	r2, [pc, #64]	@ (8000f1c <get_coordinate_strings+0x128>)
 8000edc:	2008      	movs	r0, #8
 8000ede:	1838      	adds	r0, r7, r0
 8000ee0:	9100      	str	r1, [sp, #0]
 8000ee2:	210e      	movs	r1, #14
 8000ee4:	f006 fdea 	bl	8007abc <sniprintf>
	}

	return output;
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	2308      	movs	r3, #8
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	0010      	movs	r0, r2
 8000ef0:	0019      	movs	r1, r3
 8000ef2:	231c      	movs	r3, #28
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	f006 fe49 	bl	8007b8c <memcpy>
}
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b00d      	add	sp, #52	@ 0x34
 8000f00:	bd90      	pop	{r4, r7, pc}
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	08008438 	.word	0x08008438
 8000f08:	08008440 	.word	0x08008440
 8000f0c:	08008448 	.word	0x08008448
 8000f10:	08008450 	.word	0x08008450
 8000f14:	08008458 	.word	0x08008458
 8000f18:	0800845c 	.word	0x0800845c
 8000f1c:	08008460 	.word	0x08008460

08000f20 <raw_adc_as_string>:

char *raw_adc_as_string(void) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af02      	add	r7, sp, #8
	// Returns the raw ADC values as a string
	static char raw[14];
	snprintf(raw, sizeof(raw), "%u,%u\r\n", raw_adc[0], raw_adc[1]);
 8000f26:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <raw_adc_as_string+0x28>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <raw_adc_as_string+0x28>)
 8000f2e:	885b      	ldrh	r3, [r3, #2]
 8000f30:	4a06      	ldr	r2, [pc, #24]	@ (8000f4c <raw_adc_as_string+0x2c>)
 8000f32:	4807      	ldr	r0, [pc, #28]	@ (8000f50 <raw_adc_as_string+0x30>)
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	000b      	movs	r3, r1
 8000f38:	210e      	movs	r1, #14
 8000f3a:	f006 fdbf 	bl	8007abc <sniprintf>
	return raw;
 8000f3e:	4b04      	ldr	r3, [pc, #16]	@ (8000f50 <raw_adc_as_string+0x30>)
}
 8000f40:	0018      	movs	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	20000230 	.word	0x20000230
 8000f4c:	0800846c 	.word	0x0800846c
 8000f50:	20000234 	.word	0x20000234

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f58:	f000 fec3 	bl	8001ce2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5c:	f000 f80f 	bl	8000f7e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f60:	f7ff fd06 	bl	8000970 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f64:	f7ff fcde 	bl	8000924 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f68:	f7ff fa58 	bl	800041c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f6c:	f7ff fe10 	bl	8000b90 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000f70:	f000 fdf6 	bl	8001b60 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f74:	f000 fd28 	bl	80019c8 <MX_TIM2_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  app_main();
 8000f78:	f7ff fb50 	bl	800061c <app_main>
 8000f7c:	e7fc      	b.n	8000f78 <main+0x24>

08000f7e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7e:	b590      	push	{r4, r7, lr}
 8000f80:	b08f      	sub	sp, #60	@ 0x3c
 8000f82:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f84:	2418      	movs	r4, #24
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	0018      	movs	r0, r3
 8000f8a:	2320      	movs	r3, #32
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	f006 fdc8 	bl	8007b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	0018      	movs	r0, r3
 8000f98:	2314      	movs	r3, #20
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	f006 fdc1 	bl	8007b24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	2280      	movs	r2, #128	@ 0x80
 8000fac:	0052      	lsls	r2, r2, #1
 8000fae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	2280      	movs	r2, #128	@ 0x80
 8000fb4:	0152      	lsls	r2, r2, #5
 8000fb6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb8:	193b      	adds	r3, r7, r4
 8000fba:	2240      	movs	r2, #64	@ 0x40
 8000fbc:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbe:	193b      	adds	r3, r7, r4
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f004 fcd1 	bl	8005968 <HAL_RCC_OscConfig>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000fca:	f000 f81c 	bl	8001006 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2100      	movs	r1, #0
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f004 fedf 	bl	8005db4 <HAL_RCC_ClockConfig>
 8000ff6:	1e03      	subs	r3, r0, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ffa:	f000 f804 	bl	8001006 <Error_Handler>
  }
}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	b00f      	add	sp, #60	@ 0x3c
 8001004:	bd90      	pop	{r4, r7, pc}

08001006 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100a:	b672      	cpsid	i
}
 800100c:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100e:	46c0      	nop			@ (mov r8, r8)
 8001010:	e7fd      	b.n	800100e <Error_Handler+0x8>

08001012 <pwm_setDutyCycle>:
 */

#include "pwm.h"

void pwm_setDutyCycle(TIM_HandleTypeDef* tim, uint32_t tim_channel, uint8_t duty)
{
 8001012:	b590      	push	{r4, r7, lr}
 8001014:	b087      	sub	sp, #28
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	1dfb      	adds	r3, r7, #7
 800101e:	701a      	strb	r2, [r3, #0]
	// Start channel if not already started.
	if (HAL_TIM_GetChannelState(tim, tim_channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	0011      	movs	r1, r2
 8001026:	0018      	movs	r0, r3
 8001028:	f005 fb9c 	bl	8006764 <HAL_TIM_GetChannelState>
 800102c:	0003      	movs	r3, r0
 800102e:	2b01      	cmp	r3, #1
 8001030:	d105      	bne.n	800103e <pwm_setDutyCycle+0x2c>
	{
		HAL_TIM_PWM_Start(tim, tim_channel);
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	0011      	movs	r1, r2
 8001038:	0018      	movs	r0, r3
 800103a:	f005 f9b5 	bl	80063a8 <HAL_TIM_PWM_Start>
	}

	uint32_t reloadValue = __HAL_TIM_GET_AUTORELOAD(tim);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001044:	617b      	str	r3, [r7, #20]
	uint32_t desiredCompare = duty * (reloadValue / 100);
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781c      	ldrb	r4, [r3, #0]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	2164      	movs	r1, #100	@ 0x64
 800104e:	0018      	movs	r0, r3
 8001050:	f7ff f86e 	bl	8000130 <__udivsi3>
 8001054:	0003      	movs	r3, r0
 8001056:	4363      	muls	r3, r4
 8001058:	613b      	str	r3, [r7, #16]

	__HAL_TIM_SET_COMPARE(tim, tim_channel, desiredCompare);
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d104      	bne.n	800106a <pwm_setDutyCycle+0x58>
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001068:	e023      	b.n	80010b2 <pwm_setDutyCycle+0xa0>
	__HAL_TIM_SET_COMPARE(tim, tim_channel, desiredCompare);
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	2b04      	cmp	r3, #4
 800106e:	d104      	bne.n	800107a <pwm_setDutyCycle+0x68>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001078:	e01b      	b.n	80010b2 <pwm_setDutyCycle+0xa0>
	__HAL_TIM_SET_COMPARE(tim, tim_channel, desiredCompare);
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	2b08      	cmp	r3, #8
 800107e:	d104      	bne.n	800108a <pwm_setDutyCycle+0x78>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001088:	e013      	b.n	80010b2 <pwm_setDutyCycle+0xa0>
	__HAL_TIM_SET_COMPARE(tim, tim_channel, desiredCompare);
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b0c      	cmp	r3, #12
 800108e:	d104      	bne.n	800109a <pwm_setDutyCycle+0x88>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001098:	e00b      	b.n	80010b2 <pwm_setDutyCycle+0xa0>
	__HAL_TIM_SET_COMPARE(tim, tim_channel, desiredCompare);
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	2b10      	cmp	r3, #16
 800109e:	d104      	bne.n	80010aa <pwm_setDutyCycle+0x98>
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80010a8:	e003      	b.n	80010b2 <pwm_setDutyCycle+0xa0>
	__HAL_TIM_SET_COMPARE(tim, tim_channel, desiredCompare);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b007      	add	sp, #28
 80010b8:	bd90      	pop	{r4, r7, pc}
	...

080010bc <rgb_colour_on>:
	GPIO_PinState state = RGB_LEDS[led].active_high ? GPIO_PIN_SET : GPIO_PIN_RESET;
	HAL_GPIO_WritePin(RGB_LEDS[led].port, RGB_LEDS[led].pin, state);
}

void rgb_colour_on(rgb_colour_t colour)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	0002      	movs	r2, r0
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	701a      	strb	r2, [r3, #0]
	GPIO_PinState state = RGB_COLOURS[colour].active_high ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001108 <rgb_colour_on+0x4c>)
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	18d3      	adds	r3, r2, r3
 80010d2:	3306      	adds	r3, #6
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	240f      	movs	r4, #15
 80010d8:	193b      	adds	r3, r7, r4
 80010da:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RGB_COLOURS[colour].port, RGB_COLOURS[colour].pin, state);
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	781a      	ldrb	r2, [r3, #0]
 80010e0:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <rgb_colour_on+0x4c>)
 80010e2:	00d2      	lsls	r2, r2, #3
 80010e4:	58d0      	ldr	r0, [r2, r3]
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4a07      	ldr	r2, [pc, #28]	@ (8001108 <rgb_colour_on+0x4c>)
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	18d3      	adds	r3, r2, r3
 80010f0:	3304      	adds	r3, #4
 80010f2:	8819      	ldrh	r1, [r3, #0]
 80010f4:	193b      	adds	r3, r7, r4
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	001a      	movs	r2, r3
 80010fa:	f002 fa48 	bl	800358e <HAL_GPIO_WritePin>
}
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	46bd      	mov	sp, r7
 8001102:	b005      	add	sp, #20
 8001104:	bd90      	pop	{r4, r7, pc}
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	080084ac 	.word	0x080084ac

0800110c <rgb_led_toggle>:
	GPIO_PinState state = RGB_COLOURS[colour].active_high ? GPIO_PIN_RESET : GPIO_PIN_SET;
	HAL_GPIO_WritePin(RGB_COLOURS[colour].port, RGB_COLOURS[colour].pin, state);
}

void rgb_led_toggle(rgb_led_t led)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	0002      	movs	r2, r0
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(RGB_LEDS[led].port, RGB_LEDS[led].pin);
 8001118:	1dfb      	adds	r3, r7, #7
 800111a:	781a      	ldrb	r2, [r3, #0]
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <rgb_led_toggle+0x34>)
 800111e:	00d2      	lsls	r2, r2, #3
 8001120:	58d0      	ldr	r0, [r2, r3]
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4a06      	ldr	r2, [pc, #24]	@ (8001140 <rgb_led_toggle+0x34>)
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	18d3      	adds	r3, r2, r3
 800112c:	3304      	adds	r3, #4
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	0019      	movs	r1, r3
 8001132:	f002 fa49 	bl	80035c8 <HAL_GPIO_TogglePin>
}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b002      	add	sp, #8
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	0800848c 	.word	0x0800848c

08001144 <ssd1306_Reset>:

#if defined(SSD1306_USE_I2C)

static uint8_t updateScreenPageIndex = 0;

void ssd1306_Reset(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001148:	46c0      	nop			@ (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af04      	add	r7, sp, #16
 8001156:	0002      	movs	r2, r0
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800115c:	4808      	ldr	r0, [pc, #32]	@ (8001180 <ssd1306_WriteCommand+0x30>)
 800115e:	2301      	movs	r3, #1
 8001160:	425b      	negs	r3, r3
 8001162:	9302      	str	r3, [sp, #8]
 8001164:	2301      	movs	r3, #1
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	2200      	movs	r2, #0
 8001170:	2178      	movs	r1, #120	@ 0x78
 8001172:	f002 fb29 	bl	80037c8 <HAL_I2C_Mem_Write>
}
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	20000180 	.word	0x20000180

08001184 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af02      	add	r7, sp, #8
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b29b      	uxth	r3, r3
 8001192:	4806      	ldr	r0, [pc, #24]	@ (80011ac <ssd1306_WriteData+0x28>)
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	2240      	movs	r2, #64	@ 0x40
 800119e:	2178      	movs	r1, #120	@ 0x78
 80011a0:	f002 fc40 	bl	8003a24 <HAL_I2C_Mem_Write_DMA>
}
 80011a4:	46c0      	nop			@ (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000180 	.word	0x20000180

080011b0 <ssd1306_UpdatePage>:

void ssd1306_UpdatePage(uint8_t pageIndex) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	0002      	movs	r2, r0
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	701a      	strb	r2, [r3, #0]
	ssd1306_WriteCommand(0xB0 + pageIndex); // Set the current RAM page address.
 80011bc:	1dfb      	adds	r3, r7, #7
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	3b50      	subs	r3, #80	@ 0x50
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff ffc3 	bl	8001150 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff ffc0 	bl	8001150 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80011d0:	2010      	movs	r0, #16
 80011d2:	f7ff ffbd 	bl	8001150 <ssd1306_WriteCommand>
	ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*pageIndex],SSD1306_WIDTH);
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	01da      	lsls	r2, r3, #7
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <ssd1306_UpdatePage+0x40>)
 80011de:	18d3      	adds	r3, r2, r3
 80011e0:	2180      	movs	r1, #128	@ 0x80
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7ff ffce 	bl	8001184 <ssd1306_WriteData>
}
 80011e8:	46c0      	nop			@ (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000244 	.word	0x20000244

080011f4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages

	updateScreenPageIndex = 0;
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <ssd1306_UpdateScreen+0x1c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
	ssd1306_UpdatePage(updateScreenPageIndex);
 80011fe:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <ssd1306_UpdateScreen+0x1c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	0018      	movs	r0, r3
 8001204:	f7ff ffd4 	bl	80011b0 <ssd1306_UpdatePage>
}
 8001208:	46c0      	nop			@ (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	2000064a 	.word	0x2000064a

08001214 <HAL_I2C_MemTxCpltCallback>:

/* Gets called by HAL when the entire buffer (i.e. one page) is transmitted through DMA */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	if (hi2c == &SSD1306_I2C_PORT)
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <HAL_I2C_MemTxCpltCallback+0x38>)
 8001220:	429a      	cmp	r2, r3
 8001222:	d10e      	bne.n	8001242 <HAL_I2C_MemTxCpltCallback+0x2e>
	{
		updateScreenPageIndex++;
 8001224:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <HAL_I2C_MemTxCpltCallback+0x3c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <HAL_I2C_MemTxCpltCallback+0x3c>)
 800122e:	701a      	strb	r2, [r3, #0]
		if (updateScreenPageIndex < SSD1306_HEIGHT/8)
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <HAL_I2C_MemTxCpltCallback+0x3c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b07      	cmp	r3, #7
 8001236:	d804      	bhi.n	8001242 <HAL_I2C_MemTxCpltCallback+0x2e>
		{
			ssd1306_UpdatePage(updateScreenPageIndex);
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <HAL_I2C_MemTxCpltCallback+0x3c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	0018      	movs	r0, r3
 800123e:	f7ff ffb7 	bl	80011b0 <ssd1306_UpdatePage>
		}
	}
}
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	b002      	add	sp, #8
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	20000180 	.word	0x20000180
 8001250:	2000064a 	.word	0x2000064a

08001254 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001258:	f7ff ff74 	bl	8001144 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800125c:	2064      	movs	r0, #100	@ 0x64
 800125e:	f000 fdbd 	bl	8001ddc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001262:	2000      	movs	r0, #0
 8001264:	f000 f9de 	bl	8001624 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001268:	2020      	movs	r0, #32
 800126a:	f7ff ff71 	bl	8001150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff ff6e 	bl	8001150 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001274:	20b0      	movs	r0, #176	@ 0xb0
 8001276:	f7ff ff6b 	bl	8001150 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 800127a:	20c0      	movs	r0, #192	@ 0xc0
 800127c:	f7ff ff68 	bl	8001150 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff ff65 	bl	8001150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001286:	2010      	movs	r0, #16
 8001288:	f7ff ff62 	bl	8001150 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800128c:	2040      	movs	r0, #64	@ 0x40
 800128e:	f7ff ff5f 	bl	8001150 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001292:	20ff      	movs	r0, #255	@ 0xff
 8001294:	f000 f9ae 	bl	80015f4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8001298:	20a0      	movs	r0, #160	@ 0xa0
 800129a:	f7ff ff59 	bl	8001150 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800129e:	20a6      	movs	r0, #166	@ 0xa6
 80012a0:	f7ff ff56 	bl	8001150 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80012a4:	20a8      	movs	r0, #168	@ 0xa8
 80012a6:	f7ff ff53 	bl	8001150 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80012aa:	203f      	movs	r0, #63	@ 0x3f
 80012ac:	f7ff ff50 	bl	8001150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012b0:	20a4      	movs	r0, #164	@ 0xa4
 80012b2:	f7ff ff4d 	bl	8001150 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80012b6:	20d3      	movs	r0, #211	@ 0xd3
 80012b8:	f7ff ff4a 	bl	8001150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff ff47 	bl	8001150 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80012c2:	20d5      	movs	r0, #213	@ 0xd5
 80012c4:	f7ff ff44 	bl	8001150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80012c8:	20f0      	movs	r0, #240	@ 0xf0
 80012ca:	f7ff ff41 	bl	8001150 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80012ce:	20d9      	movs	r0, #217	@ 0xd9
 80012d0:	f7ff ff3e 	bl	8001150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80012d4:	2022      	movs	r0, #34	@ 0x22
 80012d6:	f7ff ff3b 	bl	8001150 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80012da:	20da      	movs	r0, #218	@ 0xda
 80012dc:	f7ff ff38 	bl	8001150 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80012e0:	2012      	movs	r0, #18
 80012e2:	f7ff ff35 	bl	8001150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80012e6:	20db      	movs	r0, #219	@ 0xdb
 80012e8:	f7ff ff32 	bl	8001150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80012ec:	2020      	movs	r0, #32
 80012ee:	f7ff ff2f 	bl	8001150 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80012f2:	208d      	movs	r0, #141	@ 0x8d
 80012f4:	f7ff ff2c 	bl	8001150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80012f8:	2014      	movs	r0, #20
 80012fa:	f7ff ff29 	bl	8001150 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80012fe:	2001      	movs	r0, #1
 8001300:	f000 f990 	bl	8001624 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001304:	2000      	movs	r0, #0
 8001306:	f000 f811 	bl	800132c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800130a:	f7ff ff73 	bl	80011f4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800130e:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <ssd1306_Init+0xd4>)
 8001310:	2200      	movs	r2, #0
 8001312:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001314:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <ssd1306_Init+0xd4>)
 8001316:	2200      	movs	r2, #0
 8001318:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800131a:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <ssd1306_Init+0xd4>)
 800131c:	2201      	movs	r2, #1
 800131e:	711a      	strb	r2, [r3, #4]
}
 8001320:	46c0      	nop			@ (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	46c0      	nop			@ (mov r8, r8)
 8001328:	20000644 	.word	0x20000644

0800132c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	0002      	movs	r2, r0
 8001334:	1dfb      	adds	r3, r7, #7
 8001336:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001338:	1dfb      	adds	r3, r7, #7
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <ssd1306_Fill+0x18>
 8001340:	2300      	movs	r3, #0
 8001342:	e000      	b.n	8001346 <ssd1306_Fill+0x1a>
 8001344:	23ff      	movs	r3, #255	@ 0xff
 8001346:	2280      	movs	r2, #128	@ 0x80
 8001348:	00d2      	lsls	r2, r2, #3
 800134a:	4804      	ldr	r0, [pc, #16]	@ (800135c <ssd1306_Fill+0x30>)
 800134c:	0019      	movs	r1, r3
 800134e:	f006 fbe9 	bl	8007b24 <memset>
}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b002      	add	sp, #8
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	20000244 	.word	0x20000244

08001360 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	0004      	movs	r4, r0
 8001368:	0008      	movs	r0, r1
 800136a:	0011      	movs	r1, r2
 800136c:	1dfb      	adds	r3, r7, #7
 800136e:	1c22      	adds	r2, r4, #0
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	1dbb      	adds	r3, r7, #6
 8001374:	1c02      	adds	r2, r0, #0
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	1d7b      	adds	r3, r7, #5
 800137a:	1c0a      	adds	r2, r1, #0
 800137c:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b25b      	sxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	db47      	blt.n	8001418 <ssd1306_DrawPixel+0xb8>
 8001388:	1dbb      	adds	r3, r7, #6
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b3f      	cmp	r3, #63	@ 0x3f
 800138e:	d843      	bhi.n	8001418 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001390:	1d7b      	adds	r3, r7, #5
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d11e      	bne.n	80013d6 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001398:	1dfb      	adds	r3, r7, #7
 800139a:	781a      	ldrb	r2, [r3, #0]
 800139c:	1dbb      	adds	r3, r7, #6
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	08db      	lsrs	r3, r3, #3
 80013a2:	b2d8      	uxtb	r0, r3
 80013a4:	0003      	movs	r3, r0
 80013a6:	01db      	lsls	r3, r3, #7
 80013a8:	18d3      	adds	r3, r2, r3
 80013aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001420 <ssd1306_DrawPixel+0xc0>)
 80013ac:	5cd3      	ldrb	r3, [r2, r3]
 80013ae:	b25a      	sxtb	r2, r3
 80013b0:	1dbb      	adds	r3, r7, #6
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2107      	movs	r1, #7
 80013b6:	400b      	ands	r3, r1
 80013b8:	2101      	movs	r1, #1
 80013ba:	4099      	lsls	r1, r3
 80013bc:	000b      	movs	r3, r1
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b259      	sxtb	r1, r3
 80013c4:	1dfb      	adds	r3, r7, #7
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	0003      	movs	r3, r0
 80013ca:	01db      	lsls	r3, r3, #7
 80013cc:	18d3      	adds	r3, r2, r3
 80013ce:	b2c9      	uxtb	r1, r1
 80013d0:	4a13      	ldr	r2, [pc, #76]	@ (8001420 <ssd1306_DrawPixel+0xc0>)
 80013d2:	54d1      	strb	r1, [r2, r3]
 80013d4:	e021      	b.n	800141a <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781a      	ldrb	r2, [r3, #0]
 80013da:	1dbb      	adds	r3, r7, #6
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	08db      	lsrs	r3, r3, #3
 80013e0:	b2d8      	uxtb	r0, r3
 80013e2:	0003      	movs	r3, r0
 80013e4:	01db      	lsls	r3, r3, #7
 80013e6:	18d3      	adds	r3, r2, r3
 80013e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001420 <ssd1306_DrawPixel+0xc0>)
 80013ea:	5cd3      	ldrb	r3, [r2, r3]
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	1dba      	adds	r2, r7, #6
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	2107      	movs	r1, #7
 80013f4:	400a      	ands	r2, r1
 80013f6:	2101      	movs	r1, #1
 80013f8:	4091      	lsls	r1, r2
 80013fa:	000a      	movs	r2, r1
 80013fc:	b252      	sxtb	r2, r2
 80013fe:	43d2      	mvns	r2, r2
 8001400:	b252      	sxtb	r2, r2
 8001402:	4013      	ands	r3, r2
 8001404:	b259      	sxtb	r1, r3
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	781a      	ldrb	r2, [r3, #0]
 800140a:	0003      	movs	r3, r0
 800140c:	01db      	lsls	r3, r3, #7
 800140e:	18d3      	adds	r3, r2, r3
 8001410:	b2c9      	uxtb	r1, r1
 8001412:	4a03      	ldr	r2, [pc, #12]	@ (8001420 <ssd1306_DrawPixel+0xc0>)
 8001414:	54d1      	strb	r1, [r2, r3]
 8001416:	e000      	b.n	800141a <ssd1306_DrawPixel+0xba>
        return;
 8001418:	46c0      	nop			@ (mov r8, r8)
    }
}
 800141a:	46bd      	mov	sp, r7
 800141c:	b003      	add	sp, #12
 800141e:	bd90      	pop	{r4, r7, pc}
 8001420:	20000244 	.word	0x20000244

08001424 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b089      	sub	sp, #36	@ 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	0004      	movs	r4, r0
 800142c:	0038      	movs	r0, r7
 800142e:	6001      	str	r1, [r0, #0]
 8001430:	6042      	str	r2, [r0, #4]
 8001432:	6083      	str	r3, [r0, #8]
 8001434:	210f      	movs	r1, #15
 8001436:	187b      	adds	r3, r7, r1
 8001438:	1c22      	adds	r2, r4, #0
 800143a:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800143c:	000a      	movs	r2, r1
 800143e:	18bb      	adds	r3, r7, r2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b1f      	cmp	r3, #31
 8001444:	d903      	bls.n	800144e <ssd1306_WriteChar+0x2a>
 8001446:	18bb      	adds	r3, r7, r2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b7e      	cmp	r3, #126	@ 0x7e
 800144c:	d901      	bls.n	8001452 <ssd1306_WriteChar+0x2e>
        return 0;
 800144e:	2300      	movs	r3, #0
 8001450:	e084      	b.n	800155c <ssd1306_WriteChar+0x138>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001452:	4b44      	ldr	r3, [pc, #272]	@ (8001564 <ssd1306_WriteChar+0x140>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	001a      	movs	r2, r3
 8001458:	003b      	movs	r3, r7
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	18d3      	adds	r3, r2, r3
 800145e:	2b80      	cmp	r3, #128	@ 0x80
 8001460:	dc07      	bgt.n	8001472 <ssd1306_WriteChar+0x4e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001462:	4b40      	ldr	r3, [pc, #256]	@ (8001564 <ssd1306_WriteChar+0x140>)
 8001464:	885b      	ldrh	r3, [r3, #2]
 8001466:	001a      	movs	r2, r3
 8001468:	003b      	movs	r3, r7
 800146a:	785b      	ldrb	r3, [r3, #1]
 800146c:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800146e:	2b40      	cmp	r3, #64	@ 0x40
 8001470:	dd01      	ble.n	8001476 <ssd1306_WriteChar+0x52>
    {
        // Not enough space on current line
        return 0;
 8001472:	2300      	movs	r3, #0
 8001474:	e072      	b.n	800155c <ssd1306_WriteChar+0x138>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	e051      	b.n	8001520 <ssd1306_WriteChar+0xfc>
        b = Font.data[(ch - 32) * Font.height + i];
 800147c:	003b      	movs	r3, r7
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	230f      	movs	r3, #15
 8001482:	18fb      	adds	r3, r7, r3
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	3b20      	subs	r3, #32
 8001488:	0039      	movs	r1, r7
 800148a:	7849      	ldrb	r1, [r1, #1]
 800148c:	434b      	muls	r3, r1
 800148e:	0019      	movs	r1, r3
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	18cb      	adds	r3, r1, r3
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	18d3      	adds	r3, r2, r3
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	e035      	b.n	800150e <ssd1306_WriteChar+0xea>
            if((b << j) & 0x8000)  {
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	409a      	lsls	r2, r3
 80014a8:	2380      	movs	r3, #128	@ 0x80
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	4013      	ands	r3, r2
 80014ae:	d014      	beq.n	80014da <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80014b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001564 <ssd1306_WriteChar+0x140>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	18d3      	adds	r3, r2, r3
 80014bc:	b2d8      	uxtb	r0, r3
 80014be:	4b29      	ldr	r3, [pc, #164]	@ (8001564 <ssd1306_WriteChar+0x140>)
 80014c0:	885b      	ldrh	r3, [r3, #2]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	18d3      	adds	r3, r2, r3
 80014ca:	b2d9      	uxtb	r1, r3
 80014cc:	2330      	movs	r3, #48	@ 0x30
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	001a      	movs	r2, r3
 80014d4:	f7ff ff44 	bl	8001360 <ssd1306_DrawPixel>
 80014d8:	e016      	b.n	8001508 <ssd1306_WriteChar+0xe4>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80014da:	4b22      	ldr	r3, [pc, #136]	@ (8001564 <ssd1306_WriteChar+0x140>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	18d3      	adds	r3, r2, r3
 80014e6:	b2d8      	uxtb	r0, r3
 80014e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001564 <ssd1306_WriteChar+0x140>)
 80014ea:	885b      	ldrh	r3, [r3, #2]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	18d3      	adds	r3, r2, r3
 80014f4:	b2d9      	uxtb	r1, r3
 80014f6:	2330      	movs	r3, #48	@ 0x30
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	425a      	negs	r2, r3
 80014fe:	4153      	adcs	r3, r2
 8001500:	b2db      	uxtb	r3, r3
 8001502:	001a      	movs	r2, r3
 8001504:	f7ff ff2c 	bl	8001360 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	3301      	adds	r3, #1
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	003b      	movs	r3, r7
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	001a      	movs	r2, r3
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	4293      	cmp	r3, r2
 8001518:	d3c3      	bcc.n	80014a2 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3301      	adds	r3, #1
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	003b      	movs	r3, r7
 8001522:	785b      	ldrb	r3, [r3, #1]
 8001524:	001a      	movs	r2, r3
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4293      	cmp	r3, r2
 800152a:	d3a7      	bcc.n	800147c <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 800152c:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <ssd1306_WriteChar+0x140>)
 800152e:	881a      	ldrh	r2, [r3, #0]
 8001530:	003b      	movs	r3, r7
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <ssd1306_WriteChar+0x126>
 8001538:	003b      	movs	r3, r7
 800153a:	6899      	ldr	r1, [r3, #8]
 800153c:	230f      	movs	r3, #15
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	3b20      	subs	r3, #32
 8001544:	18cb      	adds	r3, r1, r3
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	e001      	b.n	800154e <ssd1306_WriteChar+0x12a>
 800154a:	003b      	movs	r3, r7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	189b      	adds	r3, r3, r2
 8001550:	b29a      	uxth	r2, r3
 8001552:	4b04      	ldr	r3, [pc, #16]	@ (8001564 <ssd1306_WriteChar+0x140>)
 8001554:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001556:	230f      	movs	r3, #15
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	781b      	ldrb	r3, [r3, #0]
}
 800155c:	0018      	movs	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	b009      	add	sp, #36	@ 0x24
 8001562:	bd90      	pop	{r4, r7, pc}
 8001564:	20000644 	.word	0x20000644

08001568 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af02      	add	r7, sp, #8
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	0038      	movs	r0, r7
 8001572:	6001      	str	r1, [r0, #0]
 8001574:	6042      	str	r2, [r0, #4]
 8001576:	6083      	str	r3, [r0, #8]
    while (*str) {
 8001578:	e017      	b.n	80015aa <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	7818      	ldrb	r0, [r3, #0]
 800157e:	003b      	movs	r3, r7
 8001580:	2218      	movs	r2, #24
 8001582:	18ba      	adds	r2, r7, r2
 8001584:	7812      	ldrb	r2, [r2, #0]
 8001586:	9200      	str	r2, [sp, #0]
 8001588:	6819      	ldr	r1, [r3, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f7ff ff49 	bl	8001424 <ssd1306_WriteChar>
 8001592:	0003      	movs	r3, r0
 8001594:	001a      	movs	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d002      	beq.n	80015a4 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	e008      	b.n	80015b6 <ssd1306_WriteString+0x4e>
        }
        str++;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3301      	adds	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1e3      	bne.n	800157a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	781b      	ldrb	r3, [r3, #0]
}
 80015b6:	0018      	movs	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b004      	add	sp, #16
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	0002      	movs	r2, r0
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	701a      	strb	r2, [r3, #0]
 80015cc:	1dbb      	adds	r3, r7, #6
 80015ce:	1c0a      	adds	r2, r1, #0
 80015d0:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <ssd1306_SetCursor+0x30>)
 80015da:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80015dc:	1dbb      	adds	r3, r7, #6
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4b03      	ldr	r3, [pc, #12]	@ (80015f0 <ssd1306_SetCursor+0x30>)
 80015e4:	805a      	strh	r2, [r3, #2]
}
 80015e6:	46c0      	nop			@ (mov r8, r8)
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b002      	add	sp, #8
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	20000644 	.word	0x20000644

080015f4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	0002      	movs	r2, r0
 80015fc:	1dfb      	adds	r3, r7, #7
 80015fe:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001600:	210f      	movs	r1, #15
 8001602:	187b      	adds	r3, r7, r1
 8001604:	2281      	movs	r2, #129	@ 0x81
 8001606:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001608:	187b      	adds	r3, r7, r1
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	0018      	movs	r0, r3
 800160e:	f7ff fd9f 	bl	8001150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	0018      	movs	r0, r3
 8001618:	f7ff fd9a 	bl	8001150 <ssd1306_WriteCommand>
}
 800161c:	46c0      	nop			@ (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b004      	add	sp, #16
 8001622:	bd80      	pop	{r7, pc}

08001624 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	0002      	movs	r2, r0
 800162c:	1dfb      	adds	r3, r7, #7
 800162e:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8001630:	1dfb      	adds	r3, r7, #7
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d007      	beq.n	8001648 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8001638:	230f      	movs	r3, #15
 800163a:	18fb      	adds	r3, r7, r3
 800163c:	22af      	movs	r2, #175	@ 0xaf
 800163e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8001640:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <ssd1306_SetDisplayOn+0x48>)
 8001642:	2201      	movs	r2, #1
 8001644:	715a      	strb	r2, [r3, #5]
 8001646:	e006      	b.n	8001656 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8001648:	230f      	movs	r3, #15
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	22ae      	movs	r2, #174	@ 0xae
 800164e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <ssd1306_SetDisplayOn+0x48>)
 8001652:	2200      	movs	r2, #0
 8001654:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001656:	230f      	movs	r3, #15
 8001658:	18fb      	adds	r3, r7, r3
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	0018      	movs	r0, r3
 800165e:	f7ff fd77 	bl	8001150 <ssd1306_WriteCommand>
}
 8001662:	46c0      	nop			@ (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b004      	add	sp, #16
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			@ (mov r8, r8)
 800166c:	20000644 	.word	0x20000644

08001670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <HAL_MspInit+0x44>)
 8001678:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <HAL_MspInit+0x44>)
 800167c:	2101      	movs	r1, #1
 800167e:	430a      	orrs	r2, r1
 8001680:	641a      	str	r2, [r3, #64]	@ 0x40
 8001682:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <HAL_MspInit+0x44>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	2201      	movs	r2, #1
 8001688:	4013      	ands	r3, r2
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_MspInit+0x44>)
 8001690:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001692:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <HAL_MspInit+0x44>)
 8001694:	2180      	movs	r1, #128	@ 0x80
 8001696:	0549      	lsls	r1, r1, #21
 8001698:	430a      	orrs	r2, r1
 800169a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <HAL_MspInit+0x44>)
 800169e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016a0:	2380      	movs	r3, #128	@ 0x80
 80016a2:	055b      	lsls	r3, r3, #21
 80016a4:	4013      	ands	r3, r2
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016aa:	46c0      	nop			@ (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b002      	add	sp, #8
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	40021000 	.word	0x40021000

080016b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016bc:	46c0      	nop			@ (mov r8, r8)
 80016be:	e7fd      	b.n	80016bc <NMI_Handler+0x4>

080016c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c4:	46c0      	nop			@ (mov r8, r8)
 80016c6:	e7fd      	b.n	80016c4 <HardFault_Handler+0x4>

080016c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016cc:	46c0      	nop			@ (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e0:	f000 fb60 	bl	8001da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e4:	46c0      	nop			@ (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 80016ee:	2380      	movs	r3, #128	@ 0x80
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	0018      	movs	r0, r3
 80016f4:	f001 ff84 	bl	8003600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80016f8:	46c0      	nop			@ (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <DMA1_Channel1_IRQHandler+0x14>)
 8001706:	0018      	movs	r0, r3
 8001708:	f001 fc64 	bl	8002fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800170c:	46c0      	nop			@ (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	2000010c 	.word	0x2000010c

08001718 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800171c:	4b03      	ldr	r3, [pc, #12]	@ (800172c <DMA1_Channel2_3_IRQHandler+0x14>)
 800171e:	0018      	movs	r0, r3
 8001720:	f001 fc58 	bl	8002fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001724:	46c0      	nop			@ (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	200001d4 	.word	0x200001d4

08001730 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001734:	4b09      	ldr	r3, [pc, #36]	@ (800175c <I2C1_IRQHandler+0x2c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699a      	ldr	r2, [r3, #24]
 800173a:	23e0      	movs	r3, #224	@ 0xe0
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4013      	ands	r3, r2
 8001740:	d004      	beq.n	800174c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <I2C1_IRQHandler+0x2c>)
 8001744:	0018      	movs	r0, r3
 8001746:	f002 fa89 	bl	8003c5c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800174a:	e003      	b.n	8001754 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800174c:	4b03      	ldr	r3, [pc, #12]	@ (800175c <I2C1_IRQHandler+0x2c>)
 800174e:	0018      	movs	r0, r3
 8001750:	f002 fa6a 	bl	8003c28 <HAL_I2C_EV_IRQHandler>
}
 8001754:	46c0      	nop			@ (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			@ (mov r8, r8)
 800175c:	20000180 	.word	0x20000180

08001760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001768:	4a14      	ldr	r2, [pc, #80]	@ (80017bc <_sbrk+0x5c>)
 800176a:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <_sbrk+0x60>)
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001774:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <_sbrk+0x64>)
 800177e:	4a12      	ldr	r2, [pc, #72]	@ (80017c8 <_sbrk+0x68>)
 8001780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	18d3      	adds	r3, r2, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	429a      	cmp	r2, r3
 800178e:	d207      	bcs.n	80017a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001790:	f006 f9d0 	bl	8007b34 <__errno>
 8001794:	0003      	movs	r3, r0
 8001796:	220c      	movs	r2, #12
 8001798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179a:	2301      	movs	r3, #1
 800179c:	425b      	negs	r3, r3
 800179e:	e009      	b.n	80017b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a0:	4b08      	ldr	r3, [pc, #32]	@ (80017c4 <_sbrk+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a6:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	18d2      	adds	r2, r2, r3
 80017ae:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <_sbrk+0x64>)
 80017b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80017b2:	68fb      	ldr	r3, [r7, #12]
}
 80017b4:	0018      	movs	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	b006      	add	sp, #24
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20006000 	.word	0x20006000
 80017c0:	00000400 	.word	0x00000400
 80017c4:	2000064c 	.word	0x2000064c
 80017c8:	20000880 	.word	0x20000880

080017cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017d0:	4b03      	ldr	r3, [pc, #12]	@ (80017e0 <SystemInit+0x14>)
 80017d2:	2280      	movs	r2, #128	@ 0x80
 80017d4:	0512      	lsls	r2, r2, #20
 80017d6:	609a      	str	r2, [r3, #8]
#endif
}
 80017d8:	46c0      	nop			@ (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	46c0      	nop			@ (mov r8, r8)
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <blinky_task_execute>:
#include "task_blinky.h"
#include "blinky.h"

void blinky_task_execute(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	// Toggle LD1
	toggle_led();
 80017e8:	f7fe ff98 	bl	800071c <toggle_led>
}
 80017ec:	46c0      	nop			@ (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <buttons_task_init>:
#include "rgb.h"
#include "pwm.h"

#include <stdbool.h>

void buttons_task_init(void) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	// Initialise the upstream button driver, enable all RGB LED colour channels.
	buttons_init();
 80017f8:	f7fe ff9c 	bl	8000734 <buttons_init>
	rgb_colour_on(RGB_RED);
 80017fc:	2000      	movs	r0, #0
 80017fe:	f7ff fc5d 	bl	80010bc <rgb_colour_on>
	rgb_colour_on(RGB_GREEN);
 8001802:	2001      	movs	r0, #1
 8001804:	f7ff fc5a 	bl	80010bc <rgb_colour_on>
	rgb_colour_on(RGB_BLUE);
 8001808:	2002      	movs	r0, #2
 800180a:	f7ff fc57 	bl	80010bc <rgb_colour_on>

	// Start the PWM timer associated with RGB_UP (DS3)
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800180e:	4b04      	ldr	r3, [pc, #16]	@ (8001820 <buttons_task_init+0x2c>)
 8001810:	2108      	movs	r1, #8
 8001812:	0018      	movs	r0, r3
 8001814:	f004 fdc8 	bl	80063a8 <HAL_TIM_PWM_Start>
}
 8001818:	46c0      	nop			@ (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	20000654 	.word	0x20000654

08001824 <buttons_task_execute>:

bool buttons_task_execute(void) {
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0

	static uint8_t dutyCycle = 0;
	static bool SW2_state = 0;

	// Update the RGB LEDs depending on which button is pressed.
	buttons_update();
 8001828:	f7fe ffbe 	bl	80007a8 <buttons_update>

	// This doesn't use rgb.h, as it does not support PWM
	if (buttons_checkButton(UP) == PUSHED) {
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff f83b 	bl	80008a8 <buttons_checkButton>
 8001832:	0003      	movs	r3, r0
 8001834:	2b01      	cmp	r3, #1
 8001836:	d118      	bne.n	800186a <buttons_task_execute+0x46>
		dutyCycle = (dutyCycle + 10) % 125;
 8001838:	4b23      	ldr	r3, [pc, #140]	@ (80018c8 <buttons_task_execute+0xa4>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	330a      	adds	r3, #10
 800183e:	217d      	movs	r1, #125	@ 0x7d
 8001840:	0018      	movs	r0, r3
 8001842:	f7fe fde5 	bl	8000410 <__aeabi_idivmod>
 8001846:	000b      	movs	r3, r1
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <buttons_task_execute+0xa4>)
 800184c:	701a      	strb	r2, [r3, #0]
		if (dutyCycle > 100) dutyCycle = 0;
 800184e:	4b1e      	ldr	r3, [pc, #120]	@ (80018c8 <buttons_task_execute+0xa4>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b64      	cmp	r3, #100	@ 0x64
 8001854:	d902      	bls.n	800185c <buttons_task_execute+0x38>
 8001856:	4b1c      	ldr	r3, [pc, #112]	@ (80018c8 <buttons_task_execute+0xa4>)
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
		pwm_setDutyCycle(&htim2, TIM_CHANNEL_3, dutyCycle);
 800185c:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <buttons_task_execute+0xa4>)
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <buttons_task_execute+0xa8>)
 8001862:	2108      	movs	r1, #8
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff fbd4 	bl	8001012 <pwm_setDutyCycle>
	}

	if (buttons_checkButton(DOWN) == PUSHED) {
 800186a:	2001      	movs	r0, #1
 800186c:	f7ff f81c 	bl	80008a8 <buttons_checkButton>
 8001870:	0003      	movs	r3, r0
 8001872:	2b01      	cmp	r3, #1
 8001874:	d110      	bne.n	8001898 <buttons_task_execute+0x74>
		SW2_state = !SW2_state;
 8001876:	4b16      	ldr	r3, [pc, #88]	@ (80018d0 <buttons_task_execute+0xac>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	1e5a      	subs	r2, r3, #1
 800187c:	4193      	sbcs	r3, r2
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2201      	movs	r2, #1
 8001882:	4053      	eors	r3, r2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	1c1a      	adds	r2, r3, #0
 8001888:	2301      	movs	r3, #1
 800188a:	4013      	ands	r3, r2
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <buttons_task_execute+0xac>)
 8001890:	701a      	strb	r2, [r3, #0]
		rgb_led_toggle(RGB_DOWN);
 8001892:	2003      	movs	r0, #3
 8001894:	f7ff fc3a 	bl	800110c <rgb_led_toggle>
	}

	if (buttons_checkButton(LEFT) == PUSHED) {
 8001898:	2002      	movs	r0, #2
 800189a:	f7ff f805 	bl	80008a8 <buttons_checkButton>
 800189e:	0003      	movs	r3, r0
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d102      	bne.n	80018aa <buttons_task_execute+0x86>
		rgb_led_toggle(RGB_LEFT);
 80018a4:	2000      	movs	r0, #0
 80018a6:	f7ff fc31 	bl	800110c <rgb_led_toggle>
	}

	if (buttons_checkButton(RIGHT) == PUSHED) {
 80018aa:	2003      	movs	r0, #3
 80018ac:	f7fe fffc 	bl	80008a8 <buttons_checkButton>
 80018b0:	0003      	movs	r3, r0
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d102      	bne.n	80018bc <buttons_task_execute+0x98>
		rgb_led_toggle(RGB_RIGHT);
 80018b6:	2001      	movs	r0, #1
 80018b8:	f7ff fc28 	bl	800110c <rgb_led_toggle>
	}

	return SW2_state;
 80018bc:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <buttons_task_execute+0xac>)
 80018be:	781b      	ldrb	r3, [r3, #0]
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	20000650 	.word	0x20000650
 80018cc:	20000654 	.word	0x20000654
 80018d0:	20000651 	.word	0x20000651

080018d4 <display_task_init>:

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

void display_task_init(void) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80018d8:	f7ff fcbc 	bl	8001254 <ssd1306_Init>
	ssd1306_SetCursor(0, 0);
 80018dc:	2100      	movs	r1, #0
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff fe6e 	bl	80015c0 <ssd1306_SetCursor>
}
 80018e4:	46c0      	nop			@ (mov r8, r8)
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <display_task_execute>:

void display_task_execute(void) {
 80018ec:	b5b0      	push	{r4, r5, r7, lr}
 80018ee:	b092      	sub	sp, #72	@ 0x48
 80018f0:	af02      	add	r7, sp, #8
	// Fetch coordinate strings
	struct coord_strings strings;
	strings = get_coordinate_strings();
 80018f2:	2524      	movs	r5, #36	@ 0x24
 80018f4:	197c      	adds	r4, r7, r5
 80018f6:	003b      	movs	r3, r7
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff fa7b 	bl	8000df4 <get_coordinate_strings>
 80018fe:	003b      	movs	r3, r7
 8001900:	0020      	movs	r0, r4
 8001902:	0019      	movs	r1, r3
 8001904:	231c      	movs	r3, #28
 8001906:	001a      	movs	r2, r3
 8001908:	f006 f940 	bl	8007b8c <memcpy>

	// Display on OLED
	ssd1306_SetCursor(0, 0);
 800190c:	2100      	movs	r1, #0
 800190e:	2000      	movs	r0, #0
 8001910:	f7ff fe56 	bl	80015c0 <ssd1306_SetCursor>
	ssd1306_WriteString("                    ", Font_7x10, White); // Clear previous text
 8001914:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <display_task_execute+0x98>)
 8001916:	481c      	ldr	r0, [pc, #112]	@ (8001988 <display_task_execute+0x9c>)
 8001918:	2201      	movs	r2, #1
 800191a:	9200      	str	r2, [sp, #0]
 800191c:	6819      	ldr	r1, [r3, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f7ff fe21 	bl	8001568 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 0);
 8001926:	2100      	movs	r1, #0
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff fe49 	bl	80015c0 <ssd1306_SetCursor>
	ssd1306_WriteString(strings.x, Font_7x10, White);
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <display_task_execute+0x98>)
 8001930:	1978      	adds	r0, r7, r5
 8001932:	2201      	movs	r2, #1
 8001934:	9200      	str	r2, [sp, #0]
 8001936:	6819      	ldr	r1, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f7ff fe14 	bl	8001568 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 13);
 8001940:	210d      	movs	r1, #13
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff fe3c 	bl	80015c0 <ssd1306_SetCursor>
	ssd1306_WriteString("                    ", Font_7x10, White); // Clear previous text
 8001948:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <display_task_execute+0x98>)
 800194a:	480f      	ldr	r0, [pc, #60]	@ (8001988 <display_task_execute+0x9c>)
 800194c:	2201      	movs	r2, #1
 800194e:	9200      	str	r2, [sp, #0]
 8001950:	6819      	ldr	r1, [r3, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f7ff fe07 	bl	8001568 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 13);
 800195a:	210d      	movs	r1, #13
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff fe2f 	bl	80015c0 <ssd1306_SetCursor>
	ssd1306_WriteString(strings.y, Font_7x10, White);
 8001962:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <display_task_execute+0x98>)
 8001964:	197a      	adds	r2, r7, r5
 8001966:	320e      	adds	r2, #14
 8001968:	0010      	movs	r0, r2
 800196a:	2201      	movs	r2, #1
 800196c:	9200      	str	r2, [sp, #0]
 800196e:	6819      	ldr	r1, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f7ff fdf8 	bl	8001568 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001978:	f7ff fc3c 	bl	80011f4 <ssd1306_UpdateScreen>
}
 800197c:	46c0      	nop			@ (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b010      	add	sp, #64	@ 0x40
 8001982:	bdb0      	pop	{r4, r5, r7, pc}
 8001984:	08008c30 	.word	0x08008c30
 8001988:	08008474 	.word	0x08008474

0800198c <joystick_task_execute>:
 */

#include "task_joystick.h"
#include "joystick.h"

void joystick_task_execute(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	// Update the ADC values of the JoyStick X and Y axis inputs
	update_joystick();
 8001990:	f7ff f9d6 	bl	8000d40 <update_joystick>
}
 8001994:	46c0      	nop			@ (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <uart_task_execute>:
#include "uart_debugger.h"
#include "joystick.h"

#include <stdbool.h>

void uart_task_execute(bool SW2_state) {
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	0002      	movs	r2, r0
 80019a2:	1dfb      	adds	r3, r7, #7
 80019a4:	701a      	strb	r2, [r3, #0]
	// Transmit debug values, if SW2_state is 1
	if (SW2_state) {
 80019a6:	1dfb      	adds	r3, r7, #7
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d007      	beq.n	80019be <uart_task_execute+0x24>
		char *raw;
		raw = raw_adc_as_string();
 80019ae:	f7ff fab7 	bl	8000f20 <raw_adc_as_string>
 80019b2:	0003      	movs	r3, r0
 80019b4:	60fb      	str	r3, [r7, #12]
		send_debug_message(raw);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f000 f8bf 	bl	8001b3c <send_debug_message>
	}
}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b004      	add	sp, #16
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	@ 0x28
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ce:	231c      	movs	r3, #28
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	0018      	movs	r0, r3
 80019d4:	230c      	movs	r3, #12
 80019d6:	001a      	movs	r2, r3
 80019d8:	2100      	movs	r1, #0
 80019da:	f006 f8a3 	bl	8007b24 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019de:	003b      	movs	r3, r7
 80019e0:	0018      	movs	r0, r3
 80019e2:	231c      	movs	r3, #28
 80019e4:	001a      	movs	r2, r3
 80019e6:	2100      	movs	r1, #0
 80019e8:	f006 f89c 	bl	8007b24 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ec:	4b24      	ldr	r3, [pc, #144]	@ (8001a80 <MX_TIM2_Init+0xb8>)
 80019ee:	2280      	movs	r2, #128	@ 0x80
 80019f0:	05d2      	lsls	r2, r2, #23
 80019f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019f4:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <MX_TIM2_Init+0xb8>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <MX_TIM2_Init+0xb8>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 8001a00:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <MX_TIM2_Init+0xb8>)
 8001a02:	4a20      	ldr	r2, [pc, #128]	@ (8001a84 <MX_TIM2_Init+0xbc>)
 8001a04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b1e      	ldr	r3, [pc, #120]	@ (8001a80 <MX_TIM2_Init+0xb8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a80 <MX_TIM2_Init+0xb8>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a12:	4b1b      	ldr	r3, [pc, #108]	@ (8001a80 <MX_TIM2_Init+0xb8>)
 8001a14:	0018      	movs	r0, r3
 8001a16:	f004 fc6f 	bl	80062f8 <HAL_TIM_PWM_Init>
 8001a1a:	1e03      	subs	r3, r0, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a1e:	f7ff faf2 	bl	8001006 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a22:	211c      	movs	r1, #28
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2a:	187b      	adds	r3, r7, r1
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a30:	187a      	adds	r2, r7, r1
 8001a32:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <MX_TIM2_Init+0xb8>)
 8001a34:	0011      	movs	r1, r2
 8001a36:	0018      	movs	r0, r3
 8001a38:	f005 fa12 	bl	8006e60 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3c:	1e03      	subs	r3, r0, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001a40:	f7ff fae1 	bl	8001006 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a44:	003b      	movs	r3, r7
 8001a46:	2260      	movs	r2, #96	@ 0x60
 8001a48:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 15000;
 8001a4a:	003b      	movs	r3, r7
 8001a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001a88 <MX_TIM2_Init+0xc0>)
 8001a4e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001a50:	003b      	movs	r3, r7
 8001a52:	2202      	movs	r2, #2
 8001a54:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a56:	003b      	movs	r3, r7
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a5c:	0039      	movs	r1, r7
 8001a5e:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <MX_TIM2_Init+0xb8>)
 8001a60:	2208      	movs	r2, #8
 8001a62:	0018      	movs	r0, r3
 8001a64:	f004 fd7e 	bl	8006564 <HAL_TIM_PWM_ConfigChannel>
 8001a68:	1e03      	subs	r3, r0, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001a6c:	f7ff facb 	bl	8001006 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a70:	4b03      	ldr	r3, [pc, #12]	@ (8001a80 <MX_TIM2_Init+0xb8>)
 8001a72:	0018      	movs	r0, r3
 8001a74:	f000 f826 	bl	8001ac4 <HAL_TIM_MspPostInit>

}
 8001a78:	46c0      	nop			@ (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b00a      	add	sp, #40	@ 0x28
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000654 	.word	0x20000654
 8001a84:	000186a0 	.word	0x000186a0
 8001a88:	00003a98 	.word	0x00003a98

08001a8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	@ 0x80
 8001a9a:	05db      	lsls	r3, r3, #23
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d10b      	bne.n	8001ab8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aa0:	4b07      	ldr	r3, [pc, #28]	@ (8001ac0 <HAL_TIM_PWM_MspInit+0x34>)
 8001aa2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_TIM_PWM_MspInit+0x34>)
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001aac:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <HAL_TIM_PWM_MspInit+0x34>)
 8001aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001ab8:	46c0      	nop			@ (mov r8, r8)
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b004      	add	sp, #16
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b089      	sub	sp, #36	@ 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	240c      	movs	r4, #12
 8001ace:	193b      	adds	r3, r7, r4
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	2314      	movs	r3, #20
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	f006 f824 	bl	8007b24 <memset>
  if(timHandle->Instance==TIM2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	05db      	lsls	r3, r3, #23
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d121      	bne.n	8001b2c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae8:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <HAL_TIM_MspPostInit+0x70>)
 8001aea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <HAL_TIM_MspPostInit+0x70>)
 8001aee:	2104      	movs	r1, #4
 8001af0:	430a      	orrs	r2, r1
 8001af2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001af4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <HAL_TIM_MspPostInit+0x70>)
 8001af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af8:	2204      	movs	r2, #4
 8001afa:	4013      	ands	r3, r2
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b00:	0021      	movs	r1, r4
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2240      	movs	r2, #64	@ 0x40
 8001b06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM2;
 8001b1a:	187b      	adds	r3, r7, r1
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b20:	187b      	adds	r3, r7, r1
 8001b22:	4a05      	ldr	r2, [pc, #20]	@ (8001b38 <HAL_TIM_MspPostInit+0x74>)
 8001b24:	0019      	movs	r1, r3
 8001b26:	0010      	movs	r0, r2
 8001b28:	f001 fba2 	bl	8003270 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b2c:	46c0      	nop			@ (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b009      	add	sp, #36	@ 0x24
 8001b32:	bd90      	pop	{r4, r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	50000800 	.word	0x50000800

08001b3c <send_debug_message>:
 */

#include "uart_debugger.h"
#include "usart.h"

void send_debug_message(char *message) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	// Send a message over UART
	HAL_UART_Transmit(&huart2, message, 14, 10000);
 8001b44:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <send_debug_message+0x1c>)
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4804      	ldr	r0, [pc, #16]	@ (8001b5c <send_debug_message+0x20>)
 8001b4a:	220e      	movs	r2, #14
 8001b4c:	f005 fa46 	bl	8006fdc <HAL_UART_Transmit>
}
 8001b50:	46c0      	nop			@ (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b002      	add	sp, #8
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	00002710 	.word	0x00002710
 8001b5c:	200006a0 	.word	0x200006a0

08001b60 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b64:	4b23      	ldr	r3, [pc, #140]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b66:	4a24      	ldr	r2, [pc, #144]	@ (8001bf8 <MX_USART2_UART_Init+0x98>)
 8001b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b6a:	4b22      	ldr	r3, [pc, #136]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b6c:	22e1      	movs	r2, #225	@ 0xe1
 8001b6e:	0252      	lsls	r2, r2, #9
 8001b70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b72:	4b20      	ldr	r3, [pc, #128]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b78:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b84:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b86:	220c      	movs	r2, #12
 8001b88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b90:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b96:	4b17      	ldr	r3, [pc, #92]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b9c:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ba2:	4b14      	ldr	r3, [pc, #80]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001baa:	0018      	movs	r0, r3
 8001bac:	f005 f9c0 	bl	8006f30 <HAL_UART_Init>
 8001bb0:	1e03      	subs	r3, r0, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001bb4:	f7ff fa27 	bl	8001006 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001bba:	2100      	movs	r1, #0
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f005 fe9d 	bl	80078fc <HAL_UARTEx_SetTxFifoThreshold>
 8001bc2:	1e03      	subs	r3, r0, #0
 8001bc4:	d001      	beq.n	8001bca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001bc6:	f7ff fa1e 	bl	8001006 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bca:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001bcc:	2100      	movs	r1, #0
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f005 fed4 	bl	800797c <HAL_UARTEx_SetRxFifoThreshold>
 8001bd4:	1e03      	subs	r3, r0, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001bd8:	f7ff fa15 	bl	8001006 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001bde:	0018      	movs	r0, r3
 8001be0:	f005 fe52 	bl	8007888 <HAL_UARTEx_DisableFifoMode>
 8001be4:	1e03      	subs	r3, r0, #0
 8001be6:	d001      	beq.n	8001bec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001be8:	f7ff fa0d 	bl	8001006 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bec:	46c0      	nop			@ (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			@ (mov r8, r8)
 8001bf4:	200006a0 	.word	0x200006a0
 8001bf8:	40004400 	.word	0x40004400

08001bfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b08b      	sub	sp, #44	@ 0x2c
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	2414      	movs	r4, #20
 8001c06:	193b      	adds	r3, r7, r4
 8001c08:	0018      	movs	r0, r3
 8001c0a:	2314      	movs	r3, #20
 8001c0c:	001a      	movs	r2, r3
 8001c0e:	2100      	movs	r1, #0
 8001c10:	f005 ff88 	bl	8007b24 <memset>
  if(uartHandle->Instance==USART2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1b      	ldr	r2, [pc, #108]	@ (8001c88 <HAL_UART_MspInit+0x8c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d130      	bne.n	8001c80 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <HAL_UART_MspInit+0x90>)
 8001c20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c22:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <HAL_UART_MspInit+0x90>)
 8001c24:	2180      	movs	r1, #128	@ 0x80
 8001c26:	0289      	lsls	r1, r1, #10
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c2c:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <HAL_UART_MspInit+0x90>)
 8001c2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c30:	2380      	movs	r3, #128	@ 0x80
 8001c32:	029b      	lsls	r3, r3, #10
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <HAL_UART_MspInit+0x90>)
 8001c3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c3e:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <HAL_UART_MspInit+0x90>)
 8001c40:	2101      	movs	r1, #1
 8001c42:	430a      	orrs	r2, r1
 8001c44:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c46:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <HAL_UART_MspInit+0x90>)
 8001c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c52:	0021      	movs	r1, r4
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	220c      	movs	r2, #12
 8001c58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	187b      	adds	r3, r7, r1
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	187b      	adds	r3, r7, r1
 8001c68:	2200      	movs	r2, #0
 8001c6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	2201      	movs	r2, #1
 8001c70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	187a      	adds	r2, r7, r1
 8001c74:	23a0      	movs	r3, #160	@ 0xa0
 8001c76:	05db      	lsls	r3, r3, #23
 8001c78:	0011      	movs	r1, r2
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f001 faf8 	bl	8003270 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c80:	46c0      	nop			@ (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b00b      	add	sp, #44	@ 0x2c
 8001c86:	bd90      	pop	{r4, r7, pc}
 8001c88:	40004400 	.word	0x40004400
 8001c8c:	40021000 	.word	0x40021000

08001c90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c90:	480d      	ldr	r0, [pc, #52]	@ (8001cc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c94:	f7ff fd9a 	bl	80017cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c9a:	e003      	b.n	8001ca4 <LoopCopyDataInit>

08001c9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001c9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ca0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001ca2:	3104      	adds	r1, #4

08001ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001ca4:	480a      	ldr	r0, [pc, #40]	@ (8001cd0 <LoopForever+0xa>)
  ldr r3, =_edata
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <LoopForever+0xe>)
  adds r2, r0, r1
 8001ca8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001caa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001cac:	d3f6      	bcc.n	8001c9c <CopyDataInit>
  ldr r2, =_sbss
 8001cae:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd8 <LoopForever+0x12>)
  b LoopFillZerobss
 8001cb0:	e002      	b.n	8001cb8 <LoopFillZerobss>

08001cb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  str  r3, [r2]
 8001cb4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb6:	3204      	adds	r2, #4

08001cb8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001cb8:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <LoopForever+0x16>)
  cmp r2, r3
 8001cba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001cbc:	d3f9      	bcc.n	8001cb2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001cbe:	f005 ff3f 	bl	8007b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cc2:	f7ff f947 	bl	8000f54 <main>

08001cc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001cc6:	e7fe      	b.n	8001cc6 <LoopForever>
  ldr   r0, =_estack
 8001cc8:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8001ccc:	08008d54 	.word	0x08008d54
  ldr r0, =_sdata
 8001cd0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001cd4:	2000008c 	.word	0x2000008c
  ldr r2, =_sbss
 8001cd8:	2000008c 	.word	0x2000008c
  ldr r3, = _ebss
 8001cdc:	20000880 	.word	0x20000880

08001ce0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ce0:	e7fe      	b.n	8001ce0 <ADC1_IRQHandler>

08001ce2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ce8:	1dfb      	adds	r3, r7, #7
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cee:	2003      	movs	r0, #3
 8001cf0:	f000 f80e 	bl	8001d10 <HAL_InitTick>
 8001cf4:	1e03      	subs	r3, r0, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001cf8:	1dfb      	adds	r3, r7, #7
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
 8001cfe:	e001      	b.n	8001d04 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d00:	f7ff fcb6 	bl	8001670 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d04:	1dfb      	adds	r3, r7, #7
 8001d06:	781b      	ldrb	r3, [r3, #0]
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d18:	230f      	movs	r3, #15
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001d20:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <HAL_InitTick+0x88>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d02b      	beq.n	8001d80 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001d28:	4b1c      	ldr	r3, [pc, #112]	@ (8001d9c <HAL_InitTick+0x8c>)
 8001d2a:	681c      	ldr	r4, [r3, #0]
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <HAL_InitTick+0x88>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	0019      	movs	r1, r3
 8001d32:	23fa      	movs	r3, #250	@ 0xfa
 8001d34:	0098      	lsls	r0, r3, #2
 8001d36:	f7fe f9fb 	bl	8000130 <__udivsi3>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	0020      	movs	r0, r4
 8001d40:	f7fe f9f6 	bl	8000130 <__udivsi3>
 8001d44:	0003      	movs	r3, r0
 8001d46:	0018      	movs	r0, r3
 8001d48:	f000 ffab 	bl	8002ca2 <HAL_SYSTICK_Config>
 8001d4c:	1e03      	subs	r3, r0, #0
 8001d4e:	d112      	bne.n	8001d76 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d80a      	bhi.n	8001d6c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	2301      	movs	r3, #1
 8001d5a:	425b      	negs	r3, r3
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f000 ff7a 	bl	8002c58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d64:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <HAL_InitTick+0x90>)
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e00d      	b.n	8001d88 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001d6c:	230f      	movs	r3, #15
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	2201      	movs	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e008      	b.n	8001d88 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d76:	230f      	movs	r3, #15
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	e003      	b.n	8001d88 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d80:	230f      	movs	r3, #15
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001d88:	230f      	movs	r3, #15
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	781b      	ldrb	r3, [r3, #0]
}
 8001d8e:	0018      	movs	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b005      	add	sp, #20
 8001d94:	bd90      	pop	{r4, r7, pc}
 8001d96:	46c0      	nop			@ (mov r8, r8)
 8001d98:	20000038 	.word	0x20000038
 8001d9c:	20000030 	.word	0x20000030
 8001da0:	20000034 	.word	0x20000034

08001da4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001da8:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <HAL_IncTick+0x1c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	001a      	movs	r2, r3
 8001dae:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_IncTick+0x20>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	18d2      	adds	r2, r2, r3
 8001db4:	4b03      	ldr	r3, [pc, #12]	@ (8001dc4 <HAL_IncTick+0x20>)
 8001db6:	601a      	str	r2, [r3, #0]
}
 8001db8:	46c0      	nop			@ (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	20000038 	.word	0x20000038
 8001dc4:	20000734 	.word	0x20000734

08001dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;
 8001dcc:	4b02      	ldr	r3, [pc, #8]	@ (8001dd8 <HAL_GetTick+0x10>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	20000734 	.word	0x20000734

08001ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de4:	f7ff fff0 	bl	8001dc8 <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3301      	adds	r3, #1
 8001df4:	d005      	beq.n	8001e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001df6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e20 <HAL_Delay+0x44>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	001a      	movs	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	189b      	adds	r3, r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	f7ff ffe0 	bl	8001dc8 <HAL_GetTick>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d8f7      	bhi.n	8001e04 <HAL_Delay+0x28>
  {
  }
}
 8001e14:	46c0      	nop			@ (mov r8, r8)
 8001e16:	46c0      	nop			@ (mov r8, r8)
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b004      	add	sp, #16
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			@ (mov r8, r8)
 8001e20:	20000038 	.word	0x20000038

08001e24 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a05      	ldr	r2, [pc, #20]	@ (8001e48 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001e34:	401a      	ands	r2, r3
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	601a      	str	r2, [r3, #0]
}
 8001e3e:	46c0      	nop			@ (mov r8, r8)
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b002      	add	sp, #8
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	46c0      	nop			@ (mov r8, r8)
 8001e48:	ff3fffff 	.word	0xff3fffff

08001e4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	23c0      	movs	r3, #192	@ 0xc0
 8001e5a:	041b      	lsls	r3, r3, #16
 8001e5c:	4013      	ands	r3, r2
}
 8001e5e:	0018      	movs	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b002      	add	sp, #8
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	2104      	movs	r1, #4
 8001e7a:	400a      	ands	r2, r1
 8001e7c:	2107      	movs	r1, #7
 8001e7e:	4091      	lsls	r1, r2
 8001e80:	000a      	movs	r2, r1
 8001e82:	43d2      	mvns	r2, r2
 8001e84:	401a      	ands	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2104      	movs	r1, #4
 8001e8a:	400b      	ands	r3, r1
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4099      	lsls	r1, r3
 8001e90:	000b      	movs	r3, r1
 8001e92:	431a      	orrs	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001e98:	46c0      	nop			@ (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b004      	add	sp, #16
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	2104      	movs	r1, #4
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	2107      	movs	r1, #7
 8001eb6:	4091      	lsls	r1, r2
 8001eb8:	000a      	movs	r2, r1
 8001eba:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2104      	movs	r1, #4
 8001ec0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001ec2:	40da      	lsrs	r2, r3
 8001ec4:	0013      	movs	r3, r2
}
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b002      	add	sp, #8
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	23c0      	movs	r3, #192	@ 0xc0
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b002      	add	sp, #8
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	211f      	movs	r1, #31
 8001f04:	400a      	ands	r2, r1
 8001f06:	210f      	movs	r1, #15
 8001f08:	4091      	lsls	r1, r2
 8001f0a:	000a      	movs	r2, r1
 8001f0c:	43d2      	mvns	r2, r2
 8001f0e:	401a      	ands	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	0e9b      	lsrs	r3, r3, #26
 8001f14:	210f      	movs	r1, #15
 8001f16:	4019      	ands	r1, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	201f      	movs	r0, #31
 8001f1c:	4003      	ands	r3, r0
 8001f1e:	4099      	lsls	r1, r3
 8001f20:	000b      	movs	r3, r1
 8001f22:	431a      	orrs	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f28:	46c0      	nop			@ (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b004      	add	sp, #16
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	025b      	lsls	r3, r3, #9
 8001f42:	0a5b      	lsrs	r3, r3, #9
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f4a:	46c0      	nop			@ (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b002      	add	sp, #8
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	0252      	lsls	r2, r2, #9
 8001f64:	0a52      	lsrs	r2, r2, #9
 8001f66:	43d2      	mvns	r2, r2
 8001f68:	401a      	ands	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b002      	add	sp, #8
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	0212      	lsls	r2, r2, #8
 8001f8c:	43d2      	mvns	r2, r2
 8001f8e:	401a      	ands	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	400b      	ands	r3, r1
 8001f98:	4904      	ldr	r1, [pc, #16]	@ (8001fac <LL_ADC_SetChannelSamplingTime+0x34>)
 8001f9a:	400b      	ands	r3, r1
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b004      	add	sp, #16
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	7fffff00 	.word	0x7fffff00

08001fb0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4a05      	ldr	r2, [pc, #20]	@ (8001fd4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2280      	movs	r2, #128	@ 0x80
 8001fc2:	0552      	lsls	r2, r2, #21
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b002      	add	sp, #8
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	6fffffe8 	.word	0x6fffffe8

08001fd8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	2380      	movs	r3, #128	@ 0x80
 8001fe6:	055b      	lsls	r3, r3, #21
 8001fe8:	401a      	ands	r2, r3
 8001fea:	2380      	movs	r3, #128	@ 0x80
 8001fec:	055b      	lsls	r3, r3, #21
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d101      	bne.n	8001ff6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b002      	add	sp, #8
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4a04      	ldr	r2, [pc, #16]	@ (8002020 <LL_ADC_Enable+0x20>)
 800200e:	4013      	ands	r3, r2
 8002010:	2201      	movs	r2, #1
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002018:	46c0      	nop			@ (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	b002      	add	sp, #8
 800201e:	bd80      	pop	{r7, pc}
 8002020:	7fffffe8 	.word	0x7fffffe8

08002024 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4a04      	ldr	r2, [pc, #16]	@ (8002044 <LL_ADC_Disable+0x20>)
 8002032:	4013      	ands	r3, r2
 8002034:	2202      	movs	r2, #2
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800203c:	46c0      	nop			@ (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b002      	add	sp, #8
 8002042:	bd80      	pop	{r7, pc}
 8002044:	7fffffe8 	.word	0x7fffffe8

08002048 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2201      	movs	r2, #1
 8002056:	4013      	ands	r3, r2
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <LL_ADC_IsEnabled+0x18>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <LL_ADC_IsEnabled+0x1a>
 8002060:	2300      	movs	r3, #0
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b002      	add	sp, #8
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4a04      	ldr	r2, [pc, #16]	@ (800208c <LL_ADC_REG_StartConversion+0x20>)
 800207a:	4013      	ands	r3, r2
 800207c:	2204      	movs	r2, #4
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002084:	46c0      	nop			@ (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b002      	add	sp, #8
 800208a:	bd80      	pop	{r7, pc}
 800208c:	7fffffe8 	.word	0x7fffffe8

08002090 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2204      	movs	r2, #4
 800209e:	4013      	ands	r3, r2
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d101      	bne.n	80020a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	0018      	movs	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b002      	add	sp, #8
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020bc:	231f      	movs	r3, #31
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e17e      	b.n	80023d8 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10a      	bne.n	80020f8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f7fe fa0f 	bl	8000508 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2254      	movs	r2, #84	@ 0x54
 80020f4:	2100      	movs	r1, #0
 80020f6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0018      	movs	r0, r3
 80020fe:	f7ff ff6b 	bl	8001fd8 <LL_ADC_IsInternalRegulatorEnabled>
 8002102:	1e03      	subs	r3, r0, #0
 8002104:	d114      	bne.n	8002130 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	0018      	movs	r0, r3
 800210c:	f7ff ff50 	bl	8001fb0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002110:	4bb3      	ldr	r3, [pc, #716]	@ (80023e0 <HAL_ADC_Init+0x32c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	49b3      	ldr	r1, [pc, #716]	@ (80023e4 <HAL_ADC_Init+0x330>)
 8002116:	0018      	movs	r0, r3
 8002118:	f7fe f80a 	bl	8000130 <__udivsi3>
 800211c:	0003      	movs	r3, r0
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002122:	e002      	b.n	800212a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	3b01      	subs	r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f9      	bne.n	8002124 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	0018      	movs	r0, r3
 8002136:	f7ff ff4f 	bl	8001fd8 <LL_ADC_IsInternalRegulatorEnabled>
 800213a:	1e03      	subs	r3, r0, #0
 800213c:	d10f      	bne.n	800215e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002142:	2210      	movs	r2, #16
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214e:	2201      	movs	r2, #1
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002156:	231f      	movs	r3, #31
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	0018      	movs	r0, r3
 8002164:	f7ff ff94 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 8002168:	0003      	movs	r3, r0
 800216a:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002170:	2210      	movs	r2, #16
 8002172:	4013      	ands	r3, r2
 8002174:	d000      	beq.n	8002178 <HAL_ADC_Init+0xc4>
 8002176:	e122      	b.n	80023be <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d000      	beq.n	8002180 <HAL_ADC_Init+0xcc>
 800217e:	e11e      	b.n	80023be <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002184:	4a98      	ldr	r2, [pc, #608]	@ (80023e8 <HAL_ADC_Init+0x334>)
 8002186:	4013      	ands	r3, r2
 8002188:	2202      	movs	r2, #2
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	0018      	movs	r0, r3
 8002196:	f7ff ff57 	bl	8002048 <LL_ADC_IsEnabled>
 800219a:	1e03      	subs	r3, r0, #0
 800219c:	d000      	beq.n	80021a0 <HAL_ADC_Init+0xec>
 800219e:	e0ad      	b.n	80022fc <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7e1b      	ldrb	r3, [r3, #24]
 80021a8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80021aa:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7e5b      	ldrb	r3, [r3, #25]
 80021b0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80021b2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7e9b      	ldrb	r3, [r3, #26]
 80021b8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80021ba:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <HAL_ADC_Init+0x116>
 80021c4:	2380      	movs	r3, #128	@ 0x80
 80021c6:	015b      	lsls	r3, r3, #5
 80021c8:	e000      	b.n	80021cc <HAL_ADC_Init+0x118>
 80021ca:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80021cc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80021d2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da04      	bge.n	80021e6 <HAL_ADC_Init+0x132>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	085b      	lsrs	r3, r3, #1
 80021e4:	e001      	b.n	80021ea <HAL_ADC_Init+0x136>
 80021e6:	2380      	movs	r3, #128	@ 0x80
 80021e8:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80021ea:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	212c      	movs	r1, #44	@ 0x2c
 80021f0:	5c5b      	ldrb	r3, [r3, r1]
 80021f2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80021f4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2220      	movs	r2, #32
 8002200:	5c9b      	ldrb	r3, [r3, r2]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d115      	bne.n	8002232 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7e9b      	ldrb	r3, [r3, #26]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d105      	bne.n	800221a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	2280      	movs	r2, #128	@ 0x80
 8002212:	0252      	lsls	r2, r2, #9
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	e00b      	b.n	8002232 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221e:	2220      	movs	r2, #32
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222a:	2201      	movs	r2, #1
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00a      	beq.n	8002250 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800223e:	23e0      	movs	r3, #224	@ 0xe0
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002248:	4313      	orrs	r3, r2
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	4a65      	ldr	r2, [pc, #404]	@ (80023ec <HAL_ADC_Init+0x338>)
 8002258:	4013      	ands	r3, r2
 800225a:	0019      	movs	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	430a      	orrs	r2, r1
 8002264:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	0f9b      	lsrs	r3, r3, #30
 800226c:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002272:	4313      	orrs	r3, r2
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	4313      	orrs	r3, r2
 8002278:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	223c      	movs	r2, #60	@ 0x3c
 800227e:	5c9b      	ldrb	r3, [r3, r2]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d111      	bne.n	80022a8 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	0f9b      	lsrs	r3, r3, #30
 800228a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002290:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002296:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800229c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	2201      	movs	r2, #1
 80022a4:	4313      	orrs	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	4a50      	ldr	r2, [pc, #320]	@ (80023f0 <HAL_ADC_Init+0x33c>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	0019      	movs	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	23c0      	movs	r3, #192	@ 0xc0
 80022c4:	061b      	lsls	r3, r3, #24
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d018      	beq.n	80022fc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80022ce:	2380      	movs	r3, #128	@ 0x80
 80022d0:	05db      	lsls	r3, r3, #23
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d012      	beq.n	80022fc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80022da:	2380      	movs	r3, #128	@ 0x80
 80022dc:	061b      	lsls	r3, r3, #24
 80022de:	429a      	cmp	r2, r3
 80022e0:	d00c      	beq.n	80022fc <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80022e2:	4b44      	ldr	r3, [pc, #272]	@ (80023f4 <HAL_ADC_Init+0x340>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a44      	ldr	r2, [pc, #272]	@ (80023f8 <HAL_ADC_Init+0x344>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	0019      	movs	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	23f0      	movs	r3, #240	@ 0xf0
 80022f2:	039b      	lsls	r3, r3, #14
 80022f4:	401a      	ands	r2, r3
 80022f6:	4b3f      	ldr	r3, [pc, #252]	@ (80023f4 <HAL_ADC_Init+0x340>)
 80022f8:	430a      	orrs	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002304:	001a      	movs	r2, r3
 8002306:	2100      	movs	r1, #0
 8002308:	f7ff fdad 	bl	8001e66 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002314:	4939      	ldr	r1, [pc, #228]	@ (80023fc <HAL_ADC_Init+0x348>)
 8002316:	001a      	movs	r2, r3
 8002318:	f7ff fda5 	bl	8001e66 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2110      	movs	r1, #16
 8002330:	4249      	negs	r1, r1
 8002332:	430a      	orrs	r2, r1
 8002334:	629a      	str	r2, [r3, #40]	@ 0x28
 8002336:	e018      	b.n	800236a <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	2380      	movs	r3, #128	@ 0x80
 800233e:	039b      	lsls	r3, r3, #14
 8002340:	429a      	cmp	r2, r3
 8002342:	d112      	bne.n	800236a <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	3b01      	subs	r3, #1
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	221c      	movs	r2, #28
 8002354:	4013      	ands	r3, r2
 8002356:	2210      	movs	r2, #16
 8002358:	4252      	negs	r2, r2
 800235a:	409a      	lsls	r2, r3
 800235c:	0011      	movs	r1, r2
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2100      	movs	r1, #0
 8002370:	0018      	movs	r0, r3
 8002372:	f7ff fd95 	bl	8001ea0 <LL_ADC_GetSamplingTimeCommonChannels>
 8002376:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800237c:	429a      	cmp	r2, r3
 800237e:	d10b      	bne.n	8002398 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238a:	2203      	movs	r2, #3
 800238c:	4393      	bics	r3, r2
 800238e:	2201      	movs	r2, #1
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002396:	e01c      	b.n	80023d2 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239c:	2212      	movs	r2, #18
 800239e:	4393      	bics	r3, r2
 80023a0:	2210      	movs	r2, #16
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ac:	2201      	movs	r2, #1
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80023b4:	231f      	movs	r3, #31
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80023bc:	e009      	b.n	80023d2 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c2:	2210      	movs	r2, #16
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80023ca:	231f      	movs	r3, #31
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80023d2:	231f      	movs	r3, #31
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	781b      	ldrb	r3, [r3, #0]
}
 80023d8:	0018      	movs	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	b008      	add	sp, #32
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000030 	.word	0x20000030
 80023e4:	00030d40 	.word	0x00030d40
 80023e8:	fffffefd 	.word	0xfffffefd
 80023ec:	ffde0201 	.word	0xffde0201
 80023f0:	1ffffc02 	.word	0x1ffffc02
 80023f4:	40012708 	.word	0x40012708
 80023f8:	ffc3ffff 	.word	0xffc3ffff
 80023fc:	7fffff04 	.word	0x7fffff04

08002400 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002400:	b5b0      	push	{r4, r5, r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	0018      	movs	r0, r3
 8002412:	f7ff fe3d 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 8002416:	1e03      	subs	r3, r0, #0
 8002418:	d16c      	bne.n	80024f4 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2254      	movs	r2, #84	@ 0x54
 800241e:	5c9b      	ldrb	r3, [r3, r2]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_ADC_Start_DMA+0x28>
 8002424:	2302      	movs	r3, #2
 8002426:	e06c      	b.n	8002502 <HAL_ADC_Start_DMA+0x102>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2254      	movs	r2, #84	@ 0x54
 800242c:	2101      	movs	r1, #1
 800242e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	4013      	ands	r3, r2
 800243a:	d113      	bne.n	8002464 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0018      	movs	r0, r3
 8002442:	f7ff fe01 	bl	8002048 <LL_ADC_IsEnabled>
 8002446:	1e03      	subs	r3, r0, #0
 8002448:	d004      	beq.n	8002454 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	0018      	movs	r0, r3
 8002450:	f7ff fde8 	bl	8002024 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2101      	movs	r1, #1
 8002460:	430a      	orrs	r2, r1
 8002462:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002464:	2517      	movs	r5, #23
 8002466:	197c      	adds	r4, r7, r5
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	0018      	movs	r0, r3
 800246c:	f000 fa3c 	bl	80028e8 <ADC_Enable>
 8002470:	0003      	movs	r3, r0
 8002472:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002474:	002c      	movs	r4, r5
 8002476:	193b      	adds	r3, r7, r4
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d13e      	bne.n	80024fc <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002482:	4a22      	ldr	r2, [pc, #136]	@ (800250c <HAL_ADC_Start_DMA+0x10c>)
 8002484:	4013      	ands	r3, r2
 8002486:	2280      	movs	r2, #128	@ 0x80
 8002488:	0052      	lsls	r2, r2, #1
 800248a:	431a      	orrs	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800249a:	4a1d      	ldr	r2, [pc, #116]	@ (8002510 <HAL_ADC_Start_DMA+0x110>)
 800249c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002514 <HAL_ADC_Start_DMA+0x114>)
 80024a4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002518 <HAL_ADC_Start_DMA+0x118>)
 80024ac:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	221c      	movs	r2, #28
 80024b4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2254      	movs	r2, #84	@ 0x54
 80024ba:	2100      	movs	r1, #0
 80024bc:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2110      	movs	r1, #16
 80024ca:	430a      	orrs	r2, r1
 80024cc:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3340      	adds	r3, #64	@ 0x40
 80024d8:	0019      	movs	r1, r3
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	193c      	adds	r4, r7, r4
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f000 fc76 	bl	8002dd0 <HAL_DMA_Start_IT>
 80024e4:	0003      	movs	r3, r0
 80024e6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0018      	movs	r0, r3
 80024ee:	f7ff fdbd 	bl	800206c <LL_ADC_REG_StartConversion>
 80024f2:	e003      	b.n	80024fc <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024f4:	2317      	movs	r3, #23
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	2202      	movs	r2, #2
 80024fa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80024fc:	2317      	movs	r3, #23
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	781b      	ldrb	r3, [r3, #0]
}
 8002502:	0018      	movs	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	b006      	add	sp, #24
 8002508:	bdb0      	pop	{r4, r5, r7, pc}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	fffff0fe 	.word	0xfffff0fe
 8002510:	080029e5 	.word	0x080029e5
 8002514:	08002aad 	.word	0x08002aad
 8002518:	08002acb 	.word	0x08002acb

0800251c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002524:	46c0      	nop			@ (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	b002      	add	sp, #8
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002534:	46c0      	nop			@ (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b002      	add	sp, #8
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002546:	2317      	movs	r3, #23
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2254      	movs	r2, #84	@ 0x54
 8002556:	5c9b      	ldrb	r3, [r3, r2]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x24>
 800255c:	2302      	movs	r3, #2
 800255e:	e1be      	b.n	80028de <HAL_ADC_ConfigChannel+0x3a2>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2254      	movs	r2, #84	@ 0x54
 8002564:	2101      	movs	r1, #1
 8002566:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0018      	movs	r0, r3
 800256e:	f7ff fd8f 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 8002572:	1e03      	subs	r3, r0, #0
 8002574:	d000      	beq.n	8002578 <HAL_ADC_ConfigChannel+0x3c>
 8002576:	e1a1      	b.n	80028bc <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d100      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x46>
 8002580:	e152      	b.n	8002828 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	2380      	movs	r3, #128	@ 0x80
 8002588:	061b      	lsls	r3, r3, #24
 800258a:	429a      	cmp	r2, r3
 800258c:	d004      	beq.n	8002598 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002592:	4ac2      	ldr	r2, [pc, #776]	@ (800289c <HAL_ADC_ConfigChannel+0x360>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d108      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0019      	movs	r1, r3
 80025a2:	0010      	movs	r0, r2
 80025a4:	f7ff fcc4 	bl	8001f30 <LL_ADC_REG_SetSequencerChAdd>
 80025a8:	e0ed      	b.n	8002786 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	211f      	movs	r1, #31
 80025b4:	400b      	ands	r3, r1
 80025b6:	210f      	movs	r1, #15
 80025b8:	4099      	lsls	r1, r3
 80025ba:	000b      	movs	r3, r1
 80025bc:	43db      	mvns	r3, r3
 80025be:	4013      	ands	r3, r2
 80025c0:	0019      	movs	r1, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	025b      	lsls	r3, r3, #9
 80025c8:	0a5b      	lsrs	r3, r3, #9
 80025ca:	d105      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x9c>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0e9b      	lsrs	r3, r3, #26
 80025d2:	221f      	movs	r2, #31
 80025d4:	4013      	ands	r3, r2
 80025d6:	e0bc      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2201      	movs	r2, #1
 80025de:	4013      	ands	r3, r2
 80025e0:	d000      	beq.n	80025e4 <HAL_ADC_ConfigChannel+0xa8>
 80025e2:	e0b5      	b.n	8002750 <HAL_ADC_ConfigChannel+0x214>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2202      	movs	r2, #2
 80025ea:	4013      	ands	r3, r2
 80025ec:	d000      	beq.n	80025f0 <HAL_ADC_ConfigChannel+0xb4>
 80025ee:	e0ad      	b.n	800274c <HAL_ADC_ConfigChannel+0x210>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2204      	movs	r2, #4
 80025f6:	4013      	ands	r3, r2
 80025f8:	d000      	beq.n	80025fc <HAL_ADC_ConfigChannel+0xc0>
 80025fa:	e0a5      	b.n	8002748 <HAL_ADC_ConfigChannel+0x20c>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2208      	movs	r2, #8
 8002602:	4013      	ands	r3, r2
 8002604:	d000      	beq.n	8002608 <HAL_ADC_ConfigChannel+0xcc>
 8002606:	e09d      	b.n	8002744 <HAL_ADC_ConfigChannel+0x208>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2210      	movs	r2, #16
 800260e:	4013      	ands	r3, r2
 8002610:	d000      	beq.n	8002614 <HAL_ADC_ConfigChannel+0xd8>
 8002612:	e095      	b.n	8002740 <HAL_ADC_ConfigChannel+0x204>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2220      	movs	r2, #32
 800261a:	4013      	ands	r3, r2
 800261c:	d000      	beq.n	8002620 <HAL_ADC_ConfigChannel+0xe4>
 800261e:	e08d      	b.n	800273c <HAL_ADC_ConfigChannel+0x200>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2240      	movs	r2, #64	@ 0x40
 8002626:	4013      	ands	r3, r2
 8002628:	d000      	beq.n	800262c <HAL_ADC_ConfigChannel+0xf0>
 800262a:	e085      	b.n	8002738 <HAL_ADC_ConfigChannel+0x1fc>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2280      	movs	r2, #128	@ 0x80
 8002632:	4013      	ands	r3, r2
 8002634:	d000      	beq.n	8002638 <HAL_ADC_ConfigChannel+0xfc>
 8002636:	e07d      	b.n	8002734 <HAL_ADC_ConfigChannel+0x1f8>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2380      	movs	r3, #128	@ 0x80
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4013      	ands	r3, r2
 8002642:	d000      	beq.n	8002646 <HAL_ADC_ConfigChannel+0x10a>
 8002644:	e074      	b.n	8002730 <HAL_ADC_ConfigChannel+0x1f4>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	2380      	movs	r3, #128	@ 0x80
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4013      	ands	r3, r2
 8002650:	d000      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x118>
 8002652:	e06b      	b.n	800272c <HAL_ADC_ConfigChannel+0x1f0>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	2380      	movs	r3, #128	@ 0x80
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4013      	ands	r3, r2
 800265e:	d000      	beq.n	8002662 <HAL_ADC_ConfigChannel+0x126>
 8002660:	e062      	b.n	8002728 <HAL_ADC_ConfigChannel+0x1ec>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	2380      	movs	r3, #128	@ 0x80
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	4013      	ands	r3, r2
 800266c:	d000      	beq.n	8002670 <HAL_ADC_ConfigChannel+0x134>
 800266e:	e059      	b.n	8002724 <HAL_ADC_ConfigChannel+0x1e8>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2380      	movs	r3, #128	@ 0x80
 8002676:	015b      	lsls	r3, r3, #5
 8002678:	4013      	ands	r3, r2
 800267a:	d151      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x1e4>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2380      	movs	r3, #128	@ 0x80
 8002682:	019b      	lsls	r3, r3, #6
 8002684:	4013      	ands	r3, r2
 8002686:	d149      	bne.n	800271c <HAL_ADC_ConfigChannel+0x1e0>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	2380      	movs	r3, #128	@ 0x80
 800268e:	01db      	lsls	r3, r3, #7
 8002690:	4013      	ands	r3, r2
 8002692:	d141      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x1dc>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2380      	movs	r3, #128	@ 0x80
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	4013      	ands	r3, r2
 800269e:	d139      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x1d8>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	2380      	movs	r3, #128	@ 0x80
 80026a6:	025b      	lsls	r3, r3, #9
 80026a8:	4013      	ands	r3, r2
 80026aa:	d131      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x1d4>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	2380      	movs	r3, #128	@ 0x80
 80026b2:	029b      	lsls	r3, r3, #10
 80026b4:	4013      	ands	r3, r2
 80026b6:	d129      	bne.n	800270c <HAL_ADC_ConfigChannel+0x1d0>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	2380      	movs	r3, #128	@ 0x80
 80026be:	02db      	lsls	r3, r3, #11
 80026c0:	4013      	ands	r3, r2
 80026c2:	d121      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x1cc>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	2380      	movs	r3, #128	@ 0x80
 80026ca:	031b      	lsls	r3, r3, #12
 80026cc:	4013      	ands	r3, r2
 80026ce:	d119      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x1c8>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2380      	movs	r3, #128	@ 0x80
 80026d6:	035b      	lsls	r3, r3, #13
 80026d8:	4013      	ands	r3, r2
 80026da:	d111      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x1c4>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2380      	movs	r3, #128	@ 0x80
 80026e2:	039b      	lsls	r3, r3, #14
 80026e4:	4013      	ands	r3, r2
 80026e6:	d109      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x1c0>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	2380      	movs	r3, #128	@ 0x80
 80026ee:	03db      	lsls	r3, r3, #15
 80026f0:	4013      	ands	r3, r2
 80026f2:	d001      	beq.n	80026f8 <HAL_ADC_ConfigChannel+0x1bc>
 80026f4:	2316      	movs	r3, #22
 80026f6:	e02c      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 80026f8:	2300      	movs	r3, #0
 80026fa:	e02a      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 80026fc:	2315      	movs	r3, #21
 80026fe:	e028      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 8002700:	2314      	movs	r3, #20
 8002702:	e026      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 8002704:	2313      	movs	r3, #19
 8002706:	e024      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 8002708:	2312      	movs	r3, #18
 800270a:	e022      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 800270c:	2311      	movs	r3, #17
 800270e:	e020      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 8002710:	2310      	movs	r3, #16
 8002712:	e01e      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 8002714:	230f      	movs	r3, #15
 8002716:	e01c      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 8002718:	230e      	movs	r3, #14
 800271a:	e01a      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 800271c:	230d      	movs	r3, #13
 800271e:	e018      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 8002720:	230c      	movs	r3, #12
 8002722:	e016      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 8002724:	230b      	movs	r3, #11
 8002726:	e014      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 8002728:	230a      	movs	r3, #10
 800272a:	e012      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 800272c:	2309      	movs	r3, #9
 800272e:	e010      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 8002730:	2308      	movs	r3, #8
 8002732:	e00e      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 8002734:	2307      	movs	r3, #7
 8002736:	e00c      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 8002738:	2306      	movs	r3, #6
 800273a:	e00a      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 800273c:	2305      	movs	r3, #5
 800273e:	e008      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 8002740:	2304      	movs	r3, #4
 8002742:	e006      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 8002744:	2303      	movs	r3, #3
 8002746:	e004      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 8002748:	2302      	movs	r3, #2
 800274a:	e002      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <HAL_ADC_ConfigChannel+0x216>
 8002750:	2300      	movs	r3, #0
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	6852      	ldr	r2, [r2, #4]
 8002756:	201f      	movs	r0, #31
 8002758:	4002      	ands	r2, r0
 800275a:	4093      	lsls	r3, r2
 800275c:	000a      	movs	r2, r1
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	429a      	cmp	r2, r3
 8002772:	d808      	bhi.n	8002786 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	001a      	movs	r2, r3
 8002782:	f7ff fbb5 	bl	8001ef0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6819      	ldr	r1, [r3, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	001a      	movs	r2, r3
 8002794:	f7ff fbf0 	bl	8001f78 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db00      	blt.n	80027a2 <HAL_ADC_ConfigChannel+0x266>
 80027a0:	e096      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027a2:	4b3f      	ldr	r3, [pc, #252]	@ (80028a0 <HAL_ADC_ConfigChannel+0x364>)
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7ff fb51 	bl	8001e4c <LL_ADC_GetCommonPathInternalCh>
 80027aa:	0003      	movs	r3, r0
 80027ac:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a3c      	ldr	r2, [pc, #240]	@ (80028a4 <HAL_ADC_ConfigChannel+0x368>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d123      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	041b      	lsls	r3, r3, #16
 80027be:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80027c0:	d11e      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2280      	movs	r2, #128	@ 0x80
 80027c6:	0412      	lsls	r2, r2, #16
 80027c8:	4313      	orrs	r3, r2
 80027ca:	4a35      	ldr	r2, [pc, #212]	@ (80028a0 <HAL_ADC_ConfigChannel+0x364>)
 80027cc:	0019      	movs	r1, r3
 80027ce:	0010      	movs	r0, r2
 80027d0:	f7ff fb28 	bl	8001e24 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80027d4:	4b34      	ldr	r3, [pc, #208]	@ (80028a8 <HAL_ADC_ConfigChannel+0x36c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4934      	ldr	r1, [pc, #208]	@ (80028ac <HAL_ADC_ConfigChannel+0x370>)
 80027da:	0018      	movs	r0, r3
 80027dc:	f7fd fca8 	bl	8000130 <__udivsi3>
 80027e0:	0003      	movs	r3, r0
 80027e2:	001a      	movs	r2, r3
 80027e4:	0013      	movs	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	189b      	adds	r3, r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	3301      	adds	r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027f0:	e002      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	3b01      	subs	r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f9      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80027fe:	e067      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a2a      	ldr	r2, [pc, #168]	@ (80028b0 <HAL_ADC_ConfigChannel+0x374>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d162      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	2380      	movs	r3, #128	@ 0x80
 800280e:	03db      	lsls	r3, r3, #15
 8002810:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002812:	d15d      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	2280      	movs	r2, #128	@ 0x80
 8002818:	03d2      	lsls	r2, r2, #15
 800281a:	4313      	orrs	r3, r2
 800281c:	4a20      	ldr	r2, [pc, #128]	@ (80028a0 <HAL_ADC_ConfigChannel+0x364>)
 800281e:	0019      	movs	r1, r3
 8002820:	0010      	movs	r0, r2
 8002822:	f7ff faff 	bl	8001e24 <LL_ADC_SetCommonPathInternalCh>
 8002826:	e053      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	061b      	lsls	r3, r3, #24
 8002830:	429a      	cmp	r2, r3
 8002832:	d004      	beq.n	800283e <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002838:	4a18      	ldr	r2, [pc, #96]	@ (800289c <HAL_ADC_ConfigChannel+0x360>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d107      	bne.n	800284e <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	0019      	movs	r1, r3
 8002848:	0010      	movs	r0, r2
 800284a:	f7ff fb82 	bl	8001f52 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	da3c      	bge.n	80028d0 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002856:	4b12      	ldr	r3, [pc, #72]	@ (80028a0 <HAL_ADC_ConfigChannel+0x364>)
 8002858:	0018      	movs	r0, r3
 800285a:	f7ff faf7 	bl	8001e4c <LL_ADC_GetCommonPathInternalCh>
 800285e:	0003      	movs	r3, r0
 8002860:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a0f      	ldr	r2, [pc, #60]	@ (80028a4 <HAL_ADC_ConfigChannel+0x368>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d108      	bne.n	800287e <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4a11      	ldr	r2, [pc, #68]	@ (80028b4 <HAL_ADC_ConfigChannel+0x378>)
 8002870:	4013      	ands	r3, r2
 8002872:	4a0b      	ldr	r2, [pc, #44]	@ (80028a0 <HAL_ADC_ConfigChannel+0x364>)
 8002874:	0019      	movs	r1, r3
 8002876:	0010      	movs	r0, r2
 8002878:	f7ff fad4 	bl	8001e24 <LL_ADC_SetCommonPathInternalCh>
 800287c:	e028      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a0b      	ldr	r2, [pc, #44]	@ (80028b0 <HAL_ADC_ConfigChannel+0x374>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d123      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4a0b      	ldr	r2, [pc, #44]	@ (80028b8 <HAL_ADC_ConfigChannel+0x37c>)
 800288c:	4013      	ands	r3, r2
 800288e:	4a04      	ldr	r2, [pc, #16]	@ (80028a0 <HAL_ADC_ConfigChannel+0x364>)
 8002890:	0019      	movs	r1, r3
 8002892:	0010      	movs	r0, r2
 8002894:	f7ff fac6 	bl	8001e24 <LL_ADC_SetCommonPathInternalCh>
 8002898:	e01a      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x394>
 800289a:	46c0      	nop			@ (mov r8, r8)
 800289c:	80000004 	.word	0x80000004
 80028a0:	40012708 	.word	0x40012708
 80028a4:	a4000200 	.word	0xa4000200
 80028a8:	20000030 	.word	0x20000030
 80028ac:	00030d40 	.word	0x00030d40
 80028b0:	a8000400 	.word	0xa8000400
 80028b4:	ff7fffff 	.word	0xff7fffff
 80028b8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c0:	2220      	movs	r2, #32
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80028c8:	2317      	movs	r3, #23
 80028ca:	18fb      	adds	r3, r7, r3
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2254      	movs	r2, #84	@ 0x54
 80028d4:	2100      	movs	r1, #0
 80028d6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80028d8:	2317      	movs	r3, #23
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	781b      	ldrb	r3, [r3, #0]
}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b006      	add	sp, #24
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	46c0      	nop			@ (mov r8, r8)

080028e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0018      	movs	r0, r3
 80028fa:	f7ff fba5 	bl	8002048 <LL_ADC_IsEnabled>
 80028fe:	1e03      	subs	r3, r0, #0
 8002900:	d162      	bne.n	80029c8 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4a32      	ldr	r2, [pc, #200]	@ (80029d4 <ADC_Enable+0xec>)
 800290a:	4013      	ands	r3, r2
 800290c:	d00d      	beq.n	800292a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002912:	2210      	movs	r2, #16
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291e:	2201      	movs	r2, #1
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e04f      	b.n	80029ca <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	0018      	movs	r0, r3
 8002930:	f7ff fb66 	bl	8002000 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002934:	4b28      	ldr	r3, [pc, #160]	@ (80029d8 <ADC_Enable+0xf0>)
 8002936:	0018      	movs	r0, r3
 8002938:	f7ff fa88 	bl	8001e4c <LL_ADC_GetCommonPathInternalCh>
 800293c:	0002      	movs	r2, r0
 800293e:	2380      	movs	r3, #128	@ 0x80
 8002940:	041b      	lsls	r3, r3, #16
 8002942:	4013      	ands	r3, r2
 8002944:	d00f      	beq.n	8002966 <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002946:	4b25      	ldr	r3, [pc, #148]	@ (80029dc <ADC_Enable+0xf4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4925      	ldr	r1, [pc, #148]	@ (80029e0 <ADC_Enable+0xf8>)
 800294c:	0018      	movs	r0, r3
 800294e:	f7fd fbef 	bl	8000130 <__udivsi3>
 8002952:	0003      	movs	r3, r0
 8002954:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002956:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002958:	e002      	b.n	8002960 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	3b01      	subs	r3, #1
 800295e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f9      	bne.n	800295a <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	7e5b      	ldrb	r3, [r3, #25]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d02c      	beq.n	80029c8 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800296e:	f7ff fa2b 	bl	8001dc8 <HAL_GetTick>
 8002972:	0003      	movs	r3, r0
 8002974:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002976:	e020      	b.n	80029ba <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0018      	movs	r0, r3
 800297e:	f7ff fb63 	bl	8002048 <LL_ADC_IsEnabled>
 8002982:	1e03      	subs	r3, r0, #0
 8002984:	d104      	bne.n	8002990 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	0018      	movs	r0, r3
 800298c:	f7ff fb38 	bl	8002000 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002990:	f7ff fa1a 	bl	8001dc8 <HAL_GetTick>
 8002994:	0002      	movs	r2, r0
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d90d      	bls.n	80029ba <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a2:	2210      	movs	r2, #16
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ae:	2201      	movs	r2, #1
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e007      	b.n	80029ca <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2201      	movs	r2, #1
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d1d7      	bne.n	8002978 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	0018      	movs	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b004      	add	sp, #16
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	80000017 	.word	0x80000017
 80029d8:	40012708 	.word	0x40012708
 80029dc:	20000030 	.word	0x20000030
 80029e0:	00030d40 	.word	0x00030d40

080029e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f6:	2250      	movs	r2, #80	@ 0x50
 80029f8:	4013      	ands	r3, r2
 80029fa:	d141      	bne.n	8002a80 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a00:	2280      	movs	r2, #128	@ 0x80
 8002a02:	0092      	lsls	r2, r2, #2
 8002a04:	431a      	orrs	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f7ff fa5d 	bl	8001ece <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a14:	1e03      	subs	r3, r0, #0
 8002a16:	d02e      	beq.n	8002a76 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	7e9b      	ldrb	r3, [r3, #26]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d12a      	bne.n	8002a76 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2208      	movs	r2, #8
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d123      	bne.n	8002a76 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	0018      	movs	r0, r3
 8002a34:	f7ff fb2c 	bl	8002090 <LL_ADC_REG_IsConversionOngoing>
 8002a38:	1e03      	subs	r3, r0, #0
 8002a3a:	d110      	bne.n	8002a5e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	210c      	movs	r1, #12
 8002a48:	438a      	bics	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a50:	4a15      	ldr	r2, [pc, #84]	@ (8002aa8 <ADC_DMAConvCplt+0xc4>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	2201      	movs	r2, #1
 8002a56:	431a      	orrs	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a5c:	e00b      	b.n	8002a76 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a62:	2220      	movs	r2, #32
 8002a64:	431a      	orrs	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6e:	2201      	movs	r2, #1
 8002a70:	431a      	orrs	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7fe f971 	bl	8000d60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a7e:	e00f      	b.n	8002aa0 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a84:	2210      	movs	r2, #16
 8002a86:	4013      	ands	r3, r2
 8002a88:	d004      	beq.n	8002a94 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f7ff fd4d 	bl	800252c <HAL_ADC_ErrorCallback>
}
 8002a92:	e005      	b.n	8002aa0 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	0010      	movs	r0, r2
 8002a9e:	4798      	blx	r3
}
 8002aa0:	46c0      	nop			@ (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b004      	add	sp, #16
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	fffffefe 	.word	0xfffffefe

08002aac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f7ff fd2d 	bl	800251c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ac2:	46c0      	nop			@ (mov r8, r8)
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b004      	add	sp, #16
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002adc:	2240      	movs	r2, #64	@ 0x40
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae8:	2204      	movs	r2, #4
 8002aea:	431a      	orrs	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f7ff fd1a 	bl	800252c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002af8:	46c0      	nop			@ (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b004      	add	sp, #16
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	0002      	movs	r2, r0
 8002b08:	1dfb      	adds	r3, r7, #7
 8002b0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b0c:	1dfb      	adds	r3, r7, #7
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b12:	d809      	bhi.n	8002b28 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b14:	1dfb      	adds	r3, r7, #7
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	001a      	movs	r2, r3
 8002b1a:	231f      	movs	r3, #31
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	4b04      	ldr	r3, [pc, #16]	@ (8002b30 <__NVIC_EnableIRQ+0x30>)
 8002b20:	2101      	movs	r1, #1
 8002b22:	4091      	lsls	r1, r2
 8002b24:	000a      	movs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002b28:	46c0      	nop			@ (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b002      	add	sp, #8
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	e000e100 	.word	0xe000e100

08002b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	6039      	str	r1, [r7, #0]
 8002b3e:	1dfb      	adds	r3, r7, #7
 8002b40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b42:	1dfb      	adds	r3, r7, #7
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b48:	d828      	bhi.n	8002b9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8002c08 <__NVIC_SetPriority+0xd4>)
 8002b4c:	1dfb      	adds	r3, r7, #7
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	b25b      	sxtb	r3, r3
 8002b52:	089b      	lsrs	r3, r3, #2
 8002b54:	33c0      	adds	r3, #192	@ 0xc0
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	589b      	ldr	r3, [r3, r2]
 8002b5a:	1dfa      	adds	r2, r7, #7
 8002b5c:	7812      	ldrb	r2, [r2, #0]
 8002b5e:	0011      	movs	r1, r2
 8002b60:	2203      	movs	r2, #3
 8002b62:	400a      	ands	r2, r1
 8002b64:	00d2      	lsls	r2, r2, #3
 8002b66:	21ff      	movs	r1, #255	@ 0xff
 8002b68:	4091      	lsls	r1, r2
 8002b6a:	000a      	movs	r2, r1
 8002b6c:	43d2      	mvns	r2, r2
 8002b6e:	401a      	ands	r2, r3
 8002b70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	019b      	lsls	r3, r3, #6
 8002b76:	22ff      	movs	r2, #255	@ 0xff
 8002b78:	401a      	ands	r2, r3
 8002b7a:	1dfb      	adds	r3, r7, #7
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	0018      	movs	r0, r3
 8002b80:	2303      	movs	r3, #3
 8002b82:	4003      	ands	r3, r0
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b88:	481f      	ldr	r0, [pc, #124]	@ (8002c08 <__NVIC_SetPriority+0xd4>)
 8002b8a:	1dfb      	adds	r3, r7, #7
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	b25b      	sxtb	r3, r3
 8002b90:	089b      	lsrs	r3, r3, #2
 8002b92:	430a      	orrs	r2, r1
 8002b94:	33c0      	adds	r3, #192	@ 0xc0
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002b9a:	e031      	b.n	8002c00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8002c0c <__NVIC_SetPriority+0xd8>)
 8002b9e:	1dfb      	adds	r3, r7, #7
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	230f      	movs	r3, #15
 8002ba6:	400b      	ands	r3, r1
 8002ba8:	3b08      	subs	r3, #8
 8002baa:	089b      	lsrs	r3, r3, #2
 8002bac:	3306      	adds	r3, #6
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	18d3      	adds	r3, r2, r3
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	1dfa      	adds	r2, r7, #7
 8002bb8:	7812      	ldrb	r2, [r2, #0]
 8002bba:	0011      	movs	r1, r2
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	00d2      	lsls	r2, r2, #3
 8002bc2:	21ff      	movs	r1, #255	@ 0xff
 8002bc4:	4091      	lsls	r1, r2
 8002bc6:	000a      	movs	r2, r1
 8002bc8:	43d2      	mvns	r2, r2
 8002bca:	401a      	ands	r2, r3
 8002bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	019b      	lsls	r3, r3, #6
 8002bd2:	22ff      	movs	r2, #255	@ 0xff
 8002bd4:	401a      	ands	r2, r3
 8002bd6:	1dfb      	adds	r3, r7, #7
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	2303      	movs	r3, #3
 8002bde:	4003      	ands	r3, r0
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002be4:	4809      	ldr	r0, [pc, #36]	@ (8002c0c <__NVIC_SetPriority+0xd8>)
 8002be6:	1dfb      	adds	r3, r7, #7
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	001c      	movs	r4, r3
 8002bec:	230f      	movs	r3, #15
 8002bee:	4023      	ands	r3, r4
 8002bf0:	3b08      	subs	r3, #8
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	3306      	adds	r3, #6
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	18c3      	adds	r3, r0, r3
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	601a      	str	r2, [r3, #0]
}
 8002c00:	46c0      	nop			@ (mov r8, r8)
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b003      	add	sp, #12
 8002c06:	bd90      	pop	{r4, r7, pc}
 8002c08:	e000e100 	.word	0xe000e100
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	1e5a      	subs	r2, r3, #1
 8002c1c:	2380      	movs	r3, #128	@ 0x80
 8002c1e:	045b      	lsls	r3, r3, #17
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d301      	bcc.n	8002c28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c24:	2301      	movs	r3, #1
 8002c26:	e010      	b.n	8002c4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c28:	4b0a      	ldr	r3, [pc, #40]	@ (8002c54 <SysTick_Config+0x44>)
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	3a01      	subs	r2, #1
 8002c2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c30:	2301      	movs	r3, #1
 8002c32:	425b      	negs	r3, r3
 8002c34:	2103      	movs	r1, #3
 8002c36:	0018      	movs	r0, r3
 8002c38:	f7ff ff7c 	bl	8002b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c3c:	4b05      	ldr	r3, [pc, #20]	@ (8002c54 <SysTick_Config+0x44>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c42:	4b04      	ldr	r3, [pc, #16]	@ (8002c54 <SysTick_Config+0x44>)
 8002c44:	2207      	movs	r2, #7
 8002c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b002      	add	sp, #8
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			@ (mov r8, r8)
 8002c54:	e000e010 	.word	0xe000e010

08002c58 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	210f      	movs	r1, #15
 8002c64:	187b      	adds	r3, r7, r1
 8002c66:	1c02      	adds	r2, r0, #0
 8002c68:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	187b      	adds	r3, r7, r1
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	b25b      	sxtb	r3, r3
 8002c72:	0011      	movs	r1, r2
 8002c74:	0018      	movs	r0, r3
 8002c76:	f7ff ff5d 	bl	8002b34 <__NVIC_SetPriority>
}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b004      	add	sp, #16
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	0002      	movs	r2, r0
 8002c8a:	1dfb      	adds	r3, r7, #7
 8002c8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c8e:	1dfb      	adds	r3, r7, #7
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	b25b      	sxtb	r3, r3
 8002c94:	0018      	movs	r0, r3
 8002c96:	f7ff ff33 	bl	8002b00 <__NVIC_EnableIRQ>
}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b002      	add	sp, #8
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7ff ffaf 	bl	8002c10 <SysTick_Config>
 8002cb2:	0003      	movs	r3, r0
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b002      	add	sp, #8
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e077      	b.n	8002dbe <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a3d      	ldr	r2, [pc, #244]	@ (8002dc8 <HAL_DMA_Init+0x10c>)
 8002cd4:	4694      	mov	ip, r2
 8002cd6:	4463      	add	r3, ip
 8002cd8:	2114      	movs	r1, #20
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f7fd fa28 	bl	8000130 <__udivsi3>
 8002ce0:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002ce2:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2225      	movs	r2, #37	@ 0x25
 8002cec:	2102      	movs	r1, #2
 8002cee:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4934      	ldr	r1, [pc, #208]	@ (8002dcc <HAL_DMA_Init+0x110>)
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6819      	ldr	r1, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f000 fa49 	bl	80031d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	2380      	movs	r3, #128	@ 0x80
 8002d44:	01db      	lsls	r3, r3, #7
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d102      	bne.n	8002d50 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d58:	21ff      	movs	r1, #255	@ 0xff
 8002d5a:	400a      	ands	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d66:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d011      	beq.n	8002d94 <HAL_DMA_Init+0xd8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d80d      	bhi.n	8002d94 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 fa54 	bl	8003228 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	e008      	b.n	8002da6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2225      	movs	r2, #37	@ 0x25
 8002db0:	2101      	movs	r1, #1
 8002db2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2224      	movs	r2, #36	@ 0x24
 8002db8:	2100      	movs	r1, #0
 8002dba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b002      	add	sp, #8
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	bffdfff8 	.word	0xbffdfff8
 8002dcc:	ffff800f 	.word	0xffff800f

08002dd0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dde:	2317      	movs	r3, #23
 8002de0:	18fb      	adds	r3, r7, r3
 8002de2:	2200      	movs	r2, #0
 8002de4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2224      	movs	r2, #36	@ 0x24
 8002dea:	5c9b      	ldrb	r3, [r3, r2]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_DMA_Start_IT+0x24>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e070      	b.n	8002ed6 <HAL_DMA_Start_IT+0x106>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2224      	movs	r2, #36	@ 0x24
 8002df8:	2101      	movs	r1, #1
 8002dfa:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2225      	movs	r2, #37	@ 0x25
 8002e00:	5c9b      	ldrb	r3, [r3, r2]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d157      	bne.n	8002eb8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2225      	movs	r2, #37	@ 0x25
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2101      	movs	r1, #1
 8002e22:	438a      	bics	r2, r1
 8002e24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f98f 	bl	8003150 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	210e      	movs	r1, #14
 8002e46:	430a      	orrs	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e00f      	b.n	8002e6c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2104      	movs	r1, #4
 8002e58:	438a      	bics	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	210a      	movs	r1, #10
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	2380      	movs	r3, #128	@ 0x80
 8002e74:	025b      	lsls	r3, r3, #9
 8002e76:	4013      	ands	r3, r2
 8002e78:	d008      	beq.n	8002e8c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e84:	2180      	movs	r1, #128	@ 0x80
 8002e86:	0049      	lsls	r1, r1, #1
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e9e:	2180      	movs	r1, #128	@ 0x80
 8002ea0:	0049      	lsls	r1, r1, #1
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	e007      	b.n	8002ec8 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2224      	movs	r2, #36	@ 0x24
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ec0:	2317      	movs	r3, #23
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2224      	movs	r2, #36	@ 0x24
 8002ecc:	2100      	movs	r1, #0
 8002ece:	5499      	strb	r1, [r3, r2]

  return status;
 8002ed0:	2317      	movs	r3, #23
 8002ed2:	18fb      	adds	r3, r7, r3
 8002ed4:	781b      	ldrb	r3, [r3, #0]
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b006      	add	sp, #24
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee8:	230f      	movs	r3, #15
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2224      	movs	r2, #36	@ 0x24
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2224      	movs	r2, #36	@ 0x24
 8002efc:	5c9b      	ldrb	r3, [r3, r2]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_DMA_Abort_IT+0x26>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e05e      	b.n	8002fc4 <HAL_DMA_Abort_IT+0xe4>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2224      	movs	r2, #36	@ 0x24
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2225      	movs	r2, #37	@ 0x25
 8002f12:	5c9b      	ldrb	r3, [r3, r2]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d007      	beq.n	8002f2a <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002f20:	230f      	movs	r3, #15
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	2201      	movs	r2, #1
 8002f26:	701a      	strb	r2, [r3, #0]
 8002f28:	e049      	b.n	8002fbe <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	210e      	movs	r1, #14
 8002f36:	438a      	bics	r2, r1
 8002f38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2101      	movs	r1, #1
 8002f46:	438a      	bics	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f54:	491d      	ldr	r1, [pc, #116]	@ (8002fcc <HAL_DMA_Abort_IT+0xec>)
 8002f56:	400a      	ands	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8002f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd0 <HAL_DMA_Abort_IT+0xf0>)
 8002f5c:	6859      	ldr	r1, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	221c      	movs	r2, #28
 8002f64:	4013      	ands	r3, r2
 8002f66:	2201      	movs	r2, #1
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	4b19      	ldr	r3, [pc, #100]	@ (8002fd0 <HAL_DMA_Abort_IT+0xf0>)
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f78:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00c      	beq.n	8002f9c <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f8c:	490f      	ldr	r1, [pc, #60]	@ (8002fcc <HAL_DMA_Abort_IT+0xec>)
 8002f8e:	400a      	ands	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002f9a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2225      	movs	r2, #37	@ 0x25
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	@ 0x24
 8002fa8:	2100      	movs	r1, #0
 8002faa:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d004      	beq.n	8002fbe <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	0010      	movs	r0, r2
 8002fbc:	4798      	blx	r3
    }
  }
  return status;
 8002fbe:	230f      	movs	r3, #15
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	781b      	ldrb	r3, [r3, #0]
}
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b004      	add	sp, #16
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	fffffeff 	.word	0xfffffeff
 8002fd0:	40020000 	.word	0x40020000

08002fd4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8002fdc:	4b55      	ldr	r3, [pc, #340]	@ (8003134 <HAL_DMA_IRQHandler+0x160>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	221c      	movs	r2, #28
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	0013      	movs	r3, r2
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d027      	beq.n	800304e <HAL_DMA_IRQHandler+0x7a>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2204      	movs	r2, #4
 8003002:	4013      	ands	r3, r2
 8003004:	d023      	beq.n	800304e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2220      	movs	r2, #32
 800300e:	4013      	ands	r3, r2
 8003010:	d107      	bne.n	8003022 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2104      	movs	r1, #4
 800301e:	438a      	bics	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8003022:	4b44      	ldr	r3, [pc, #272]	@ (8003134 <HAL_DMA_IRQHandler+0x160>)
 8003024:	6859      	ldr	r1, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	221c      	movs	r2, #28
 800302c:	4013      	ands	r3, r2
 800302e:	2204      	movs	r2, #4
 8003030:	409a      	lsls	r2, r3
 8003032:	4b40      	ldr	r3, [pc, #256]	@ (8003134 <HAL_DMA_IRQHandler+0x160>)
 8003034:	430a      	orrs	r2, r1
 8003036:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303c:	2b00      	cmp	r3, #0
 800303e:	d100      	bne.n	8003042 <HAL_DMA_IRQHandler+0x6e>
 8003040:	e073      	b.n	800312a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	0010      	movs	r0, r2
 800304a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800304c:	e06d      	b.n	800312a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	221c      	movs	r2, #28
 8003054:	4013      	ands	r3, r2
 8003056:	2202      	movs	r2, #2
 8003058:	409a      	lsls	r2, r3
 800305a:	0013      	movs	r3, r2
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4013      	ands	r3, r2
 8003060:	d02e      	beq.n	80030c0 <HAL_DMA_IRQHandler+0xec>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2202      	movs	r2, #2
 8003066:	4013      	ands	r3, r2
 8003068:	d02a      	beq.n	80030c0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2220      	movs	r2, #32
 8003072:	4013      	ands	r3, r2
 8003074:	d10b      	bne.n	800308e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	210a      	movs	r1, #10
 8003082:	438a      	bics	r2, r1
 8003084:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2225      	movs	r2, #37	@ 0x25
 800308a:	2101      	movs	r1, #1
 800308c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800308e:	4b29      	ldr	r3, [pc, #164]	@ (8003134 <HAL_DMA_IRQHandler+0x160>)
 8003090:	6859      	ldr	r1, [r3, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	221c      	movs	r2, #28
 8003098:	4013      	ands	r3, r2
 800309a:	2202      	movs	r2, #2
 800309c:	409a      	lsls	r2, r3
 800309e:	4b25      	ldr	r3, [pc, #148]	@ (8003134 <HAL_DMA_IRQHandler+0x160>)
 80030a0:	430a      	orrs	r2, r1
 80030a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2224      	movs	r2, #36	@ 0x24
 80030a8:	2100      	movs	r1, #0
 80030aa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d03a      	beq.n	800312a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	0010      	movs	r0, r2
 80030bc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80030be:	e034      	b.n	800312a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	221c      	movs	r2, #28
 80030c6:	4013      	ands	r3, r2
 80030c8:	2208      	movs	r2, #8
 80030ca:	409a      	lsls	r2, r3
 80030cc:	0013      	movs	r3, r2
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4013      	ands	r3, r2
 80030d2:	d02b      	beq.n	800312c <HAL_DMA_IRQHandler+0x158>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2208      	movs	r2, #8
 80030d8:	4013      	ands	r3, r2
 80030da:	d027      	beq.n	800312c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	210e      	movs	r1, #14
 80030e8:	438a      	bics	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80030ec:	4b11      	ldr	r3, [pc, #68]	@ (8003134 <HAL_DMA_IRQHandler+0x160>)
 80030ee:	6859      	ldr	r1, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f4:	221c      	movs	r2, #28
 80030f6:	4013      	ands	r3, r2
 80030f8:	2201      	movs	r2, #1
 80030fa:	409a      	lsls	r2, r3
 80030fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <HAL_DMA_IRQHandler+0x160>)
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2225      	movs	r2, #37	@ 0x25
 800310c:	2101      	movs	r1, #1
 800310e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2224      	movs	r2, #36	@ 0x24
 8003114:	2100      	movs	r1, #0
 8003116:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	0010      	movs	r0, r2
 8003128:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	46c0      	nop			@ (mov r8, r8)
}
 800312e:	46bd      	mov	sp, r7
 8003130:	b004      	add	sp, #16
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40020000 	.word	0x40020000

08003138 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2225      	movs	r2, #37	@ 0x25
 8003144:	5c9b      	ldrb	r3, [r3, r2]
 8003146:	b2db      	uxtb	r3, r3
}
 8003148:	0018      	movs	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	b002      	add	sp, #8
 800314e:	bd80      	pop	{r7, pc}

08003150 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003166:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800316c:	2b00      	cmp	r3, #0
 800316e:	d004      	beq.n	800317a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003178:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800317a:	4b14      	ldr	r3, [pc, #80]	@ (80031cc <DMA_SetConfig+0x7c>)
 800317c:	6859      	ldr	r1, [r3, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	221c      	movs	r2, #28
 8003184:	4013      	ands	r3, r2
 8003186:	2201      	movs	r2, #1
 8003188:	409a      	lsls	r2, r3
 800318a:	4b10      	ldr	r3, [pc, #64]	@ (80031cc <DMA_SetConfig+0x7c>)
 800318c:	430a      	orrs	r2, r1
 800318e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b10      	cmp	r3, #16
 800319e:	d108      	bne.n	80031b2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031b0:	e007      	b.n	80031c2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	60da      	str	r2, [r3, #12]
}
 80031c2:	46c0      	nop			@ (mov r8, r8)
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b004      	add	sp, #16
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	46c0      	nop			@ (mov r8, r8)
 80031cc:	40020000 	.word	0x40020000

080031d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	001a      	movs	r2, r3
 80031de:	23ff      	movs	r3, #255	@ 0xff
 80031e0:	4013      	ands	r3, r2
 80031e2:	3b08      	subs	r3, #8
 80031e4:	2114      	movs	r1, #20
 80031e6:	0018      	movs	r0, r3
 80031e8:	f7fc ffa2 	bl	8000130 <__udivsi3>
 80031ec:	0003      	movs	r3, r0
 80031ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 80031f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003220 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80031f8:	4694      	mov	ip, r2
 80031fa:	4463      	add	r3, ip
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	001a      	movs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a07      	ldr	r2, [pc, #28]	@ (8003224 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003208:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	221c      	movs	r2, #28
 800320e:	4013      	ands	r3, r2
 8003210:	2201      	movs	r2, #1
 8003212:	409a      	lsls	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003218:	46c0      	nop			@ (mov r8, r8)
 800321a:	46bd      	mov	sp, r7
 800321c:	b004      	add	sp, #16
 800321e:	bd80      	pop	{r7, pc}
 8003220:	10008200 	.word	0x10008200
 8003224:	40020880 	.word	0x40020880

08003228 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	22ff      	movs	r2, #255	@ 0xff
 8003236:	4013      	ands	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4a0a      	ldr	r2, [pc, #40]	@ (8003268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800323e:	4694      	mov	ip, r2
 8003240:	4463      	add	r3, ip
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	001a      	movs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a07      	ldr	r2, [pc, #28]	@ (800326c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800324e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	3b01      	subs	r3, #1
 8003254:	2203      	movs	r2, #3
 8003256:	4013      	ands	r3, r2
 8003258:	2201      	movs	r2, #1
 800325a:	409a      	lsls	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003260:	46c0      	nop			@ (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	b004      	add	sp, #16
 8003266:	bd80      	pop	{r7, pc}
 8003268:	1000823f 	.word	0x1000823f
 800326c:	40020940 	.word	0x40020940

08003270 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800327e:	e153      	b.n	8003528 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2101      	movs	r1, #1
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4091      	lsls	r1, r2
 800328a:	000a      	movs	r2, r1
 800328c:	4013      	ands	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d100      	bne.n	8003298 <HAL_GPIO_Init+0x28>
 8003296:	e144      	b.n	8003522 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d003      	beq.n	80032a8 <HAL_GPIO_Init+0x38>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b12      	cmp	r3, #18
 80032a6:	d125      	bne.n	80032f4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	08da      	lsrs	r2, r3, #3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3208      	adds	r2, #8
 80032b0:	0092      	lsls	r2, r2, #2
 80032b2:	58d3      	ldr	r3, [r2, r3]
 80032b4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	2207      	movs	r2, #7
 80032ba:	4013      	ands	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	220f      	movs	r2, #15
 80032c0:	409a      	lsls	r2, r3
 80032c2:	0013      	movs	r3, r2
 80032c4:	43da      	mvns	r2, r3
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	4013      	ands	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	220f      	movs	r2, #15
 80032d2:	401a      	ands	r2, r3
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2107      	movs	r1, #7
 80032d8:	400b      	ands	r3, r1
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	409a      	lsls	r2, r3
 80032de:	0013      	movs	r3, r2
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	08da      	lsrs	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3208      	adds	r2, #8
 80032ee:	0092      	lsls	r2, r2, #2
 80032f0:	6979      	ldr	r1, [r7, #20]
 80032f2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	409a      	lsls	r2, r3
 8003302:	0013      	movs	r3, r2
 8003304:	43da      	mvns	r2, r3
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	4013      	ands	r3, r2
 800330a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2203      	movs	r2, #3
 8003312:	401a      	ands	r2, r3
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	409a      	lsls	r2, r3
 800331a:	0013      	movs	r3, r2
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d00b      	beq.n	8003348 <HAL_GPIO_Init+0xd8>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d007      	beq.n	8003348 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800333c:	2b11      	cmp	r3, #17
 800333e:	d003      	beq.n	8003348 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b12      	cmp	r3, #18
 8003346:	d130      	bne.n	80033aa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	2203      	movs	r2, #3
 8003354:	409a      	lsls	r2, r3
 8003356:	0013      	movs	r3, r2
 8003358:	43da      	mvns	r2, r3
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	4013      	ands	r3, r2
 800335e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	409a      	lsls	r2, r3
 800336a:	0013      	movs	r3, r2
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800337e:	2201      	movs	r2, #1
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	409a      	lsls	r2, r3
 8003384:	0013      	movs	r3, r2
 8003386:	43da      	mvns	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	4013      	ands	r3, r2
 800338c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	2201      	movs	r2, #1
 8003396:	401a      	ands	r2, r3
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	409a      	lsls	r2, r3
 800339c:	0013      	movs	r3, r2
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d017      	beq.n	80033e2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	2203      	movs	r2, #3
 80033be:	409a      	lsls	r2, r3
 80033c0:	0013      	movs	r3, r2
 80033c2:	43da      	mvns	r2, r3
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	4013      	ands	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	409a      	lsls	r2, r3
 80033d4:	0013      	movs	r3, r2
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	2380      	movs	r3, #128	@ 0x80
 80033e8:	055b      	lsls	r3, r3, #21
 80033ea:	4013      	ands	r3, r2
 80033ec:	d100      	bne.n	80033f0 <HAL_GPIO_Init+0x180>
 80033ee:	e098      	b.n	8003522 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80033f0:	4a53      	ldr	r2, [pc, #332]	@ (8003540 <HAL_GPIO_Init+0x2d0>)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	3318      	adds	r3, #24
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	589b      	ldr	r3, [r3, r2]
 80033fc:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2203      	movs	r2, #3
 8003402:	4013      	ands	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	220f      	movs	r2, #15
 8003408:	409a      	lsls	r2, r3
 800340a:	0013      	movs	r3, r2
 800340c:	43da      	mvns	r2, r3
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	4013      	ands	r3, r2
 8003412:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	23a0      	movs	r3, #160	@ 0xa0
 8003418:	05db      	lsls	r3, r3, #23
 800341a:	429a      	cmp	r2, r3
 800341c:	d019      	beq.n	8003452 <HAL_GPIO_Init+0x1e2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a48      	ldr	r2, [pc, #288]	@ (8003544 <HAL_GPIO_Init+0x2d4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_GPIO_Init+0x1de>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a47      	ldr	r2, [pc, #284]	@ (8003548 <HAL_GPIO_Init+0x2d8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00d      	beq.n	800344a <HAL_GPIO_Init+0x1da>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a46      	ldr	r2, [pc, #280]	@ (800354c <HAL_GPIO_Init+0x2dc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <HAL_GPIO_Init+0x1d6>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a45      	ldr	r2, [pc, #276]	@ (8003550 <HAL_GPIO_Init+0x2e0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d101      	bne.n	8003442 <HAL_GPIO_Init+0x1d2>
 800343e:	2305      	movs	r3, #5
 8003440:	e008      	b.n	8003454 <HAL_GPIO_Init+0x1e4>
 8003442:	2306      	movs	r3, #6
 8003444:	e006      	b.n	8003454 <HAL_GPIO_Init+0x1e4>
 8003446:	2303      	movs	r3, #3
 8003448:	e004      	b.n	8003454 <HAL_GPIO_Init+0x1e4>
 800344a:	2302      	movs	r3, #2
 800344c:	e002      	b.n	8003454 <HAL_GPIO_Init+0x1e4>
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <HAL_GPIO_Init+0x1e4>
 8003452:	2300      	movs	r3, #0
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	2103      	movs	r1, #3
 8003458:	400a      	ands	r2, r1
 800345a:	00d2      	lsls	r2, r2, #3
 800345c:	4093      	lsls	r3, r2
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003464:	4936      	ldr	r1, [pc, #216]	@ (8003540 <HAL_GPIO_Init+0x2d0>)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	089b      	lsrs	r3, r3, #2
 800346a:	3318      	adds	r3, #24
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8003472:	4a33      	ldr	r2, [pc, #204]	@ (8003540 <HAL_GPIO_Init+0x2d0>)
 8003474:	2380      	movs	r3, #128	@ 0x80
 8003476:	58d3      	ldr	r3, [r2, r3]
 8003478:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	43da      	mvns	r2, r3
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	4013      	ands	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	2380      	movs	r3, #128	@ 0x80
 800348a:	025b      	lsls	r3, r3, #9
 800348c:	4013      	ands	r3, r2
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003498:	4929      	ldr	r1, [pc, #164]	@ (8003540 <HAL_GPIO_Init+0x2d0>)
 800349a:	2280      	movs	r2, #128	@ 0x80
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80034a0:	4a27      	ldr	r2, [pc, #156]	@ (8003540 <HAL_GPIO_Init+0x2d0>)
 80034a2:	2384      	movs	r3, #132	@ 0x84
 80034a4:	58d3      	ldr	r3, [r2, r3]
 80034a6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	43da      	mvns	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	4013      	ands	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	2380      	movs	r3, #128	@ 0x80
 80034b8:	029b      	lsls	r3, r3, #10
 80034ba:	4013      	ands	r3, r2
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80034c6:	491e      	ldr	r1, [pc, #120]	@ (8003540 <HAL_GPIO_Init+0x2d0>)
 80034c8:	2284      	movs	r2, #132	@ 0x84
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80034ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003540 <HAL_GPIO_Init+0x2d0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	43da      	mvns	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	4013      	ands	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	2380      	movs	r3, #128	@ 0x80
 80034e4:	035b      	lsls	r3, r3, #13
 80034e6:	4013      	ands	r3, r2
 80034e8:	d003      	beq.n	80034f2 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80034f2:	4b13      	ldr	r3, [pc, #76]	@ (8003540 <HAL_GPIO_Init+0x2d0>)
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80034f8:	4b11      	ldr	r3, [pc, #68]	@ (8003540 <HAL_GPIO_Init+0x2d0>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	43da      	mvns	r2, r3
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	4013      	ands	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	2380      	movs	r3, #128	@ 0x80
 800350e:	039b      	lsls	r3, r3, #14
 8003510:	4013      	ands	r3, r2
 8003512:	d003      	beq.n	800351c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800351c:	4b08      	ldr	r3, [pc, #32]	@ (8003540 <HAL_GPIO_Init+0x2d0>)
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	3301      	adds	r3, #1
 8003526:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	40da      	lsrs	r2, r3
 8003530:	1e13      	subs	r3, r2, #0
 8003532:	d000      	beq.n	8003536 <HAL_GPIO_Init+0x2c6>
 8003534:	e6a4      	b.n	8003280 <HAL_GPIO_Init+0x10>
  }
}
 8003536:	46c0      	nop			@ (mov r8, r8)
 8003538:	46c0      	nop			@ (mov r8, r8)
 800353a:	46bd      	mov	sp, r7
 800353c:	b006      	add	sp, #24
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021800 	.word	0x40021800
 8003544:	50000400 	.word	0x50000400
 8003548:	50000800 	.word	0x50000800
 800354c:	50000c00 	.word	0x50000c00
 8003550:	50001400 	.word	0x50001400

08003554 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	000a      	movs	r2, r1
 800355e:	1cbb      	adds	r3, r7, #2
 8003560:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	1cba      	adds	r2, r7, #2
 8003568:	8812      	ldrh	r2, [r2, #0]
 800356a:	4013      	ands	r3, r2
 800356c:	d004      	beq.n	8003578 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800356e:	230f      	movs	r3, #15
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
 8003576:	e003      	b.n	8003580 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003578:	230f      	movs	r3, #15
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003580:	230f      	movs	r3, #15
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	781b      	ldrb	r3, [r3, #0]
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	b004      	add	sp, #16
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	0008      	movs	r0, r1
 8003598:	0011      	movs	r1, r2
 800359a:	1cbb      	adds	r3, r7, #2
 800359c:	1c02      	adds	r2, r0, #0
 800359e:	801a      	strh	r2, [r3, #0]
 80035a0:	1c7b      	adds	r3, r7, #1
 80035a2:	1c0a      	adds	r2, r1, #0
 80035a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035a6:	1c7b      	adds	r3, r7, #1
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d004      	beq.n	80035b8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035ae:	1cbb      	adds	r3, r7, #2
 80035b0:	881a      	ldrh	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035b6:	e003      	b.n	80035c0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035b8:	1cbb      	adds	r3, r7, #2
 80035ba:	881a      	ldrh	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035c0:	46c0      	nop			@ (mov r8, r8)
 80035c2:	46bd      	mov	sp, r7
 80035c4:	b002      	add	sp, #8
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	000a      	movs	r2, r1
 80035d2:	1cbb      	adds	r3, r7, #2
 80035d4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035dc:	1cbb      	adds	r3, r7, #2
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4013      	ands	r3, r2
 80035e4:	041a      	lsls	r2, r3, #16
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	1cb9      	adds	r1, r7, #2
 80035ec:	8809      	ldrh	r1, [r1, #0]
 80035ee:	400b      	ands	r3, r1
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	619a      	str	r2, [r3, #24]
}
 80035f6:	46c0      	nop			@ (mov r8, r8)
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b004      	add	sp, #16
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	0002      	movs	r2, r0
 8003608:	1dbb      	adds	r3, r7, #6
 800360a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800360c:	4b10      	ldr	r3, [pc, #64]	@ (8003650 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	1dba      	adds	r2, r7, #6
 8003612:	8812      	ldrh	r2, [r2, #0]
 8003614:	4013      	ands	r3, r2
 8003616:	d008      	beq.n	800362a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003618:	4b0d      	ldr	r3, [pc, #52]	@ (8003650 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800361a:	1dba      	adds	r2, r7, #6
 800361c:	8812      	ldrh	r2, [r2, #0]
 800361e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003620:	1dbb      	adds	r3, r7, #6
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	0018      	movs	r0, r3
 8003626:	f000 f815 	bl	8003654 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800362a:	4b09      	ldr	r3, [pc, #36]	@ (8003650 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	1dba      	adds	r2, r7, #6
 8003630:	8812      	ldrh	r2, [r2, #0]
 8003632:	4013      	ands	r3, r2
 8003634:	d008      	beq.n	8003648 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003636:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003638:	1dba      	adds	r2, r7, #6
 800363a:	8812      	ldrh	r2, [r2, #0]
 800363c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800363e:	1dbb      	adds	r3, r7, #6
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	0018      	movs	r0, r3
 8003644:	f000 f810 	bl	8003668 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003648:	46c0      	nop			@ (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	b002      	add	sp, #8
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40021800 	.word	0x40021800

08003654 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	0002      	movs	r2, r0
 800365c:	1dbb      	adds	r3, r7, #6
 800365e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003660:	46c0      	nop			@ (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	b002      	add	sp, #8
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	0002      	movs	r2, r0
 8003670:	1dbb      	adds	r3, r7, #6
 8003672:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003674:	46c0      	nop			@ (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	b002      	add	sp, #8
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e08f      	b.n	80037ae <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2241      	movs	r2, #65	@ 0x41
 8003692:	5c9b      	ldrb	r3, [r3, r2]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d107      	bne.n	80036aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2240      	movs	r2, #64	@ 0x40
 800369e:	2100      	movs	r1, #0
 80036a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	0018      	movs	r0, r3
 80036a6:	f7fd fab3 	bl	8000c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2241      	movs	r2, #65	@ 0x41
 80036ae:	2124      	movs	r1, #36	@ 0x24
 80036b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2101      	movs	r1, #1
 80036be:	438a      	bics	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	493b      	ldr	r1, [pc, #236]	@ (80037b8 <HAL_I2C_Init+0x13c>)
 80036cc:	400a      	ands	r2, r1
 80036ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4938      	ldr	r1, [pc, #224]	@ (80037bc <HAL_I2C_Init+0x140>)
 80036dc:	400a      	ands	r2, r1
 80036de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d108      	bne.n	80036fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2180      	movs	r1, #128	@ 0x80
 80036f2:	0209      	lsls	r1, r1, #8
 80036f4:	430a      	orrs	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	e007      	b.n	800370a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2184      	movs	r1, #132	@ 0x84
 8003704:	0209      	lsls	r1, r1, #8
 8003706:	430a      	orrs	r2, r1
 8003708:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d109      	bne.n	8003726 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2180      	movs	r1, #128	@ 0x80
 800371e:	0109      	lsls	r1, r1, #4
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
 8003724:	e007      	b.n	8003736 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4923      	ldr	r1, [pc, #140]	@ (80037c0 <HAL_I2C_Init+0x144>)
 8003732:	400a      	ands	r2, r1
 8003734:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4920      	ldr	r1, [pc, #128]	@ (80037c4 <HAL_I2C_Init+0x148>)
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	491a      	ldr	r1, [pc, #104]	@ (80037bc <HAL_I2C_Init+0x140>)
 8003752:	400a      	ands	r2, r1
 8003754:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	431a      	orrs	r2, r3
 8003760:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69d9      	ldr	r1, [r3, #28]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1a      	ldr	r2, [r3, #32]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2101      	movs	r1, #1
 800378c:	430a      	orrs	r2, r1
 800378e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2241      	movs	r2, #65	@ 0x41
 800379a:	2120      	movs	r1, #32
 800379c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2242      	movs	r2, #66	@ 0x42
 80037a8:	2100      	movs	r1, #0
 80037aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b002      	add	sp, #8
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	f0ffffff 	.word	0xf0ffffff
 80037bc:	ffff7fff 	.word	0xffff7fff
 80037c0:	fffff7ff 	.word	0xfffff7ff
 80037c4:	02008000 	.word	0x02008000

080037c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c8:	b590      	push	{r4, r7, lr}
 80037ca:	b089      	sub	sp, #36	@ 0x24
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	000c      	movs	r4, r1
 80037d2:	0010      	movs	r0, r2
 80037d4:	0019      	movs	r1, r3
 80037d6:	230a      	movs	r3, #10
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	1c22      	adds	r2, r4, #0
 80037dc:	801a      	strh	r2, [r3, #0]
 80037de:	2308      	movs	r3, #8
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	1c02      	adds	r2, r0, #0
 80037e4:	801a      	strh	r2, [r3, #0]
 80037e6:	1dbb      	adds	r3, r7, #6
 80037e8:	1c0a      	adds	r2, r1, #0
 80037ea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2241      	movs	r2, #65	@ 0x41
 80037f0:	5c9b      	ldrb	r3, [r3, r2]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d000      	beq.n	80037fa <HAL_I2C_Mem_Write+0x32>
 80037f8:	e10c      	b.n	8003a14 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d004      	beq.n	800380a <HAL_I2C_Mem_Write+0x42>
 8003800:	232c      	movs	r3, #44	@ 0x2c
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d105      	bne.n	8003816 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2280      	movs	r2, #128	@ 0x80
 800380e:	0092      	lsls	r2, r2, #2
 8003810:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e0ff      	b.n	8003a16 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2240      	movs	r2, #64	@ 0x40
 800381a:	5c9b      	ldrb	r3, [r3, r2]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_I2C_Mem_Write+0x5c>
 8003820:	2302      	movs	r3, #2
 8003822:	e0f8      	b.n	8003a16 <HAL_I2C_Mem_Write+0x24e>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2240      	movs	r2, #64	@ 0x40
 8003828:	2101      	movs	r1, #1
 800382a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800382c:	f7fe facc 	bl	8001dc8 <HAL_GetTick>
 8003830:	0003      	movs	r3, r0
 8003832:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003834:	2380      	movs	r3, #128	@ 0x80
 8003836:	0219      	lsls	r1, r3, #8
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	2319      	movs	r3, #25
 8003840:	2201      	movs	r2, #1
 8003842:	f001 fcf7 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 8003846:	1e03      	subs	r3, r0, #0
 8003848:	d001      	beq.n	800384e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e0e3      	b.n	8003a16 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2241      	movs	r2, #65	@ 0x41
 8003852:	2121      	movs	r1, #33	@ 0x21
 8003854:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2242      	movs	r2, #66	@ 0x42
 800385a:	2140      	movs	r1, #64	@ 0x40
 800385c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003868:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	222c      	movs	r2, #44	@ 0x2c
 800386e:	18ba      	adds	r2, r7, r2
 8003870:	8812      	ldrh	r2, [r2, #0]
 8003872:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800387a:	1dbb      	adds	r3, r7, #6
 800387c:	881c      	ldrh	r4, [r3, #0]
 800387e:	2308      	movs	r3, #8
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	881a      	ldrh	r2, [r3, #0]
 8003884:	230a      	movs	r3, #10
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	8819      	ldrh	r1, [r3, #0]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	0023      	movs	r3, r4
 8003896:	f000 fe9b 	bl	80045d0 <I2C_RequestMemoryWrite>
 800389a:	1e03      	subs	r3, r0, #0
 800389c:	d005      	beq.n	80038aa <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2240      	movs	r2, #64	@ 0x40
 80038a2:	2100      	movs	r1, #0
 80038a4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e0b5      	b.n	8003a16 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2bff      	cmp	r3, #255	@ 0xff
 80038b2:	d911      	bls.n	80038d8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	22ff      	movs	r2, #255	@ 0xff
 80038b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	2380      	movs	r3, #128	@ 0x80
 80038c2:	045c      	lsls	r4, r3, #17
 80038c4:	230a      	movs	r3, #10
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	8819      	ldrh	r1, [r3, #0]
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	2300      	movs	r3, #0
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	0023      	movs	r3, r4
 80038d2:	f001 fe89 	bl	80055e8 <I2C_TransferConfig>
 80038d6:	e012      	b.n	80038fe <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	2380      	movs	r3, #128	@ 0x80
 80038ea:	049c      	lsls	r4, r3, #18
 80038ec:	230a      	movs	r3, #10
 80038ee:	18fb      	adds	r3, r7, r3
 80038f0:	8819      	ldrh	r1, [r3, #0]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	2300      	movs	r3, #0
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	0023      	movs	r3, r4
 80038fa:	f001 fe75 	bl	80055e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	0018      	movs	r0, r3
 8003906:	f001 fced 	bl	80052e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800390a:	1e03      	subs	r3, r0, #0
 800390c:	d001      	beq.n	8003912 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e081      	b.n	8003a16 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	781a      	ldrb	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d03a      	beq.n	80039c2 <HAL_I2C_Mem_Write+0x1fa>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003950:	2b00      	cmp	r3, #0
 8003952:	d136      	bne.n	80039c2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	0013      	movs	r3, r2
 800395e:	2200      	movs	r2, #0
 8003960:	2180      	movs	r1, #128	@ 0x80
 8003962:	f001 fc67 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 8003966:	1e03      	subs	r3, r0, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e053      	b.n	8003a16 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	2bff      	cmp	r3, #255	@ 0xff
 8003976:	d911      	bls.n	800399c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	22ff      	movs	r2, #255	@ 0xff
 800397c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003982:	b2da      	uxtb	r2, r3
 8003984:	2380      	movs	r3, #128	@ 0x80
 8003986:	045c      	lsls	r4, r3, #17
 8003988:	230a      	movs	r3, #10
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	8819      	ldrh	r1, [r3, #0]
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	2300      	movs	r3, #0
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	0023      	movs	r3, r4
 8003996:	f001 fe27 	bl	80055e8 <I2C_TransferConfig>
 800399a:	e012      	b.n	80039c2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	2380      	movs	r3, #128	@ 0x80
 80039ae:	049c      	lsls	r4, r3, #18
 80039b0:	230a      	movs	r3, #10
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	8819      	ldrh	r1, [r3, #0]
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	2300      	movs	r3, #0
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	0023      	movs	r3, r4
 80039be:	f001 fe13 	bl	80055e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d198      	bne.n	80038fe <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	0018      	movs	r0, r3
 80039d4:	f001 fccc 	bl	8005370 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039d8:	1e03      	subs	r3, r0, #0
 80039da:	d001      	beq.n	80039e0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e01a      	b.n	8003a16 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2220      	movs	r2, #32
 80039e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	490b      	ldr	r1, [pc, #44]	@ (8003a20 <HAL_I2C_Mem_Write+0x258>)
 80039f4:	400a      	ands	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2241      	movs	r2, #65	@ 0x41
 80039fc:	2120      	movs	r1, #32
 80039fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2242      	movs	r2, #66	@ 0x42
 8003a04:	2100      	movs	r1, #0
 8003a06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2240      	movs	r2, #64	@ 0x40
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e000      	b.n	8003a16 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
  }
}
 8003a16:	0018      	movs	r0, r3
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	b007      	add	sp, #28
 8003a1c:	bd90      	pop	{r4, r7, pc}
 8003a1e:	46c0      	nop			@ (mov r8, r8)
 8003a20:	fe00e800 	.word	0xfe00e800

08003a24 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003a24:	b5b0      	push	{r4, r5, r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	000c      	movs	r4, r1
 8003a2e:	0010      	movs	r0, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	230a      	movs	r3, #10
 8003a34:	18fb      	adds	r3, r7, r3
 8003a36:	1c22      	adds	r2, r4, #0
 8003a38:	801a      	strh	r2, [r3, #0]
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	1c02      	adds	r2, r0, #0
 8003a40:	801a      	strh	r2, [r3, #0]
 8003a42:	1dbb      	adds	r3, r7, #6
 8003a44:	1c0a      	adds	r2, r1, #0
 8003a46:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2241      	movs	r2, #65	@ 0x41
 8003a4c:	5c9b      	ldrb	r3, [r3, r2]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d000      	beq.n	8003a56 <HAL_I2C_Mem_Write_DMA+0x32>
 8003a54:	e0d8      	b.n	8003c08 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <HAL_I2C_Mem_Write_DMA+0x42>
 8003a5c:	232c      	movs	r3, #44	@ 0x2c
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d105      	bne.n	8003a72 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2280      	movs	r2, #128	@ 0x80
 8003a6a:	0092      	lsls	r2, r2, #2
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e0cb      	b.n	8003c0a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699a      	ldr	r2, [r3, #24]
 8003a78:	2380      	movs	r3, #128	@ 0x80
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	401a      	ands	r2, r3
 8003a7e:	2380      	movs	r3, #128	@ 0x80
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d101      	bne.n	8003a8a <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 8003a86:	2302      	movs	r3, #2
 8003a88:	e0bf      	b.n	8003c0a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2240      	movs	r2, #64	@ 0x40
 8003a8e:	5c9b      	ldrb	r3, [r3, r2]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_I2C_Mem_Write_DMA+0x74>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e0b8      	b.n	8003c0a <HAL_I2C_Mem_Write_DMA+0x1e6>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2240      	movs	r2, #64	@ 0x40
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2241      	movs	r2, #65	@ 0x41
 8003aa4:	2121      	movs	r1, #33	@ 0x21
 8003aa6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2242      	movs	r2, #66	@ 0x42
 8003aac:	2140      	movs	r1, #64	@ 0x40
 8003aae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003aba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	222c      	movs	r2, #44	@ 0x2c
 8003ac0:	18ba      	adds	r2, r7, r2
 8003ac2:	8812      	ldrh	r2, [r2, #0]
 8003ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a52      	ldr	r2, [pc, #328]	@ (8003c14 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 8003aca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4a52      	ldr	r2, [pc, #328]	@ (8003c18 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8003ad0:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8003ad2:	230a      	movs	r3, #10
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	881a      	ldrh	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2bff      	cmp	r3, #255	@ 0xff
 8003ae4:	d903      	bls.n	8003aee <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	22ff      	movs	r2, #255	@ 0xff
 8003aea:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003aec:	e004      	b.n	8003af8 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003af8:	1dbb      	adds	r3, r7, #6
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d10b      	bne.n	8003b18 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b00:	2308      	movs	r3, #8
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	4252      	negs	r2, r2
 8003b14:	651a      	str	r2, [r3, #80]	@ 0x50
 8003b16:	e00e      	b.n	8003b36 <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b18:	2108      	movs	r1, #8
 8003b1a:	187b      	adds	r3, r7, r1
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	0a1b      	lsrs	r3, r3, #8
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8003b2a:	187b      	adds	r3, r7, r1
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	001a      	movs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d023      	beq.n	8003b86 <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b42:	4a36      	ldr	r2, [pc, #216]	@ (8003c1c <HAL_I2C_Mem_Write_DMA+0x1f8>)
 8003b44:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4a:	4a35      	ldr	r2, [pc, #212]	@ (8003c20 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 8003b4c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003b62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3328      	adds	r3, #40	@ 0x28
 8003b6a:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003b70:	2517      	movs	r5, #23
 8003b72:	197c      	adds	r4, r7, r5
 8003b74:	f7ff f92c 	bl	8002dd0 <HAL_DMA_Start_IT>
 8003b78:	0003      	movs	r3, r0
 8003b7a:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003b7c:	197b      	adds	r3, r7, r5
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d12d      	bne.n	8003be0 <HAL_I2C_Mem_Write_DMA+0x1bc>
 8003b84:	e013      	b.n	8003bae <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2241      	movs	r2, #65	@ 0x41
 8003b8a:	2120      	movs	r1, #32
 8003b8c:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2242      	movs	r2, #66	@ 0x42
 8003b92:	2100      	movs	r1, #0
 8003b94:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9a:	2280      	movs	r2, #128	@ 0x80
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2240      	movs	r2, #64	@ 0x40
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e02d      	b.n	8003c0a <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003bae:	1dbb      	adds	r3, r7, #6
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	2380      	movs	r3, #128	@ 0x80
 8003bb6:	045c      	lsls	r4, r3, #17
 8003bb8:	230a      	movs	r3, #10
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	8819      	ldrh	r1, [r3, #0]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	4b18      	ldr	r3, [pc, #96]	@ (8003c24 <HAL_I2C_Mem_Write_DMA+0x200>)
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	0023      	movs	r3, r4
 8003bc6:	f001 fd0f 	bl	80055e8 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2240      	movs	r2, #64	@ 0x40
 8003bce:	2100      	movs	r1, #0
 8003bd0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f001 fd40 	bl	800565c <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e014      	b.n	8003c0a <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2241      	movs	r2, #65	@ 0x41
 8003be4:	2120      	movs	r1, #32
 8003be6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2242      	movs	r2, #66	@ 0x42
 8003bec:	2100      	movs	r1, #0
 8003bee:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf4:	2210      	movs	r2, #16
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2240      	movs	r2, #64	@ 0x40
 8003c00:	2100      	movs	r1, #0
 8003c02:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8003c08:	2302      	movs	r3, #2
  }
}
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b006      	add	sp, #24
 8003c10:	bdb0      	pop	{r4, r5, r7, pc}
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	ffff0000 	.word	0xffff0000
 8003c18:	080041a9 	.word	0x080041a9
 8003c1c:	08005125 	.word	0x08005125
 8003c20:	080051c5 	.word	0x080051c5
 8003c24:	80002000 	.word	0x80002000

08003c28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	68f9      	ldr	r1, [r7, #12]
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4798      	blx	r3
  }
}
 8003c54:	46c0      	nop			@ (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b004      	add	sp, #16
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	2380      	movs	r3, #128	@ 0x80
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d00e      	beq.n	8003c9c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2280      	movs	r2, #128	@ 0x80
 8003c82:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003c84:	d00a      	beq.n	8003c9c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2280      	movs	r2, #128	@ 0x80
 8003c98:	0052      	lsls	r2, r2, #1
 8003c9a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	2380      	movs	r3, #128	@ 0x80
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d00e      	beq.n	8003cc4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2280      	movs	r2, #128	@ 0x80
 8003caa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003cac:	d00a      	beq.n	8003cc4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2280      	movs	r2, #128	@ 0x80
 8003cc0:	00d2      	lsls	r2, r2, #3
 8003cc2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	2380      	movs	r3, #128	@ 0x80
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d00e      	beq.n	8003cec <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	2280      	movs	r2, #128	@ 0x80
 8003cd2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003cd4:	d00a      	beq.n	8003cec <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cda:	2202      	movs	r2, #2
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2280      	movs	r2, #128	@ 0x80
 8003ce8:	0092      	lsls	r2, r2, #2
 8003cea:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	220b      	movs	r2, #11
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d005      	beq.n	8003d06 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	0011      	movs	r1, r2
 8003d00:	0018      	movs	r0, r3
 8003d02:	f001 f8c1 	bl	8004e88 <I2C_ITError>
  }
}
 8003d06:	46c0      	nop			@ (mov r8, r8)
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b006      	add	sp, #24
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003d16:	46c0      	nop			@ (mov r8, r8)
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b002      	add	sp, #8
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b082      	sub	sp, #8
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b002      	add	sp, #8
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b002      	add	sp, #8
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b002      	add	sp, #8
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	0008      	movs	r0, r1
 8003d58:	0011      	movs	r1, r2
 8003d5a:	1cfb      	adds	r3, r7, #3
 8003d5c:	1c02      	adds	r2, r0, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	003b      	movs	r3, r7
 8003d62:	1c0a      	adds	r2, r1, #0
 8003d64:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b002      	add	sp, #8
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003d76:	46c0      	nop			@ (mov r8, r8)
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b002      	add	sp, #8
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b002      	add	sp, #8
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b002      	add	sp, #8
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b082      	sub	sp, #8
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003da6:	46c0      	nop			@ (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b002      	add	sp, #8
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2240      	movs	r2, #64	@ 0x40
 8003dca:	5c9b      	ldrb	r3, [r3, r2]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <I2C_Slave_ISR_IT+0x24>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e0e7      	b.n	8003fa4 <I2C_Slave_ISR_IT+0x1f4>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2240      	movs	r2, #64	@ 0x40
 8003dd8:	2101      	movs	r1, #1
 8003dda:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2220      	movs	r2, #32
 8003de0:	4013      	ands	r3, r2
 8003de2:	d00a      	beq.n	8003dfa <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003dea:	d006      	beq.n	8003dfa <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	0011      	movs	r1, r2
 8003df2:	0018      	movs	r0, r3
 8003df4:	f000 fe68 	bl	8004ac8 <I2C_ITSlaveCplt>
 8003df8:	e0cf      	b.n	8003f9a <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2210      	movs	r2, #16
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d052      	beq.n	8003ea8 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2210      	movs	r2, #16
 8003e06:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e08:	d04e      	beq.n	8003ea8 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d12d      	bne.n	8003e70 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2241      	movs	r2, #65	@ 0x41
 8003e18:	5c9b      	ldrb	r3, [r3, r2]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b28      	cmp	r3, #40	@ 0x28
 8003e1e:	d10b      	bne.n	8003e38 <I2C_Slave_ISR_IT+0x88>
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	2380      	movs	r3, #128	@ 0x80
 8003e24:	049b      	lsls	r3, r3, #18
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d106      	bne.n	8003e38 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	0011      	movs	r1, r2
 8003e30:	0018      	movs	r0, r3
 8003e32:	f000 ffd1 	bl	8004dd8 <I2C_ITListenCplt>
 8003e36:	e036      	b.n	8003ea6 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2241      	movs	r2, #65	@ 0x41
 8003e3c:	5c9b      	ldrb	r3, [r3, r2]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b29      	cmp	r3, #41	@ 0x29
 8003e42:	d110      	bne.n	8003e66 <I2C_Slave_ISR_IT+0xb6>
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	4a59      	ldr	r2, [pc, #356]	@ (8003fac <I2C_Slave_ISR_IT+0x1fc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00c      	beq.n	8003e66 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2210      	movs	r2, #16
 8003e52:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	0018      	movs	r0, r3
 8003e58:	f001 f941 	bl	80050de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f000 fd00 	bl	8004864 <I2C_ITSlaveSeqCplt>
 8003e64:	e01f      	b.n	8003ea6 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2210      	movs	r2, #16
 8003e6c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003e6e:	e091      	b.n	8003f94 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2210      	movs	r2, #16
 8003e76:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7c:	2204      	movs	r2, #4
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <I2C_Slave_ISR_IT+0xe6>
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	2380      	movs	r3, #128	@ 0x80
 8003e8e:	045b      	lsls	r3, r3, #17
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d000      	beq.n	8003e96 <I2C_Slave_ISR_IT+0xe6>
 8003e94:	e07e      	b.n	8003f94 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	0011      	movs	r1, r2
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f000 fff2 	bl	8004e88 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003ea4:	e076      	b.n	8003f94 <I2C_Slave_ISR_IT+0x1e4>
 8003ea6:	e075      	b.n	8003f94 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2204      	movs	r2, #4
 8003eac:	4013      	ands	r3, r2
 8003eae:	d02f      	beq.n	8003f10 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2204      	movs	r2, #4
 8003eb4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003eb6:	d02b      	beq.n	8003f10 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d018      	beq.n	8003ef4 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d14c      	bne.n	8003f98 <I2C_Slave_ISR_IT+0x1e8>
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	4a2a      	ldr	r2, [pc, #168]	@ (8003fac <I2C_Slave_ISR_IT+0x1fc>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d048      	beq.n	8003f98 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f000 fcab 	bl	8004864 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003f0e:	e043      	b.n	8003f98 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	2208      	movs	r2, #8
 8003f14:	4013      	ands	r3, r2
 8003f16:	d00a      	beq.n	8003f2e <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2208      	movs	r2, #8
 8003f1c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003f1e:	d006      	beq.n	8003f2e <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	0011      	movs	r1, r2
 8003f26:	0018      	movs	r0, r3
 8003f28:	f000 fbb6 	bl	8004698 <I2C_ITAddrCplt>
 8003f2c:	e035      	b.n	8003f9a <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2202      	movs	r2, #2
 8003f32:	4013      	ands	r3, r2
 8003f34:	d031      	beq.n	8003f9a <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003f3c:	d02d      	beq.n	8003f9a <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d018      	beq.n	8003f7a <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	781a      	ldrb	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003f78:	e00f      	b.n	8003f9a <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	2380      	movs	r3, #128	@ 0x80
 8003f7e:	045b      	lsls	r3, r3, #17
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d002      	beq.n	8003f8a <I2C_Slave_ISR_IT+0x1da>
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d107      	bne.n	8003f9a <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f000 fc69 	bl	8004864 <I2C_ITSlaveSeqCplt>
 8003f92:	e002      	b.n	8003f9a <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8003f94:	46c0      	nop			@ (mov r8, r8)
 8003f96:	e000      	b.n	8003f9a <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8003f98:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2240      	movs	r2, #64	@ 0x40
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b006      	add	sp, #24
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	ffff0000 	.word	0xffff0000

08003fb0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003fb0:	b590      	push	{r4, r7, lr}
 8003fb2:	b089      	sub	sp, #36	@ 0x24
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2240      	movs	r2, #64	@ 0x40
 8003fc0:	5c9b      	ldrb	r3, [r3, r2]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <I2C_Master_ISR_DMA+0x1a>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e0e7      	b.n	800419a <I2C_Master_ISR_DMA+0x1ea>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2240      	movs	r2, #64	@ 0x40
 8003fce:	2101      	movs	r1, #1
 8003fd0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2210      	movs	r2, #16
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d017      	beq.n	800400a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2210      	movs	r2, #16
 8003fde:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003fe0:	d013      	beq.n	800400a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2210      	movs	r2, #16
 8003fe8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fee:	2204      	movs	r2, #4
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2120      	movs	r1, #32
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f001 fb2e 	bl	800565c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	0018      	movs	r0, r3
 8004004:	f001 f86b 	bl	80050de <I2C_Flush_TXDR>
 8004008:	e0c2      	b.n	8004190 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2280      	movs	r2, #128	@ 0x80
 800400e:	4013      	ands	r3, r2
 8004010:	d100      	bne.n	8004014 <I2C_Master_ISR_DMA+0x64>
 8004012:	e07c      	b.n	800410e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2240      	movs	r2, #64	@ 0x40
 8004018:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800401a:	d100      	bne.n	800401e <I2C_Master_ISR_DMA+0x6e>
 800401c:	e077      	b.n	800410e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2140      	movs	r1, #64	@ 0x40
 800402a:	438a      	bics	r2, r1
 800402c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d055      	beq.n	80040e4 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	b29a      	uxth	r2, r3
 8004040:	2312      	movs	r3, #18
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	0592      	lsls	r2, r2, #22
 8004046:	0d92      	lsrs	r2, r2, #22
 8004048:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	2bff      	cmp	r3, #255	@ 0xff
 8004052:	d906      	bls.n	8004062 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	22ff      	movs	r2, #255	@ 0xff
 8004058:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800405a:	2380      	movs	r3, #128	@ 0x80
 800405c:	045b      	lsls	r3, r3, #17
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e010      	b.n	8004084 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	4a4c      	ldr	r2, [pc, #304]	@ (80041a4 <I2C_Master_ISR_DMA+0x1f4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	e002      	b.n	8004084 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800407e:	2380      	movs	r3, #128	@ 0x80
 8004080:	049b      	lsls	r3, r3, #18
 8004082:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004088:	b2da      	uxtb	r2, r3
 800408a:	697c      	ldr	r4, [r7, #20]
 800408c:	2312      	movs	r3, #18
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	8819      	ldrh	r1, [r3, #0]
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	2300      	movs	r3, #0
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	0023      	movs	r3, r4
 800409a:	f001 faa5 	bl	80055e8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2241      	movs	r2, #65	@ 0x41
 80040b4:	5c9b      	ldrb	r3, [r3, r2]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b22      	cmp	r3, #34	@ 0x22
 80040ba:	d109      	bne.n	80040d0 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2180      	movs	r1, #128	@ 0x80
 80040c8:	0209      	lsls	r1, r1, #8
 80040ca:	430a      	orrs	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80040ce:	e05f      	b.n	8004190 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2180      	movs	r1, #128	@ 0x80
 80040dc:	01c9      	lsls	r1, r1, #7
 80040de:	430a      	orrs	r2, r1
 80040e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80040e2:	e055      	b.n	8004190 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	2380      	movs	r3, #128	@ 0x80
 80040ec:	049b      	lsls	r3, r3, #18
 80040ee:	401a      	ands	r2, r3
 80040f0:	2380      	movs	r3, #128	@ 0x80
 80040f2:	049b      	lsls	r3, r3, #18
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d004      	beq.n	8004102 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	0018      	movs	r0, r3
 80040fc:	f000 fb70 	bl	80047e0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004100:	e046      	b.n	8004190 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2140      	movs	r1, #64	@ 0x40
 8004106:	0018      	movs	r0, r3
 8004108:	f000 febe 	bl	8004e88 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800410c:	e040      	b.n	8004190 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2240      	movs	r2, #64	@ 0x40
 8004112:	4013      	ands	r3, r2
 8004114:	d02c      	beq.n	8004170 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2240      	movs	r2, #64	@ 0x40
 800411a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800411c:	d028      	beq.n	8004170 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d11d      	bne.n	8004164 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	2380      	movs	r3, #128	@ 0x80
 8004130:	049b      	lsls	r3, r3, #18
 8004132:	401a      	ands	r2, r3
 8004134:	2380      	movs	r3, #128	@ 0x80
 8004136:	049b      	lsls	r3, r3, #18
 8004138:	429a      	cmp	r2, r3
 800413a:	d028      	beq.n	800418e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004140:	4a18      	ldr	r2, [pc, #96]	@ (80041a4 <I2C_Master_ISR_DMA+0x1f4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d109      	bne.n	800415a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2180      	movs	r1, #128	@ 0x80
 8004152:	01c9      	lsls	r1, r1, #7
 8004154:	430a      	orrs	r2, r1
 8004156:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004158:	e019      	b.n	800418e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	0018      	movs	r0, r3
 800415e:	f000 fb3f 	bl	80047e0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004162:	e014      	b.n	800418e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2140      	movs	r1, #64	@ 0x40
 8004168:	0018      	movs	r0, r3
 800416a:	f000 fe8d 	bl	8004e88 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800416e:	e00e      	b.n	800418e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2220      	movs	r2, #32
 8004174:	4013      	ands	r3, r2
 8004176:	d00b      	beq.n	8004190 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800417e:	d007      	beq.n	8004190 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	0011      	movs	r1, r2
 8004186:	0018      	movs	r0, r3
 8004188:	f000 fbd0 	bl	800492c <I2C_ITMasterCplt>
 800418c:	e000      	b.n	8004190 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800418e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2240      	movs	r2, #64	@ 0x40
 8004194:	2100      	movs	r1, #0
 8004196:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	0018      	movs	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	b007      	add	sp, #28
 80041a0:	bd90      	pop	{r4, r7, pc}
 80041a2:	46c0      	nop			@ (mov r8, r8)
 80041a4:	ffff0000 	.word	0xffff0000

080041a8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80041a8:	b590      	push	{r4, r7, lr}
 80041aa:	b089      	sub	sp, #36	@ 0x24
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80041b4:	4b90      	ldr	r3, [pc, #576]	@ (80043f8 <I2C_Mem_ISR_DMA+0x250>)
 80041b6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2240      	movs	r2, #64	@ 0x40
 80041bc:	5c9b      	ldrb	r3, [r3, r2]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <I2C_Mem_ISR_DMA+0x1e>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e113      	b.n	80043ee <I2C_Mem_ISR_DMA+0x246>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2240      	movs	r2, #64	@ 0x40
 80041ca:	2101      	movs	r1, #1
 80041cc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2210      	movs	r2, #16
 80041d2:	4013      	ands	r3, r2
 80041d4:	d017      	beq.n	8004206 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2210      	movs	r2, #16
 80041da:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80041dc:	d013      	beq.n	8004206 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2210      	movs	r2, #16
 80041e4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ea:	2204      	movs	r2, #4
 80041ec:	431a      	orrs	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2120      	movs	r1, #32
 80041f6:	0018      	movs	r0, r3
 80041f8:	f001 fa30 	bl	800565c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	0018      	movs	r0, r3
 8004200:	f000 ff6d 	bl	80050de <I2C_Flush_TXDR>
 8004204:	e0ee      	b.n	80043e4 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2202      	movs	r2, #2
 800420a:	4013      	ands	r3, r2
 800420c:	d00d      	beq.n	800422a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2202      	movs	r2, #2
 8004212:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004214:	d009      	beq.n	800422a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800421e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	4252      	negs	r2, r2
 8004226:	651a      	str	r2, [r3, #80]	@ 0x50
 8004228:	e0dc      	b.n	80043e4 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2280      	movs	r2, #128	@ 0x80
 800422e:	4013      	ands	r3, r2
 8004230:	d063      	beq.n	80042fa <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2240      	movs	r2, #64	@ 0x40
 8004236:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004238:	d05f      	beq.n	80042fa <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2101      	movs	r1, #1
 800423e:	0018      	movs	r0, r3
 8004240:	f001 fa96 	bl	8005770 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2110      	movs	r1, #16
 8004248:	0018      	movs	r0, r3
 800424a:	f001 fa07 	bl	800565c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d04a      	beq.n	80042ee <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	2bff      	cmp	r3, #255	@ 0xff
 8004260:	d910      	bls.n	8004284 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	22ff      	movs	r2, #255	@ 0xff
 8004266:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800426c:	b299      	uxth	r1, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004272:	b2da      	uxtb	r2, r3
 8004274:	2380      	movs	r3, #128	@ 0x80
 8004276:	045b      	lsls	r3, r3, #17
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	2400      	movs	r4, #0
 800427c:	9400      	str	r4, [sp, #0]
 800427e:	f001 f9b3 	bl	80055e8 <I2C_TransferConfig>
 8004282:	e011      	b.n	80042a8 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004292:	b299      	uxth	r1, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004298:	b2da      	uxtb	r2, r3
 800429a:	2380      	movs	r3, #128	@ 0x80
 800429c:	049b      	lsls	r3, r3, #18
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	2400      	movs	r4, #0
 80042a2:	9400      	str	r4, [sp, #0]
 80042a4:	f001 f9a0 	bl	80055e8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2241      	movs	r2, #65	@ 0x41
 80042be:	5c9b      	ldrb	r3, [r3, r2]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b22      	cmp	r3, #34	@ 0x22
 80042c4:	d109      	bne.n	80042da <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2180      	movs	r1, #128	@ 0x80
 80042d2:	0209      	lsls	r1, r1, #8
 80042d4:	430a      	orrs	r2, r1
 80042d6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80042d8:	e084      	b.n	80043e4 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2180      	movs	r1, #128	@ 0x80
 80042e6:	01c9      	lsls	r1, r1, #7
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80042ec:	e07a      	b.n	80043e4 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2140      	movs	r1, #64	@ 0x40
 80042f2:	0018      	movs	r0, r3
 80042f4:	f000 fdc8 	bl	8004e88 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80042f8:	e074      	b.n	80043e4 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2240      	movs	r2, #64	@ 0x40
 80042fe:	4013      	ands	r3, r2
 8004300:	d062      	beq.n	80043c8 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2240      	movs	r2, #64	@ 0x40
 8004306:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004308:	d05e      	beq.n	80043c8 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2101      	movs	r1, #1
 800430e:	0018      	movs	r0, r3
 8004310:	f001 fa2e 	bl	8005770 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2110      	movs	r1, #16
 8004318:	0018      	movs	r0, r3
 800431a:	f001 f99f 	bl	800565c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2241      	movs	r2, #65	@ 0x41
 8004322:	5c9b      	ldrb	r3, [r3, r2]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b22      	cmp	r3, #34	@ 0x22
 8004328:	d101      	bne.n	800432e <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 800432a:	4b34      	ldr	r3, [pc, #208]	@ (80043fc <I2C_Mem_ISR_DMA+0x254>)
 800432c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004332:	b29b      	uxth	r3, r3
 8004334:	2bff      	cmp	r3, #255	@ 0xff
 8004336:	d911      	bls.n	800435c <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	22ff      	movs	r2, #255	@ 0xff
 800433c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004342:	b299      	uxth	r1, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004348:	b2da      	uxtb	r2, r3
 800434a:	2380      	movs	r3, #128	@ 0x80
 800434c:	045c      	lsls	r4, r3, #17
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	0023      	movs	r3, r4
 8004356:	f001 f947 	bl	80055e8 <I2C_TransferConfig>
 800435a:	e012      	b.n	8004382 <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436a:	b299      	uxth	r1, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004370:	b2da      	uxtb	r2, r3
 8004372:	2380      	movs	r3, #128	@ 0x80
 8004374:	049c      	lsls	r4, r3, #18
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	0023      	movs	r3, r4
 800437e:	f001 f933 	bl	80055e8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2241      	movs	r2, #65	@ 0x41
 8004398:	5c9b      	ldrb	r3, [r3, r2]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b22      	cmp	r3, #34	@ 0x22
 800439e:	d109      	bne.n	80043b4 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2180      	movs	r1, #128	@ 0x80
 80043ac:	0209      	lsls	r1, r1, #8
 80043ae:	430a      	orrs	r2, r1
 80043b0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043b2:	e017      	b.n	80043e4 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2180      	movs	r1, #128	@ 0x80
 80043c0:	01c9      	lsls	r1, r1, #7
 80043c2:	430a      	orrs	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043c6:	e00d      	b.n	80043e4 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2220      	movs	r2, #32
 80043cc:	4013      	ands	r3, r2
 80043ce:	d009      	beq.n	80043e4 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043d6:	d005      	beq.n	80043e4 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	0011      	movs	r1, r2
 80043de:	0018      	movs	r0, r3
 80043e0:	f000 faa4 	bl	800492c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2240      	movs	r2, #64	@ 0x40
 80043e8:	2100      	movs	r1, #0
 80043ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	0018      	movs	r0, r3
 80043f0:	46bd      	mov	sp, r7
 80043f2:	b007      	add	sp, #28
 80043f4:	bd90      	pop	{r4, r7, pc}
 80043f6:	46c0      	nop			@ (mov r8, r8)
 80043f8:	80002000 	.word	0x80002000
 80043fc:	80002400 	.word	0x80002400

08004400 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004410:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2240      	movs	r2, #64	@ 0x40
 800441a:	5c9b      	ldrb	r3, [r3, r2]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <I2C_Slave_ISR_DMA+0x24>
 8004420:	2302      	movs	r3, #2
 8004422:	e0ce      	b.n	80045c2 <I2C_Slave_ISR_DMA+0x1c2>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2240      	movs	r2, #64	@ 0x40
 8004428:	2101      	movs	r1, #1
 800442a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2220      	movs	r2, #32
 8004430:	4013      	ands	r3, r2
 8004432:	d00a      	beq.n	800444a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800443a:	d006      	beq.n	800444a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f000 fb40 	bl	8004ac8 <I2C_ITSlaveCplt>
 8004448:	e0b6      	b.n	80045b8 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2210      	movs	r2, #16
 800444e:	4013      	ands	r3, r2
 8004450:	d100      	bne.n	8004454 <I2C_Slave_ISR_DMA+0x54>
 8004452:	e0a3      	b.n	800459c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2210      	movs	r2, #16
 8004458:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800445a:	d100      	bne.n	800445e <I2C_Slave_ISR_DMA+0x5e>
 800445c:	e09e      	b.n	800459c <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	2380      	movs	r3, #128	@ 0x80
 8004462:	01db      	lsls	r3, r3, #7
 8004464:	4013      	ands	r3, r2
 8004466:	d105      	bne.n	8004474 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	2380      	movs	r3, #128	@ 0x80
 800446c:	021b      	lsls	r3, r3, #8
 800446e:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004470:	d100      	bne.n	8004474 <I2C_Slave_ISR_DMA+0x74>
 8004472:	e08c      	b.n	800458e <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00c      	beq.n	8004496 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	2380      	movs	r3, #128	@ 0x80
 8004480:	021b      	lsls	r3, r3, #8
 8004482:	4013      	ands	r3, r2
 8004484:	d007      	beq.n	8004496 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8004492:	2301      	movs	r3, #1
 8004494:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00c      	beq.n	80044b8 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	2380      	movs	r3, #128	@ 0x80
 80044a2:	01db      	lsls	r3, r3, #7
 80044a4:	4013      	ands	r3, r2
 80044a6:	d007      	beq.n	80044b8 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80044b4:	2301      	movs	r3, #1
 80044b6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d12d      	bne.n	800451a <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2241      	movs	r2, #65	@ 0x41
 80044c2:	5c9b      	ldrb	r3, [r3, r2]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b28      	cmp	r3, #40	@ 0x28
 80044c8:	d10b      	bne.n	80044e2 <I2C_Slave_ISR_DMA+0xe2>
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	2380      	movs	r3, #128	@ 0x80
 80044ce:	049b      	lsls	r3, r3, #18
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d106      	bne.n	80044e2 <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	0011      	movs	r1, r2
 80044da:	0018      	movs	r0, r3
 80044dc:	f000 fc7c 	bl	8004dd8 <I2C_ITListenCplt>
 80044e0:	e054      	b.n	800458c <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2241      	movs	r2, #65	@ 0x41
 80044e6:	5c9b      	ldrb	r3, [r3, r2]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b29      	cmp	r3, #41	@ 0x29
 80044ec:	d110      	bne.n	8004510 <I2C_Slave_ISR_DMA+0x110>
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	4a36      	ldr	r2, [pc, #216]	@ (80045cc <I2C_Slave_ISR_DMA+0x1cc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00c      	beq.n	8004510 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2210      	movs	r2, #16
 80044fc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	0018      	movs	r0, r3
 8004502:	f000 fdec 	bl	80050de <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	0018      	movs	r0, r3
 800450a:	f000 f9ab 	bl	8004864 <I2C_ITSlaveSeqCplt>
 800450e:	e03d      	b.n	800458c <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2210      	movs	r2, #16
 8004516:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004518:	e03e      	b.n	8004598 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2210      	movs	r2, #16
 8004520:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004526:	2204      	movs	r2, #4
 8004528:	431a      	orrs	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800452e:	2317      	movs	r3, #23
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	2141      	movs	r1, #65	@ 0x41
 8004536:	5c52      	ldrb	r2, [r2, r1]
 8004538:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d004      	beq.n	800454a <I2C_Slave_ISR_DMA+0x14a>
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	2380      	movs	r3, #128	@ 0x80
 8004544:	045b      	lsls	r3, r3, #17
 8004546:	429a      	cmp	r2, r3
 8004548:	d126      	bne.n	8004598 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800454a:	2217      	movs	r2, #23
 800454c:	18bb      	adds	r3, r7, r2
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b21      	cmp	r3, #33	@ 0x21
 8004552:	d003      	beq.n	800455c <I2C_Slave_ISR_DMA+0x15c>
 8004554:	18bb      	adds	r3, r7, r2
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b29      	cmp	r3, #41	@ 0x29
 800455a:	d103      	bne.n	8004564 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2221      	movs	r2, #33	@ 0x21
 8004560:	631a      	str	r2, [r3, #48]	@ 0x30
 8004562:	e00b      	b.n	800457c <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004564:	2217      	movs	r2, #23
 8004566:	18bb      	adds	r3, r7, r2
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b22      	cmp	r3, #34	@ 0x22
 800456c:	d003      	beq.n	8004576 <I2C_Slave_ISR_DMA+0x176>
 800456e:	18bb      	adds	r3, r7, r2
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b2a      	cmp	r3, #42	@ 0x2a
 8004574:	d102      	bne.n	800457c <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2222      	movs	r2, #34	@ 0x22
 800457a:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	0011      	movs	r1, r2
 8004584:	0018      	movs	r0, r3
 8004586:	f000 fc7f 	bl	8004e88 <I2C_ITError>
      if (treatdmanack == 1U)
 800458a:	e005      	b.n	8004598 <I2C_Slave_ISR_DMA+0x198>
 800458c:	e004      	b.n	8004598 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2210      	movs	r2, #16
 8004594:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004596:	e00f      	b.n	80045b8 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8004598:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800459a:	e00d      	b.n	80045b8 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2208      	movs	r2, #8
 80045a0:	4013      	ands	r3, r2
 80045a2:	d009      	beq.n	80045b8 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2208      	movs	r2, #8
 80045a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80045aa:	d005      	beq.n	80045b8 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	0011      	movs	r1, r2
 80045b2:	0018      	movs	r0, r3
 80045b4:	f000 f870 	bl	8004698 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2240      	movs	r2, #64	@ 0x40
 80045bc:	2100      	movs	r1, #0
 80045be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	0018      	movs	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b008      	add	sp, #32
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	46c0      	nop			@ (mov r8, r8)
 80045cc:	ffff0000 	.word	0xffff0000

080045d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80045d0:	b5b0      	push	{r4, r5, r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	000c      	movs	r4, r1
 80045da:	0010      	movs	r0, r2
 80045dc:	0019      	movs	r1, r3
 80045de:	250a      	movs	r5, #10
 80045e0:	197b      	adds	r3, r7, r5
 80045e2:	1c22      	adds	r2, r4, #0
 80045e4:	801a      	strh	r2, [r3, #0]
 80045e6:	2308      	movs	r3, #8
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	1c02      	adds	r2, r0, #0
 80045ec:	801a      	strh	r2, [r3, #0]
 80045ee:	1dbb      	adds	r3, r7, #6
 80045f0:	1c0a      	adds	r2, r1, #0
 80045f2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80045f4:	1dbb      	adds	r3, r7, #6
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	2380      	movs	r3, #128	@ 0x80
 80045fc:	045c      	lsls	r4, r3, #17
 80045fe:	197b      	adds	r3, r7, r5
 8004600:	8819      	ldrh	r1, [r3, #0]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	4b23      	ldr	r3, [pc, #140]	@ (8004694 <I2C_RequestMemoryWrite+0xc4>)
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	0023      	movs	r3, r4
 800460a:	f000 ffed 	bl	80055e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800460e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004610:	6a39      	ldr	r1, [r7, #32]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	0018      	movs	r0, r3
 8004616:	f000 fe65 	bl	80052e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800461a:	1e03      	subs	r3, r0, #0
 800461c:	d001      	beq.n	8004622 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e033      	b.n	800468a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004622:	1dbb      	adds	r3, r7, #6
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d107      	bne.n	800463a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800462a:	2308      	movs	r3, #8
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	b2da      	uxtb	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	629a      	str	r2, [r3, #40]	@ 0x28
 8004638:	e019      	b.n	800466e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800463a:	2308      	movs	r3, #8
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	0a1b      	lsrs	r3, r3, #8
 8004642:	b29b      	uxth	r3, r3
 8004644:	b2da      	uxtb	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800464c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800464e:	6a39      	ldr	r1, [r7, #32]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	0018      	movs	r0, r3
 8004654:	f000 fe46 	bl	80052e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004658:	1e03      	subs	r3, r0, #0
 800465a:	d001      	beq.n	8004660 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e014      	b.n	800468a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004660:	2308      	movs	r3, #8
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b2da      	uxtb	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800466e:	6a3a      	ldr	r2, [r7, #32]
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	0013      	movs	r3, r2
 8004678:	2200      	movs	r2, #0
 800467a:	2180      	movs	r1, #128	@ 0x80
 800467c:	f000 fdda 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 8004680:	1e03      	subs	r3, r0, #0
 8004682:	d001      	beq.n	8004688 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	0018      	movs	r0, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	b004      	add	sp, #16
 8004690:	bdb0      	pop	{r4, r5, r7, pc}
 8004692:	46c0      	nop			@ (mov r8, r8)
 8004694:	80002000 	.word	0x80002000

08004698 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004698:	b5b0      	push	{r4, r5, r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2241      	movs	r2, #65	@ 0x41
 80046a6:	5c9b      	ldrb	r3, [r3, r2]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	001a      	movs	r2, r3
 80046ac:	2328      	movs	r3, #40	@ 0x28
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b28      	cmp	r3, #40	@ 0x28
 80046b2:	d000      	beq.n	80046b6 <I2C_ITAddrCplt+0x1e>
 80046b4:	e088      	b.n	80047c8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	0c1b      	lsrs	r3, r3, #16
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	250f      	movs	r5, #15
 80046c2:	197b      	adds	r3, r7, r5
 80046c4:	2101      	movs	r1, #1
 80046c6:	400a      	ands	r2, r1
 80046c8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	0c1b      	lsrs	r3, r3, #16
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	200c      	movs	r0, #12
 80046d6:	183b      	adds	r3, r7, r0
 80046d8:	21fe      	movs	r1, #254	@ 0xfe
 80046da:	400a      	ands	r2, r1
 80046dc:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	240a      	movs	r4, #10
 80046e8:	193b      	adds	r3, r7, r4
 80046ea:	0592      	lsls	r2, r2, #22
 80046ec:	0d92      	lsrs	r2, r2, #22
 80046ee:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	2308      	movs	r3, #8
 80046fa:	18fb      	adds	r3, r7, r3
 80046fc:	21fe      	movs	r1, #254	@ 0xfe
 80046fe:	400a      	ands	r2, r1
 8004700:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d148      	bne.n	800479c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800470a:	0021      	movs	r1, r4
 800470c:	187b      	adds	r3, r7, r1
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	09db      	lsrs	r3, r3, #7
 8004712:	b29a      	uxth	r2, r3
 8004714:	183b      	adds	r3, r7, r0
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	4053      	eors	r3, r2
 800471a:	b29b      	uxth	r3, r3
 800471c:	001a      	movs	r2, r3
 800471e:	2306      	movs	r3, #6
 8004720:	4013      	ands	r3, r2
 8004722:	d120      	bne.n	8004766 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004724:	183b      	adds	r3, r7, r0
 8004726:	187a      	adds	r2, r7, r1
 8004728:	8812      	ldrh	r2, [r2, #0]
 800472a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473a:	2b02      	cmp	r3, #2
 800473c:	d14c      	bne.n	80047d8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2208      	movs	r2, #8
 800474a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2240      	movs	r2, #64	@ 0x40
 8004750:	2100      	movs	r1, #0
 8004752:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004754:	183b      	adds	r3, r7, r0
 8004756:	881a      	ldrh	r2, [r3, #0]
 8004758:	197b      	adds	r3, r7, r5
 800475a:	7819      	ldrb	r1, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	0018      	movs	r0, r3
 8004760:	f7ff faf5 	bl	8003d4e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004764:	e038      	b.n	80047d8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004766:	240c      	movs	r4, #12
 8004768:	193b      	adds	r3, r7, r4
 800476a:	2208      	movs	r2, #8
 800476c:	18ba      	adds	r2, r7, r2
 800476e:	8812      	ldrh	r2, [r2, #0]
 8004770:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004772:	2380      	movs	r3, #128	@ 0x80
 8004774:	021a      	lsls	r2, r3, #8
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0011      	movs	r1, r2
 800477a:	0018      	movs	r0, r3
 800477c:	f000 fff8 	bl	8005770 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2240      	movs	r2, #64	@ 0x40
 8004784:	2100      	movs	r1, #0
 8004786:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004788:	193b      	adds	r3, r7, r4
 800478a:	881a      	ldrh	r2, [r3, #0]
 800478c:	230f      	movs	r3, #15
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	7819      	ldrb	r1, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0018      	movs	r0, r3
 8004796:	f7ff fada 	bl	8003d4e <HAL_I2C_AddrCallback>
}
 800479a:	e01d      	b.n	80047d8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800479c:	2380      	movs	r3, #128	@ 0x80
 800479e:	021a      	lsls	r2, r3, #8
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	0011      	movs	r1, r2
 80047a4:	0018      	movs	r0, r3
 80047a6:	f000 ffe3 	bl	8005770 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2240      	movs	r2, #64	@ 0x40
 80047ae:	2100      	movs	r1, #0
 80047b0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80047b2:	230c      	movs	r3, #12
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	881a      	ldrh	r2, [r3, #0]
 80047b8:	230f      	movs	r3, #15
 80047ba:	18fb      	adds	r3, r7, r3
 80047bc:	7819      	ldrb	r1, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7ff fac4 	bl	8003d4e <HAL_I2C_AddrCallback>
}
 80047c6:	e007      	b.n	80047d8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2208      	movs	r2, #8
 80047ce:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2240      	movs	r2, #64	@ 0x40
 80047d4:	2100      	movs	r1, #0
 80047d6:	5499      	strb	r1, [r3, r2]
}
 80047d8:	46c0      	nop			@ (mov r8, r8)
 80047da:	46bd      	mov	sp, r7
 80047dc:	b004      	add	sp, #16
 80047de:	bdb0      	pop	{r4, r5, r7, pc}

080047e0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2242      	movs	r2, #66	@ 0x42
 80047ec:	2100      	movs	r1, #0
 80047ee:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2241      	movs	r2, #65	@ 0x41
 80047f4:	5c9b      	ldrb	r3, [r3, r2]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b21      	cmp	r3, #33	@ 0x21
 80047fa:	d117      	bne.n	800482c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2241      	movs	r2, #65	@ 0x41
 8004800:	2120      	movs	r1, #32
 8004802:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2211      	movs	r2, #17
 8004808:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2101      	movs	r1, #1
 8004814:	0018      	movs	r0, r3
 8004816:	f000 ffab 	bl	8005770 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2240      	movs	r2, #64	@ 0x40
 800481e:	2100      	movs	r1, #0
 8004820:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	0018      	movs	r0, r3
 8004826:	f7ff fa72 	bl	8003d0e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800482a:	e016      	b.n	800485a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2241      	movs	r2, #65	@ 0x41
 8004830:	2120      	movs	r1, #32
 8004832:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2212      	movs	r2, #18
 8004838:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2102      	movs	r1, #2
 8004844:	0018      	movs	r0, r3
 8004846:	f000 ff93 	bl	8005770 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2240      	movs	r2, #64	@ 0x40
 800484e:	2100      	movs	r1, #0
 8004850:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	0018      	movs	r0, r3
 8004856:	f7ff fa62 	bl	8003d1e <HAL_I2C_MasterRxCpltCallback>
}
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	46bd      	mov	sp, r7
 800485e:	b002      	add	sp, #8
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2242      	movs	r2, #66	@ 0x42
 8004878:	2100      	movs	r1, #0
 800487a:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	2380      	movs	r3, #128	@ 0x80
 8004880:	01db      	lsls	r3, r3, #7
 8004882:	4013      	ands	r3, r2
 8004884:	d008      	beq.n	8004898 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4924      	ldr	r1, [pc, #144]	@ (8004924 <I2C_ITSlaveSeqCplt+0xc0>)
 8004892:	400a      	ands	r2, r1
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	e00c      	b.n	80048b2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	2380      	movs	r3, #128	@ 0x80
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	4013      	ands	r3, r2
 80048a0:	d007      	beq.n	80048b2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	491e      	ldr	r1, [pc, #120]	@ (8004928 <I2C_ITSlaveSeqCplt+0xc4>)
 80048ae:	400a      	ands	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2241      	movs	r2, #65	@ 0x41
 80048b6:	5c9b      	ldrb	r3, [r3, r2]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b29      	cmp	r3, #41	@ 0x29
 80048bc:	d114      	bne.n	80048e8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2241      	movs	r2, #65	@ 0x41
 80048c2:	2128      	movs	r1, #40	@ 0x28
 80048c4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2221      	movs	r2, #33	@ 0x21
 80048ca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2101      	movs	r1, #1
 80048d0:	0018      	movs	r0, r3
 80048d2:	f000 ff4d 	bl	8005770 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2240      	movs	r2, #64	@ 0x40
 80048da:	2100      	movs	r1, #0
 80048dc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	0018      	movs	r0, r3
 80048e2:	f7ff fa24 	bl	8003d2e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80048e6:	e019      	b.n	800491c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2241      	movs	r2, #65	@ 0x41
 80048ec:	5c9b      	ldrb	r3, [r3, r2]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80048f2:	d113      	bne.n	800491c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2241      	movs	r2, #65	@ 0x41
 80048f8:	2128      	movs	r1, #40	@ 0x28
 80048fa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2222      	movs	r2, #34	@ 0x22
 8004900:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2102      	movs	r1, #2
 8004906:	0018      	movs	r0, r3
 8004908:	f000 ff32 	bl	8005770 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2240      	movs	r2, #64	@ 0x40
 8004910:	2100      	movs	r1, #0
 8004912:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	0018      	movs	r0, r3
 8004918:	f7ff fa11 	bl	8003d3e <HAL_I2C_SlaveRxCpltCallback>
}
 800491c:	46c0      	nop			@ (mov r8, r8)
 800491e:	46bd      	mov	sp, r7
 8004920:	b004      	add	sp, #16
 8004922:	bd80      	pop	{r7, pc}
 8004924:	ffffbfff 	.word	0xffffbfff
 8004928:	ffff7fff 	.word	0xffff7fff

0800492c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2220      	movs	r2, #32
 8004940:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2241      	movs	r2, #65	@ 0x41
 8004946:	5c9b      	ldrb	r3, [r3, r2]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b21      	cmp	r3, #33	@ 0x21
 800494c:	d108      	bne.n	8004960 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2101      	movs	r1, #1
 8004952:	0018      	movs	r0, r3
 8004954:	f000 ff0c 	bl	8005770 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2211      	movs	r2, #17
 800495c:	631a      	str	r2, [r3, #48]	@ 0x30
 800495e:	e00d      	b.n	800497c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2241      	movs	r2, #65	@ 0x41
 8004964:	5c9b      	ldrb	r3, [r3, r2]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b22      	cmp	r3, #34	@ 0x22
 800496a:	d107      	bne.n	800497c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2102      	movs	r1, #2
 8004970:	0018      	movs	r0, r3
 8004972:	f000 fefd 	bl	8005770 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2212      	movs	r2, #18
 800497a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	494e      	ldr	r1, [pc, #312]	@ (8004ac0 <I2C_ITMasterCplt+0x194>)
 8004988:	400a      	ands	r2, r1
 800498a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a4b      	ldr	r2, [pc, #300]	@ (8004ac4 <I2C_ITMasterCplt+0x198>)
 8004996:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2210      	movs	r2, #16
 800499c:	4013      	ands	r3, r2
 800499e:	d009      	beq.n	80049b4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2210      	movs	r2, #16
 80049a6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ac:	2204      	movs	r2, #4
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2241      	movs	r2, #65	@ 0x41
 80049b8:	5c9b      	ldrb	r3, [r3, r2]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b60      	cmp	r3, #96	@ 0x60
 80049be:	d109      	bne.n	80049d4 <I2C_ITMasterCplt+0xa8>
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2204      	movs	r2, #4
 80049c4:	4013      	ands	r3, r2
 80049c6:	d005      	beq.n	80049d4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80049d2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	0018      	movs	r0, r3
 80049d8:	f000 fb81 	bl	80050de <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e0:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2241      	movs	r2, #65	@ 0x41
 80049e6:	5c9b      	ldrb	r3, [r3, r2]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b60      	cmp	r3, #96	@ 0x60
 80049ec:	d002      	beq.n	80049f4 <I2C_ITMasterCplt+0xc8>
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d007      	beq.n	8004a04 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	0011      	movs	r1, r2
 80049fc:	0018      	movs	r0, r3
 80049fe:	f000 fa43 	bl	8004e88 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a02:	e058      	b.n	8004ab6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2241      	movs	r2, #65	@ 0x41
 8004a08:	5c9b      	ldrb	r3, [r3, r2]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b21      	cmp	r3, #33	@ 0x21
 8004a0e:	d126      	bne.n	8004a5e <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2241      	movs	r2, #65	@ 0x41
 8004a14:	2120      	movs	r1, #32
 8004a16:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2242      	movs	r2, #66	@ 0x42
 8004a22:	5c9b      	ldrb	r3, [r3, r2]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b40      	cmp	r3, #64	@ 0x40
 8004a28:	d10c      	bne.n	8004a44 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2242      	movs	r2, #66	@ 0x42
 8004a2e:	2100      	movs	r1, #0
 8004a30:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2240      	movs	r2, #64	@ 0x40
 8004a36:	2100      	movs	r1, #0
 8004a38:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f7fc fbe9 	bl	8001214 <HAL_I2C_MemTxCpltCallback>
}
 8004a42:	e038      	b.n	8004ab6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2242      	movs	r2, #66	@ 0x42
 8004a48:	2100      	movs	r1, #0
 8004a4a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2240      	movs	r2, #64	@ 0x40
 8004a50:	2100      	movs	r1, #0
 8004a52:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	0018      	movs	r0, r3
 8004a58:	f7ff f959 	bl	8003d0e <HAL_I2C_MasterTxCpltCallback>
}
 8004a5c:	e02b      	b.n	8004ab6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2241      	movs	r2, #65	@ 0x41
 8004a62:	5c9b      	ldrb	r3, [r3, r2]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b22      	cmp	r3, #34	@ 0x22
 8004a68:	d125      	bne.n	8004ab6 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2241      	movs	r2, #65	@ 0x41
 8004a6e:	2120      	movs	r1, #32
 8004a70:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2242      	movs	r2, #66	@ 0x42
 8004a7c:	5c9b      	ldrb	r3, [r3, r2]
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b40      	cmp	r3, #64	@ 0x40
 8004a82:	d10c      	bne.n	8004a9e <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2242      	movs	r2, #66	@ 0x42
 8004a88:	2100      	movs	r1, #0
 8004a8a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2240      	movs	r2, #64	@ 0x40
 8004a90:	2100      	movs	r1, #0
 8004a92:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	0018      	movs	r0, r3
 8004a98:	f7ff f971 	bl	8003d7e <HAL_I2C_MemRxCpltCallback>
}
 8004a9c:	e00b      	b.n	8004ab6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2242      	movs	r2, #66	@ 0x42
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2240      	movs	r2, #64	@ 0x40
 8004aaa:	2100      	movs	r1, #0
 8004aac:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f7ff f934 	bl	8003d1e <HAL_I2C_MasterRxCpltCallback>
}
 8004ab6:	46c0      	nop			@ (mov r8, r8)
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b006      	add	sp, #24
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	fe00e800 	.word	0xfe00e800
 8004ac4:	ffff0000 	.word	0xffff0000

08004ac8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004ae4:	200b      	movs	r0, #11
 8004ae6:	183b      	adds	r3, r7, r0
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	2141      	movs	r1, #65	@ 0x41
 8004aec:	5c52      	ldrb	r2, [r2, r1]
 8004aee:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2220      	movs	r2, #32
 8004af6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004af8:	183b      	adds	r3, r7, r0
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b21      	cmp	r3, #33	@ 0x21
 8004afe:	d003      	beq.n	8004b08 <I2C_ITSlaveCplt+0x40>
 8004b00:	183b      	adds	r3, r7, r0
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b29      	cmp	r3, #41	@ 0x29
 8004b06:	d109      	bne.n	8004b1c <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004b08:	4aac      	ldr	r2, [pc, #688]	@ (8004dbc <I2C_ITSlaveCplt+0x2f4>)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	0011      	movs	r1, r2
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f000 fe2e 	bl	8005770 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2221      	movs	r2, #33	@ 0x21
 8004b18:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b1a:	e020      	b.n	8004b5e <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b1c:	220b      	movs	r2, #11
 8004b1e:	18bb      	adds	r3, r7, r2
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b22      	cmp	r3, #34	@ 0x22
 8004b24:	d003      	beq.n	8004b2e <I2C_ITSlaveCplt+0x66>
 8004b26:	18bb      	adds	r3, r7, r2
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b2c:	d109      	bne.n	8004b42 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004b2e:	4aa4      	ldr	r2, [pc, #656]	@ (8004dc0 <I2C_ITSlaveCplt+0x2f8>)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	0011      	movs	r1, r2
 8004b34:	0018      	movs	r0, r3
 8004b36:	f000 fe1b 	bl	8005770 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2222      	movs	r2, #34	@ 0x22
 8004b3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b40:	e00d      	b.n	8004b5e <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004b42:	230b      	movs	r3, #11
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b28      	cmp	r3, #40	@ 0x28
 8004b4a:	d108      	bne.n	8004b5e <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004b4c:	4a9d      	ldr	r2, [pc, #628]	@ (8004dc4 <I2C_ITSlaveCplt+0x2fc>)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	0011      	movs	r1, r2
 8004b52:	0018      	movs	r0, r3
 8004b54:	f000 fe0c 	bl	8005770 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2180      	movs	r1, #128	@ 0x80
 8004b6a:	0209      	lsls	r1, r1, #8
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4993      	ldr	r1, [pc, #588]	@ (8004dc8 <I2C_ITSlaveCplt+0x300>)
 8004b7c:	400a      	ands	r2, r1
 8004b7e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	0018      	movs	r0, r3
 8004b84:	f000 faab 	bl	80050de <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	2380      	movs	r3, #128	@ 0x80
 8004b8c:	01db      	lsls	r3, r3, #7
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d013      	beq.n	8004bba <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	498b      	ldr	r1, [pc, #556]	@ (8004dcc <I2C_ITSlaveCplt+0x304>)
 8004b9e:	400a      	ands	r2, r1
 8004ba0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d01f      	beq.n	8004bea <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004bb8:	e017      	b.n	8004bea <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	2380      	movs	r3, #128	@ 0x80
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	d012      	beq.n	8004bea <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4980      	ldr	r1, [pc, #512]	@ (8004dd0 <I2C_ITSlaveCplt+0x308>)
 8004bd0:	400a      	ands	r2, r1
 8004bd2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d006      	beq.n	8004bea <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2204      	movs	r2, #4
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d020      	beq.n	8004c34 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2204      	movs	r2, #4
 8004bf6:	4393      	bics	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00c      	beq.n	8004c34 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d005      	beq.n	8004c4a <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c42:	2204      	movs	r2, #4
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2210      	movs	r2, #16
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d04f      	beq.n	8004cf2 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2210      	movs	r2, #16
 8004c56:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004c58:	d04b      	beq.n	8004cf2 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d12d      	bne.n	8004cc0 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2241      	movs	r2, #65	@ 0x41
 8004c68:	5c9b      	ldrb	r3, [r3, r2]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b28      	cmp	r3, #40	@ 0x28
 8004c6e:	d10b      	bne.n	8004c88 <I2C_ITSlaveCplt+0x1c0>
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	2380      	movs	r3, #128	@ 0x80
 8004c74:	049b      	lsls	r3, r3, #18
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d106      	bne.n	8004c88 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	0011      	movs	r1, r2
 8004c80:	0018      	movs	r0, r3
 8004c82:	f000 f8a9 	bl	8004dd8 <I2C_ITListenCplt>
 8004c86:	e034      	b.n	8004cf2 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2241      	movs	r2, #65	@ 0x41
 8004c8c:	5c9b      	ldrb	r3, [r3, r2]
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b29      	cmp	r3, #41	@ 0x29
 8004c92:	d110      	bne.n	8004cb6 <I2C_ITSlaveCplt+0x1ee>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4a4f      	ldr	r2, [pc, #316]	@ (8004dd4 <I2C_ITSlaveCplt+0x30c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d00c      	beq.n	8004cb6 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2210      	movs	r2, #16
 8004ca2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f000 fa19 	bl	80050de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f7ff fdd8 	bl	8004864 <I2C_ITSlaveSeqCplt>
 8004cb4:	e01d      	b.n	8004cf2 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2210      	movs	r2, #16
 8004cbc:	61da      	str	r2, [r3, #28]
 8004cbe:	e018      	b.n	8004cf2 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2210      	movs	r2, #16
 8004cc6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ccc:	2204      	movs	r2, #4
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d004      	beq.n	8004ce4 <I2C_ITSlaveCplt+0x21c>
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	2380      	movs	r3, #128	@ 0x80
 8004cde:	045b      	lsls	r3, r3, #17
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d106      	bne.n	8004cf2 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	0011      	movs	r1, r2
 8004cec:	0018      	movs	r0, r3
 8004cee:	f000 f8cb 	bl	8004e88 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2242      	movs	r2, #66	@ 0x42
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d013      	beq.n	8004d30 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	0011      	movs	r1, r2
 8004d10:	0018      	movs	r0, r3
 8004d12:	f000 f8b9 	bl	8004e88 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2241      	movs	r2, #65	@ 0x41
 8004d1a:	5c9b      	ldrb	r3, [r3, r2]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b28      	cmp	r3, #40	@ 0x28
 8004d20:	d147      	bne.n	8004db2 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	0011      	movs	r1, r2
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f000 f855 	bl	8004dd8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d2e:	e040      	b.n	8004db2 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d34:	4a27      	ldr	r2, [pc, #156]	@ (8004dd4 <I2C_ITSlaveCplt+0x30c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d016      	beq.n	8004d68 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f7ff fd91 	bl	8004864 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a23      	ldr	r2, [pc, #140]	@ (8004dd4 <I2C_ITSlaveCplt+0x30c>)
 8004d46:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2241      	movs	r2, #65	@ 0x41
 8004d4c:	2120      	movs	r1, #32
 8004d4e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2240      	movs	r2, #64	@ 0x40
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7ff f804 	bl	8003d6e <HAL_I2C_ListenCpltCallback>
}
 8004d66:	e024      	b.n	8004db2 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2241      	movs	r2, #65	@ 0x41
 8004d6c:	5c9b      	ldrb	r3, [r3, r2]
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b22      	cmp	r3, #34	@ 0x22
 8004d72:	d10f      	bne.n	8004d94 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2241      	movs	r2, #65	@ 0x41
 8004d78:	2120      	movs	r1, #32
 8004d7a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2240      	movs	r2, #64	@ 0x40
 8004d86:	2100      	movs	r1, #0
 8004d88:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f7fe ffd6 	bl	8003d3e <HAL_I2C_SlaveRxCpltCallback>
}
 8004d92:	e00e      	b.n	8004db2 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2241      	movs	r2, #65	@ 0x41
 8004d98:	2120      	movs	r1, #32
 8004d9a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2240      	movs	r2, #64	@ 0x40
 8004da6:	2100      	movs	r1, #0
 8004da8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	0018      	movs	r0, r3
 8004dae:	f7fe ffbe 	bl	8003d2e <HAL_I2C_SlaveTxCpltCallback>
}
 8004db2:	46c0      	nop			@ (mov r8, r8)
 8004db4:	46bd      	mov	sp, r7
 8004db6:	b006      	add	sp, #24
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	46c0      	nop			@ (mov r8, r8)
 8004dbc:	00008001 	.word	0x00008001
 8004dc0:	00008002 	.word	0x00008002
 8004dc4:	00008003 	.word	0x00008003
 8004dc8:	fe00e800 	.word	0xfe00e800
 8004dcc:	ffffbfff 	.word	0xffffbfff
 8004dd0:	ffff7fff 	.word	0xffff7fff
 8004dd4:	ffff0000 	.word	0xffff0000

08004dd8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a26      	ldr	r2, [pc, #152]	@ (8004e80 <I2C_ITListenCplt+0xa8>)
 8004de6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2241      	movs	r2, #65	@ 0x41
 8004df2:	2120      	movs	r1, #32
 8004df4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2242      	movs	r2, #66	@ 0x42
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2204      	movs	r2, #4
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d022      	beq.n	8004e52 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d012      	beq.n	8004e52 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4a:	2204      	movs	r2, #4
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e52:	4a0c      	ldr	r2, [pc, #48]	@ (8004e84 <I2C_ITListenCplt+0xac>)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	0011      	movs	r1, r2
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f000 fc89 	bl	8005770 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2210      	movs	r2, #16
 8004e64:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2240      	movs	r2, #64	@ 0x40
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	0018      	movs	r0, r3
 8004e72:	f7fe ff7c 	bl	8003d6e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004e76:	46c0      	nop			@ (mov r8, r8)
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	b002      	add	sp, #8
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	46c0      	nop			@ (mov r8, r8)
 8004e80:	ffff0000 	.word	0xffff0000
 8004e84:	00008003 	.word	0x00008003

08004e88 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e92:	200f      	movs	r0, #15
 8004e94:	183b      	adds	r3, r7, r0
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	2141      	movs	r1, #65	@ 0x41
 8004e9a:	5c52      	ldrb	r2, [r2, r1]
 8004e9c:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2242      	movs	r2, #66	@ 0x42
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a72      	ldr	r2, [pc, #456]	@ (8005074 <I2C_ITError+0x1ec>)
 8004eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004ebe:	183b      	adds	r3, r7, r0
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b28      	cmp	r3, #40	@ 0x28
 8004ec4:	d007      	beq.n	8004ed6 <I2C_ITError+0x4e>
 8004ec6:	183b      	adds	r3, r7, r0
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2b29      	cmp	r3, #41	@ 0x29
 8004ecc:	d003      	beq.n	8004ed6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004ece:	183b      	adds	r3, r7, r0
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ed4:	d10c      	bne.n	8004ef0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2103      	movs	r1, #3
 8004eda:	0018      	movs	r0, r3
 8004edc:	f000 fc48 	bl	8005770 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2241      	movs	r2, #65	@ 0x41
 8004ee4:	2128      	movs	r1, #40	@ 0x28
 8004ee6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a63      	ldr	r2, [pc, #396]	@ (8005078 <I2C_ITError+0x1f0>)
 8004eec:	635a      	str	r2, [r3, #52]	@ 0x34
 8004eee:	e032      	b.n	8004f56 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ef0:	4a62      	ldr	r2, [pc, #392]	@ (800507c <I2C_ITError+0x1f4>)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	0011      	movs	r1, r2
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f000 fc3a 	bl	8005770 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	0018      	movs	r0, r3
 8004f00:	f000 f8ed 	bl	80050de <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2241      	movs	r2, #65	@ 0x41
 8004f08:	5c9b      	ldrb	r3, [r3, r2]
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b60      	cmp	r3, #96	@ 0x60
 8004f0e:	d01f      	beq.n	8004f50 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2241      	movs	r2, #65	@ 0x41
 8004f14:	2120      	movs	r1, #32
 8004f16:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	4013      	ands	r3, r2
 8004f22:	2b20      	cmp	r3, #32
 8004f24:	d114      	bne.n	8004f50 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	2210      	movs	r2, #16
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d109      	bne.n	8004f48 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2210      	movs	r2, #16
 8004f3a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f40:	2204      	movs	r2, #4
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d03b      	beq.n	8004fdc <I2C_ITError+0x154>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b11      	cmp	r3, #17
 8004f68:	d002      	beq.n	8004f70 <I2C_ITError+0xe8>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2b21      	cmp	r3, #33	@ 0x21
 8004f6e:	d135      	bne.n	8004fdc <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	2380      	movs	r3, #128	@ 0x80
 8004f78:	01db      	lsls	r3, r3, #7
 8004f7a:	401a      	ands	r2, r3
 8004f7c:	2380      	movs	r3, #128	@ 0x80
 8004f7e:	01db      	lsls	r3, r3, #7
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d107      	bne.n	8004f94 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	493c      	ldr	r1, [pc, #240]	@ (8005080 <I2C_ITError+0x1f8>)
 8004f90:	400a      	ands	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f7fe f8cd 	bl	8003138 <HAL_DMA_GetState>
 8004f9e:	0003      	movs	r3, r0
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d016      	beq.n	8004fd2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa8:	4a36      	ldr	r2, [pc, #216]	@ (8005084 <I2C_ITError+0x1fc>)
 8004faa:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2240      	movs	r2, #64	@ 0x40
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f7fd ff91 	bl	8002ee0 <HAL_DMA_Abort_IT>
 8004fbe:	1e03      	subs	r3, r0, #0
 8004fc0:	d051      	beq.n	8005066 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fcc:	0018      	movs	r0, r3
 8004fce:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fd0:	e049      	b.n	8005066 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f000 f859 	bl	800508c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fda:	e044      	b.n	8005066 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d03b      	beq.n	800505c <I2C_ITError+0x1d4>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b12      	cmp	r3, #18
 8004fe8:	d002      	beq.n	8004ff0 <I2C_ITError+0x168>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b22      	cmp	r3, #34	@ 0x22
 8004fee:	d135      	bne.n	800505c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	2380      	movs	r3, #128	@ 0x80
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	2380      	movs	r3, #128	@ 0x80
 8004ffe:	021b      	lsls	r3, r3, #8
 8005000:	429a      	cmp	r2, r3
 8005002:	d107      	bne.n	8005014 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	491e      	ldr	r1, [pc, #120]	@ (8005088 <I2C_ITError+0x200>)
 8005010:	400a      	ands	r2, r1
 8005012:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005018:	0018      	movs	r0, r3
 800501a:	f7fe f88d 	bl	8003138 <HAL_DMA_GetState>
 800501e:	0003      	movs	r3, r0
 8005020:	2b01      	cmp	r3, #1
 8005022:	d016      	beq.n	8005052 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005028:	4a16      	ldr	r2, [pc, #88]	@ (8005084 <I2C_ITError+0x1fc>)
 800502a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2240      	movs	r2, #64	@ 0x40
 8005030:	2100      	movs	r1, #0
 8005032:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005038:	0018      	movs	r0, r3
 800503a:	f7fd ff51 	bl	8002ee0 <HAL_DMA_Abort_IT>
 800503e:	1e03      	subs	r3, r0, #0
 8005040:	d013      	beq.n	800506a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005046:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504c:	0018      	movs	r0, r3
 800504e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005050:	e00b      	b.n	800506a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	0018      	movs	r0, r3
 8005056:	f000 f819 	bl	800508c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800505a:	e006      	b.n	800506a <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	0018      	movs	r0, r3
 8005060:	f000 f814 	bl	800508c <I2C_TreatErrorCallback>
  }
}
 8005064:	e002      	b.n	800506c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005066:	46c0      	nop			@ (mov r8, r8)
 8005068:	e000      	b.n	800506c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800506a:	46c0      	nop			@ (mov r8, r8)
}
 800506c:	46c0      	nop			@ (mov r8, r8)
 800506e:	46bd      	mov	sp, r7
 8005070:	b004      	add	sp, #16
 8005072:	bd80      	pop	{r7, pc}
 8005074:	ffff0000 	.word	0xffff0000
 8005078:	08003db1 	.word	0x08003db1
 800507c:	00008003 	.word	0x00008003
 8005080:	ffffbfff 	.word	0xffffbfff
 8005084:	080051f7 	.word	0x080051f7
 8005088:	ffff7fff 	.word	0xffff7fff

0800508c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2241      	movs	r2, #65	@ 0x41
 8005098:	5c9b      	ldrb	r3, [r3, r2]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b60      	cmp	r3, #96	@ 0x60
 800509e:	d10f      	bne.n	80050c0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2241      	movs	r2, #65	@ 0x41
 80050a4:	2120      	movs	r1, #32
 80050a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2240      	movs	r2, #64	@ 0x40
 80050b2:	2100      	movs	r1, #0
 80050b4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f7fe fe70 	bl	8003d9e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050be:	e00a      	b.n	80050d6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2240      	movs	r2, #64	@ 0x40
 80050ca:	2100      	movs	r1, #0
 80050cc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	0018      	movs	r0, r3
 80050d2:	f7fe fe5c 	bl	8003d8e <HAL_I2C_ErrorCallback>
}
 80050d6:	46c0      	nop			@ (mov r8, r8)
 80050d8:	46bd      	mov	sp, r7
 80050da:	b002      	add	sp, #8
 80050dc:	bd80      	pop	{r7, pc}

080050de <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	2202      	movs	r2, #2
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d103      	bne.n	80050fc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2200      	movs	r2, #0
 80050fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	2201      	movs	r2, #1
 8005104:	4013      	ands	r3, r2
 8005106:	2b01      	cmp	r3, #1
 8005108:	d007      	beq.n	800511a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699a      	ldr	r2, [r3, #24]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2101      	movs	r1, #1
 8005116:	430a      	orrs	r2, r1
 8005118:	619a      	str	r2, [r3, #24]
  }
}
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	46bd      	mov	sp, r7
 800511e:	b002      	add	sp, #8
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005130:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4920      	ldr	r1, [pc, #128]	@ (80051c0 <I2C_DMAMasterTransmitCplt+0x9c>)
 800513e:	400a      	ands	r2, r1
 8005140:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d105      	bne.n	8005158 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2120      	movs	r1, #32
 8005150:	0018      	movs	r0, r3
 8005152:	f000 fa83 	bl	800565c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005156:	e02e      	b.n	80051b6 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005160:	189a      	adds	r2, r3, r2
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	2bff      	cmp	r3, #255	@ 0xff
 800516e:	d903      	bls.n	8005178 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	22ff      	movs	r2, #255	@ 0xff
 8005174:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005176:	e004      	b.n	8005182 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518a:	0019      	movs	r1, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3328      	adds	r3, #40	@ 0x28
 8005192:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005198:	f7fd fe1a 	bl	8002dd0 <HAL_DMA_Start_IT>
 800519c:	1e03      	subs	r3, r0, #0
 800519e:	d005      	beq.n	80051ac <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2110      	movs	r1, #16
 80051a4:	0018      	movs	r0, r3
 80051a6:	f7ff fe6f 	bl	8004e88 <I2C_ITError>
}
 80051aa:	e004      	b.n	80051b6 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2140      	movs	r1, #64	@ 0x40
 80051b0:	0018      	movs	r0, r3
 80051b2:	f000 fa53 	bl	800565c <I2C_Enable_IRQ>
}
 80051b6:	46c0      	nop			@ (mov r8, r8)
 80051b8:	46bd      	mov	sp, r7
 80051ba:	b004      	add	sp, #16
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	46c0      	nop			@ (mov r8, r8)
 80051c0:	ffffbfff 	.word	0xffffbfff

080051c4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2180      	movs	r1, #128	@ 0x80
 80051de:	0209      	lsls	r1, r1, #8
 80051e0:	430a      	orrs	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2110      	movs	r1, #16
 80051e8:	0018      	movs	r0, r3
 80051ea:	f7ff fe4d 	bl	8004e88 <I2C_ITError>
}
 80051ee:	46c0      	nop			@ (mov r8, r8)
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b004      	add	sp, #16
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005210:	2200      	movs	r2, #0
 8005212:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005220:	2200      	movs	r2, #0
 8005222:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	0018      	movs	r0, r3
 8005228:	f7ff ff30 	bl	800508c <I2C_TreatErrorCallback>
}
 800522c:	46c0      	nop			@ (mov r8, r8)
 800522e:	46bd      	mov	sp, r7
 8005230:	b004      	add	sp, #16
 8005232:	bd80      	pop	{r7, pc}

08005234 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	603b      	str	r3, [r7, #0]
 8005240:	1dfb      	adds	r3, r7, #7
 8005242:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005244:	e03a      	b.n	80052bc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	0018      	movs	r0, r3
 800524e:	f000 f8d3 	bl	80053f8 <I2C_IsErrorOccurred>
 8005252:	1e03      	subs	r3, r0, #0
 8005254:	d001      	beq.n	800525a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e040      	b.n	80052dc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	3301      	adds	r3, #1
 800525e:	d02d      	beq.n	80052bc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005260:	f7fc fdb2 	bl	8001dc8 <HAL_GetTick>
 8005264:	0002      	movs	r2, r0
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d302      	bcc.n	8005276 <I2C_WaitOnFlagUntilTimeout+0x42>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d122      	bne.n	80052bc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	4013      	ands	r3, r2
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	425a      	negs	r2, r3
 8005286:	4153      	adcs	r3, r2
 8005288:	b2db      	uxtb	r3, r3
 800528a:	001a      	movs	r2, r3
 800528c:	1dfb      	adds	r3, r7, #7
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d113      	bne.n	80052bc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005298:	2220      	movs	r2, #32
 800529a:	431a      	orrs	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2241      	movs	r2, #65	@ 0x41
 80052a4:	2120      	movs	r1, #32
 80052a6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2242      	movs	r2, #66	@ 0x42
 80052ac:	2100      	movs	r1, #0
 80052ae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2240      	movs	r2, #64	@ 0x40
 80052b4:	2100      	movs	r1, #0
 80052b6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e00f      	b.n	80052dc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	4013      	ands	r3, r2
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	425a      	negs	r2, r3
 80052cc:	4153      	adcs	r3, r2
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	001a      	movs	r2, r3
 80052d2:	1dfb      	adds	r3, r7, #7
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d0b5      	beq.n	8005246 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	0018      	movs	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	b004      	add	sp, #16
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052f0:	e032      	b.n	8005358 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	0018      	movs	r0, r3
 80052fa:	f000 f87d 	bl	80053f8 <I2C_IsErrorOccurred>
 80052fe:	1e03      	subs	r3, r0, #0
 8005300:	d001      	beq.n	8005306 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e030      	b.n	8005368 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	3301      	adds	r3, #1
 800530a:	d025      	beq.n	8005358 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800530c:	f7fc fd5c 	bl	8001dc8 <HAL_GetTick>
 8005310:	0002      	movs	r2, r0
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	429a      	cmp	r2, r3
 800531a:	d302      	bcc.n	8005322 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d11a      	bne.n	8005358 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	2202      	movs	r2, #2
 800532a:	4013      	ands	r3, r2
 800532c:	2b02      	cmp	r3, #2
 800532e:	d013      	beq.n	8005358 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005334:	2220      	movs	r2, #32
 8005336:	431a      	orrs	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2241      	movs	r2, #65	@ 0x41
 8005340:	2120      	movs	r1, #32
 8005342:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2242      	movs	r2, #66	@ 0x42
 8005348:	2100      	movs	r1, #0
 800534a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2240      	movs	r2, #64	@ 0x40
 8005350:	2100      	movs	r1, #0
 8005352:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e007      	b.n	8005368 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	2202      	movs	r2, #2
 8005360:	4013      	ands	r3, r2
 8005362:	2b02      	cmp	r3, #2
 8005364:	d1c5      	bne.n	80052f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	0018      	movs	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	b004      	add	sp, #16
 800536e:	bd80      	pop	{r7, pc}

08005370 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800537c:	e02f      	b.n	80053de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	0018      	movs	r0, r3
 8005386:	f000 f837 	bl	80053f8 <I2C_IsErrorOccurred>
 800538a:	1e03      	subs	r3, r0, #0
 800538c:	d001      	beq.n	8005392 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e02d      	b.n	80053ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005392:	f7fc fd19 	bl	8001dc8 <HAL_GetTick>
 8005396:	0002      	movs	r2, r0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d302      	bcc.n	80053a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d11a      	bne.n	80053de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	2220      	movs	r2, #32
 80053b0:	4013      	ands	r3, r2
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	d013      	beq.n	80053de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ba:	2220      	movs	r2, #32
 80053bc:	431a      	orrs	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2241      	movs	r2, #65	@ 0x41
 80053c6:	2120      	movs	r1, #32
 80053c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2242      	movs	r2, #66	@ 0x42
 80053ce:	2100      	movs	r1, #0
 80053d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2240      	movs	r2, #64	@ 0x40
 80053d6:	2100      	movs	r1, #0
 80053d8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e007      	b.n	80053ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	2220      	movs	r2, #32
 80053e6:	4013      	ands	r3, r2
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d1c8      	bne.n	800537e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	0018      	movs	r0, r3
 80053f0:	46bd      	mov	sp, r7
 80053f2:	b004      	add	sp, #16
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	@ 0x28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005404:	2327      	movs	r3, #39	@ 0x27
 8005406:	18fb      	adds	r3, r7, r3
 8005408:	2200      	movs	r2, #0
 800540a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	2210      	movs	r2, #16
 8005420:	4013      	ands	r3, r2
 8005422:	d100      	bne.n	8005426 <I2C_IsErrorOccurred+0x2e>
 8005424:	e079      	b.n	800551a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2210      	movs	r2, #16
 800542c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800542e:	e057      	b.n	80054e0 <I2C_IsErrorOccurred+0xe8>
 8005430:	2227      	movs	r2, #39	@ 0x27
 8005432:	18bb      	adds	r3, r7, r2
 8005434:	18ba      	adds	r2, r7, r2
 8005436:	7812      	ldrb	r2, [r2, #0]
 8005438:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	3301      	adds	r3, #1
 800543e:	d04f      	beq.n	80054e0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005440:	f7fc fcc2 	bl	8001dc8 <HAL_GetTick>
 8005444:	0002      	movs	r2, r0
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	d302      	bcc.n	8005456 <I2C_IsErrorOccurred+0x5e>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d144      	bne.n	80054e0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	2380      	movs	r3, #128	@ 0x80
 800545e:	01db      	lsls	r3, r3, #7
 8005460:	4013      	ands	r3, r2
 8005462:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005464:	2013      	movs	r0, #19
 8005466:	183b      	adds	r3, r7, r0
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	2142      	movs	r1, #66	@ 0x42
 800546c:	5c52      	ldrb	r2, [r2, r1]
 800546e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	2380      	movs	r3, #128	@ 0x80
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	401a      	ands	r2, r3
 800547c:	2380      	movs	r3, #128	@ 0x80
 800547e:	021b      	lsls	r3, r3, #8
 8005480:	429a      	cmp	r2, r3
 8005482:	d126      	bne.n	80054d2 <I2C_IsErrorOccurred+0xda>
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	2380      	movs	r3, #128	@ 0x80
 8005488:	01db      	lsls	r3, r3, #7
 800548a:	429a      	cmp	r2, r3
 800548c:	d021      	beq.n	80054d2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800548e:	183b      	adds	r3, r7, r0
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b20      	cmp	r3, #32
 8005494:	d01d      	beq.n	80054d2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2180      	movs	r1, #128	@ 0x80
 80054a2:	01c9      	lsls	r1, r1, #7
 80054a4:	430a      	orrs	r2, r1
 80054a6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80054a8:	f7fc fc8e 	bl	8001dc8 <HAL_GetTick>
 80054ac:	0003      	movs	r3, r0
 80054ae:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054b0:	e00f      	b.n	80054d2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80054b2:	f7fc fc89 	bl	8001dc8 <HAL_GetTick>
 80054b6:	0002      	movs	r2, r0
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b19      	cmp	r3, #25
 80054be:	d908      	bls.n	80054d2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	2220      	movs	r2, #32
 80054c4:	4313      	orrs	r3, r2
 80054c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80054c8:	2327      	movs	r3, #39	@ 0x27
 80054ca:	18fb      	adds	r3, r7, r3
 80054cc:	2201      	movs	r2, #1
 80054ce:	701a      	strb	r2, [r3, #0]

              break;
 80054d0:	e006      	b.n	80054e0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	2220      	movs	r2, #32
 80054da:	4013      	ands	r3, r2
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d1e8      	bne.n	80054b2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	2220      	movs	r2, #32
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b20      	cmp	r3, #32
 80054ec:	d004      	beq.n	80054f8 <I2C_IsErrorOccurred+0x100>
 80054ee:	2327      	movs	r3, #39	@ 0x27
 80054f0:	18fb      	adds	r3, r7, r3
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d09b      	beq.n	8005430 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80054f8:	2327      	movs	r3, #39	@ 0x27
 80054fa:	18fb      	adds	r3, r7, r3
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d103      	bne.n	800550a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2220      	movs	r2, #32
 8005508:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	2204      	movs	r2, #4
 800550e:	4313      	orrs	r3, r2
 8005510:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005512:	2327      	movs	r3, #39	@ 0x27
 8005514:	18fb      	adds	r3, r7, r3
 8005516:	2201      	movs	r2, #1
 8005518:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	2380      	movs	r3, #128	@ 0x80
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	4013      	ands	r3, r2
 800552a:	d00c      	beq.n	8005546 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	2201      	movs	r2, #1
 8005530:	4313      	orrs	r3, r2
 8005532:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2280      	movs	r2, #128	@ 0x80
 800553a:	0052      	lsls	r2, r2, #1
 800553c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800553e:	2327      	movs	r3, #39	@ 0x27
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	2201      	movs	r2, #1
 8005544:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	2380      	movs	r3, #128	@ 0x80
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	4013      	ands	r3, r2
 800554e:	d00c      	beq.n	800556a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	2208      	movs	r2, #8
 8005554:	4313      	orrs	r3, r2
 8005556:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2280      	movs	r2, #128	@ 0x80
 800555e:	00d2      	lsls	r2, r2, #3
 8005560:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005562:	2327      	movs	r3, #39	@ 0x27
 8005564:	18fb      	adds	r3, r7, r3
 8005566:	2201      	movs	r2, #1
 8005568:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	2380      	movs	r3, #128	@ 0x80
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4013      	ands	r3, r2
 8005572:	d00c      	beq.n	800558e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	2202      	movs	r2, #2
 8005578:	4313      	orrs	r3, r2
 800557a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2280      	movs	r2, #128	@ 0x80
 8005582:	0092      	lsls	r2, r2, #2
 8005584:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005586:	2327      	movs	r3, #39	@ 0x27
 8005588:	18fb      	adds	r3, r7, r3
 800558a:	2201      	movs	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800558e:	2327      	movs	r3, #39	@ 0x27
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01d      	beq.n	80055d4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	0018      	movs	r0, r3
 800559c:	f7ff fd9f 	bl	80050de <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	490e      	ldr	r1, [pc, #56]	@ (80055e4 <I2C_IsErrorOccurred+0x1ec>)
 80055ac:	400a      	ands	r2, r1
 80055ae:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2241      	movs	r2, #65	@ 0x41
 80055c0:	2120      	movs	r1, #32
 80055c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2242      	movs	r2, #66	@ 0x42
 80055c8:	2100      	movs	r1, #0
 80055ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2240      	movs	r2, #64	@ 0x40
 80055d0:	2100      	movs	r1, #0
 80055d2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80055d4:	2327      	movs	r3, #39	@ 0x27
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	781b      	ldrb	r3, [r3, #0]
}
 80055da:	0018      	movs	r0, r3
 80055dc:	46bd      	mov	sp, r7
 80055de:	b00a      	add	sp, #40	@ 0x28
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	46c0      	nop			@ (mov r8, r8)
 80055e4:	fe00e800 	.word	0xfe00e800

080055e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055e8:	b590      	push	{r4, r7, lr}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	0008      	movs	r0, r1
 80055f2:	0011      	movs	r1, r2
 80055f4:	607b      	str	r3, [r7, #4]
 80055f6:	240a      	movs	r4, #10
 80055f8:	193b      	adds	r3, r7, r4
 80055fa:	1c02      	adds	r2, r0, #0
 80055fc:	801a      	strh	r2, [r3, #0]
 80055fe:	2009      	movs	r0, #9
 8005600:	183b      	adds	r3, r7, r0
 8005602:	1c0a      	adds	r2, r1, #0
 8005604:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005606:	193b      	adds	r3, r7, r4
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	059b      	lsls	r3, r3, #22
 800560c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800560e:	183b      	adds	r3, r7, r0
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	0419      	lsls	r1, r3, #16
 8005614:	23ff      	movs	r3, #255	@ 0xff
 8005616:	041b      	lsls	r3, r3, #16
 8005618:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800561a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005622:	4313      	orrs	r3, r2
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	085b      	lsrs	r3, r3, #1
 8005628:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005632:	0d51      	lsrs	r1, r2, #21
 8005634:	2280      	movs	r2, #128	@ 0x80
 8005636:	00d2      	lsls	r2, r2, #3
 8005638:	400a      	ands	r2, r1
 800563a:	4907      	ldr	r1, [pc, #28]	@ (8005658 <I2C_TransferConfig+0x70>)
 800563c:	430a      	orrs	r2, r1
 800563e:	43d2      	mvns	r2, r2
 8005640:	401a      	ands	r2, r3
 8005642:	0011      	movs	r1, r2
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	430a      	orrs	r2, r1
 800564c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800564e:	46c0      	nop			@ (mov r8, r8)
 8005650:	46bd      	mov	sp, r7
 8005652:	b007      	add	sp, #28
 8005654:	bd90      	pop	{r4, r7, pc}
 8005656:	46c0      	nop			@ (mov r8, r8)
 8005658:	03ff63ff 	.word	0x03ff63ff

0800565c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	000a      	movs	r2, r1
 8005666:	1cbb      	adds	r3, r7, #2
 8005668:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005672:	4b3c      	ldr	r3, [pc, #240]	@ (8005764 <I2C_Enable_IRQ+0x108>)
 8005674:	429a      	cmp	r2, r3
 8005676:	d035      	beq.n	80056e4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800567c:	4b3a      	ldr	r3, [pc, #232]	@ (8005768 <I2C_Enable_IRQ+0x10c>)
 800567e:	429a      	cmp	r2, r3
 8005680:	d030      	beq.n	80056e4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005686:	4b39      	ldr	r3, [pc, #228]	@ (800576c <I2C_Enable_IRQ+0x110>)
 8005688:	429a      	cmp	r2, r3
 800568a:	d02b      	beq.n	80056e4 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800568c:	1cbb      	adds	r3, r7, #2
 800568e:	2200      	movs	r2, #0
 8005690:	5e9b      	ldrsh	r3, [r3, r2]
 8005692:	2b00      	cmp	r3, #0
 8005694:	da03      	bge.n	800569e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	22b8      	movs	r2, #184	@ 0xb8
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800569e:	1cbb      	adds	r3, r7, #2
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	2201      	movs	r2, #1
 80056a4:	4013      	ands	r3, r2
 80056a6:	d003      	beq.n	80056b0 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	22f2      	movs	r2, #242	@ 0xf2
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80056b0:	1cbb      	adds	r3, r7, #2
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	2202      	movs	r2, #2
 80056b6:	4013      	ands	r3, r2
 80056b8:	d003      	beq.n	80056c2 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	22f4      	movs	r2, #244	@ 0xf4
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80056c2:	1cbb      	adds	r3, r7, #2
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	2b10      	cmp	r3, #16
 80056c8:	d103      	bne.n	80056d2 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2290      	movs	r2, #144	@ 0x90
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80056d2:	1cbb      	adds	r3, r7, #2
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d137      	bne.n	800574a <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80056e2:	e032      	b.n	800574a <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80056e4:	1cbb      	adds	r3, r7, #2
 80056e6:	2200      	movs	r2, #0
 80056e8:	5e9b      	ldrsh	r3, [r3, r2]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	da03      	bge.n	80056f6 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	22b8      	movs	r2, #184	@ 0xb8
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80056f6:	1cbb      	adds	r3, r7, #2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	2201      	movs	r2, #1
 80056fc:	4013      	ands	r3, r2
 80056fe:	d003      	beq.n	8005708 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	22f2      	movs	r2, #242	@ 0xf2
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005708:	1cbb      	adds	r3, r7, #2
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	2202      	movs	r2, #2
 800570e:	4013      	ands	r3, r2
 8005710:	d003      	beq.n	800571a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	22f4      	movs	r2, #244	@ 0xf4
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800571a:	1cbb      	adds	r3, r7, #2
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	2b10      	cmp	r3, #16
 8005720:	d103      	bne.n	800572a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2290      	movs	r2, #144	@ 0x90
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800572a:	1cbb      	adds	r3, r7, #2
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	2b20      	cmp	r3, #32
 8005730:	d103      	bne.n	800573a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2260      	movs	r2, #96	@ 0x60
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800573a:	1cbb      	adds	r3, r7, #2
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	2b40      	cmp	r3, #64	@ 0x40
 8005740:	d103      	bne.n	800574a <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2240      	movs	r2, #64	@ 0x40
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6819      	ldr	r1, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	430a      	orrs	r2, r1
 8005758:	601a      	str	r2, [r3, #0]
}
 800575a:	46c0      	nop			@ (mov r8, r8)
 800575c:	46bd      	mov	sp, r7
 800575e:	b004      	add	sp, #16
 8005760:	bd80      	pop	{r7, pc}
 8005762:	46c0      	nop			@ (mov r8, r8)
 8005764:	08003fb1 	.word	0x08003fb1
 8005768:	08004401 	.word	0x08004401
 800576c:	080041a9 	.word	0x080041a9

08005770 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	000a      	movs	r2, r1
 800577a:	1cbb      	adds	r3, r7, #2
 800577c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005782:	1cbb      	adds	r3, r7, #2
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	2201      	movs	r2, #1
 8005788:	4013      	ands	r3, r2
 800578a:	d010      	beq.n	80057ae <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2242      	movs	r2, #66	@ 0x42
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2241      	movs	r2, #65	@ 0x41
 8005798:	5c9b      	ldrb	r3, [r3, r2]
 800579a:	b2db      	uxtb	r3, r3
 800579c:	001a      	movs	r2, r3
 800579e:	2328      	movs	r3, #40	@ 0x28
 80057a0:	4013      	ands	r3, r2
 80057a2:	2b28      	cmp	r3, #40	@ 0x28
 80057a4:	d003      	beq.n	80057ae <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	22b0      	movs	r2, #176	@ 0xb0
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80057ae:	1cbb      	adds	r3, r7, #2
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	2202      	movs	r2, #2
 80057b4:	4013      	ands	r3, r2
 80057b6:	d010      	beq.n	80057da <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2244      	movs	r2, #68	@ 0x44
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2241      	movs	r2, #65	@ 0x41
 80057c4:	5c9b      	ldrb	r3, [r3, r2]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	001a      	movs	r2, r3
 80057ca:	2328      	movs	r3, #40	@ 0x28
 80057cc:	4013      	ands	r3, r2
 80057ce:	2b28      	cmp	r3, #40	@ 0x28
 80057d0:	d003      	beq.n	80057da <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	22b0      	movs	r2, #176	@ 0xb0
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80057da:	1cbb      	adds	r3, r7, #2
 80057dc:	2200      	movs	r2, #0
 80057de:	5e9b      	ldrsh	r3, [r3, r2]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	da03      	bge.n	80057ec <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	22b8      	movs	r2, #184	@ 0xb8
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80057ec:	1cbb      	adds	r3, r7, #2
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d103      	bne.n	80057fc <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2290      	movs	r2, #144	@ 0x90
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80057fc:	1cbb      	adds	r3, r7, #2
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	2b20      	cmp	r3, #32
 8005802:	d103      	bne.n	800580c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800580c:	1cbb      	adds	r3, r7, #2
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	2b40      	cmp	r3, #64	@ 0x40
 8005812:	d103      	bne.n	800581c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2240      	movs	r2, #64	@ 0x40
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	43d9      	mvns	r1, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	400a      	ands	r2, r1
 800582c:	601a      	str	r2, [r3, #0]
}
 800582e:	46c0      	nop			@ (mov r8, r8)
 8005830:	46bd      	mov	sp, r7
 8005832:	b004      	add	sp, #16
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2241      	movs	r2, #65	@ 0x41
 8005846:	5c9b      	ldrb	r3, [r3, r2]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b20      	cmp	r3, #32
 800584c:	d138      	bne.n	80058c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2240      	movs	r2, #64	@ 0x40
 8005852:	5c9b      	ldrb	r3, [r3, r2]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005858:	2302      	movs	r3, #2
 800585a:	e032      	b.n	80058c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2240      	movs	r2, #64	@ 0x40
 8005860:	2101      	movs	r1, #1
 8005862:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2241      	movs	r2, #65	@ 0x41
 8005868:	2124      	movs	r1, #36	@ 0x24
 800586a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2101      	movs	r1, #1
 8005878:	438a      	bics	r2, r1
 800587a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4911      	ldr	r1, [pc, #68]	@ (80058cc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005888:	400a      	ands	r2, r1
 800588a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6819      	ldr	r1, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2101      	movs	r1, #1
 80058a8:	430a      	orrs	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2241      	movs	r2, #65	@ 0x41
 80058b0:	2120      	movs	r1, #32
 80058b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2240      	movs	r2, #64	@ 0x40
 80058b8:	2100      	movs	r1, #0
 80058ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	e000      	b.n	80058c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058c0:	2302      	movs	r3, #2
  }
}
 80058c2:	0018      	movs	r0, r3
 80058c4:	46bd      	mov	sp, r7
 80058c6:	b002      	add	sp, #8
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	46c0      	nop			@ (mov r8, r8)
 80058cc:	ffffefff 	.word	0xffffefff

080058d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2241      	movs	r2, #65	@ 0x41
 80058de:	5c9b      	ldrb	r3, [r3, r2]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d139      	bne.n	800595a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2240      	movs	r2, #64	@ 0x40
 80058ea:	5c9b      	ldrb	r3, [r3, r2]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e033      	b.n	800595c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2240      	movs	r2, #64	@ 0x40
 80058f8:	2101      	movs	r1, #1
 80058fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2241      	movs	r2, #65	@ 0x41
 8005900:	2124      	movs	r1, #36	@ 0x24
 8005902:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2101      	movs	r1, #1
 8005910:	438a      	bics	r2, r1
 8005912:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4a11      	ldr	r2, [pc, #68]	@ (8005964 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005920:	4013      	ands	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2101      	movs	r1, #1
 8005942:	430a      	orrs	r2, r1
 8005944:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2241      	movs	r2, #65	@ 0x41
 800594a:	2120      	movs	r1, #32
 800594c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2240      	movs	r2, #64	@ 0x40
 8005952:	2100      	movs	r1, #0
 8005954:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	e000      	b.n	800595c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800595a:	2302      	movs	r3, #2
  }
}
 800595c:	0018      	movs	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	b004      	add	sp, #16
 8005962:	bd80      	pop	{r7, pc}
 8005964:	fffff0ff 	.word	0xfffff0ff

08005968 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e20f      	b.n	8005d9a <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2201      	movs	r2, #1
 8005980:	4013      	ands	r3, r2
 8005982:	d100      	bne.n	8005986 <HAL_RCC_OscConfig+0x1e>
 8005984:	e069      	b.n	8005a5a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005986:	4bc8      	ldr	r3, [pc, #800]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2238      	movs	r2, #56	@ 0x38
 800598c:	4013      	ands	r3, r2
 800598e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2b08      	cmp	r3, #8
 8005994:	d105      	bne.n	80059a2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d15d      	bne.n	8005a5a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e1fb      	b.n	8005d9a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	2380      	movs	r3, #128	@ 0x80
 80059a8:	025b      	lsls	r3, r3, #9
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d107      	bne.n	80059be <HAL_RCC_OscConfig+0x56>
 80059ae:	4bbe      	ldr	r3, [pc, #760]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4bbd      	ldr	r3, [pc, #756]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 80059b4:	2180      	movs	r1, #128	@ 0x80
 80059b6:	0249      	lsls	r1, r1, #9
 80059b8:	430a      	orrs	r2, r1
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	e020      	b.n	8005a00 <HAL_RCC_OscConfig+0x98>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	23a0      	movs	r3, #160	@ 0xa0
 80059c4:	02db      	lsls	r3, r3, #11
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d10e      	bne.n	80059e8 <HAL_RCC_OscConfig+0x80>
 80059ca:	4bb7      	ldr	r3, [pc, #732]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	4bb6      	ldr	r3, [pc, #728]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 80059d0:	2180      	movs	r1, #128	@ 0x80
 80059d2:	02c9      	lsls	r1, r1, #11
 80059d4:	430a      	orrs	r2, r1
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	4bb3      	ldr	r3, [pc, #716]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	4bb2      	ldr	r3, [pc, #712]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 80059de:	2180      	movs	r1, #128	@ 0x80
 80059e0:	0249      	lsls	r1, r1, #9
 80059e2:	430a      	orrs	r2, r1
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	e00b      	b.n	8005a00 <HAL_RCC_OscConfig+0x98>
 80059e8:	4baf      	ldr	r3, [pc, #700]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	4bae      	ldr	r3, [pc, #696]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 80059ee:	49af      	ldr	r1, [pc, #700]	@ (8005cac <HAL_RCC_OscConfig+0x344>)
 80059f0:	400a      	ands	r2, r1
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	4bac      	ldr	r3, [pc, #688]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	4bab      	ldr	r3, [pc, #684]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 80059fa:	49ad      	ldr	r1, [pc, #692]	@ (8005cb0 <HAL_RCC_OscConfig+0x348>)
 80059fc:	400a      	ands	r2, r1
 80059fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d014      	beq.n	8005a32 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a08:	f7fc f9de 	bl	8001dc8 <HAL_GetTick>
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005a12:	f7fc f9d9 	bl	8001dc8 <HAL_GetTick>
 8005a16:	0002      	movs	r2, r0
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b64      	cmp	r3, #100	@ 0x64
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e1ba      	b.n	8005d9a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a24:	4ba0      	ldr	r3, [pc, #640]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	2380      	movs	r3, #128	@ 0x80
 8005a2a:	029b      	lsls	r3, r3, #10
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	d0f0      	beq.n	8005a12 <HAL_RCC_OscConfig+0xaa>
 8005a30:	e013      	b.n	8005a5a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a32:	f7fc f9c9 	bl	8001dc8 <HAL_GetTick>
 8005a36:	0003      	movs	r3, r0
 8005a38:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005a3c:	f7fc f9c4 	bl	8001dc8 <HAL_GetTick>
 8005a40:	0002      	movs	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b64      	cmp	r3, #100	@ 0x64
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e1a5      	b.n	8005d9a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a4e:	4b96      	ldr	r3, [pc, #600]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	2380      	movs	r3, #128	@ 0x80
 8005a54:	029b      	lsls	r3, r3, #10
 8005a56:	4013      	ands	r3, r2
 8005a58:	d1f0      	bne.n	8005a3c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	4013      	ands	r3, r2
 8005a62:	d100      	bne.n	8005a66 <HAL_RCC_OscConfig+0xfe>
 8005a64:	e086      	b.n	8005b74 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a66:	4b90      	ldr	r3, [pc, #576]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2238      	movs	r2, #56	@ 0x38
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d12f      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e18b      	b.n	8005d9a <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a82:	4b89      	ldr	r3, [pc, #548]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	4a8b      	ldr	r2, [pc, #556]	@ (8005cb4 <HAL_RCC_OscConfig+0x34c>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	0019      	movs	r1, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	021a      	lsls	r2, r3, #8
 8005a92:	4b85      	ldr	r3, [pc, #532]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005a94:	430a      	orrs	r2, r1
 8005a96:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d112      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005a9e:	4b82      	ldr	r3, [pc, #520]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a85      	ldr	r2, [pc, #532]	@ (8005cb8 <HAL_RCC_OscConfig+0x350>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	0019      	movs	r1, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	4b7e      	ldr	r3, [pc, #504]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005ab2:	4b7d      	ldr	r3, [pc, #500]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	0adb      	lsrs	r3, r3, #11
 8005ab8:	2207      	movs	r2, #7
 8005aba:	4013      	ands	r3, r2
 8005abc:	4a7f      	ldr	r2, [pc, #508]	@ (8005cbc <HAL_RCC_OscConfig+0x354>)
 8005abe:	40da      	lsrs	r2, r3
 8005ac0:	4b7f      	ldr	r3, [pc, #508]	@ (8005cc0 <HAL_RCC_OscConfig+0x358>)
 8005ac2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ac4:	4b7f      	ldr	r3, [pc, #508]	@ (8005cc4 <HAL_RCC_OscConfig+0x35c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	0018      	movs	r0, r3
 8005aca:	f7fc f921 	bl	8001d10 <HAL_InitTick>
 8005ace:	1e03      	subs	r3, r0, #0
 8005ad0:	d050      	beq.n	8005b74 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e161      	b.n	8005d9a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d030      	beq.n	8005b40 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005ade:	4b72      	ldr	r3, [pc, #456]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a75      	ldr	r2, [pc, #468]	@ (8005cb8 <HAL_RCC_OscConfig+0x350>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	0019      	movs	r1, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	4b6e      	ldr	r3, [pc, #440]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005aee:	430a      	orrs	r2, r1
 8005af0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8005af2:	4b6d      	ldr	r3, [pc, #436]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b6c      	ldr	r3, [pc, #432]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005af8:	2180      	movs	r1, #128	@ 0x80
 8005afa:	0049      	lsls	r1, r1, #1
 8005afc:	430a      	orrs	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b00:	f7fc f962 	bl	8001dc8 <HAL_GetTick>
 8005b04:	0003      	movs	r3, r0
 8005b06:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b08:	e008      	b.n	8005b1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005b0a:	f7fc f95d 	bl	8001dc8 <HAL_GetTick>
 8005b0e:	0002      	movs	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e13e      	b.n	8005d9a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b1c:	4b62      	ldr	r3, [pc, #392]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	2380      	movs	r3, #128	@ 0x80
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	4013      	ands	r3, r2
 8005b26:	d0f0      	beq.n	8005b0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b28:	4b5f      	ldr	r3, [pc, #380]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	4a61      	ldr	r2, [pc, #388]	@ (8005cb4 <HAL_RCC_OscConfig+0x34c>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	0019      	movs	r1, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	021a      	lsls	r2, r3, #8
 8005b38:	4b5b      	ldr	r3, [pc, #364]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	605a      	str	r2, [r3, #4]
 8005b3e:	e019      	b.n	8005b74 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8005b40:	4b59      	ldr	r3, [pc, #356]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	4b58      	ldr	r3, [pc, #352]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005b46:	4960      	ldr	r1, [pc, #384]	@ (8005cc8 <HAL_RCC_OscConfig+0x360>)
 8005b48:	400a      	ands	r2, r1
 8005b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4c:	f7fc f93c 	bl	8001dc8 <HAL_GetTick>
 8005b50:	0003      	movs	r3, r0
 8005b52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b54:	e008      	b.n	8005b68 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005b56:	f7fc f937 	bl	8001dc8 <HAL_GetTick>
 8005b5a:	0002      	movs	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e118      	b.n	8005d9a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b68:	4b4f      	ldr	r3, [pc, #316]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	2380      	movs	r3, #128	@ 0x80
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	4013      	ands	r3, r2
 8005b72:	d1f0      	bne.n	8005b56 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2208      	movs	r2, #8
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	d042      	beq.n	8005c04 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	2238      	movs	r2, #56	@ 0x38
 8005b84:	4013      	ands	r3, r2
 8005b86:	2b18      	cmp	r3, #24
 8005b88:	d105      	bne.n	8005b96 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d138      	bne.n	8005c04 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e101      	b.n	8005d9a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d019      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005b9e:	4b42      	ldr	r3, [pc, #264]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005ba0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ba2:	4b41      	ldr	r3, [pc, #260]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005baa:	f7fc f90d 	bl	8001dc8 <HAL_GetTick>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005bb4:	f7fc f908 	bl	8001dc8 <HAL_GetTick>
 8005bb8:	0002      	movs	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e0e9      	b.n	8005d9a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005bc6:	4b38      	ldr	r3, [pc, #224]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bca:	2202      	movs	r2, #2
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d0f1      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x24c>
 8005bd0:	e018      	b.n	8005c04 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005bd2:	4b35      	ldr	r3, [pc, #212]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005bd4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005bd6:	4b34      	ldr	r3, [pc, #208]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005bd8:	2101      	movs	r1, #1
 8005bda:	438a      	bics	r2, r1
 8005bdc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bde:	f7fc f8f3 	bl	8001dc8 <HAL_GetTick>
 8005be2:	0003      	movs	r3, r0
 8005be4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005be8:	f7fc f8ee 	bl	8001dc8 <HAL_GetTick>
 8005bec:	0002      	movs	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e0cf      	b.n	8005d9a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8005bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bfe:	2202      	movs	r2, #2
 8005c00:	4013      	ands	r3, r2
 8005c02:	d1f1      	bne.n	8005be8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2204      	movs	r2, #4
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	d100      	bne.n	8005c10 <HAL_RCC_OscConfig+0x2a8>
 8005c0e:	e084      	b.n	8005d1a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c10:	230f      	movs	r3, #15
 8005c12:	18fb      	adds	r3, r7, r3
 8005c14:	2200      	movs	r2, #0
 8005c16:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005c18:	4b23      	ldr	r3, [pc, #140]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	2238      	movs	r2, #56	@ 0x38
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d106      	bne.n	8005c32 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d000      	beq.n	8005c2e <HAL_RCC_OscConfig+0x2c6>
 8005c2c:	e075      	b.n	8005d1a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e0b3      	b.n	8005d9a <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d106      	bne.n	8005c48 <HAL_RCC_OscConfig+0x2e0>
 8005c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005c3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005c40:	2101      	movs	r1, #1
 8005c42:	430a      	orrs	r2, r1
 8005c44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c46:	e01c      	b.n	8005c82 <HAL_RCC_OscConfig+0x31a>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	2b05      	cmp	r3, #5
 8005c4e:	d10c      	bne.n	8005c6a <HAL_RCC_OscConfig+0x302>
 8005c50:	4b15      	ldr	r3, [pc, #84]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005c52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c54:	4b14      	ldr	r3, [pc, #80]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005c56:	2104      	movs	r1, #4
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c5c:	4b12      	ldr	r3, [pc, #72]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005c5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c60:	4b11      	ldr	r3, [pc, #68]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005c62:	2101      	movs	r1, #1
 8005c64:	430a      	orrs	r2, r1
 8005c66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c68:	e00b      	b.n	8005c82 <HAL_RCC_OscConfig+0x31a>
 8005c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005c6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005c70:	2101      	movs	r1, #1
 8005c72:	438a      	bics	r2, r1
 8005c74:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c76:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005c78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca8 <HAL_RCC_OscConfig+0x340>)
 8005c7c:	2104      	movs	r1, #4
 8005c7e:	438a      	bics	r2, r1
 8005c80:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d028      	beq.n	8005cdc <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8a:	f7fc f89d 	bl	8001dc8 <HAL_GetTick>
 8005c8e:	0003      	movs	r3, r0
 8005c90:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005c92:	e01d      	b.n	8005cd0 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c94:	f7fc f898 	bl	8001dc8 <HAL_GetTick>
 8005c98:	0002      	movs	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8005ccc <HAL_RCC_OscConfig+0x364>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d915      	bls.n	8005cd0 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e078      	b.n	8005d9a <HAL_RCC_OscConfig+0x432>
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	fffeffff 	.word	0xfffeffff
 8005cb0:	fffbffff 	.word	0xfffbffff
 8005cb4:	ffff80ff 	.word	0xffff80ff
 8005cb8:	ffffc7ff 	.word	0xffffc7ff
 8005cbc:	02dc6c00 	.word	0x02dc6c00
 8005cc0:	20000030 	.word	0x20000030
 8005cc4:	20000034 	.word	0x20000034
 8005cc8:	fffffeff 	.word	0xfffffeff
 8005ccc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005cd0:	4b34      	ldr	r3, [pc, #208]	@ (8005da4 <HAL_RCC_OscConfig+0x43c>)
 8005cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	d0dc      	beq.n	8005c94 <HAL_RCC_OscConfig+0x32c>
 8005cda:	e013      	b.n	8005d04 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cdc:	f7fc f874 	bl	8001dc8 <HAL_GetTick>
 8005ce0:	0003      	movs	r3, r0
 8005ce2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005ce4:	e009      	b.n	8005cfa <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce6:	f7fc f86f 	bl	8001dc8 <HAL_GetTick>
 8005cea:	0002      	movs	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8005da8 <HAL_RCC_OscConfig+0x440>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e04f      	b.n	8005d9a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8005da4 <HAL_RCC_OscConfig+0x43c>)
 8005cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cfe:	2202      	movs	r2, #2
 8005d00:	4013      	ands	r3, r2
 8005d02:	d1f0      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005d04:	230f      	movs	r3, #15
 8005d06:	18fb      	adds	r3, r7, r3
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d105      	bne.n	8005d1a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005d0e:	4b25      	ldr	r3, [pc, #148]	@ (8005da4 <HAL_RCC_OscConfig+0x43c>)
 8005d10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d12:	4b24      	ldr	r3, [pc, #144]	@ (8005da4 <HAL_RCC_OscConfig+0x43c>)
 8005d14:	4925      	ldr	r1, [pc, #148]	@ (8005dac <HAL_RCC_OscConfig+0x444>)
 8005d16:	400a      	ands	r2, r1
 8005d18:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2210      	movs	r2, #16
 8005d20:	4013      	ands	r3, r2
 8005d22:	d039      	beq.n	8005d98 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01b      	beq.n	8005d64 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005da4 <HAL_RCC_OscConfig+0x43c>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	4b1c      	ldr	r3, [pc, #112]	@ (8005da4 <HAL_RCC_OscConfig+0x43c>)
 8005d32:	2180      	movs	r1, #128	@ 0x80
 8005d34:	03c9      	lsls	r1, r1, #15
 8005d36:	430a      	orrs	r2, r1
 8005d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d3a:	f7fc f845 	bl	8001dc8 <HAL_GetTick>
 8005d3e:	0003      	movs	r3, r0
 8005d40:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d44:	f7fc f840 	bl	8001dc8 <HAL_GetTick>
 8005d48:	0002      	movs	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e021      	b.n	8005d9a <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8005d56:	4b13      	ldr	r3, [pc, #76]	@ (8005da4 <HAL_RCC_OscConfig+0x43c>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	2380      	movs	r3, #128	@ 0x80
 8005d5c:	041b      	lsls	r3, r3, #16
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d0f0      	beq.n	8005d44 <HAL_RCC_OscConfig+0x3dc>
 8005d62:	e019      	b.n	8005d98 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d64:	4b0f      	ldr	r3, [pc, #60]	@ (8005da4 <HAL_RCC_OscConfig+0x43c>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	4b0e      	ldr	r3, [pc, #56]	@ (8005da4 <HAL_RCC_OscConfig+0x43c>)
 8005d6a:	4911      	ldr	r1, [pc, #68]	@ (8005db0 <HAL_RCC_OscConfig+0x448>)
 8005d6c:	400a      	ands	r2, r1
 8005d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d70:	f7fc f82a 	bl	8001dc8 <HAL_GetTick>
 8005d74:	0003      	movs	r3, r0
 8005d76:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8005d78:	e008      	b.n	8005d8c <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d7a:	f7fc f825 	bl	8001dc8 <HAL_GetTick>
 8005d7e:	0002      	movs	r2, r0
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d901      	bls.n	8005d8c <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e006      	b.n	8005d9a <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8005d8c:	4b05      	ldr	r3, [pc, #20]	@ (8005da4 <HAL_RCC_OscConfig+0x43c>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	2380      	movs	r3, #128	@ 0x80
 8005d92:	041b      	lsls	r3, r3, #16
 8005d94:	4013      	ands	r3, r2
 8005d96:	d1f0      	bne.n	8005d7a <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	b006      	add	sp, #24
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	46c0      	nop			@ (mov r8, r8)
 8005da4:	40021000 	.word	0x40021000
 8005da8:	00001388 	.word	0x00001388
 8005dac:	efffffff 	.word	0xefffffff
 8005db0:	ffbfffff 	.word	0xffbfffff

08005db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e0f6      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dc8:	4b7d      	ldr	r3, [pc, #500]	@ (8005fc0 <HAL_RCC_ClockConfig+0x20c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2207      	movs	r2, #7
 8005dce:	4013      	ands	r3, r2
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d91e      	bls.n	8005e14 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd6:	4b7a      	ldr	r3, [pc, #488]	@ (8005fc0 <HAL_RCC_ClockConfig+0x20c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2207      	movs	r2, #7
 8005ddc:	4393      	bics	r3, r2
 8005dde:	0019      	movs	r1, r3
 8005de0:	4b77      	ldr	r3, [pc, #476]	@ (8005fc0 <HAL_RCC_ClockConfig+0x20c>)
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005de8:	f7fb ffee 	bl	8001dc8 <HAL_GetTick>
 8005dec:	0003      	movs	r3, r0
 8005dee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005df0:	e009      	b.n	8005e06 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005df2:	f7fb ffe9 	bl	8001dc8 <HAL_GetTick>
 8005df6:	0002      	movs	r2, r0
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	4a71      	ldr	r2, [pc, #452]	@ (8005fc4 <HAL_RCC_ClockConfig+0x210>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e0d7      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e06:	4b6e      	ldr	r3, [pc, #440]	@ (8005fc0 <HAL_RCC_ClockConfig+0x20c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2207      	movs	r2, #7
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d1ee      	bne.n	8005df2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	d017      	beq.n	8005e4e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2204      	movs	r2, #4
 8005e24:	4013      	ands	r3, r2
 8005e26:	d008      	beq.n	8005e3a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005e28:	4b67      	ldr	r3, [pc, #412]	@ (8005fc8 <HAL_RCC_ClockConfig+0x214>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	4a67      	ldr	r2, [pc, #412]	@ (8005fcc <HAL_RCC_ClockConfig+0x218>)
 8005e2e:	401a      	ands	r2, r3
 8005e30:	4b65      	ldr	r3, [pc, #404]	@ (8005fc8 <HAL_RCC_ClockConfig+0x214>)
 8005e32:	21b0      	movs	r1, #176	@ 0xb0
 8005e34:	0109      	lsls	r1, r1, #4
 8005e36:	430a      	orrs	r2, r1
 8005e38:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e3a:	4b63      	ldr	r3, [pc, #396]	@ (8005fc8 <HAL_RCC_ClockConfig+0x214>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	4a64      	ldr	r2, [pc, #400]	@ (8005fd0 <HAL_RCC_ClockConfig+0x21c>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	0019      	movs	r1, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	4b5f      	ldr	r3, [pc, #380]	@ (8005fc8 <HAL_RCC_ClockConfig+0x214>)
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2201      	movs	r2, #1
 8005e54:	4013      	ands	r3, r2
 8005e56:	d100      	bne.n	8005e5a <HAL_RCC_ClockConfig+0xa6>
 8005e58:	e061      	b.n	8005f1e <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8005e5a:	4b5b      	ldr	r3, [pc, #364]	@ (8005fc8 <HAL_RCC_ClockConfig+0x214>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	221c      	movs	r2, #28
 8005e60:	4393      	bics	r3, r2
 8005e62:	0019      	movs	r1, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	4b57      	ldr	r3, [pc, #348]	@ (8005fc8 <HAL_RCC_ClockConfig+0x214>)
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d107      	bne.n	8005e86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e76:	4b54      	ldr	r3, [pc, #336]	@ (8005fc8 <HAL_RCC_ClockConfig+0x214>)
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	2380      	movs	r3, #128	@ 0x80
 8005e7c:	029b      	lsls	r3, r3, #10
 8005e7e:	4013      	ands	r3, r2
 8005e80:	d12b      	bne.n	8005eda <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e097      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d107      	bne.n	8005e9e <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8005fc8 <HAL_RCC_ClockConfig+0x214>)
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	2380      	movs	r3, #128	@ 0x80
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	4013      	ands	r3, r2
 8005e98:	d11f      	bne.n	8005eda <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e08b      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d107      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8005ea6:	4b48      	ldr	r3, [pc, #288]	@ (8005fc8 <HAL_RCC_ClockConfig+0x214>)
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	2380      	movs	r3, #128	@ 0x80
 8005eac:	041b      	lsls	r3, r3, #16
 8005eae:	4013      	ands	r3, r2
 8005eb0:	d113      	bne.n	8005eda <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e07f      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d106      	bne.n	8005ecc <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005ebe:	4b42      	ldr	r3, [pc, #264]	@ (8005fc8 <HAL_RCC_ClockConfig+0x214>)
 8005ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	d108      	bne.n	8005eda <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e074      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005ecc:	4b3e      	ldr	r3, [pc, #248]	@ (8005fc8 <HAL_RCC_ClockConfig+0x214>)
 8005ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	d101      	bne.n	8005eda <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e06d      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005eda:	4b3b      	ldr	r3, [pc, #236]	@ (8005fc8 <HAL_RCC_ClockConfig+0x214>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	2207      	movs	r2, #7
 8005ee0:	4393      	bics	r3, r2
 8005ee2:	0019      	movs	r1, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	4b37      	ldr	r3, [pc, #220]	@ (8005fc8 <HAL_RCC_ClockConfig+0x214>)
 8005eea:	430a      	orrs	r2, r1
 8005eec:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eee:	f7fb ff6b 	bl	8001dc8 <HAL_GetTick>
 8005ef2:	0003      	movs	r3, r0
 8005ef4:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef6:	e009      	b.n	8005f0c <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005ef8:	f7fb ff66 	bl	8001dc8 <HAL_GetTick>
 8005efc:	0002      	movs	r2, r0
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	4a30      	ldr	r2, [pc, #192]	@ (8005fc4 <HAL_RCC_ClockConfig+0x210>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e054      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8005fc8 <HAL_RCC_ClockConfig+0x214>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	2238      	movs	r2, #56	@ 0x38
 8005f12:	401a      	ands	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d1ec      	bne.n	8005ef8 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f1e:	4b28      	ldr	r3, [pc, #160]	@ (8005fc0 <HAL_RCC_ClockConfig+0x20c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2207      	movs	r2, #7
 8005f24:	4013      	ands	r3, r2
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d21e      	bcs.n	8005f6a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f2c:	4b24      	ldr	r3, [pc, #144]	@ (8005fc0 <HAL_RCC_ClockConfig+0x20c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2207      	movs	r2, #7
 8005f32:	4393      	bics	r3, r2
 8005f34:	0019      	movs	r1, r3
 8005f36:	4b22      	ldr	r3, [pc, #136]	@ (8005fc0 <HAL_RCC_ClockConfig+0x20c>)
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f3e:	f7fb ff43 	bl	8001dc8 <HAL_GetTick>
 8005f42:	0003      	movs	r3, r0
 8005f44:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f46:	e009      	b.n	8005f5c <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005f48:	f7fb ff3e 	bl	8001dc8 <HAL_GetTick>
 8005f4c:	0002      	movs	r2, r0
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	4a1c      	ldr	r2, [pc, #112]	@ (8005fc4 <HAL_RCC_ClockConfig+0x210>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e02c      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f5c:	4b18      	ldr	r3, [pc, #96]	@ (8005fc0 <HAL_RCC_ClockConfig+0x20c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2207      	movs	r2, #7
 8005f62:	4013      	ands	r3, r2
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d1ee      	bne.n	8005f48 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2204      	movs	r2, #4
 8005f70:	4013      	ands	r3, r2
 8005f72:	d009      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005f74:	4b14      	ldr	r3, [pc, #80]	@ (8005fc8 <HAL_RCC_ClockConfig+0x214>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	4a16      	ldr	r2, [pc, #88]	@ (8005fd4 <HAL_RCC_ClockConfig+0x220>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	0019      	movs	r1, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691a      	ldr	r2, [r3, #16]
 8005f82:	4b11      	ldr	r3, [pc, #68]	@ (8005fc8 <HAL_RCC_ClockConfig+0x214>)
 8005f84:	430a      	orrs	r2, r1
 8005f86:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005f88:	f000 f82c 	bl	8005fe4 <HAL_RCC_GetSysClockFreq>
 8005f8c:	0001      	movs	r1, r0
 8005f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc8 <HAL_RCC_ClockConfig+0x214>)
 8005f90:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005f92:	0a1b      	lsrs	r3, r3, #8
 8005f94:	220f      	movs	r2, #15
 8005f96:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005f98:	4b0f      	ldr	r3, [pc, #60]	@ (8005fd8 <HAL_RCC_ClockConfig+0x224>)
 8005f9a:	0092      	lsls	r2, r2, #2
 8005f9c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005f9e:	221f      	movs	r2, #31
 8005fa0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005fa2:	000a      	movs	r2, r1
 8005fa4:	40da      	lsrs	r2, r3
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8005fdc <HAL_RCC_ClockConfig+0x228>)
 8005fa8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005faa:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe0 <HAL_RCC_ClockConfig+0x22c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f7fb feae 	bl	8001d10 <HAL_InitTick>
 8005fb4:	0003      	movs	r3, r0
}
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	b004      	add	sp, #16
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	46c0      	nop			@ (mov r8, r8)
 8005fc0:	40022000 	.word	0x40022000
 8005fc4:	00001388 	.word	0x00001388
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	ffff84ff 	.word	0xffff84ff
 8005fd0:	fffff0ff 	.word	0xfffff0ff
 8005fd4:	ffff8fff 	.word	0xffff8fff
 8005fd8:	08008c3c 	.word	0x08008c3c
 8005fdc:	20000030 	.word	0x20000030
 8005fe0:	20000034 	.word	0x20000034

08005fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8005fea:	4b27      	ldr	r3, [pc, #156]	@ (8006088 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	089b      	lsrs	r3, r3, #2
 8005ff0:	2207      	movs	r2, #7
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005ff8:	4b23      	ldr	r3, [pc, #140]	@ (8006088 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	2238      	movs	r2, #56	@ 0x38
 8005ffe:	4013      	ands	r3, r2
 8006000:	d10f      	bne.n	8006022 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006002:	4b21      	ldr	r3, [pc, #132]	@ (8006088 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	0adb      	lsrs	r3, r3, #11
 8006008:	2207      	movs	r2, #7
 800600a:	4013      	ands	r3, r2
 800600c:	2201      	movs	r2, #1
 800600e:	409a      	lsls	r2, r3
 8006010:	0013      	movs	r3, r2
 8006012:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	481d      	ldr	r0, [pc, #116]	@ (800608c <HAL_RCC_GetSysClockFreq+0xa8>)
 8006018:	f7fa f88a 	bl	8000130 <__udivsi3>
 800601c:	0003      	movs	r3, r0
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	e027      	b.n	8006072 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006022:	4b19      	ldr	r3, [pc, #100]	@ (8006088 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	2238      	movs	r2, #56	@ 0x38
 8006028:	4013      	ands	r3, r2
 800602a:	2b08      	cmp	r3, #8
 800602c:	d102      	bne.n	8006034 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800602e:	4b18      	ldr	r3, [pc, #96]	@ (8006090 <HAL_RCC_GetSysClockFreq+0xac>)
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	e01e      	b.n	8006072 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8006034:	4b14      	ldr	r3, [pc, #80]	@ (8006088 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2238      	movs	r2, #56	@ 0x38
 800603a:	4013      	ands	r3, r2
 800603c:	2b20      	cmp	r3, #32
 800603e:	d103      	bne.n	8006048 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006040:	2380      	movs	r3, #128	@ 0x80
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	60fb      	str	r3, [r7, #12]
 8006046:	e014      	b.n	8006072 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8006048:	4b0f      	ldr	r3, [pc, #60]	@ (8006088 <HAL_RCC_GetSysClockFreq+0xa4>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2238      	movs	r2, #56	@ 0x38
 800604e:	4013      	ands	r3, r2
 8006050:	2b18      	cmp	r3, #24
 8006052:	d103      	bne.n	800605c <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006054:	23fa      	movs	r3, #250	@ 0xfa
 8006056:	01db      	lsls	r3, r3, #7
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	e00a      	b.n	8006072 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 800605c:	4b0a      	ldr	r3, [pc, #40]	@ (8006088 <HAL_RCC_GetSysClockFreq+0xa4>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	2238      	movs	r2, #56	@ 0x38
 8006062:	4013      	ands	r3, r2
 8006064:	2b10      	cmp	r3, #16
 8006066:	d102      	bne.n	800606e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8006068:	4b08      	ldr	r3, [pc, #32]	@ (800608c <HAL_RCC_GetSysClockFreq+0xa8>)
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	e001      	b.n	8006072 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7fa f85b 	bl	8000130 <__udivsi3>
 800607a:	0003      	movs	r3, r0
 800607c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800607e:	68fb      	ldr	r3, [r7, #12]
}
 8006080:	0018      	movs	r0, r3
 8006082:	46bd      	mov	sp, r7
 8006084:	b004      	add	sp, #16
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40021000 	.word	0x40021000
 800608c:	02dc6c00 	.word	0x02dc6c00
 8006090:	007a1200 	.word	0x007a1200

08006094 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8006098:	f7ff ffa4 	bl	8005fe4 <HAL_RCC_GetSysClockFreq>
 800609c:	0001      	movs	r1, r0
 800609e:	4b09      	ldr	r3, [pc, #36]	@ (80060c4 <HAL_RCC_GetHCLKFreq+0x30>)
 80060a0:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80060a2:	0a1b      	lsrs	r3, r3, #8
 80060a4:	220f      	movs	r2, #15
 80060a6:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80060a8:	4b07      	ldr	r3, [pc, #28]	@ (80060c8 <HAL_RCC_GetHCLKFreq+0x34>)
 80060aa:	0092      	lsls	r2, r2, #2
 80060ac:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80060ae:	221f      	movs	r2, #31
 80060b0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80060b2:	000a      	movs	r2, r1
 80060b4:	40da      	lsrs	r2, r3
 80060b6:	4b05      	ldr	r3, [pc, #20]	@ (80060cc <HAL_RCC_GetHCLKFreq+0x38>)
 80060b8:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 80060ba:	4b04      	ldr	r3, [pc, #16]	@ (80060cc <HAL_RCC_GetHCLKFreq+0x38>)
 80060bc:	681b      	ldr	r3, [r3, #0]
}
 80060be:	0018      	movs	r0, r3
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	40021000 	.word	0x40021000
 80060c8:	08008c3c 	.word	0x08008c3c
 80060cc:	20000030 	.word	0x20000030

080060d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80060d4:	f7ff ffde 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 80060d8:	0001      	movs	r1, r0
 80060da:	4b07      	ldr	r3, [pc, #28]	@ (80060f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	0b1b      	lsrs	r3, r3, #12
 80060e0:	2207      	movs	r2, #7
 80060e2:	401a      	ands	r2, r3
 80060e4:	4b05      	ldr	r3, [pc, #20]	@ (80060fc <HAL_RCC_GetPCLK1Freq+0x2c>)
 80060e6:	0092      	lsls	r2, r2, #2
 80060e8:	58d3      	ldr	r3, [r2, r3]
 80060ea:	221f      	movs	r2, #31
 80060ec:	4013      	ands	r3, r2
 80060ee:	40d9      	lsrs	r1, r3
 80060f0:	000b      	movs	r3, r1
}
 80060f2:	0018      	movs	r0, r3
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	40021000 	.word	0x40021000
 80060fc:	08008c7c 	.word	0x08008c7c

08006100 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006108:	2313      	movs	r3, #19
 800610a:	18fb      	adds	r3, r7, r3
 800610c:	2200      	movs	r2, #0
 800610e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006110:	2312      	movs	r3, #18
 8006112:	18fb      	adds	r3, r7, r3
 8006114:	2200      	movs	r2, #0
 8006116:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2240      	movs	r2, #64	@ 0x40
 800611e:	4013      	ands	r3, r2
 8006120:	d100      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8006122:	e079      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006124:	2011      	movs	r0, #17
 8006126:	183b      	adds	r3, r7, r0
 8006128:	2200      	movs	r2, #0
 800612a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800612c:	4b6a      	ldr	r3, [pc, #424]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800612e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006130:	2380      	movs	r3, #128	@ 0x80
 8006132:	055b      	lsls	r3, r3, #21
 8006134:	4013      	ands	r3, r2
 8006136:	d110      	bne.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006138:	4b67      	ldr	r3, [pc, #412]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800613a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800613c:	4b66      	ldr	r3, [pc, #408]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800613e:	2180      	movs	r1, #128	@ 0x80
 8006140:	0549      	lsls	r1, r1, #21
 8006142:	430a      	orrs	r2, r1
 8006144:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006146:	4b64      	ldr	r3, [pc, #400]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006148:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800614a:	2380      	movs	r3, #128	@ 0x80
 800614c:	055b      	lsls	r3, r3, #21
 800614e:	4013      	ands	r3, r2
 8006150:	60bb      	str	r3, [r7, #8]
 8006152:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006154:	183b      	adds	r3, r7, r0
 8006156:	2201      	movs	r2, #1
 8006158:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800615a:	4b5f      	ldr	r3, [pc, #380]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800615c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800615e:	23c0      	movs	r3, #192	@ 0xc0
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4013      	ands	r3, r2
 8006164:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d019      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	429a      	cmp	r2, r3
 8006174:	d014      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8006176:	4b58      	ldr	r3, [pc, #352]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800617a:	4a58      	ldr	r2, [pc, #352]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800617c:	4013      	ands	r3, r2
 800617e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006180:	4b55      	ldr	r3, [pc, #340]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006182:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006184:	4b54      	ldr	r3, [pc, #336]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006186:	2180      	movs	r1, #128	@ 0x80
 8006188:	0249      	lsls	r1, r1, #9
 800618a:	430a      	orrs	r2, r1
 800618c:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800618e:	4b52      	ldr	r3, [pc, #328]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006190:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006192:	4b51      	ldr	r3, [pc, #324]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006194:	4952      	ldr	r1, [pc, #328]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006196:	400a      	ands	r2, r1
 8006198:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800619a:	4b4f      	ldr	r3, [pc, #316]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2201      	movs	r2, #1
 80061a4:	4013      	ands	r3, r2
 80061a6:	d016      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a8:	f7fb fe0e 	bl	8001dc8 <HAL_GetTick>
 80061ac:	0003      	movs	r3, r0
 80061ae:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80061b0:	e00c      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061b2:	f7fb fe09 	bl	8001dc8 <HAL_GetTick>
 80061b6:	0002      	movs	r2, r0
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	4a49      	ldr	r2, [pc, #292]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d904      	bls.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80061c2:	2313      	movs	r3, #19
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	2203      	movs	r2, #3
 80061c8:	701a      	strb	r2, [r3, #0]
          break;
 80061ca:	e004      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80061cc:	4b42      	ldr	r3, [pc, #264]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061d0:	2202      	movs	r2, #2
 80061d2:	4013      	ands	r3, r2
 80061d4:	d0ed      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80061d6:	2313      	movs	r3, #19
 80061d8:	18fb      	adds	r3, r7, r3
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061e0:	4b3d      	ldr	r3, [pc, #244]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e4:	4a3d      	ldr	r2, [pc, #244]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80061e6:	4013      	ands	r3, r2
 80061e8:	0019      	movs	r1, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	69da      	ldr	r2, [r3, #28]
 80061ee:	4b3a      	ldr	r3, [pc, #232]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061f0:	430a      	orrs	r2, r1
 80061f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80061f4:	e005      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f6:	2312      	movs	r3, #18
 80061f8:	18fb      	adds	r3, r7, r3
 80061fa:	2213      	movs	r2, #19
 80061fc:	18ba      	adds	r2, r7, r2
 80061fe:	7812      	ldrb	r2, [r2, #0]
 8006200:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006202:	2311      	movs	r3, #17
 8006204:	18fb      	adds	r3, r7, r3
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d105      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800620c:	4b32      	ldr	r3, [pc, #200]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800620e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006210:	4b31      	ldr	r3, [pc, #196]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006212:	4935      	ldr	r1, [pc, #212]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006214:	400a      	ands	r2, r1
 8006216:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2201      	movs	r2, #1
 800621e:	4013      	ands	r3, r2
 8006220:	d009      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006222:	4b2d      	ldr	r3, [pc, #180]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006226:	2203      	movs	r2, #3
 8006228:	4393      	bics	r3, r2
 800622a:	0019      	movs	r1, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	4b29      	ldr	r3, [pc, #164]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006232:	430a      	orrs	r2, r1
 8006234:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2202      	movs	r2, #2
 800623c:	4013      	ands	r3, r2
 800623e:	d009      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006240:	4b25      	ldr	r3, [pc, #148]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006244:	4a29      	ldr	r2, [pc, #164]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006246:	4013      	ands	r3, r2
 8006248:	0019      	movs	r1, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	4b22      	ldr	r3, [pc, #136]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006250:	430a      	orrs	r2, r1
 8006252:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2220      	movs	r2, #32
 800625a:	4013      	ands	r3, r2
 800625c:	d008      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800625e:	4b1e      	ldr	r3, [pc, #120]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	0899      	lsrs	r1, r3, #2
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	4b1b      	ldr	r3, [pc, #108]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800626c:	430a      	orrs	r2, r1
 800626e:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2208      	movs	r2, #8
 8006276:	4013      	ands	r3, r2
 8006278:	d009      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800627a:	4b17      	ldr	r3, [pc, #92]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800627c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800627e:	4a1c      	ldr	r2, [pc, #112]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006280:	4013      	ands	r3, r2
 8006282:	0019      	movs	r1, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	695a      	ldr	r2, [r3, #20]
 8006288:	4b13      	ldr	r3, [pc, #76]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800628a:	430a      	orrs	r2, r1
 800628c:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2204      	movs	r2, #4
 8006294:	4013      	ands	r3, r2
 8006296:	d009      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006298:	4b0f      	ldr	r3, [pc, #60]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800629a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800629c:	4a15      	ldr	r2, [pc, #84]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800629e:	4013      	ands	r3, r2
 80062a0:	0019      	movs	r1, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691a      	ldr	r2, [r3, #16]
 80062a6:	4b0c      	ldr	r3, [pc, #48]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80062a8:	430a      	orrs	r2, r1
 80062aa:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2280      	movs	r2, #128	@ 0x80
 80062b2:	4013      	ands	r3, r2
 80062b4:	d009      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80062b6:	4b08      	ldr	r3, [pc, #32]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	22e0      	movs	r2, #224	@ 0xe0
 80062bc:	4393      	bics	r3, r2
 80062be:	0019      	movs	r1, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	4b04      	ldr	r3, [pc, #16]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80062c6:	430a      	orrs	r2, r1
 80062c8:	601a      	str	r2, [r3, #0]
  }
  return status;
 80062ca:	2312      	movs	r3, #18
 80062cc:	18fb      	adds	r3, r7, r3
 80062ce:	781b      	ldrb	r3, [r3, #0]
}
 80062d0:	0018      	movs	r0, r3
 80062d2:	46bd      	mov	sp, r7
 80062d4:	b006      	add	sp, #24
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	40021000 	.word	0x40021000
 80062dc:	fffffcff 	.word	0xfffffcff
 80062e0:	fffeffff 	.word	0xfffeffff
 80062e4:	00001388 	.word	0x00001388
 80062e8:	efffffff 	.word	0xefffffff
 80062ec:	ffffcfff 	.word	0xffffcfff
 80062f0:	ffffefff 	.word	0xffffefff
 80062f4:	ffff3fff 	.word	0xffff3fff

080062f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e04a      	b.n	80063a0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	223d      	movs	r2, #61	@ 0x3d
 800630e:	5c9b      	ldrb	r3, [r3, r2]
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d107      	bne.n	8006326 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	223c      	movs	r2, #60	@ 0x3c
 800631a:	2100      	movs	r1, #0
 800631c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	0018      	movs	r0, r3
 8006322:	f7fb fbb3 	bl	8001a8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	223d      	movs	r2, #61	@ 0x3d
 800632a:	2102      	movs	r1, #2
 800632c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3304      	adds	r3, #4
 8006336:	0019      	movs	r1, r3
 8006338:	0010      	movs	r0, r2
 800633a:	f000 fa4d 	bl	80067d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2248      	movs	r2, #72	@ 0x48
 8006342:	2101      	movs	r1, #1
 8006344:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	223e      	movs	r2, #62	@ 0x3e
 800634a:	2101      	movs	r1, #1
 800634c:	5499      	strb	r1, [r3, r2]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	223f      	movs	r2, #63	@ 0x3f
 8006352:	2101      	movs	r1, #1
 8006354:	5499      	strb	r1, [r3, r2]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2240      	movs	r2, #64	@ 0x40
 800635a:	2101      	movs	r1, #1
 800635c:	5499      	strb	r1, [r3, r2]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2241      	movs	r2, #65	@ 0x41
 8006362:	2101      	movs	r1, #1
 8006364:	5499      	strb	r1, [r3, r2]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2242      	movs	r2, #66	@ 0x42
 800636a:	2101      	movs	r1, #1
 800636c:	5499      	strb	r1, [r3, r2]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2243      	movs	r2, #67	@ 0x43
 8006372:	2101      	movs	r1, #1
 8006374:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2244      	movs	r2, #68	@ 0x44
 800637a:	2101      	movs	r1, #1
 800637c:	5499      	strb	r1, [r3, r2]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2245      	movs	r2, #69	@ 0x45
 8006382:	2101      	movs	r1, #1
 8006384:	5499      	strb	r1, [r3, r2]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2246      	movs	r2, #70	@ 0x46
 800638a:	2101      	movs	r1, #1
 800638c:	5499      	strb	r1, [r3, r2]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2247      	movs	r2, #71	@ 0x47
 8006392:	2101      	movs	r1, #1
 8006394:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	223d      	movs	r2, #61	@ 0x3d
 800639a:	2101      	movs	r1, #1
 800639c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	0018      	movs	r0, r3
 80063a2:	46bd      	mov	sp, r7
 80063a4:	b002      	add	sp, #8
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d108      	bne.n	80063ca <HAL_TIM_PWM_Start+0x22>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	223e      	movs	r2, #62	@ 0x3e
 80063bc:	5c9b      	ldrb	r3, [r3, r2]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	1e5a      	subs	r2, r3, #1
 80063c4:	4193      	sbcs	r3, r2
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	e037      	b.n	800643a <HAL_TIM_PWM_Start+0x92>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	d108      	bne.n	80063e2 <HAL_TIM_PWM_Start+0x3a>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	223f      	movs	r2, #63	@ 0x3f
 80063d4:	5c9b      	ldrb	r3, [r3, r2]
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	3b01      	subs	r3, #1
 80063da:	1e5a      	subs	r2, r3, #1
 80063dc:	4193      	sbcs	r3, r2
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	e02b      	b.n	800643a <HAL_TIM_PWM_Start+0x92>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d108      	bne.n	80063fa <HAL_TIM_PWM_Start+0x52>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2240      	movs	r2, #64	@ 0x40
 80063ec:	5c9b      	ldrb	r3, [r3, r2]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	1e5a      	subs	r2, r3, #1
 80063f4:	4193      	sbcs	r3, r2
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	e01f      	b.n	800643a <HAL_TIM_PWM_Start+0x92>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b0c      	cmp	r3, #12
 80063fe:	d108      	bne.n	8006412 <HAL_TIM_PWM_Start+0x6a>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2241      	movs	r2, #65	@ 0x41
 8006404:	5c9b      	ldrb	r3, [r3, r2]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	1e5a      	subs	r2, r3, #1
 800640c:	4193      	sbcs	r3, r2
 800640e:	b2db      	uxtb	r3, r3
 8006410:	e013      	b.n	800643a <HAL_TIM_PWM_Start+0x92>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b10      	cmp	r3, #16
 8006416:	d108      	bne.n	800642a <HAL_TIM_PWM_Start+0x82>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2242      	movs	r2, #66	@ 0x42
 800641c:	5c9b      	ldrb	r3, [r3, r2]
 800641e:	b2db      	uxtb	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	1e5a      	subs	r2, r3, #1
 8006424:	4193      	sbcs	r3, r2
 8006426:	b2db      	uxtb	r3, r3
 8006428:	e007      	b.n	800643a <HAL_TIM_PWM_Start+0x92>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2243      	movs	r2, #67	@ 0x43
 800642e:	5c9b      	ldrb	r3, [r3, r2]
 8006430:	b2db      	uxtb	r3, r3
 8006432:	3b01      	subs	r3, #1
 8006434:	1e5a      	subs	r2, r3, #1
 8006436:	4193      	sbcs	r3, r2
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e081      	b.n	8006546 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d104      	bne.n	8006452 <HAL_TIM_PWM_Start+0xaa>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	223e      	movs	r2, #62	@ 0x3e
 800644c:	2102      	movs	r1, #2
 800644e:	5499      	strb	r1, [r3, r2]
 8006450:	e023      	b.n	800649a <HAL_TIM_PWM_Start+0xf2>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b04      	cmp	r3, #4
 8006456:	d104      	bne.n	8006462 <HAL_TIM_PWM_Start+0xba>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	223f      	movs	r2, #63	@ 0x3f
 800645c:	2102      	movs	r1, #2
 800645e:	5499      	strb	r1, [r3, r2]
 8006460:	e01b      	b.n	800649a <HAL_TIM_PWM_Start+0xf2>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b08      	cmp	r3, #8
 8006466:	d104      	bne.n	8006472 <HAL_TIM_PWM_Start+0xca>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2240      	movs	r2, #64	@ 0x40
 800646c:	2102      	movs	r1, #2
 800646e:	5499      	strb	r1, [r3, r2]
 8006470:	e013      	b.n	800649a <HAL_TIM_PWM_Start+0xf2>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b0c      	cmp	r3, #12
 8006476:	d104      	bne.n	8006482 <HAL_TIM_PWM_Start+0xda>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2241      	movs	r2, #65	@ 0x41
 800647c:	2102      	movs	r1, #2
 800647e:	5499      	strb	r1, [r3, r2]
 8006480:	e00b      	b.n	800649a <HAL_TIM_PWM_Start+0xf2>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b10      	cmp	r3, #16
 8006486:	d104      	bne.n	8006492 <HAL_TIM_PWM_Start+0xea>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2242      	movs	r2, #66	@ 0x42
 800648c:	2102      	movs	r1, #2
 800648e:	5499      	strb	r1, [r3, r2]
 8006490:	e003      	b.n	800649a <HAL_TIM_PWM_Start+0xf2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2243      	movs	r2, #67	@ 0x43
 8006496:	2102      	movs	r1, #2
 8006498:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	2201      	movs	r2, #1
 80064a2:	0018      	movs	r0, r3
 80064a4:	f000 fcb8 	bl	8006e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a28      	ldr	r2, [pc, #160]	@ (8006550 <HAL_TIM_PWM_Start+0x1a8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <HAL_TIM_PWM_Start+0x11e>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a27      	ldr	r2, [pc, #156]	@ (8006554 <HAL_TIM_PWM_Start+0x1ac>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_TIM_PWM_Start+0x11e>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a25      	ldr	r2, [pc, #148]	@ (8006558 <HAL_TIM_PWM_Start+0x1b0>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d101      	bne.n	80064ca <HAL_TIM_PWM_Start+0x122>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <HAL_TIM_PWM_Start+0x124>
 80064ca:	2300      	movs	r3, #0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d008      	beq.n	80064e2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2180      	movs	r1, #128	@ 0x80
 80064dc:	0209      	lsls	r1, r1, #8
 80064de:	430a      	orrs	r2, r1
 80064e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006550 <HAL_TIM_PWM_Start+0x1a8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00a      	beq.n	8006502 <HAL_TIM_PWM_Start+0x15a>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	2380      	movs	r3, #128	@ 0x80
 80064f2:	05db      	lsls	r3, r3, #23
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d004      	beq.n	8006502 <HAL_TIM_PWM_Start+0x15a>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a17      	ldr	r2, [pc, #92]	@ (800655c <HAL_TIM_PWM_Start+0x1b4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d116      	bne.n	8006530 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	4a15      	ldr	r2, [pc, #84]	@ (8006560 <HAL_TIM_PWM_Start+0x1b8>)
 800650a:	4013      	ands	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2b06      	cmp	r3, #6
 8006512:	d016      	beq.n	8006542 <HAL_TIM_PWM_Start+0x19a>
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	2380      	movs	r3, #128	@ 0x80
 8006518:	025b      	lsls	r3, r3, #9
 800651a:	429a      	cmp	r2, r3
 800651c:	d011      	beq.n	8006542 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2101      	movs	r1, #1
 800652a:	430a      	orrs	r2, r1
 800652c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652e:	e008      	b.n	8006542 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2101      	movs	r1, #1
 800653c:	430a      	orrs	r2, r1
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	e000      	b.n	8006544 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006542:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	0018      	movs	r0, r3
 8006548:	46bd      	mov	sp, r7
 800654a:	b004      	add	sp, #16
 800654c:	bd80      	pop	{r7, pc}
 800654e:	46c0      	nop			@ (mov r8, r8)
 8006550:	40012c00 	.word	0x40012c00
 8006554:	40014400 	.word	0x40014400
 8006558:	40014800 	.word	0x40014800
 800655c:	40000400 	.word	0x40000400
 8006560:	00010007 	.word	0x00010007

08006564 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006570:	2317      	movs	r3, #23
 8006572:	18fb      	adds	r3, r7, r3
 8006574:	2200      	movs	r2, #0
 8006576:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	223c      	movs	r2, #60	@ 0x3c
 800657c:	5c9b      	ldrb	r3, [r3, r2]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_TIM_PWM_ConfigChannel+0x22>
 8006582:	2302      	movs	r3, #2
 8006584:	e0e5      	b.n	8006752 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	223c      	movs	r2, #60	@ 0x3c
 800658a:	2101      	movs	r1, #1
 800658c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b14      	cmp	r3, #20
 8006592:	d900      	bls.n	8006596 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006594:	e0d1      	b.n	800673a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	009a      	lsls	r2, r3, #2
 800659a:	4b70      	ldr	r3, [pc, #448]	@ (800675c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800659c:	18d3      	adds	r3, r2, r3
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	0011      	movs	r1, r2
 80065aa:	0018      	movs	r0, r3
 80065ac:	f000 f998 	bl	80068e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2108      	movs	r1, #8
 80065bc:	430a      	orrs	r2, r1
 80065be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2104      	movs	r1, #4
 80065cc:	438a      	bics	r2, r1
 80065ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6999      	ldr	r1, [r3, #24]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	691a      	ldr	r2, [r3, #16]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	619a      	str	r2, [r3, #24]
      break;
 80065e2:	e0af      	b.n	8006744 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	0011      	movs	r1, r2
 80065ec:	0018      	movs	r0, r3
 80065ee:	f000 f9f7 	bl	80069e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	699a      	ldr	r2, [r3, #24]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2180      	movs	r1, #128	@ 0x80
 80065fe:	0109      	lsls	r1, r1, #4
 8006600:	430a      	orrs	r2, r1
 8006602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699a      	ldr	r2, [r3, #24]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4954      	ldr	r1, [pc, #336]	@ (8006760 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006610:	400a      	ands	r2, r1
 8006612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6999      	ldr	r1, [r3, #24]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	021a      	lsls	r2, r3, #8
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	619a      	str	r2, [r3, #24]
      break;
 8006628:	e08c      	b.n	8006744 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	0011      	movs	r1, r2
 8006632:	0018      	movs	r0, r3
 8006634:	f000 fa52 	bl	8006adc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	69da      	ldr	r2, [r3, #28]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2108      	movs	r1, #8
 8006644:	430a      	orrs	r2, r1
 8006646:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	69da      	ldr	r2, [r3, #28]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2104      	movs	r1, #4
 8006654:	438a      	bics	r2, r1
 8006656:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	69d9      	ldr	r1, [r3, #28]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	691a      	ldr	r2, [r3, #16]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	61da      	str	r2, [r3, #28]
      break;
 800666a:	e06b      	b.n	8006744 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	0011      	movs	r1, r2
 8006674:	0018      	movs	r0, r3
 8006676:	f000 fab3 	bl	8006be0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	69da      	ldr	r2, [r3, #28]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2180      	movs	r1, #128	@ 0x80
 8006686:	0109      	lsls	r1, r1, #4
 8006688:	430a      	orrs	r2, r1
 800668a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	69da      	ldr	r2, [r3, #28]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4932      	ldr	r1, [pc, #200]	@ (8006760 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006698:	400a      	ands	r2, r1
 800669a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	69d9      	ldr	r1, [r3, #28]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	021a      	lsls	r2, r3, #8
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	61da      	str	r2, [r3, #28]
      break;
 80066b0:	e048      	b.n	8006744 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	0011      	movs	r1, r2
 80066ba:	0018      	movs	r0, r3
 80066bc:	f000 faf4 	bl	8006ca8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2108      	movs	r1, #8
 80066cc:	430a      	orrs	r2, r1
 80066ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2104      	movs	r1, #4
 80066dc:	438a      	bics	r2, r1
 80066de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	691a      	ldr	r2, [r3, #16]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80066f2:	e027      	b.n	8006744 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	0011      	movs	r1, r2
 80066fc:	0018      	movs	r0, r3
 80066fe:	f000 fb2d 	bl	8006d5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2180      	movs	r1, #128	@ 0x80
 800670e:	0109      	lsls	r1, r1, #4
 8006710:	430a      	orrs	r2, r1
 8006712:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4910      	ldr	r1, [pc, #64]	@ (8006760 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006720:	400a      	ands	r2, r1
 8006722:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	021a      	lsls	r2, r3, #8
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006738:	e004      	b.n	8006744 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800673a:	2317      	movs	r3, #23
 800673c:	18fb      	adds	r3, r7, r3
 800673e:	2201      	movs	r2, #1
 8006740:	701a      	strb	r2, [r3, #0]
      break;
 8006742:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	223c      	movs	r2, #60	@ 0x3c
 8006748:	2100      	movs	r1, #0
 800674a:	5499      	strb	r1, [r3, r2]

  return status;
 800674c:	2317      	movs	r3, #23
 800674e:	18fb      	adds	r3, r7, r3
 8006750:	781b      	ldrb	r3, [r3, #0]
}
 8006752:	0018      	movs	r0, r3
 8006754:	46bd      	mov	sp, r7
 8006756:	b006      	add	sp, #24
 8006758:	bd80      	pop	{r7, pc}
 800675a:	46c0      	nop			@ (mov r8, r8)
 800675c:	08008c9c 	.word	0x08008c9c
 8006760:	fffffbff 	.word	0xfffffbff

08006764 <HAL_TIM_GetChannelState>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5
  *            @arg TIM_CHANNEL_6: TIM Channel 6
  * @retval TIM Channel state
  */
HAL_TIM_ChannelStateTypeDef HAL_TIM_GetChannelState(const TIM_HandleTypeDef *htim,  uint32_t Channel)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_state;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d104      	bne.n	800677e <HAL_TIM_GetChannelState+0x1a>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	223e      	movs	r2, #62	@ 0x3e
 8006778:	5c9b      	ldrb	r3, [r3, r2]
 800677a:	b2db      	uxtb	r3, r3
 800677c:	e023      	b.n	80067c6 <HAL_TIM_GetChannelState+0x62>
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b04      	cmp	r3, #4
 8006782:	d104      	bne.n	800678e <HAL_TIM_GetChannelState+0x2a>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	223f      	movs	r2, #63	@ 0x3f
 8006788:	5c9b      	ldrb	r3, [r3, r2]
 800678a:	b2db      	uxtb	r3, r3
 800678c:	e01b      	b.n	80067c6 <HAL_TIM_GetChannelState+0x62>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b08      	cmp	r3, #8
 8006792:	d104      	bne.n	800679e <HAL_TIM_GetChannelState+0x3a>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2240      	movs	r2, #64	@ 0x40
 8006798:	5c9b      	ldrb	r3, [r3, r2]
 800679a:	b2db      	uxtb	r3, r3
 800679c:	e013      	b.n	80067c6 <HAL_TIM_GetChannelState+0x62>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b0c      	cmp	r3, #12
 80067a2:	d104      	bne.n	80067ae <HAL_TIM_GetChannelState+0x4a>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2241      	movs	r2, #65	@ 0x41
 80067a8:	5c9b      	ldrb	r3, [r3, r2]
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	e00b      	b.n	80067c6 <HAL_TIM_GetChannelState+0x62>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b10      	cmp	r3, #16
 80067b2:	d104      	bne.n	80067be <HAL_TIM_GetChannelState+0x5a>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2242      	movs	r2, #66	@ 0x42
 80067b8:	5c9b      	ldrb	r3, [r3, r2]
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	e003      	b.n	80067c6 <HAL_TIM_GetChannelState+0x62>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2243      	movs	r2, #67	@ 0x43
 80067c2:	5c9b      	ldrb	r3, [r3, r2]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	210f      	movs	r1, #15
 80067c8:	187a      	adds	r2, r7, r1
 80067ca:	7013      	strb	r3, [r2, #0]

  return channel_state;
 80067cc:	187b      	adds	r3, r7, r1
 80067ce:	781b      	ldrb	r3, [r3, #0]
}
 80067d0:	0018      	movs	r0, r3
 80067d2:	46bd      	mov	sp, r7
 80067d4:	b004      	add	sp, #16
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a37      	ldr	r2, [pc, #220]	@ (80068c8 <TIM_Base_SetConfig+0xf0>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d008      	beq.n	8006802 <TIM_Base_SetConfig+0x2a>
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	2380      	movs	r3, #128	@ 0x80
 80067f4:	05db      	lsls	r3, r3, #23
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d003      	beq.n	8006802 <TIM_Base_SetConfig+0x2a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a33      	ldr	r2, [pc, #204]	@ (80068cc <TIM_Base_SetConfig+0xf4>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d108      	bne.n	8006814 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2270      	movs	r2, #112	@ 0x70
 8006806:	4393      	bics	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4313      	orrs	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a2c      	ldr	r2, [pc, #176]	@ (80068c8 <TIM_Base_SetConfig+0xf0>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d014      	beq.n	8006846 <TIM_Base_SetConfig+0x6e>
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	2380      	movs	r3, #128	@ 0x80
 8006820:	05db      	lsls	r3, r3, #23
 8006822:	429a      	cmp	r2, r3
 8006824:	d00f      	beq.n	8006846 <TIM_Base_SetConfig+0x6e>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a28      	ldr	r2, [pc, #160]	@ (80068cc <TIM_Base_SetConfig+0xf4>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00b      	beq.n	8006846 <TIM_Base_SetConfig+0x6e>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a27      	ldr	r2, [pc, #156]	@ (80068d0 <TIM_Base_SetConfig+0xf8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d007      	beq.n	8006846 <TIM_Base_SetConfig+0x6e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a26      	ldr	r2, [pc, #152]	@ (80068d4 <TIM_Base_SetConfig+0xfc>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d003      	beq.n	8006846 <TIM_Base_SetConfig+0x6e>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a25      	ldr	r2, [pc, #148]	@ (80068d8 <TIM_Base_SetConfig+0x100>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d108      	bne.n	8006858 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4a24      	ldr	r2, [pc, #144]	@ (80068dc <TIM_Base_SetConfig+0x104>)
 800684a:	4013      	ands	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2280      	movs	r2, #128	@ 0x80
 800685c:	4393      	bics	r3, r2
 800685e:	001a      	movs	r2, r3
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	689a      	ldr	r2, [r3, #8]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a11      	ldr	r2, [pc, #68]	@ (80068c8 <TIM_Base_SetConfig+0xf0>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d007      	beq.n	8006896 <TIM_Base_SetConfig+0xbe>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a12      	ldr	r2, [pc, #72]	@ (80068d4 <TIM_Base_SetConfig+0xfc>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d003      	beq.n	8006896 <TIM_Base_SetConfig+0xbe>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a11      	ldr	r2, [pc, #68]	@ (80068d8 <TIM_Base_SetConfig+0x100>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d103      	bne.n	800689e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	2201      	movs	r2, #1
 80068aa:	4013      	ands	r3, r2
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d106      	bne.n	80068be <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	2201      	movs	r2, #1
 80068b6:	4393      	bics	r3, r2
 80068b8:	001a      	movs	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	611a      	str	r2, [r3, #16]
  }
}
 80068be:	46c0      	nop			@ (mov r8, r8)
 80068c0:	46bd      	mov	sp, r7
 80068c2:	b004      	add	sp, #16
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	46c0      	nop			@ (mov r8, r8)
 80068c8:	40012c00 	.word	0x40012c00
 80068cc:	40000400 	.word	0x40000400
 80068d0:	40002000 	.word	0x40002000
 80068d4:	40014400 	.word	0x40014400
 80068d8:	40014800 	.word	0x40014800
 80068dc:	fffffcff 	.word	0xfffffcff

080068e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	2201      	movs	r2, #1
 80068f6:	4393      	bics	r3, r2
 80068f8:	001a      	movs	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4a2e      	ldr	r2, [pc, #184]	@ (80069c8 <TIM_OC1_SetConfig+0xe8>)
 800690e:	4013      	ands	r3, r2
 8006910:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2203      	movs	r2, #3
 8006916:	4393      	bics	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4313      	orrs	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	2202      	movs	r2, #2
 8006928:	4393      	bics	r3, r2
 800692a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a24      	ldr	r2, [pc, #144]	@ (80069cc <TIM_OC1_SetConfig+0xec>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d007      	beq.n	800694e <TIM_OC1_SetConfig+0x6e>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a23      	ldr	r2, [pc, #140]	@ (80069d0 <TIM_OC1_SetConfig+0xf0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_OC1_SetConfig+0x6e>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a22      	ldr	r2, [pc, #136]	@ (80069d4 <TIM_OC1_SetConfig+0xf4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d10c      	bne.n	8006968 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2208      	movs	r2, #8
 8006952:	4393      	bics	r3, r2
 8006954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	2204      	movs	r2, #4
 8006964:	4393      	bics	r3, r2
 8006966:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a18      	ldr	r2, [pc, #96]	@ (80069cc <TIM_OC1_SetConfig+0xec>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d007      	beq.n	8006980 <TIM_OC1_SetConfig+0xa0>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a17      	ldr	r2, [pc, #92]	@ (80069d0 <TIM_OC1_SetConfig+0xf0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d003      	beq.n	8006980 <TIM_OC1_SetConfig+0xa0>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a16      	ldr	r2, [pc, #88]	@ (80069d4 <TIM_OC1_SetConfig+0xf4>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d111      	bne.n	80069a4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	4a15      	ldr	r2, [pc, #84]	@ (80069d8 <TIM_OC1_SetConfig+0xf8>)
 8006984:	4013      	ands	r3, r2
 8006986:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	4a14      	ldr	r2, [pc, #80]	@ (80069dc <TIM_OC1_SetConfig+0xfc>)
 800698c:	4013      	ands	r3, r2
 800698e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	4313      	orrs	r3, r2
 8006998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	621a      	str	r2, [r3, #32]
}
 80069be:	46c0      	nop			@ (mov r8, r8)
 80069c0:	46bd      	mov	sp, r7
 80069c2:	b006      	add	sp, #24
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	46c0      	nop			@ (mov r8, r8)
 80069c8:	fffeff8f 	.word	0xfffeff8f
 80069cc:	40012c00 	.word	0x40012c00
 80069d0:	40014400 	.word	0x40014400
 80069d4:	40014800 	.word	0x40014800
 80069d8:	fffffeff 	.word	0xfffffeff
 80069dc:	fffffdff 	.word	0xfffffdff

080069e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	2210      	movs	r2, #16
 80069f6:	4393      	bics	r3, r2
 80069f8:	001a      	movs	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8006ac0 <TIM_OC2_SetConfig+0xe0>)
 8006a0e:	4013      	ands	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4a2b      	ldr	r2, [pc, #172]	@ (8006ac4 <TIM_OC2_SetConfig+0xe4>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	021b      	lsls	r3, r3, #8
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	4393      	bics	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a22      	ldr	r2, [pc, #136]	@ (8006ac8 <TIM_OC2_SetConfig+0xe8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d10d      	bne.n	8006a5e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2280      	movs	r2, #128	@ 0x80
 8006a46:	4393      	bics	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2240      	movs	r2, #64	@ 0x40
 8006a5a:	4393      	bics	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a19      	ldr	r2, [pc, #100]	@ (8006ac8 <TIM_OC2_SetConfig+0xe8>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d007      	beq.n	8006a76 <TIM_OC2_SetConfig+0x96>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a18      	ldr	r2, [pc, #96]	@ (8006acc <TIM_OC2_SetConfig+0xec>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d003      	beq.n	8006a76 <TIM_OC2_SetConfig+0x96>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a17      	ldr	r2, [pc, #92]	@ (8006ad0 <TIM_OC2_SetConfig+0xf0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d113      	bne.n	8006a9e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	4a16      	ldr	r2, [pc, #88]	@ (8006ad4 <TIM_OC2_SetConfig+0xf4>)
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	4a15      	ldr	r2, [pc, #84]	@ (8006ad8 <TIM_OC2_SetConfig+0xf8>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	621a      	str	r2, [r3, #32]
}
 8006ab8:	46c0      	nop			@ (mov r8, r8)
 8006aba:	46bd      	mov	sp, r7
 8006abc:	b006      	add	sp, #24
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	feff8fff 	.word	0xfeff8fff
 8006ac4:	fffffcff 	.word	0xfffffcff
 8006ac8:	40012c00 	.word	0x40012c00
 8006acc:	40014400 	.word	0x40014400
 8006ad0:	40014800 	.word	0x40014800
 8006ad4:	fffffbff 	.word	0xfffffbff
 8006ad8:	fffff7ff 	.word	0xfffff7ff

08006adc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	4a31      	ldr	r2, [pc, #196]	@ (8006bb8 <TIM_OC3_SetConfig+0xdc>)
 8006af2:	401a      	ands	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4a2d      	ldr	r2, [pc, #180]	@ (8006bbc <TIM_OC3_SetConfig+0xe0>)
 8006b08:	4013      	ands	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2203      	movs	r2, #3
 8006b10:	4393      	bics	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	4a27      	ldr	r2, [pc, #156]	@ (8006bc0 <TIM_OC3_SetConfig+0xe4>)
 8006b22:	4013      	ands	r3, r2
 8006b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	021b      	lsls	r3, r3, #8
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a23      	ldr	r2, [pc, #140]	@ (8006bc4 <TIM_OC3_SetConfig+0xe8>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d10d      	bne.n	8006b56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	4a22      	ldr	r2, [pc, #136]	@ (8006bc8 <TIM_OC3_SetConfig+0xec>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	021b      	lsls	r3, r3, #8
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	4a1e      	ldr	r2, [pc, #120]	@ (8006bcc <TIM_OC3_SetConfig+0xf0>)
 8006b52:	4013      	ands	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a1a      	ldr	r2, [pc, #104]	@ (8006bc4 <TIM_OC3_SetConfig+0xe8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d007      	beq.n	8006b6e <TIM_OC3_SetConfig+0x92>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd0 <TIM_OC3_SetConfig+0xf4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d003      	beq.n	8006b6e <TIM_OC3_SetConfig+0x92>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a1a      	ldr	r2, [pc, #104]	@ (8006bd4 <TIM_OC3_SetConfig+0xf8>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d113      	bne.n	8006b96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	4a19      	ldr	r2, [pc, #100]	@ (8006bd8 <TIM_OC3_SetConfig+0xfc>)
 8006b72:	4013      	ands	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	4a18      	ldr	r2, [pc, #96]	@ (8006bdc <TIM_OC3_SetConfig+0x100>)
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	011b      	lsls	r3, r3, #4
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	011b      	lsls	r3, r3, #4
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	621a      	str	r2, [r3, #32]
}
 8006bb0:	46c0      	nop			@ (mov r8, r8)
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	b006      	add	sp, #24
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	fffffeff 	.word	0xfffffeff
 8006bbc:	fffeff8f 	.word	0xfffeff8f
 8006bc0:	fffffdff 	.word	0xfffffdff
 8006bc4:	40012c00 	.word	0x40012c00
 8006bc8:	fffff7ff 	.word	0xfffff7ff
 8006bcc:	fffffbff 	.word	0xfffffbff
 8006bd0:	40014400 	.word	0x40014400
 8006bd4:	40014800 	.word	0x40014800
 8006bd8:	ffffefff 	.word	0xffffefff
 8006bdc:	ffffdfff 	.word	0xffffdfff

08006be0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	4a24      	ldr	r2, [pc, #144]	@ (8006c88 <TIM_OC4_SetConfig+0xa8>)
 8006bf6:	401a      	ands	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4a20      	ldr	r2, [pc, #128]	@ (8006c8c <TIM_OC4_SetConfig+0xac>)
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4a1f      	ldr	r2, [pc, #124]	@ (8006c90 <TIM_OC4_SetConfig+0xb0>)
 8006c14:	4013      	ands	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	021b      	lsls	r3, r3, #8
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	4a1b      	ldr	r2, [pc, #108]	@ (8006c94 <TIM_OC4_SetConfig+0xb4>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	031b      	lsls	r3, r3, #12
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a17      	ldr	r2, [pc, #92]	@ (8006c98 <TIM_OC4_SetConfig+0xb8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d007      	beq.n	8006c50 <TIM_OC4_SetConfig+0x70>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a16      	ldr	r2, [pc, #88]	@ (8006c9c <TIM_OC4_SetConfig+0xbc>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d003      	beq.n	8006c50 <TIM_OC4_SetConfig+0x70>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a15      	ldr	r2, [pc, #84]	@ (8006ca0 <TIM_OC4_SetConfig+0xc0>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d109      	bne.n	8006c64 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	4a14      	ldr	r2, [pc, #80]	@ (8006ca4 <TIM_OC4_SetConfig+0xc4>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	019b      	lsls	r3, r3, #6
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	621a      	str	r2, [r3, #32]
}
 8006c7e:	46c0      	nop			@ (mov r8, r8)
 8006c80:	46bd      	mov	sp, r7
 8006c82:	b006      	add	sp, #24
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	46c0      	nop			@ (mov r8, r8)
 8006c88:	ffffefff 	.word	0xffffefff
 8006c8c:	feff8fff 	.word	0xfeff8fff
 8006c90:	fffffcff 	.word	0xfffffcff
 8006c94:	ffffdfff 	.word	0xffffdfff
 8006c98:	40012c00 	.word	0x40012c00
 8006c9c:	40014400 	.word	0x40014400
 8006ca0:	40014800 	.word	0x40014800
 8006ca4:	ffffbfff 	.word	0xffffbfff

08006ca8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	4a21      	ldr	r2, [pc, #132]	@ (8006d44 <TIM_OC5_SetConfig+0x9c>)
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8006d48 <TIM_OC5_SetConfig+0xa0>)
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	4a19      	ldr	r2, [pc, #100]	@ (8006d4c <TIM_OC5_SetConfig+0xa4>)
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	041b      	lsls	r3, r3, #16
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a15      	ldr	r2, [pc, #84]	@ (8006d50 <TIM_OC5_SetConfig+0xa8>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d007      	beq.n	8006d0e <TIM_OC5_SetConfig+0x66>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a14      	ldr	r2, [pc, #80]	@ (8006d54 <TIM_OC5_SetConfig+0xac>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d003      	beq.n	8006d0e <TIM_OC5_SetConfig+0x66>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a13      	ldr	r2, [pc, #76]	@ (8006d58 <TIM_OC5_SetConfig+0xb0>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d109      	bne.n	8006d22 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	4a0c      	ldr	r2, [pc, #48]	@ (8006d44 <TIM_OC5_SetConfig+0x9c>)
 8006d12:	4013      	ands	r3, r2
 8006d14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	021b      	lsls	r3, r3, #8
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	621a      	str	r2, [r3, #32]
}
 8006d3c:	46c0      	nop			@ (mov r8, r8)
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	b006      	add	sp, #24
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	fffeffff 	.word	0xfffeffff
 8006d48:	fffeff8f 	.word	0xfffeff8f
 8006d4c:	fffdffff 	.word	0xfffdffff
 8006d50:	40012c00 	.word	0x40012c00
 8006d54:	40014400 	.word	0x40014400
 8006d58:	40014800 	.word	0x40014800

08006d5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	4a22      	ldr	r2, [pc, #136]	@ (8006dfc <TIM_OC6_SetConfig+0xa0>)
 8006d72:	401a      	ands	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4a1e      	ldr	r2, [pc, #120]	@ (8006e00 <TIM_OC6_SetConfig+0xa4>)
 8006d88:	4013      	ands	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	021b      	lsls	r3, r3, #8
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8006e04 <TIM_OC6_SetConfig+0xa8>)
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	051b      	lsls	r3, r3, #20
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a16      	ldr	r2, [pc, #88]	@ (8006e08 <TIM_OC6_SetConfig+0xac>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d007      	beq.n	8006dc4 <TIM_OC6_SetConfig+0x68>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a15      	ldr	r2, [pc, #84]	@ (8006e0c <TIM_OC6_SetConfig+0xb0>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d003      	beq.n	8006dc4 <TIM_OC6_SetConfig+0x68>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a14      	ldr	r2, [pc, #80]	@ (8006e10 <TIM_OC6_SetConfig+0xb4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d109      	bne.n	8006dd8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	4a13      	ldr	r2, [pc, #76]	@ (8006e14 <TIM_OC6_SetConfig+0xb8>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	029b      	lsls	r3, r3, #10
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	621a      	str	r2, [r3, #32]
}
 8006df2:	46c0      	nop			@ (mov r8, r8)
 8006df4:	46bd      	mov	sp, r7
 8006df6:	b006      	add	sp, #24
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	46c0      	nop			@ (mov r8, r8)
 8006dfc:	ffefffff 	.word	0xffefffff
 8006e00:	feff8fff 	.word	0xfeff8fff
 8006e04:	ffdfffff 	.word	0xffdfffff
 8006e08:	40012c00 	.word	0x40012c00
 8006e0c:	40014400 	.word	0x40014400
 8006e10:	40014800 	.word	0x40014800
 8006e14:	fffbffff 	.word	0xfffbffff

08006e18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	221f      	movs	r2, #31
 8006e28:	4013      	ands	r3, r2
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	409a      	lsls	r2, r3
 8006e2e:	0013      	movs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	43d2      	mvns	r2, r2
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a1a      	ldr	r2, [r3, #32]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	211f      	movs	r1, #31
 8006e48:	400b      	ands	r3, r1
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	4099      	lsls	r1, r3
 8006e4e:	000b      	movs	r3, r1
 8006e50:	431a      	orrs	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	621a      	str	r2, [r3, #32]
}
 8006e56:	46c0      	nop			@ (mov r8, r8)
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	b006      	add	sp, #24
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	223c      	movs	r2, #60	@ 0x3c
 8006e6e:	5c9b      	ldrb	r3, [r3, r2]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e050      	b.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	223c      	movs	r2, #60	@ 0x3c
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	223d      	movs	r2, #61	@ 0x3d
 8006e84:	2102      	movs	r1, #2
 8006e86:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a21      	ldr	r2, [pc, #132]	@ (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d108      	bne.n	8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4a20      	ldr	r2, [pc, #128]	@ (8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2270      	movs	r2, #112	@ 0x70
 8006eb8:	4393      	bics	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a14      	ldr	r2, [pc, #80]	@ (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d00a      	beq.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	2380      	movs	r3, #128	@ 0x80
 8006ede:	05db      	lsls	r3, r3, #23
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d004      	beq.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a10      	ldr	r2, [pc, #64]	@ (8006f2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d10c      	bne.n	8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2280      	movs	r2, #128	@ 0x80
 8006ef2:	4393      	bics	r3, r2
 8006ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	223d      	movs	r2, #61	@ 0x3d
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	223c      	movs	r2, #60	@ 0x3c
 8006f14:	2100      	movs	r1, #0
 8006f16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	0018      	movs	r0, r3
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	b004      	add	sp, #16
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	46c0      	nop			@ (mov r8, r8)
 8006f24:	40012c00 	.word	0x40012c00
 8006f28:	ff0fffff 	.word	0xff0fffff
 8006f2c:	40000400 	.word	0x40000400

08006f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e046      	b.n	8006fd0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2288      	movs	r2, #136	@ 0x88
 8006f46:	589b      	ldr	r3, [r3, r2]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d107      	bne.n	8006f5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2284      	movs	r2, #132	@ 0x84
 8006f50:	2100      	movs	r1, #0
 8006f52:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	0018      	movs	r0, r3
 8006f58:	f7fa fe50 	bl	8001bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2288      	movs	r2, #136	@ 0x88
 8006f60:	2124      	movs	r1, #36	@ 0x24
 8006f62:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2101      	movs	r1, #1
 8006f70:	438a      	bics	r2, r1
 8006f72:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	0018      	movs	r0, r3
 8006f80:	f000 fa4e 	bl	8007420 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	0018      	movs	r0, r3
 8006f88:	f000 f8cc 	bl	8007124 <UART_SetConfig>
 8006f8c:	0003      	movs	r3, r0
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e01c      	b.n	8006fd0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	490d      	ldr	r1, [pc, #52]	@ (8006fd8 <HAL_UART_Init+0xa8>)
 8006fa2:	400a      	ands	r2, r1
 8006fa4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	212a      	movs	r1, #42	@ 0x2a
 8006fb2:	438a      	bics	r2, r1
 8006fb4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f000 fadd 	bl	8007588 <UART_CheckIdleState>
 8006fce:	0003      	movs	r3, r0
}
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	b002      	add	sp, #8
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	ffffb7ff 	.word	0xffffb7ff

08006fdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08a      	sub	sp, #40	@ 0x28
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	603b      	str	r3, [r7, #0]
 8006fe8:	1dbb      	adds	r3, r7, #6
 8006fea:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2288      	movs	r2, #136	@ 0x88
 8006ff0:	589b      	ldr	r3, [r3, r2]
 8006ff2:	2b20      	cmp	r3, #32
 8006ff4:	d000      	beq.n	8006ff8 <HAL_UART_Transmit+0x1c>
 8006ff6:	e090      	b.n	800711a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_UART_Transmit+0x2a>
 8006ffe:	1dbb      	adds	r3, r7, #6
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e088      	b.n	800711c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	2380      	movs	r3, #128	@ 0x80
 8007010:	015b      	lsls	r3, r3, #5
 8007012:	429a      	cmp	r2, r3
 8007014:	d109      	bne.n	800702a <HAL_UART_Transmit+0x4e>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d105      	bne.n	800702a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2201      	movs	r2, #1
 8007022:	4013      	ands	r3, r2
 8007024:	d001      	beq.n	800702a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e078      	b.n	800711c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2290      	movs	r2, #144	@ 0x90
 800702e:	2100      	movs	r1, #0
 8007030:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2288      	movs	r2, #136	@ 0x88
 8007036:	2121      	movs	r1, #33	@ 0x21
 8007038:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800703a:	f7fa fec5 	bl	8001dc8 <HAL_GetTick>
 800703e:	0003      	movs	r3, r0
 8007040:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1dba      	adds	r2, r7, #6
 8007046:	2154      	movs	r1, #84	@ 0x54
 8007048:	8812      	ldrh	r2, [r2, #0]
 800704a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	1dba      	adds	r2, r7, #6
 8007050:	2156      	movs	r1, #86	@ 0x56
 8007052:	8812      	ldrh	r2, [r2, #0]
 8007054:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	689a      	ldr	r2, [r3, #8]
 800705a:	2380      	movs	r3, #128	@ 0x80
 800705c:	015b      	lsls	r3, r3, #5
 800705e:	429a      	cmp	r2, r3
 8007060:	d108      	bne.n	8007074 <HAL_UART_Transmit+0x98>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d104      	bne.n	8007074 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800706a:	2300      	movs	r3, #0
 800706c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	61bb      	str	r3, [r7, #24]
 8007072:	e003      	b.n	800707c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007078:	2300      	movs	r3, #0
 800707a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800707c:	e030      	b.n	80070e0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	0013      	movs	r3, r2
 8007088:	2200      	movs	r2, #0
 800708a:	2180      	movs	r1, #128	@ 0x80
 800708c:	f000 fb26 	bl	80076dc <UART_WaitOnFlagUntilTimeout>
 8007090:	1e03      	subs	r3, r0, #0
 8007092:	d005      	beq.n	80070a0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2288      	movs	r2, #136	@ 0x88
 8007098:	2120      	movs	r1, #32
 800709a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e03d      	b.n	800711c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10b      	bne.n	80070be <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	001a      	movs	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	05d2      	lsls	r2, r2, #23
 80070b2:	0dd2      	lsrs	r2, r2, #23
 80070b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	3302      	adds	r3, #2
 80070ba:	61bb      	str	r3, [r7, #24]
 80070bc:	e007      	b.n	80070ce <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	781a      	ldrb	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	3301      	adds	r3, #1
 80070cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2256      	movs	r2, #86	@ 0x56
 80070d2:	5a9b      	ldrh	r3, [r3, r2]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b299      	uxth	r1, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2256      	movs	r2, #86	@ 0x56
 80070de:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2256      	movs	r2, #86	@ 0x56
 80070e4:	5a9b      	ldrh	r3, [r3, r2]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1c8      	bne.n	800707e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	0013      	movs	r3, r2
 80070f6:	2200      	movs	r2, #0
 80070f8:	2140      	movs	r1, #64	@ 0x40
 80070fa:	f000 faef 	bl	80076dc <UART_WaitOnFlagUntilTimeout>
 80070fe:	1e03      	subs	r3, r0, #0
 8007100:	d005      	beq.n	800710e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2288      	movs	r2, #136	@ 0x88
 8007106:	2120      	movs	r1, #32
 8007108:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e006      	b.n	800711c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2288      	movs	r2, #136	@ 0x88
 8007112:	2120      	movs	r1, #32
 8007114:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	e000      	b.n	800711c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800711a:	2302      	movs	r3, #2
  }
}
 800711c:	0018      	movs	r0, r3
 800711e:	46bd      	mov	sp, r7
 8007120:	b008      	add	sp, #32
 8007122:	bd80      	pop	{r7, pc}

08007124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b088      	sub	sp, #32
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800712c:	231e      	movs	r3, #30
 800712e:	18fb      	adds	r3, r7, r3
 8007130:	2200      	movs	r2, #0
 8007132:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	431a      	orrs	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	4313      	orrs	r3, r2
 800714a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4aab      	ldr	r2, [pc, #684]	@ (8007400 <UART_SetConfig+0x2dc>)
 8007154:	4013      	ands	r3, r2
 8007156:	0019      	movs	r1, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	430a      	orrs	r2, r1
 8007160:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	4aa6      	ldr	r2, [pc, #664]	@ (8007404 <UART_SetConfig+0x2e0>)
 800716a:	4013      	ands	r3, r2
 800716c:	0019      	movs	r1, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	4a9d      	ldr	r2, [pc, #628]	@ (8007408 <UART_SetConfig+0x2e4>)
 8007192:	4013      	ands	r3, r2
 8007194:	0019      	movs	r1, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	430a      	orrs	r2, r1
 800719e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a6:	220f      	movs	r2, #15
 80071a8:	4393      	bics	r3, r2
 80071aa:	0019      	movs	r1, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a93      	ldr	r2, [pc, #588]	@ (800740c <UART_SetConfig+0x2e8>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d127      	bne.n	8007212 <UART_SetConfig+0xee>
 80071c2:	4b93      	ldr	r3, [pc, #588]	@ (8007410 <UART_SetConfig+0x2ec>)
 80071c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071c6:	2203      	movs	r2, #3
 80071c8:	4013      	ands	r3, r2
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d017      	beq.n	80071fe <UART_SetConfig+0xda>
 80071ce:	d81b      	bhi.n	8007208 <UART_SetConfig+0xe4>
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d00a      	beq.n	80071ea <UART_SetConfig+0xc6>
 80071d4:	d818      	bhi.n	8007208 <UART_SetConfig+0xe4>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <UART_SetConfig+0xbc>
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d00a      	beq.n	80071f4 <UART_SetConfig+0xd0>
 80071de:	e013      	b.n	8007208 <UART_SetConfig+0xe4>
 80071e0:	231f      	movs	r3, #31
 80071e2:	18fb      	adds	r3, r7, r3
 80071e4:	2200      	movs	r2, #0
 80071e6:	701a      	strb	r2, [r3, #0]
 80071e8:	e021      	b.n	800722e <UART_SetConfig+0x10a>
 80071ea:	231f      	movs	r3, #31
 80071ec:	18fb      	adds	r3, r7, r3
 80071ee:	2202      	movs	r2, #2
 80071f0:	701a      	strb	r2, [r3, #0]
 80071f2:	e01c      	b.n	800722e <UART_SetConfig+0x10a>
 80071f4:	231f      	movs	r3, #31
 80071f6:	18fb      	adds	r3, r7, r3
 80071f8:	2204      	movs	r2, #4
 80071fa:	701a      	strb	r2, [r3, #0]
 80071fc:	e017      	b.n	800722e <UART_SetConfig+0x10a>
 80071fe:	231f      	movs	r3, #31
 8007200:	18fb      	adds	r3, r7, r3
 8007202:	2208      	movs	r2, #8
 8007204:	701a      	strb	r2, [r3, #0]
 8007206:	e012      	b.n	800722e <UART_SetConfig+0x10a>
 8007208:	231f      	movs	r3, #31
 800720a:	18fb      	adds	r3, r7, r3
 800720c:	2210      	movs	r2, #16
 800720e:	701a      	strb	r2, [r3, #0]
 8007210:	e00d      	b.n	800722e <UART_SetConfig+0x10a>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a7f      	ldr	r2, [pc, #508]	@ (8007414 <UART_SetConfig+0x2f0>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d104      	bne.n	8007226 <UART_SetConfig+0x102>
 800721c:	231f      	movs	r3, #31
 800721e:	18fb      	adds	r3, r7, r3
 8007220:	2200      	movs	r2, #0
 8007222:	701a      	strb	r2, [r3, #0]
 8007224:	e003      	b.n	800722e <UART_SetConfig+0x10a>
 8007226:	231f      	movs	r3, #31
 8007228:	18fb      	adds	r3, r7, r3
 800722a:	2210      	movs	r2, #16
 800722c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	69da      	ldr	r2, [r3, #28]
 8007232:	2380      	movs	r3, #128	@ 0x80
 8007234:	021b      	lsls	r3, r3, #8
 8007236:	429a      	cmp	r2, r3
 8007238:	d000      	beq.n	800723c <UART_SetConfig+0x118>
 800723a:	e06f      	b.n	800731c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800723c:	231f      	movs	r3, #31
 800723e:	18fb      	adds	r3, r7, r3
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b08      	cmp	r3, #8
 8007244:	d01f      	beq.n	8007286 <UART_SetConfig+0x162>
 8007246:	dc22      	bgt.n	800728e <UART_SetConfig+0x16a>
 8007248:	2b04      	cmp	r3, #4
 800724a:	d017      	beq.n	800727c <UART_SetConfig+0x158>
 800724c:	dc1f      	bgt.n	800728e <UART_SetConfig+0x16a>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <UART_SetConfig+0x134>
 8007252:	2b02      	cmp	r3, #2
 8007254:	d005      	beq.n	8007262 <UART_SetConfig+0x13e>
 8007256:	e01a      	b.n	800728e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007258:	f7fe ff3a 	bl	80060d0 <HAL_RCC_GetPCLK1Freq>
 800725c:	0003      	movs	r3, r0
 800725e:	61bb      	str	r3, [r7, #24]
        break;
 8007260:	e01c      	b.n	800729c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8007262:	4b6b      	ldr	r3, [pc, #428]	@ (8007410 <UART_SetConfig+0x2ec>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	095b      	lsrs	r3, r3, #5
 8007268:	2207      	movs	r2, #7
 800726a:	4013      	ands	r3, r2
 800726c:	3301      	adds	r3, #1
 800726e:	0019      	movs	r1, r3
 8007270:	4869      	ldr	r0, [pc, #420]	@ (8007418 <UART_SetConfig+0x2f4>)
 8007272:	f7f8 ff5d 	bl	8000130 <__udivsi3>
 8007276:	0003      	movs	r3, r0
 8007278:	61bb      	str	r3, [r7, #24]
        break;
 800727a:	e00f      	b.n	800729c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800727c:	f7fe feb2 	bl	8005fe4 <HAL_RCC_GetSysClockFreq>
 8007280:	0003      	movs	r3, r0
 8007282:	61bb      	str	r3, [r7, #24]
        break;
 8007284:	e00a      	b.n	800729c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007286:	2380      	movs	r3, #128	@ 0x80
 8007288:	021b      	lsls	r3, r3, #8
 800728a:	61bb      	str	r3, [r7, #24]
        break;
 800728c:	e006      	b.n	800729c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007292:	231e      	movs	r3, #30
 8007294:	18fb      	adds	r3, r7, r3
 8007296:	2201      	movs	r2, #1
 8007298:	701a      	strb	r2, [r3, #0]
        break;
 800729a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d100      	bne.n	80072a4 <UART_SetConfig+0x180>
 80072a2:	e097      	b.n	80073d4 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072a8:	4b5c      	ldr	r3, [pc, #368]	@ (800741c <UART_SetConfig+0x2f8>)
 80072aa:	0052      	lsls	r2, r2, #1
 80072ac:	5ad3      	ldrh	r3, [r2, r3]
 80072ae:	0019      	movs	r1, r3
 80072b0:	69b8      	ldr	r0, [r7, #24]
 80072b2:	f7f8 ff3d 	bl	8000130 <__udivsi3>
 80072b6:	0003      	movs	r3, r0
 80072b8:	005a      	lsls	r2, r3, #1
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	085b      	lsrs	r3, r3, #1
 80072c0:	18d2      	adds	r2, r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	0019      	movs	r1, r3
 80072c8:	0010      	movs	r0, r2
 80072ca:	f7f8 ff31 	bl	8000130 <__udivsi3>
 80072ce:	0003      	movs	r3, r0
 80072d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	2b0f      	cmp	r3, #15
 80072d6:	d91c      	bls.n	8007312 <UART_SetConfig+0x1ee>
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	2380      	movs	r3, #128	@ 0x80
 80072dc:	025b      	lsls	r3, r3, #9
 80072de:	429a      	cmp	r2, r3
 80072e0:	d217      	bcs.n	8007312 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	200e      	movs	r0, #14
 80072e8:	183b      	adds	r3, r7, r0
 80072ea:	210f      	movs	r1, #15
 80072ec:	438a      	bics	r2, r1
 80072ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	085b      	lsrs	r3, r3, #1
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2207      	movs	r2, #7
 80072f8:	4013      	ands	r3, r2
 80072fa:	b299      	uxth	r1, r3
 80072fc:	183b      	adds	r3, r7, r0
 80072fe:	183a      	adds	r2, r7, r0
 8007300:	8812      	ldrh	r2, [r2, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	183a      	adds	r2, r7, r0
 800730c:	8812      	ldrh	r2, [r2, #0]
 800730e:	60da      	str	r2, [r3, #12]
 8007310:	e060      	b.n	80073d4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8007312:	231e      	movs	r3, #30
 8007314:	18fb      	adds	r3, r7, r3
 8007316:	2201      	movs	r2, #1
 8007318:	701a      	strb	r2, [r3, #0]
 800731a:	e05b      	b.n	80073d4 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800731c:	231f      	movs	r3, #31
 800731e:	18fb      	adds	r3, r7, r3
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b08      	cmp	r3, #8
 8007324:	d01f      	beq.n	8007366 <UART_SetConfig+0x242>
 8007326:	dc22      	bgt.n	800736e <UART_SetConfig+0x24a>
 8007328:	2b04      	cmp	r3, #4
 800732a:	d017      	beq.n	800735c <UART_SetConfig+0x238>
 800732c:	dc1f      	bgt.n	800736e <UART_SetConfig+0x24a>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <UART_SetConfig+0x214>
 8007332:	2b02      	cmp	r3, #2
 8007334:	d005      	beq.n	8007342 <UART_SetConfig+0x21e>
 8007336:	e01a      	b.n	800736e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007338:	f7fe feca 	bl	80060d0 <HAL_RCC_GetPCLK1Freq>
 800733c:	0003      	movs	r3, r0
 800733e:	61bb      	str	r3, [r7, #24]
        break;
 8007340:	e01c      	b.n	800737c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8007342:	4b33      	ldr	r3, [pc, #204]	@ (8007410 <UART_SetConfig+0x2ec>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	095b      	lsrs	r3, r3, #5
 8007348:	2207      	movs	r2, #7
 800734a:	4013      	ands	r3, r2
 800734c:	3301      	adds	r3, #1
 800734e:	0019      	movs	r1, r3
 8007350:	4831      	ldr	r0, [pc, #196]	@ (8007418 <UART_SetConfig+0x2f4>)
 8007352:	f7f8 feed 	bl	8000130 <__udivsi3>
 8007356:	0003      	movs	r3, r0
 8007358:	61bb      	str	r3, [r7, #24]
        break;
 800735a:	e00f      	b.n	800737c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800735c:	f7fe fe42 	bl	8005fe4 <HAL_RCC_GetSysClockFreq>
 8007360:	0003      	movs	r3, r0
 8007362:	61bb      	str	r3, [r7, #24]
        break;
 8007364:	e00a      	b.n	800737c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007366:	2380      	movs	r3, #128	@ 0x80
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	61bb      	str	r3, [r7, #24]
        break;
 800736c:	e006      	b.n	800737c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007372:	231e      	movs	r3, #30
 8007374:	18fb      	adds	r3, r7, r3
 8007376:	2201      	movs	r2, #1
 8007378:	701a      	strb	r2, [r3, #0]
        break;
 800737a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d028      	beq.n	80073d4 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007386:	4b25      	ldr	r3, [pc, #148]	@ (800741c <UART_SetConfig+0x2f8>)
 8007388:	0052      	lsls	r2, r2, #1
 800738a:	5ad3      	ldrh	r3, [r2, r3]
 800738c:	0019      	movs	r1, r3
 800738e:	69b8      	ldr	r0, [r7, #24]
 8007390:	f7f8 fece 	bl	8000130 <__udivsi3>
 8007394:	0003      	movs	r3, r0
 8007396:	001a      	movs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	085b      	lsrs	r3, r3, #1
 800739e:	18d2      	adds	r2, r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	0019      	movs	r1, r3
 80073a6:	0010      	movs	r0, r2
 80073a8:	f7f8 fec2 	bl	8000130 <__udivsi3>
 80073ac:	0003      	movs	r3, r0
 80073ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	2b0f      	cmp	r3, #15
 80073b4:	d90a      	bls.n	80073cc <UART_SetConfig+0x2a8>
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	2380      	movs	r3, #128	@ 0x80
 80073ba:	025b      	lsls	r3, r3, #9
 80073bc:	429a      	cmp	r2, r3
 80073be:	d205      	bcs.n	80073cc <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	60da      	str	r2, [r3, #12]
 80073ca:	e003      	b.n	80073d4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80073cc:	231e      	movs	r3, #30
 80073ce:	18fb      	adds	r3, r7, r3
 80073d0:	2201      	movs	r2, #1
 80073d2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	226a      	movs	r2, #106	@ 0x6a
 80073d8:	2101      	movs	r1, #1
 80073da:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2268      	movs	r2, #104	@ 0x68
 80073e0:	2101      	movs	r1, #1
 80073e2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80073f0:	231e      	movs	r3, #30
 80073f2:	18fb      	adds	r3, r7, r3
 80073f4:	781b      	ldrb	r3, [r3, #0]
}
 80073f6:	0018      	movs	r0, r3
 80073f8:	46bd      	mov	sp, r7
 80073fa:	b008      	add	sp, #32
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	46c0      	nop			@ (mov r8, r8)
 8007400:	cfff69f3 	.word	0xcfff69f3
 8007404:	ffffcfff 	.word	0xffffcfff
 8007408:	11fff4ff 	.word	0x11fff4ff
 800740c:	40013800 	.word	0x40013800
 8007410:	40021000 	.word	0x40021000
 8007414:	40004400 	.word	0x40004400
 8007418:	02dc6c00 	.word	0x02dc6c00
 800741c:	08008cf0 	.word	0x08008cf0

08007420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800742c:	2208      	movs	r2, #8
 800742e:	4013      	ands	r3, r2
 8007430:	d00b      	beq.n	800744a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	4a4a      	ldr	r2, [pc, #296]	@ (8007564 <UART_AdvFeatureConfig+0x144>)
 800743a:	4013      	ands	r3, r2
 800743c:	0019      	movs	r1, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800744e:	2201      	movs	r2, #1
 8007450:	4013      	ands	r3, r2
 8007452:	d00b      	beq.n	800746c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	4a43      	ldr	r2, [pc, #268]	@ (8007568 <UART_AdvFeatureConfig+0x148>)
 800745c:	4013      	ands	r3, r2
 800745e:	0019      	movs	r1, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007470:	2202      	movs	r2, #2
 8007472:	4013      	ands	r3, r2
 8007474:	d00b      	beq.n	800748e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	4a3b      	ldr	r2, [pc, #236]	@ (800756c <UART_AdvFeatureConfig+0x14c>)
 800747e:	4013      	ands	r3, r2
 8007480:	0019      	movs	r1, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007492:	2204      	movs	r2, #4
 8007494:	4013      	ands	r3, r2
 8007496:	d00b      	beq.n	80074b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	4a34      	ldr	r2, [pc, #208]	@ (8007570 <UART_AdvFeatureConfig+0x150>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	0019      	movs	r1, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b4:	2210      	movs	r2, #16
 80074b6:	4013      	ands	r3, r2
 80074b8:	d00b      	beq.n	80074d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	4a2c      	ldr	r2, [pc, #176]	@ (8007574 <UART_AdvFeatureConfig+0x154>)
 80074c2:	4013      	ands	r3, r2
 80074c4:	0019      	movs	r1, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d6:	2220      	movs	r2, #32
 80074d8:	4013      	ands	r3, r2
 80074da:	d00b      	beq.n	80074f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	4a25      	ldr	r2, [pc, #148]	@ (8007578 <UART_AdvFeatureConfig+0x158>)
 80074e4:	4013      	ands	r3, r2
 80074e6:	0019      	movs	r1, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f8:	2240      	movs	r2, #64	@ 0x40
 80074fa:	4013      	ands	r3, r2
 80074fc:	d01d      	beq.n	800753a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	4a1d      	ldr	r2, [pc, #116]	@ (800757c <UART_AdvFeatureConfig+0x15c>)
 8007506:	4013      	ands	r3, r2
 8007508:	0019      	movs	r1, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800751a:	2380      	movs	r3, #128	@ 0x80
 800751c:	035b      	lsls	r3, r3, #13
 800751e:	429a      	cmp	r2, r3
 8007520:	d10b      	bne.n	800753a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	4a15      	ldr	r2, [pc, #84]	@ (8007580 <UART_AdvFeatureConfig+0x160>)
 800752a:	4013      	ands	r3, r2
 800752c:	0019      	movs	r1, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753e:	2280      	movs	r2, #128	@ 0x80
 8007540:	4013      	ands	r3, r2
 8007542:	d00b      	beq.n	800755c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	4a0e      	ldr	r2, [pc, #56]	@ (8007584 <UART_AdvFeatureConfig+0x164>)
 800754c:	4013      	ands	r3, r2
 800754e:	0019      	movs	r1, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	605a      	str	r2, [r3, #4]
  }
}
 800755c:	46c0      	nop			@ (mov r8, r8)
 800755e:	46bd      	mov	sp, r7
 8007560:	b002      	add	sp, #8
 8007562:	bd80      	pop	{r7, pc}
 8007564:	ffff7fff 	.word	0xffff7fff
 8007568:	fffdffff 	.word	0xfffdffff
 800756c:	fffeffff 	.word	0xfffeffff
 8007570:	fffbffff 	.word	0xfffbffff
 8007574:	ffffefff 	.word	0xffffefff
 8007578:	ffffdfff 	.word	0xffffdfff
 800757c:	ffefffff 	.word	0xffefffff
 8007580:	ff9fffff 	.word	0xff9fffff
 8007584:	fff7ffff 	.word	0xfff7ffff

08007588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b092      	sub	sp, #72	@ 0x48
 800758c:	af02      	add	r7, sp, #8
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2290      	movs	r2, #144	@ 0x90
 8007594:	2100      	movs	r1, #0
 8007596:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007598:	f7fa fc16 	bl	8001dc8 <HAL_GetTick>
 800759c:	0003      	movs	r3, r0
 800759e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2208      	movs	r2, #8
 80075a8:	4013      	ands	r3, r2
 80075aa:	2b08      	cmp	r3, #8
 80075ac:	d12d      	bne.n	800760a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075b0:	2280      	movs	r2, #128	@ 0x80
 80075b2:	0391      	lsls	r1, r2, #14
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4a47      	ldr	r2, [pc, #284]	@ (80076d4 <UART_CheckIdleState+0x14c>)
 80075b8:	9200      	str	r2, [sp, #0]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f000 f88e 	bl	80076dc <UART_WaitOnFlagUntilTimeout>
 80075c0:	1e03      	subs	r3, r0, #0
 80075c2:	d022      	beq.n	800760a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80075c4:	f3ef 8310 	mrs	r3, PRIMASK
 80075c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80075cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075ce:	2301      	movs	r3, #1
 80075d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d4:	f383 8810 	msr	PRIMASK, r3
}
 80075d8:	46c0      	nop			@ (mov r8, r8)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2180      	movs	r1, #128	@ 0x80
 80075e6:	438a      	bics	r2, r1
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f0:	f383 8810 	msr	PRIMASK, r3
}
 80075f4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2288      	movs	r2, #136	@ 0x88
 80075fa:	2120      	movs	r1, #32
 80075fc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2284      	movs	r2, #132	@ 0x84
 8007602:	2100      	movs	r1, #0
 8007604:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e060      	b.n	80076cc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2204      	movs	r2, #4
 8007612:	4013      	ands	r3, r2
 8007614:	2b04      	cmp	r3, #4
 8007616:	d146      	bne.n	80076a6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800761a:	2280      	movs	r2, #128	@ 0x80
 800761c:	03d1      	lsls	r1, r2, #15
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	4a2c      	ldr	r2, [pc, #176]	@ (80076d4 <UART_CheckIdleState+0x14c>)
 8007622:	9200      	str	r2, [sp, #0]
 8007624:	2200      	movs	r2, #0
 8007626:	f000 f859 	bl	80076dc <UART_WaitOnFlagUntilTimeout>
 800762a:	1e03      	subs	r3, r0, #0
 800762c:	d03b      	beq.n	80076a6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800762e:	f3ef 8310 	mrs	r3, PRIMASK
 8007632:	60fb      	str	r3, [r7, #12]
  return(result);
 8007634:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007636:	637b      	str	r3, [r7, #52]	@ 0x34
 8007638:	2301      	movs	r3, #1
 800763a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f383 8810 	msr	PRIMASK, r3
}
 8007642:	46c0      	nop			@ (mov r8, r8)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4922      	ldr	r1, [pc, #136]	@ (80076d8 <UART_CheckIdleState+0x150>)
 8007650:	400a      	ands	r2, r1
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007656:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	f383 8810 	msr	PRIMASK, r3
}
 800765e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007660:	f3ef 8310 	mrs	r3, PRIMASK
 8007664:	61bb      	str	r3, [r7, #24]
  return(result);
 8007666:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007668:	633b      	str	r3, [r7, #48]	@ 0x30
 800766a:	2301      	movs	r3, #1
 800766c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	f383 8810 	msr	PRIMASK, r3
}
 8007674:	46c0      	nop			@ (mov r8, r8)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2101      	movs	r1, #1
 8007682:	438a      	bics	r2, r1
 8007684:	609a      	str	r2, [r3, #8]
 8007686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007688:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	f383 8810 	msr	PRIMASK, r3
}
 8007690:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	228c      	movs	r2, #140	@ 0x8c
 8007696:	2120      	movs	r1, #32
 8007698:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2284      	movs	r2, #132	@ 0x84
 800769e:	2100      	movs	r1, #0
 80076a0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e012      	b.n	80076cc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2288      	movs	r2, #136	@ 0x88
 80076aa:	2120      	movs	r1, #32
 80076ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	228c      	movs	r2, #140	@ 0x8c
 80076b2:	2120      	movs	r1, #32
 80076b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2284      	movs	r2, #132	@ 0x84
 80076c6:	2100      	movs	r1, #0
 80076c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	0018      	movs	r0, r3
 80076ce:	46bd      	mov	sp, r7
 80076d0:	b010      	add	sp, #64	@ 0x40
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	01ffffff 	.word	0x01ffffff
 80076d8:	fffffedf 	.word	0xfffffedf

080076dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	603b      	str	r3, [r7, #0]
 80076e8:	1dfb      	adds	r3, r7, #7
 80076ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ec:	e051      	b.n	8007792 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	3301      	adds	r3, #1
 80076f2:	d04e      	beq.n	8007792 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076f4:	f7fa fb68 	bl	8001dc8 <HAL_GetTick>
 80076f8:	0002      	movs	r2, r0
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	429a      	cmp	r2, r3
 8007702:	d302      	bcc.n	800770a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e051      	b.n	80077b2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2204      	movs	r2, #4
 8007716:	4013      	ands	r3, r2
 8007718:	d03b      	beq.n	8007792 <UART_WaitOnFlagUntilTimeout+0xb6>
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2b80      	cmp	r3, #128	@ 0x80
 800771e:	d038      	beq.n	8007792 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2b40      	cmp	r3, #64	@ 0x40
 8007724:	d035      	beq.n	8007792 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	69db      	ldr	r3, [r3, #28]
 800772c:	2208      	movs	r2, #8
 800772e:	4013      	ands	r3, r2
 8007730:	2b08      	cmp	r3, #8
 8007732:	d111      	bne.n	8007758 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2208      	movs	r2, #8
 800773a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	0018      	movs	r0, r3
 8007740:	f000 f83c 	bl	80077bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2290      	movs	r2, #144	@ 0x90
 8007748:	2108      	movs	r1, #8
 800774a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2284      	movs	r2, #132	@ 0x84
 8007750:	2100      	movs	r1, #0
 8007752:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e02c      	b.n	80077b2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	69da      	ldr	r2, [r3, #28]
 800775e:	2380      	movs	r3, #128	@ 0x80
 8007760:	011b      	lsls	r3, r3, #4
 8007762:	401a      	ands	r2, r3
 8007764:	2380      	movs	r3, #128	@ 0x80
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	429a      	cmp	r2, r3
 800776a:	d112      	bne.n	8007792 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2280      	movs	r2, #128	@ 0x80
 8007772:	0112      	lsls	r2, r2, #4
 8007774:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	0018      	movs	r0, r3
 800777a:	f000 f81f 	bl	80077bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2290      	movs	r2, #144	@ 0x90
 8007782:	2120      	movs	r1, #32
 8007784:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2284      	movs	r2, #132	@ 0x84
 800778a:	2100      	movs	r1, #0
 800778c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e00f      	b.n	80077b2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	4013      	ands	r3, r2
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	425a      	negs	r2, r3
 80077a2:	4153      	adcs	r3, r2
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	001a      	movs	r2, r3
 80077a8:	1dfb      	adds	r3, r7, #7
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d09e      	beq.n	80076ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	0018      	movs	r0, r3
 80077b4:	46bd      	mov	sp, r7
 80077b6:	b004      	add	sp, #16
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b08e      	sub	sp, #56	@ 0x38
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80077c4:	f3ef 8310 	mrs	r3, PRIMASK
 80077c8:	617b      	str	r3, [r7, #20]
  return(result);
 80077ca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ce:	2301      	movs	r3, #1
 80077d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	f383 8810 	msr	PRIMASK, r3
}
 80077d8:	46c0      	nop			@ (mov r8, r8)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4926      	ldr	r1, [pc, #152]	@ (8007880 <UART_EndRxTransfer+0xc4>)
 80077e6:	400a      	ands	r2, r1
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	f383 8810 	msr	PRIMASK, r3
}
 80077f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80077f6:	f3ef 8310 	mrs	r3, PRIMASK
 80077fa:	623b      	str	r3, [r7, #32]
  return(result);
 80077fc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007800:	2301      	movs	r3, #1
 8007802:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007806:	f383 8810 	msr	PRIMASK, r3
}
 800780a:	46c0      	nop			@ (mov r8, r8)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	491b      	ldr	r1, [pc, #108]	@ (8007884 <UART_EndRxTransfer+0xc8>)
 8007818:	400a      	ands	r2, r1
 800781a:	609a      	str	r2, [r3, #8]
 800781c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007822:	f383 8810 	msr	PRIMASK, r3
}
 8007826:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800782c:	2b01      	cmp	r3, #1
 800782e:	d118      	bne.n	8007862 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007830:	f3ef 8310 	mrs	r3, PRIMASK
 8007834:	60bb      	str	r3, [r7, #8]
  return(result);
 8007836:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800783a:	2301      	movs	r3, #1
 800783c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f383 8810 	msr	PRIMASK, r3
}
 8007844:	46c0      	nop			@ (mov r8, r8)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2110      	movs	r1, #16
 8007852:	438a      	bics	r2, r1
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007858:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f383 8810 	msr	PRIMASK, r3
}
 8007860:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	228c      	movs	r2, #140	@ 0x8c
 8007866:	2120      	movs	r1, #32
 8007868:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007876:	46c0      	nop			@ (mov r8, r8)
 8007878:	46bd      	mov	sp, r7
 800787a:	b00e      	add	sp, #56	@ 0x38
 800787c:	bd80      	pop	{r7, pc}
 800787e:	46c0      	nop			@ (mov r8, r8)
 8007880:	fffffedf 	.word	0xfffffedf
 8007884:	effffffe 	.word	0xeffffffe

08007888 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2284      	movs	r2, #132	@ 0x84
 8007894:	5c9b      	ldrb	r3, [r3, r2]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <HAL_UARTEx_DisableFifoMode+0x16>
 800789a:	2302      	movs	r3, #2
 800789c:	e027      	b.n	80078ee <HAL_UARTEx_DisableFifoMode+0x66>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2284      	movs	r2, #132	@ 0x84
 80078a2:	2101      	movs	r1, #1
 80078a4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2288      	movs	r2, #136	@ 0x88
 80078aa:	2124      	movs	r1, #36	@ 0x24
 80078ac:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2101      	movs	r1, #1
 80078c2:	438a      	bics	r2, r1
 80078c4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4a0b      	ldr	r2, [pc, #44]	@ (80078f8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80078ca:	4013      	ands	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2288      	movs	r2, #136	@ 0x88
 80078e0:	2120      	movs	r1, #32
 80078e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2284      	movs	r2, #132	@ 0x84
 80078e8:	2100      	movs	r1, #0
 80078ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	0018      	movs	r0, r3
 80078f0:	46bd      	mov	sp, r7
 80078f2:	b004      	add	sp, #16
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	46c0      	nop			@ (mov r8, r8)
 80078f8:	dfffffff 	.word	0xdfffffff

080078fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2284      	movs	r2, #132	@ 0x84
 800790a:	5c9b      	ldrb	r3, [r3, r2]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d101      	bne.n	8007914 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007910:	2302      	movs	r3, #2
 8007912:	e02e      	b.n	8007972 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2284      	movs	r2, #132	@ 0x84
 8007918:	2101      	movs	r1, #1
 800791a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2288      	movs	r2, #136	@ 0x88
 8007920:	2124      	movs	r1, #36	@ 0x24
 8007922:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2101      	movs	r1, #1
 8007938:	438a      	bics	r2, r1
 800793a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	00db      	lsls	r3, r3, #3
 8007944:	08d9      	lsrs	r1, r3, #3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	0018      	movs	r0, r3
 8007954:	f000 f854 	bl	8007a00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2288      	movs	r2, #136	@ 0x88
 8007964:	2120      	movs	r1, #32
 8007966:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2284      	movs	r2, #132	@ 0x84
 800796c:	2100      	movs	r1, #0
 800796e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	0018      	movs	r0, r3
 8007974:	46bd      	mov	sp, r7
 8007976:	b004      	add	sp, #16
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2284      	movs	r2, #132	@ 0x84
 800798a:	5c9b      	ldrb	r3, [r3, r2]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007990:	2302      	movs	r3, #2
 8007992:	e02f      	b.n	80079f4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2284      	movs	r2, #132	@ 0x84
 8007998:	2101      	movs	r1, #1
 800799a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2288      	movs	r2, #136	@ 0x88
 80079a0:	2124      	movs	r1, #36	@ 0x24
 80079a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2101      	movs	r1, #1
 80079b8:	438a      	bics	r2, r1
 80079ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	4a0e      	ldr	r2, [pc, #56]	@ (80079fc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80079c4:	4013      	ands	r3, r2
 80079c6:	0019      	movs	r1, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	0018      	movs	r0, r3
 80079d6:	f000 f813 	bl	8007a00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2288      	movs	r2, #136	@ 0x88
 80079e6:	2120      	movs	r1, #32
 80079e8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2284      	movs	r2, #132	@ 0x84
 80079ee:	2100      	movs	r1, #0
 80079f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	0018      	movs	r0, r3
 80079f6:	46bd      	mov	sp, r7
 80079f8:	b004      	add	sp, #16
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	f1ffffff 	.word	0xf1ffffff

08007a00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d108      	bne.n	8007a22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	226a      	movs	r2, #106	@ 0x6a
 8007a14:	2101      	movs	r1, #1
 8007a16:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2268      	movs	r2, #104	@ 0x68
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a20:	e043      	b.n	8007aaa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a22:	260f      	movs	r6, #15
 8007a24:	19bb      	adds	r3, r7, r6
 8007a26:	2208      	movs	r2, #8
 8007a28:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a2a:	200e      	movs	r0, #14
 8007a2c:	183b      	adds	r3, r7, r0
 8007a2e:	2208      	movs	r2, #8
 8007a30:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	0e5b      	lsrs	r3, r3, #25
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	240d      	movs	r4, #13
 8007a3e:	193b      	adds	r3, r7, r4
 8007a40:	2107      	movs	r1, #7
 8007a42:	400a      	ands	r2, r1
 8007a44:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	0f5b      	lsrs	r3, r3, #29
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	250c      	movs	r5, #12
 8007a52:	197b      	adds	r3, r7, r5
 8007a54:	2107      	movs	r1, #7
 8007a56:	400a      	ands	r2, r1
 8007a58:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a5a:	183b      	adds	r3, r7, r0
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	197a      	adds	r2, r7, r5
 8007a60:	7812      	ldrb	r2, [r2, #0]
 8007a62:	4914      	ldr	r1, [pc, #80]	@ (8007ab4 <UARTEx_SetNbDataToProcess+0xb4>)
 8007a64:	5c8a      	ldrb	r2, [r1, r2]
 8007a66:	435a      	muls	r2, r3
 8007a68:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a6a:	197b      	adds	r3, r7, r5
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	4a12      	ldr	r2, [pc, #72]	@ (8007ab8 <UARTEx_SetNbDataToProcess+0xb8>)
 8007a70:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a72:	0019      	movs	r1, r3
 8007a74:	f7f8 fbe6 	bl	8000244 <__divsi3>
 8007a78:	0003      	movs	r3, r0
 8007a7a:	b299      	uxth	r1, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	226a      	movs	r2, #106	@ 0x6a
 8007a80:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a82:	19bb      	adds	r3, r7, r6
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	193a      	adds	r2, r7, r4
 8007a88:	7812      	ldrb	r2, [r2, #0]
 8007a8a:	490a      	ldr	r1, [pc, #40]	@ (8007ab4 <UARTEx_SetNbDataToProcess+0xb4>)
 8007a8c:	5c8a      	ldrb	r2, [r1, r2]
 8007a8e:	435a      	muls	r2, r3
 8007a90:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a92:	193b      	adds	r3, r7, r4
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	4a08      	ldr	r2, [pc, #32]	@ (8007ab8 <UARTEx_SetNbDataToProcess+0xb8>)
 8007a98:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a9a:	0019      	movs	r1, r3
 8007a9c:	f7f8 fbd2 	bl	8000244 <__divsi3>
 8007aa0:	0003      	movs	r3, r0
 8007aa2:	b299      	uxth	r1, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2268      	movs	r2, #104	@ 0x68
 8007aa8:	5299      	strh	r1, [r3, r2]
}
 8007aaa:	46c0      	nop			@ (mov r8, r8)
 8007aac:	46bd      	mov	sp, r7
 8007aae:	b005      	add	sp, #20
 8007ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ab2:	46c0      	nop			@ (mov r8, r8)
 8007ab4:	08008d08 	.word	0x08008d08
 8007ab8:	08008d10 	.word	0x08008d10

08007abc <sniprintf>:
 8007abc:	b40c      	push	{r2, r3}
 8007abe:	b530      	push	{r4, r5, lr}
 8007ac0:	4b17      	ldr	r3, [pc, #92]	@ (8007b20 <sniprintf+0x64>)
 8007ac2:	000c      	movs	r4, r1
 8007ac4:	681d      	ldr	r5, [r3, #0]
 8007ac6:	b09d      	sub	sp, #116	@ 0x74
 8007ac8:	2900      	cmp	r1, #0
 8007aca:	da08      	bge.n	8007ade <sniprintf+0x22>
 8007acc:	238b      	movs	r3, #139	@ 0x8b
 8007ace:	2001      	movs	r0, #1
 8007ad0:	602b      	str	r3, [r5, #0]
 8007ad2:	4240      	negs	r0, r0
 8007ad4:	b01d      	add	sp, #116	@ 0x74
 8007ad6:	bc30      	pop	{r4, r5}
 8007ad8:	bc08      	pop	{r3}
 8007ada:	b002      	add	sp, #8
 8007adc:	4718      	bx	r3
 8007ade:	2382      	movs	r3, #130	@ 0x82
 8007ae0:	466a      	mov	r2, sp
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	8293      	strh	r3, [r2, #20]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	9002      	str	r0, [sp, #8]
 8007aea:	9006      	str	r0, [sp, #24]
 8007aec:	4299      	cmp	r1, r3
 8007aee:	d000      	beq.n	8007af2 <sniprintf+0x36>
 8007af0:	1e4b      	subs	r3, r1, #1
 8007af2:	9304      	str	r3, [sp, #16]
 8007af4:	9307      	str	r3, [sp, #28]
 8007af6:	2301      	movs	r3, #1
 8007af8:	466a      	mov	r2, sp
 8007afa:	425b      	negs	r3, r3
 8007afc:	82d3      	strh	r3, [r2, #22]
 8007afe:	0028      	movs	r0, r5
 8007b00:	ab21      	add	r3, sp, #132	@ 0x84
 8007b02:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007b04:	a902      	add	r1, sp, #8
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	f000 f9a6 	bl	8007e58 <_svfiprintf_r>
 8007b0c:	1c43      	adds	r3, r0, #1
 8007b0e:	da01      	bge.n	8007b14 <sniprintf+0x58>
 8007b10:	238b      	movs	r3, #139	@ 0x8b
 8007b12:	602b      	str	r3, [r5, #0]
 8007b14:	2c00      	cmp	r4, #0
 8007b16:	d0dd      	beq.n	8007ad4 <sniprintf+0x18>
 8007b18:	2200      	movs	r2, #0
 8007b1a:	9b02      	ldr	r3, [sp, #8]
 8007b1c:	701a      	strb	r2, [r3, #0]
 8007b1e:	e7d9      	b.n	8007ad4 <sniprintf+0x18>
 8007b20:	2000003c 	.word	0x2000003c

08007b24 <memset>:
 8007b24:	0003      	movs	r3, r0
 8007b26:	1882      	adds	r2, r0, r2
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d100      	bne.n	8007b2e <memset+0xa>
 8007b2c:	4770      	bx	lr
 8007b2e:	7019      	strb	r1, [r3, #0]
 8007b30:	3301      	adds	r3, #1
 8007b32:	e7f9      	b.n	8007b28 <memset+0x4>

08007b34 <__errno>:
 8007b34:	4b01      	ldr	r3, [pc, #4]	@ (8007b3c <__errno+0x8>)
 8007b36:	6818      	ldr	r0, [r3, #0]
 8007b38:	4770      	bx	lr
 8007b3a:	46c0      	nop			@ (mov r8, r8)
 8007b3c:	2000003c 	.word	0x2000003c

08007b40 <__libc_init_array>:
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	2600      	movs	r6, #0
 8007b44:	4c0c      	ldr	r4, [pc, #48]	@ (8007b78 <__libc_init_array+0x38>)
 8007b46:	4d0d      	ldr	r5, [pc, #52]	@ (8007b7c <__libc_init_array+0x3c>)
 8007b48:	1b64      	subs	r4, r4, r5
 8007b4a:	10a4      	asrs	r4, r4, #2
 8007b4c:	42a6      	cmp	r6, r4
 8007b4e:	d109      	bne.n	8007b64 <__libc_init_array+0x24>
 8007b50:	2600      	movs	r6, #0
 8007b52:	f000 fc65 	bl	8008420 <_init>
 8007b56:	4c0a      	ldr	r4, [pc, #40]	@ (8007b80 <__libc_init_array+0x40>)
 8007b58:	4d0a      	ldr	r5, [pc, #40]	@ (8007b84 <__libc_init_array+0x44>)
 8007b5a:	1b64      	subs	r4, r4, r5
 8007b5c:	10a4      	asrs	r4, r4, #2
 8007b5e:	42a6      	cmp	r6, r4
 8007b60:	d105      	bne.n	8007b6e <__libc_init_array+0x2e>
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	00b3      	lsls	r3, r6, #2
 8007b66:	58eb      	ldr	r3, [r5, r3]
 8007b68:	4798      	blx	r3
 8007b6a:	3601      	adds	r6, #1
 8007b6c:	e7ee      	b.n	8007b4c <__libc_init_array+0xc>
 8007b6e:	00b3      	lsls	r3, r6, #2
 8007b70:	58eb      	ldr	r3, [r5, r3]
 8007b72:	4798      	blx	r3
 8007b74:	3601      	adds	r6, #1
 8007b76:	e7f2      	b.n	8007b5e <__libc_init_array+0x1e>
 8007b78:	08008d4c 	.word	0x08008d4c
 8007b7c:	08008d4c 	.word	0x08008d4c
 8007b80:	08008d50 	.word	0x08008d50
 8007b84:	08008d4c 	.word	0x08008d4c

08007b88 <__retarget_lock_acquire_recursive>:
 8007b88:	4770      	bx	lr

08007b8a <__retarget_lock_release_recursive>:
 8007b8a:	4770      	bx	lr

08007b8c <memcpy>:
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	b510      	push	{r4, lr}
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d100      	bne.n	8007b96 <memcpy+0xa>
 8007b94:	bd10      	pop	{r4, pc}
 8007b96:	5ccc      	ldrb	r4, [r1, r3]
 8007b98:	54c4      	strb	r4, [r0, r3]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	e7f8      	b.n	8007b90 <memcpy+0x4>
	...

08007ba0 <_free_r>:
 8007ba0:	b570      	push	{r4, r5, r6, lr}
 8007ba2:	0005      	movs	r5, r0
 8007ba4:	1e0c      	subs	r4, r1, #0
 8007ba6:	d010      	beq.n	8007bca <_free_r+0x2a>
 8007ba8:	3c04      	subs	r4, #4
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	da00      	bge.n	8007bb2 <_free_r+0x12>
 8007bb0:	18e4      	adds	r4, r4, r3
 8007bb2:	0028      	movs	r0, r5
 8007bb4:	f000 f8e0 	bl	8007d78 <__malloc_lock>
 8007bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8007c30 <_free_r+0x90>)
 8007bba:	6813      	ldr	r3, [r2, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d105      	bne.n	8007bcc <_free_r+0x2c>
 8007bc0:	6063      	str	r3, [r4, #4]
 8007bc2:	6014      	str	r4, [r2, #0]
 8007bc4:	0028      	movs	r0, r5
 8007bc6:	f000 f8df 	bl	8007d88 <__malloc_unlock>
 8007bca:	bd70      	pop	{r4, r5, r6, pc}
 8007bcc:	42a3      	cmp	r3, r4
 8007bce:	d908      	bls.n	8007be2 <_free_r+0x42>
 8007bd0:	6820      	ldr	r0, [r4, #0]
 8007bd2:	1821      	adds	r1, r4, r0
 8007bd4:	428b      	cmp	r3, r1
 8007bd6:	d1f3      	bne.n	8007bc0 <_free_r+0x20>
 8007bd8:	6819      	ldr	r1, [r3, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	1809      	adds	r1, r1, r0
 8007bde:	6021      	str	r1, [r4, #0]
 8007be0:	e7ee      	b.n	8007bc0 <_free_r+0x20>
 8007be2:	001a      	movs	r2, r3
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <_free_r+0x4e>
 8007bea:	42a3      	cmp	r3, r4
 8007bec:	d9f9      	bls.n	8007be2 <_free_r+0x42>
 8007bee:	6811      	ldr	r1, [r2, #0]
 8007bf0:	1850      	adds	r0, r2, r1
 8007bf2:	42a0      	cmp	r0, r4
 8007bf4:	d10b      	bne.n	8007c0e <_free_r+0x6e>
 8007bf6:	6820      	ldr	r0, [r4, #0]
 8007bf8:	1809      	adds	r1, r1, r0
 8007bfa:	1850      	adds	r0, r2, r1
 8007bfc:	6011      	str	r1, [r2, #0]
 8007bfe:	4283      	cmp	r3, r0
 8007c00:	d1e0      	bne.n	8007bc4 <_free_r+0x24>
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	1841      	adds	r1, r0, r1
 8007c08:	6011      	str	r1, [r2, #0]
 8007c0a:	6053      	str	r3, [r2, #4]
 8007c0c:	e7da      	b.n	8007bc4 <_free_r+0x24>
 8007c0e:	42a0      	cmp	r0, r4
 8007c10:	d902      	bls.n	8007c18 <_free_r+0x78>
 8007c12:	230c      	movs	r3, #12
 8007c14:	602b      	str	r3, [r5, #0]
 8007c16:	e7d5      	b.n	8007bc4 <_free_r+0x24>
 8007c18:	6820      	ldr	r0, [r4, #0]
 8007c1a:	1821      	adds	r1, r4, r0
 8007c1c:	428b      	cmp	r3, r1
 8007c1e:	d103      	bne.n	8007c28 <_free_r+0x88>
 8007c20:	6819      	ldr	r1, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	1809      	adds	r1, r1, r0
 8007c26:	6021      	str	r1, [r4, #0]
 8007c28:	6063      	str	r3, [r4, #4]
 8007c2a:	6054      	str	r4, [r2, #4]
 8007c2c:	e7ca      	b.n	8007bc4 <_free_r+0x24>
 8007c2e:	46c0      	nop			@ (mov r8, r8)
 8007c30:	2000087c 	.word	0x2000087c

08007c34 <sbrk_aligned>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	4e0f      	ldr	r6, [pc, #60]	@ (8007c74 <sbrk_aligned+0x40>)
 8007c38:	000d      	movs	r5, r1
 8007c3a:	6831      	ldr	r1, [r6, #0]
 8007c3c:	0004      	movs	r4, r0
 8007c3e:	2900      	cmp	r1, #0
 8007c40:	d102      	bne.n	8007c48 <sbrk_aligned+0x14>
 8007c42:	f000 fb99 	bl	8008378 <_sbrk_r>
 8007c46:	6030      	str	r0, [r6, #0]
 8007c48:	0029      	movs	r1, r5
 8007c4a:	0020      	movs	r0, r4
 8007c4c:	f000 fb94 	bl	8008378 <_sbrk_r>
 8007c50:	1c43      	adds	r3, r0, #1
 8007c52:	d103      	bne.n	8007c5c <sbrk_aligned+0x28>
 8007c54:	2501      	movs	r5, #1
 8007c56:	426d      	negs	r5, r5
 8007c58:	0028      	movs	r0, r5
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	1cc5      	adds	r5, r0, #3
 8007c60:	439d      	bics	r5, r3
 8007c62:	42a8      	cmp	r0, r5
 8007c64:	d0f8      	beq.n	8007c58 <sbrk_aligned+0x24>
 8007c66:	1a29      	subs	r1, r5, r0
 8007c68:	0020      	movs	r0, r4
 8007c6a:	f000 fb85 	bl	8008378 <_sbrk_r>
 8007c6e:	3001      	adds	r0, #1
 8007c70:	d1f2      	bne.n	8007c58 <sbrk_aligned+0x24>
 8007c72:	e7ef      	b.n	8007c54 <sbrk_aligned+0x20>
 8007c74:	20000878 	.word	0x20000878

08007c78 <_malloc_r>:
 8007c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c7a:	2203      	movs	r2, #3
 8007c7c:	1ccb      	adds	r3, r1, #3
 8007c7e:	4393      	bics	r3, r2
 8007c80:	3308      	adds	r3, #8
 8007c82:	0005      	movs	r5, r0
 8007c84:	001f      	movs	r7, r3
 8007c86:	2b0c      	cmp	r3, #12
 8007c88:	d234      	bcs.n	8007cf4 <_malloc_r+0x7c>
 8007c8a:	270c      	movs	r7, #12
 8007c8c:	42b9      	cmp	r1, r7
 8007c8e:	d833      	bhi.n	8007cf8 <_malloc_r+0x80>
 8007c90:	0028      	movs	r0, r5
 8007c92:	f000 f871 	bl	8007d78 <__malloc_lock>
 8007c96:	4e37      	ldr	r6, [pc, #220]	@ (8007d74 <_malloc_r+0xfc>)
 8007c98:	6833      	ldr	r3, [r6, #0]
 8007c9a:	001c      	movs	r4, r3
 8007c9c:	2c00      	cmp	r4, #0
 8007c9e:	d12f      	bne.n	8007d00 <_malloc_r+0x88>
 8007ca0:	0039      	movs	r1, r7
 8007ca2:	0028      	movs	r0, r5
 8007ca4:	f7ff ffc6 	bl	8007c34 <sbrk_aligned>
 8007ca8:	0004      	movs	r4, r0
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	d15f      	bne.n	8007d6e <_malloc_r+0xf6>
 8007cae:	6834      	ldr	r4, [r6, #0]
 8007cb0:	9400      	str	r4, [sp, #0]
 8007cb2:	9b00      	ldr	r3, [sp, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d14a      	bne.n	8007d4e <_malloc_r+0xd6>
 8007cb8:	2c00      	cmp	r4, #0
 8007cba:	d052      	beq.n	8007d62 <_malloc_r+0xea>
 8007cbc:	6823      	ldr	r3, [r4, #0]
 8007cbe:	0028      	movs	r0, r5
 8007cc0:	18e3      	adds	r3, r4, r3
 8007cc2:	9900      	ldr	r1, [sp, #0]
 8007cc4:	9301      	str	r3, [sp, #4]
 8007cc6:	f000 fb57 	bl	8008378 <_sbrk_r>
 8007cca:	9b01      	ldr	r3, [sp, #4]
 8007ccc:	4283      	cmp	r3, r0
 8007cce:	d148      	bne.n	8007d62 <_malloc_r+0xea>
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	0028      	movs	r0, r5
 8007cd4:	1aff      	subs	r7, r7, r3
 8007cd6:	0039      	movs	r1, r7
 8007cd8:	f7ff ffac 	bl	8007c34 <sbrk_aligned>
 8007cdc:	3001      	adds	r0, #1
 8007cde:	d040      	beq.n	8007d62 <_malloc_r+0xea>
 8007ce0:	6823      	ldr	r3, [r4, #0]
 8007ce2:	19db      	adds	r3, r3, r7
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	6833      	ldr	r3, [r6, #0]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	2a00      	cmp	r2, #0
 8007cec:	d133      	bne.n	8007d56 <_malloc_r+0xde>
 8007cee:	9b00      	ldr	r3, [sp, #0]
 8007cf0:	6033      	str	r3, [r6, #0]
 8007cf2:	e019      	b.n	8007d28 <_malloc_r+0xb0>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	dac9      	bge.n	8007c8c <_malloc_r+0x14>
 8007cf8:	230c      	movs	r3, #12
 8007cfa:	602b      	str	r3, [r5, #0]
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d00:	6821      	ldr	r1, [r4, #0]
 8007d02:	1bc9      	subs	r1, r1, r7
 8007d04:	d420      	bmi.n	8007d48 <_malloc_r+0xd0>
 8007d06:	290b      	cmp	r1, #11
 8007d08:	d90a      	bls.n	8007d20 <_malloc_r+0xa8>
 8007d0a:	19e2      	adds	r2, r4, r7
 8007d0c:	6027      	str	r7, [r4, #0]
 8007d0e:	42a3      	cmp	r3, r4
 8007d10:	d104      	bne.n	8007d1c <_malloc_r+0xa4>
 8007d12:	6032      	str	r2, [r6, #0]
 8007d14:	6863      	ldr	r3, [r4, #4]
 8007d16:	6011      	str	r1, [r2, #0]
 8007d18:	6053      	str	r3, [r2, #4]
 8007d1a:	e005      	b.n	8007d28 <_malloc_r+0xb0>
 8007d1c:	605a      	str	r2, [r3, #4]
 8007d1e:	e7f9      	b.n	8007d14 <_malloc_r+0x9c>
 8007d20:	6862      	ldr	r2, [r4, #4]
 8007d22:	42a3      	cmp	r3, r4
 8007d24:	d10e      	bne.n	8007d44 <_malloc_r+0xcc>
 8007d26:	6032      	str	r2, [r6, #0]
 8007d28:	0028      	movs	r0, r5
 8007d2a:	f000 f82d 	bl	8007d88 <__malloc_unlock>
 8007d2e:	0020      	movs	r0, r4
 8007d30:	2207      	movs	r2, #7
 8007d32:	300b      	adds	r0, #11
 8007d34:	1d23      	adds	r3, r4, #4
 8007d36:	4390      	bics	r0, r2
 8007d38:	1ac2      	subs	r2, r0, r3
 8007d3a:	4298      	cmp	r0, r3
 8007d3c:	d0df      	beq.n	8007cfe <_malloc_r+0x86>
 8007d3e:	1a1b      	subs	r3, r3, r0
 8007d40:	50a3      	str	r3, [r4, r2]
 8007d42:	e7dc      	b.n	8007cfe <_malloc_r+0x86>
 8007d44:	605a      	str	r2, [r3, #4]
 8007d46:	e7ef      	b.n	8007d28 <_malloc_r+0xb0>
 8007d48:	0023      	movs	r3, r4
 8007d4a:	6864      	ldr	r4, [r4, #4]
 8007d4c:	e7a6      	b.n	8007c9c <_malloc_r+0x24>
 8007d4e:	9c00      	ldr	r4, [sp, #0]
 8007d50:	6863      	ldr	r3, [r4, #4]
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	e7ad      	b.n	8007cb2 <_malloc_r+0x3a>
 8007d56:	001a      	movs	r2, r3
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	42a3      	cmp	r3, r4
 8007d5c:	d1fb      	bne.n	8007d56 <_malloc_r+0xde>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	e7da      	b.n	8007d18 <_malloc_r+0xa0>
 8007d62:	230c      	movs	r3, #12
 8007d64:	0028      	movs	r0, r5
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	f000 f80e 	bl	8007d88 <__malloc_unlock>
 8007d6c:	e7c6      	b.n	8007cfc <_malloc_r+0x84>
 8007d6e:	6007      	str	r7, [r0, #0]
 8007d70:	e7da      	b.n	8007d28 <_malloc_r+0xb0>
 8007d72:	46c0      	nop			@ (mov r8, r8)
 8007d74:	2000087c 	.word	0x2000087c

08007d78 <__malloc_lock>:
 8007d78:	b510      	push	{r4, lr}
 8007d7a:	4802      	ldr	r0, [pc, #8]	@ (8007d84 <__malloc_lock+0xc>)
 8007d7c:	f7ff ff04 	bl	8007b88 <__retarget_lock_acquire_recursive>
 8007d80:	bd10      	pop	{r4, pc}
 8007d82:	46c0      	nop			@ (mov r8, r8)
 8007d84:	20000874 	.word	0x20000874

08007d88 <__malloc_unlock>:
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	4802      	ldr	r0, [pc, #8]	@ (8007d94 <__malloc_unlock+0xc>)
 8007d8c:	f7ff fefd 	bl	8007b8a <__retarget_lock_release_recursive>
 8007d90:	bd10      	pop	{r4, pc}
 8007d92:	46c0      	nop			@ (mov r8, r8)
 8007d94:	20000874 	.word	0x20000874

08007d98 <__ssputs_r>:
 8007d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d9a:	688e      	ldr	r6, [r1, #8]
 8007d9c:	b085      	sub	sp, #20
 8007d9e:	001f      	movs	r7, r3
 8007da0:	000c      	movs	r4, r1
 8007da2:	680b      	ldr	r3, [r1, #0]
 8007da4:	9002      	str	r0, [sp, #8]
 8007da6:	9203      	str	r2, [sp, #12]
 8007da8:	42be      	cmp	r6, r7
 8007daa:	d830      	bhi.n	8007e0e <__ssputs_r+0x76>
 8007dac:	210c      	movs	r1, #12
 8007dae:	5e62      	ldrsh	r2, [r4, r1]
 8007db0:	2190      	movs	r1, #144	@ 0x90
 8007db2:	00c9      	lsls	r1, r1, #3
 8007db4:	420a      	tst	r2, r1
 8007db6:	d028      	beq.n	8007e0a <__ssputs_r+0x72>
 8007db8:	2003      	movs	r0, #3
 8007dba:	6921      	ldr	r1, [r4, #16]
 8007dbc:	1a5b      	subs	r3, r3, r1
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	6963      	ldr	r3, [r4, #20]
 8007dc2:	4343      	muls	r3, r0
 8007dc4:	9801      	ldr	r0, [sp, #4]
 8007dc6:	0fdd      	lsrs	r5, r3, #31
 8007dc8:	18ed      	adds	r5, r5, r3
 8007dca:	1c7b      	adds	r3, r7, #1
 8007dcc:	181b      	adds	r3, r3, r0
 8007dce:	106d      	asrs	r5, r5, #1
 8007dd0:	42ab      	cmp	r3, r5
 8007dd2:	d900      	bls.n	8007dd6 <__ssputs_r+0x3e>
 8007dd4:	001d      	movs	r5, r3
 8007dd6:	0552      	lsls	r2, r2, #21
 8007dd8:	d528      	bpl.n	8007e2c <__ssputs_r+0x94>
 8007dda:	0029      	movs	r1, r5
 8007ddc:	9802      	ldr	r0, [sp, #8]
 8007dde:	f7ff ff4b 	bl	8007c78 <_malloc_r>
 8007de2:	1e06      	subs	r6, r0, #0
 8007de4:	d02c      	beq.n	8007e40 <__ssputs_r+0xa8>
 8007de6:	9a01      	ldr	r2, [sp, #4]
 8007de8:	6921      	ldr	r1, [r4, #16]
 8007dea:	f7ff fecf 	bl	8007b8c <memcpy>
 8007dee:	89a2      	ldrh	r2, [r4, #12]
 8007df0:	4b18      	ldr	r3, [pc, #96]	@ (8007e54 <__ssputs_r+0xbc>)
 8007df2:	401a      	ands	r2, r3
 8007df4:	2380      	movs	r3, #128	@ 0x80
 8007df6:	4313      	orrs	r3, r2
 8007df8:	81a3      	strh	r3, [r4, #12]
 8007dfa:	9b01      	ldr	r3, [sp, #4]
 8007dfc:	6126      	str	r6, [r4, #16]
 8007dfe:	18f6      	adds	r6, r6, r3
 8007e00:	6026      	str	r6, [r4, #0]
 8007e02:	003e      	movs	r6, r7
 8007e04:	6165      	str	r5, [r4, #20]
 8007e06:	1aed      	subs	r5, r5, r3
 8007e08:	60a5      	str	r5, [r4, #8]
 8007e0a:	42be      	cmp	r6, r7
 8007e0c:	d900      	bls.n	8007e10 <__ssputs_r+0x78>
 8007e0e:	003e      	movs	r6, r7
 8007e10:	0032      	movs	r2, r6
 8007e12:	9903      	ldr	r1, [sp, #12]
 8007e14:	6820      	ldr	r0, [r4, #0]
 8007e16:	f000 fa9b 	bl	8008350 <memmove>
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	68a3      	ldr	r3, [r4, #8]
 8007e1e:	1b9b      	subs	r3, r3, r6
 8007e20:	60a3      	str	r3, [r4, #8]
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	199b      	adds	r3, r3, r6
 8007e26:	6023      	str	r3, [r4, #0]
 8007e28:	b005      	add	sp, #20
 8007e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e2c:	002a      	movs	r2, r5
 8007e2e:	9802      	ldr	r0, [sp, #8]
 8007e30:	f000 fabf 	bl	80083b2 <_realloc_r>
 8007e34:	1e06      	subs	r6, r0, #0
 8007e36:	d1e0      	bne.n	8007dfa <__ssputs_r+0x62>
 8007e38:	6921      	ldr	r1, [r4, #16]
 8007e3a:	9802      	ldr	r0, [sp, #8]
 8007e3c:	f7ff feb0 	bl	8007ba0 <_free_r>
 8007e40:	230c      	movs	r3, #12
 8007e42:	2001      	movs	r0, #1
 8007e44:	9a02      	ldr	r2, [sp, #8]
 8007e46:	4240      	negs	r0, r0
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	89a2      	ldrh	r2, [r4, #12]
 8007e4c:	3334      	adds	r3, #52	@ 0x34
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	81a3      	strh	r3, [r4, #12]
 8007e52:	e7e9      	b.n	8007e28 <__ssputs_r+0x90>
 8007e54:	fffffb7f 	.word	0xfffffb7f

08007e58 <_svfiprintf_r>:
 8007e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e5a:	b0a1      	sub	sp, #132	@ 0x84
 8007e5c:	9003      	str	r0, [sp, #12]
 8007e5e:	001d      	movs	r5, r3
 8007e60:	898b      	ldrh	r3, [r1, #12]
 8007e62:	000f      	movs	r7, r1
 8007e64:	0016      	movs	r6, r2
 8007e66:	061b      	lsls	r3, r3, #24
 8007e68:	d511      	bpl.n	8007e8e <_svfiprintf_r+0x36>
 8007e6a:	690b      	ldr	r3, [r1, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10e      	bne.n	8007e8e <_svfiprintf_r+0x36>
 8007e70:	2140      	movs	r1, #64	@ 0x40
 8007e72:	f7ff ff01 	bl	8007c78 <_malloc_r>
 8007e76:	6038      	str	r0, [r7, #0]
 8007e78:	6138      	str	r0, [r7, #16]
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d105      	bne.n	8007e8a <_svfiprintf_r+0x32>
 8007e7e:	230c      	movs	r3, #12
 8007e80:	9a03      	ldr	r2, [sp, #12]
 8007e82:	6013      	str	r3, [r2, #0]
 8007e84:	2001      	movs	r0, #1
 8007e86:	4240      	negs	r0, r0
 8007e88:	e0cf      	b.n	800802a <_svfiprintf_r+0x1d2>
 8007e8a:	2340      	movs	r3, #64	@ 0x40
 8007e8c:	617b      	str	r3, [r7, #20]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	ac08      	add	r4, sp, #32
 8007e92:	6163      	str	r3, [r4, #20]
 8007e94:	3320      	adds	r3, #32
 8007e96:	7663      	strb	r3, [r4, #25]
 8007e98:	3310      	adds	r3, #16
 8007e9a:	76a3      	strb	r3, [r4, #26]
 8007e9c:	9507      	str	r5, [sp, #28]
 8007e9e:	0035      	movs	r5, r6
 8007ea0:	782b      	ldrb	r3, [r5, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <_svfiprintf_r+0x52>
 8007ea6:	2b25      	cmp	r3, #37	@ 0x25
 8007ea8:	d148      	bne.n	8007f3c <_svfiprintf_r+0xe4>
 8007eaa:	1bab      	subs	r3, r5, r6
 8007eac:	9305      	str	r3, [sp, #20]
 8007eae:	42b5      	cmp	r5, r6
 8007eb0:	d00b      	beq.n	8007eca <_svfiprintf_r+0x72>
 8007eb2:	0032      	movs	r2, r6
 8007eb4:	0039      	movs	r1, r7
 8007eb6:	9803      	ldr	r0, [sp, #12]
 8007eb8:	f7ff ff6e 	bl	8007d98 <__ssputs_r>
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d100      	bne.n	8007ec2 <_svfiprintf_r+0x6a>
 8007ec0:	e0ae      	b.n	8008020 <_svfiprintf_r+0x1c8>
 8007ec2:	6963      	ldr	r3, [r4, #20]
 8007ec4:	9a05      	ldr	r2, [sp, #20]
 8007ec6:	189b      	adds	r3, r3, r2
 8007ec8:	6163      	str	r3, [r4, #20]
 8007eca:	782b      	ldrb	r3, [r5, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d100      	bne.n	8007ed2 <_svfiprintf_r+0x7a>
 8007ed0:	e0a6      	b.n	8008020 <_svfiprintf_r+0x1c8>
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	4252      	negs	r2, r2
 8007ed8:	6062      	str	r2, [r4, #4]
 8007eda:	a904      	add	r1, sp, #16
 8007edc:	3254      	adds	r2, #84	@ 0x54
 8007ede:	1852      	adds	r2, r2, r1
 8007ee0:	1c6e      	adds	r6, r5, #1
 8007ee2:	6023      	str	r3, [r4, #0]
 8007ee4:	60e3      	str	r3, [r4, #12]
 8007ee6:	60a3      	str	r3, [r4, #8]
 8007ee8:	7013      	strb	r3, [r2, #0]
 8007eea:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007eec:	4b54      	ldr	r3, [pc, #336]	@ (8008040 <_svfiprintf_r+0x1e8>)
 8007eee:	2205      	movs	r2, #5
 8007ef0:	0018      	movs	r0, r3
 8007ef2:	7831      	ldrb	r1, [r6, #0]
 8007ef4:	9305      	str	r3, [sp, #20]
 8007ef6:	f000 fa51 	bl	800839c <memchr>
 8007efa:	1c75      	adds	r5, r6, #1
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d11f      	bne.n	8007f40 <_svfiprintf_r+0xe8>
 8007f00:	6822      	ldr	r2, [r4, #0]
 8007f02:	06d3      	lsls	r3, r2, #27
 8007f04:	d504      	bpl.n	8007f10 <_svfiprintf_r+0xb8>
 8007f06:	2353      	movs	r3, #83	@ 0x53
 8007f08:	a904      	add	r1, sp, #16
 8007f0a:	185b      	adds	r3, r3, r1
 8007f0c:	2120      	movs	r1, #32
 8007f0e:	7019      	strb	r1, [r3, #0]
 8007f10:	0713      	lsls	r3, r2, #28
 8007f12:	d504      	bpl.n	8007f1e <_svfiprintf_r+0xc6>
 8007f14:	2353      	movs	r3, #83	@ 0x53
 8007f16:	a904      	add	r1, sp, #16
 8007f18:	185b      	adds	r3, r3, r1
 8007f1a:	212b      	movs	r1, #43	@ 0x2b
 8007f1c:	7019      	strb	r1, [r3, #0]
 8007f1e:	7833      	ldrb	r3, [r6, #0]
 8007f20:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f22:	d016      	beq.n	8007f52 <_svfiprintf_r+0xfa>
 8007f24:	0035      	movs	r5, r6
 8007f26:	2100      	movs	r1, #0
 8007f28:	200a      	movs	r0, #10
 8007f2a:	68e3      	ldr	r3, [r4, #12]
 8007f2c:	782a      	ldrb	r2, [r5, #0]
 8007f2e:	1c6e      	adds	r6, r5, #1
 8007f30:	3a30      	subs	r2, #48	@ 0x30
 8007f32:	2a09      	cmp	r2, #9
 8007f34:	d950      	bls.n	8007fd8 <_svfiprintf_r+0x180>
 8007f36:	2900      	cmp	r1, #0
 8007f38:	d111      	bne.n	8007f5e <_svfiprintf_r+0x106>
 8007f3a:	e017      	b.n	8007f6c <_svfiprintf_r+0x114>
 8007f3c:	3501      	adds	r5, #1
 8007f3e:	e7af      	b.n	8007ea0 <_svfiprintf_r+0x48>
 8007f40:	9b05      	ldr	r3, [sp, #20]
 8007f42:	6822      	ldr	r2, [r4, #0]
 8007f44:	1ac0      	subs	r0, r0, r3
 8007f46:	2301      	movs	r3, #1
 8007f48:	4083      	lsls	r3, r0
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	002e      	movs	r6, r5
 8007f4e:	6023      	str	r3, [r4, #0]
 8007f50:	e7cc      	b.n	8007eec <_svfiprintf_r+0x94>
 8007f52:	9b07      	ldr	r3, [sp, #28]
 8007f54:	1d19      	adds	r1, r3, #4
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	9107      	str	r1, [sp, #28]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	db01      	blt.n	8007f62 <_svfiprintf_r+0x10a>
 8007f5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f60:	e004      	b.n	8007f6c <_svfiprintf_r+0x114>
 8007f62:	425b      	negs	r3, r3
 8007f64:	60e3      	str	r3, [r4, #12]
 8007f66:	2302      	movs	r3, #2
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	6023      	str	r3, [r4, #0]
 8007f6c:	782b      	ldrb	r3, [r5, #0]
 8007f6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f70:	d10c      	bne.n	8007f8c <_svfiprintf_r+0x134>
 8007f72:	786b      	ldrb	r3, [r5, #1]
 8007f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f76:	d134      	bne.n	8007fe2 <_svfiprintf_r+0x18a>
 8007f78:	9b07      	ldr	r3, [sp, #28]
 8007f7a:	3502      	adds	r5, #2
 8007f7c:	1d1a      	adds	r2, r3, #4
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	9207      	str	r2, [sp, #28]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	da01      	bge.n	8007f8a <_svfiprintf_r+0x132>
 8007f86:	2301      	movs	r3, #1
 8007f88:	425b      	negs	r3, r3
 8007f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f8c:	4e2d      	ldr	r6, [pc, #180]	@ (8008044 <_svfiprintf_r+0x1ec>)
 8007f8e:	2203      	movs	r2, #3
 8007f90:	0030      	movs	r0, r6
 8007f92:	7829      	ldrb	r1, [r5, #0]
 8007f94:	f000 fa02 	bl	800839c <memchr>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d006      	beq.n	8007faa <_svfiprintf_r+0x152>
 8007f9c:	2340      	movs	r3, #64	@ 0x40
 8007f9e:	1b80      	subs	r0, r0, r6
 8007fa0:	4083      	lsls	r3, r0
 8007fa2:	6822      	ldr	r2, [r4, #0]
 8007fa4:	3501      	adds	r5, #1
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	7829      	ldrb	r1, [r5, #0]
 8007fac:	2206      	movs	r2, #6
 8007fae:	4826      	ldr	r0, [pc, #152]	@ (8008048 <_svfiprintf_r+0x1f0>)
 8007fb0:	1c6e      	adds	r6, r5, #1
 8007fb2:	7621      	strb	r1, [r4, #24]
 8007fb4:	f000 f9f2 	bl	800839c <memchr>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d038      	beq.n	800802e <_svfiprintf_r+0x1d6>
 8007fbc:	4b23      	ldr	r3, [pc, #140]	@ (800804c <_svfiprintf_r+0x1f4>)
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d122      	bne.n	8008008 <_svfiprintf_r+0x1b0>
 8007fc2:	2207      	movs	r2, #7
 8007fc4:	9b07      	ldr	r3, [sp, #28]
 8007fc6:	3307      	adds	r3, #7
 8007fc8:	4393      	bics	r3, r2
 8007fca:	3308      	adds	r3, #8
 8007fcc:	9307      	str	r3, [sp, #28]
 8007fce:	6963      	ldr	r3, [r4, #20]
 8007fd0:	9a04      	ldr	r2, [sp, #16]
 8007fd2:	189b      	adds	r3, r3, r2
 8007fd4:	6163      	str	r3, [r4, #20]
 8007fd6:	e762      	b.n	8007e9e <_svfiprintf_r+0x46>
 8007fd8:	4343      	muls	r3, r0
 8007fda:	0035      	movs	r5, r6
 8007fdc:	2101      	movs	r1, #1
 8007fde:	189b      	adds	r3, r3, r2
 8007fe0:	e7a4      	b.n	8007f2c <_svfiprintf_r+0xd4>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	200a      	movs	r0, #10
 8007fe6:	0019      	movs	r1, r3
 8007fe8:	3501      	adds	r5, #1
 8007fea:	6063      	str	r3, [r4, #4]
 8007fec:	782a      	ldrb	r2, [r5, #0]
 8007fee:	1c6e      	adds	r6, r5, #1
 8007ff0:	3a30      	subs	r2, #48	@ 0x30
 8007ff2:	2a09      	cmp	r2, #9
 8007ff4:	d903      	bls.n	8007ffe <_svfiprintf_r+0x1a6>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d0c8      	beq.n	8007f8c <_svfiprintf_r+0x134>
 8007ffa:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ffc:	e7c6      	b.n	8007f8c <_svfiprintf_r+0x134>
 8007ffe:	4341      	muls	r1, r0
 8008000:	0035      	movs	r5, r6
 8008002:	2301      	movs	r3, #1
 8008004:	1889      	adds	r1, r1, r2
 8008006:	e7f1      	b.n	8007fec <_svfiprintf_r+0x194>
 8008008:	aa07      	add	r2, sp, #28
 800800a:	9200      	str	r2, [sp, #0]
 800800c:	0021      	movs	r1, r4
 800800e:	003a      	movs	r2, r7
 8008010:	4b0f      	ldr	r3, [pc, #60]	@ (8008050 <_svfiprintf_r+0x1f8>)
 8008012:	9803      	ldr	r0, [sp, #12]
 8008014:	e000      	b.n	8008018 <_svfiprintf_r+0x1c0>
 8008016:	bf00      	nop
 8008018:	9004      	str	r0, [sp, #16]
 800801a:	9b04      	ldr	r3, [sp, #16]
 800801c:	3301      	adds	r3, #1
 800801e:	d1d6      	bne.n	8007fce <_svfiprintf_r+0x176>
 8008020:	89bb      	ldrh	r3, [r7, #12]
 8008022:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008024:	065b      	lsls	r3, r3, #25
 8008026:	d500      	bpl.n	800802a <_svfiprintf_r+0x1d2>
 8008028:	e72c      	b.n	8007e84 <_svfiprintf_r+0x2c>
 800802a:	b021      	add	sp, #132	@ 0x84
 800802c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800802e:	aa07      	add	r2, sp, #28
 8008030:	9200      	str	r2, [sp, #0]
 8008032:	0021      	movs	r1, r4
 8008034:	003a      	movs	r2, r7
 8008036:	4b06      	ldr	r3, [pc, #24]	@ (8008050 <_svfiprintf_r+0x1f8>)
 8008038:	9803      	ldr	r0, [sp, #12]
 800803a:	f000 f87b 	bl	8008134 <_printf_i>
 800803e:	e7eb      	b.n	8008018 <_svfiprintf_r+0x1c0>
 8008040:	08008d18 	.word	0x08008d18
 8008044:	08008d1e 	.word	0x08008d1e
 8008048:	08008d22 	.word	0x08008d22
 800804c:	00000000 	.word	0x00000000
 8008050:	08007d99 	.word	0x08007d99

08008054 <_printf_common>:
 8008054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008056:	0016      	movs	r6, r2
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	688a      	ldr	r2, [r1, #8]
 800805c:	690b      	ldr	r3, [r1, #16]
 800805e:	000c      	movs	r4, r1
 8008060:	9000      	str	r0, [sp, #0]
 8008062:	4293      	cmp	r3, r2
 8008064:	da00      	bge.n	8008068 <_printf_common+0x14>
 8008066:	0013      	movs	r3, r2
 8008068:	0022      	movs	r2, r4
 800806a:	6033      	str	r3, [r6, #0]
 800806c:	3243      	adds	r2, #67	@ 0x43
 800806e:	7812      	ldrb	r2, [r2, #0]
 8008070:	2a00      	cmp	r2, #0
 8008072:	d001      	beq.n	8008078 <_printf_common+0x24>
 8008074:	3301      	adds	r3, #1
 8008076:	6033      	str	r3, [r6, #0]
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	069b      	lsls	r3, r3, #26
 800807c:	d502      	bpl.n	8008084 <_printf_common+0x30>
 800807e:	6833      	ldr	r3, [r6, #0]
 8008080:	3302      	adds	r3, #2
 8008082:	6033      	str	r3, [r6, #0]
 8008084:	6822      	ldr	r2, [r4, #0]
 8008086:	2306      	movs	r3, #6
 8008088:	0015      	movs	r5, r2
 800808a:	401d      	ands	r5, r3
 800808c:	421a      	tst	r2, r3
 800808e:	d027      	beq.n	80080e0 <_printf_common+0x8c>
 8008090:	0023      	movs	r3, r4
 8008092:	3343      	adds	r3, #67	@ 0x43
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	1e5a      	subs	r2, r3, #1
 8008098:	4193      	sbcs	r3, r2
 800809a:	6822      	ldr	r2, [r4, #0]
 800809c:	0692      	lsls	r2, r2, #26
 800809e:	d430      	bmi.n	8008102 <_printf_common+0xae>
 80080a0:	0022      	movs	r2, r4
 80080a2:	9901      	ldr	r1, [sp, #4]
 80080a4:	9800      	ldr	r0, [sp, #0]
 80080a6:	9d08      	ldr	r5, [sp, #32]
 80080a8:	3243      	adds	r2, #67	@ 0x43
 80080aa:	47a8      	blx	r5
 80080ac:	3001      	adds	r0, #1
 80080ae:	d025      	beq.n	80080fc <_printf_common+0xa8>
 80080b0:	2206      	movs	r2, #6
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	2500      	movs	r5, #0
 80080b6:	4013      	ands	r3, r2
 80080b8:	2b04      	cmp	r3, #4
 80080ba:	d105      	bne.n	80080c8 <_printf_common+0x74>
 80080bc:	6833      	ldr	r3, [r6, #0]
 80080be:	68e5      	ldr	r5, [r4, #12]
 80080c0:	1aed      	subs	r5, r5, r3
 80080c2:	43eb      	mvns	r3, r5
 80080c4:	17db      	asrs	r3, r3, #31
 80080c6:	401d      	ands	r5, r3
 80080c8:	68a3      	ldr	r3, [r4, #8]
 80080ca:	6922      	ldr	r2, [r4, #16]
 80080cc:	4293      	cmp	r3, r2
 80080ce:	dd01      	ble.n	80080d4 <_printf_common+0x80>
 80080d0:	1a9b      	subs	r3, r3, r2
 80080d2:	18ed      	adds	r5, r5, r3
 80080d4:	2600      	movs	r6, #0
 80080d6:	42b5      	cmp	r5, r6
 80080d8:	d120      	bne.n	800811c <_printf_common+0xc8>
 80080da:	2000      	movs	r0, #0
 80080dc:	e010      	b.n	8008100 <_printf_common+0xac>
 80080de:	3501      	adds	r5, #1
 80080e0:	68e3      	ldr	r3, [r4, #12]
 80080e2:	6832      	ldr	r2, [r6, #0]
 80080e4:	1a9b      	subs	r3, r3, r2
 80080e6:	42ab      	cmp	r3, r5
 80080e8:	ddd2      	ble.n	8008090 <_printf_common+0x3c>
 80080ea:	0022      	movs	r2, r4
 80080ec:	2301      	movs	r3, #1
 80080ee:	9901      	ldr	r1, [sp, #4]
 80080f0:	9800      	ldr	r0, [sp, #0]
 80080f2:	9f08      	ldr	r7, [sp, #32]
 80080f4:	3219      	adds	r2, #25
 80080f6:	47b8      	blx	r7
 80080f8:	3001      	adds	r0, #1
 80080fa:	d1f0      	bne.n	80080de <_printf_common+0x8a>
 80080fc:	2001      	movs	r0, #1
 80080fe:	4240      	negs	r0, r0
 8008100:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008102:	2030      	movs	r0, #48	@ 0x30
 8008104:	18e1      	adds	r1, r4, r3
 8008106:	3143      	adds	r1, #67	@ 0x43
 8008108:	7008      	strb	r0, [r1, #0]
 800810a:	0021      	movs	r1, r4
 800810c:	1c5a      	adds	r2, r3, #1
 800810e:	3145      	adds	r1, #69	@ 0x45
 8008110:	7809      	ldrb	r1, [r1, #0]
 8008112:	18a2      	adds	r2, r4, r2
 8008114:	3243      	adds	r2, #67	@ 0x43
 8008116:	3302      	adds	r3, #2
 8008118:	7011      	strb	r1, [r2, #0]
 800811a:	e7c1      	b.n	80080a0 <_printf_common+0x4c>
 800811c:	0022      	movs	r2, r4
 800811e:	2301      	movs	r3, #1
 8008120:	9901      	ldr	r1, [sp, #4]
 8008122:	9800      	ldr	r0, [sp, #0]
 8008124:	9f08      	ldr	r7, [sp, #32]
 8008126:	321a      	adds	r2, #26
 8008128:	47b8      	blx	r7
 800812a:	3001      	adds	r0, #1
 800812c:	d0e6      	beq.n	80080fc <_printf_common+0xa8>
 800812e:	3601      	adds	r6, #1
 8008130:	e7d1      	b.n	80080d6 <_printf_common+0x82>
	...

08008134 <_printf_i>:
 8008134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008136:	b08b      	sub	sp, #44	@ 0x2c
 8008138:	9206      	str	r2, [sp, #24]
 800813a:	000a      	movs	r2, r1
 800813c:	3243      	adds	r2, #67	@ 0x43
 800813e:	9307      	str	r3, [sp, #28]
 8008140:	9005      	str	r0, [sp, #20]
 8008142:	9203      	str	r2, [sp, #12]
 8008144:	7e0a      	ldrb	r2, [r1, #24]
 8008146:	000c      	movs	r4, r1
 8008148:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800814a:	2a78      	cmp	r2, #120	@ 0x78
 800814c:	d809      	bhi.n	8008162 <_printf_i+0x2e>
 800814e:	2a62      	cmp	r2, #98	@ 0x62
 8008150:	d80b      	bhi.n	800816a <_printf_i+0x36>
 8008152:	2a00      	cmp	r2, #0
 8008154:	d100      	bne.n	8008158 <_printf_i+0x24>
 8008156:	e0bc      	b.n	80082d2 <_printf_i+0x19e>
 8008158:	497b      	ldr	r1, [pc, #492]	@ (8008348 <_printf_i+0x214>)
 800815a:	9104      	str	r1, [sp, #16]
 800815c:	2a58      	cmp	r2, #88	@ 0x58
 800815e:	d100      	bne.n	8008162 <_printf_i+0x2e>
 8008160:	e090      	b.n	8008284 <_printf_i+0x150>
 8008162:	0025      	movs	r5, r4
 8008164:	3542      	adds	r5, #66	@ 0x42
 8008166:	702a      	strb	r2, [r5, #0]
 8008168:	e022      	b.n	80081b0 <_printf_i+0x7c>
 800816a:	0010      	movs	r0, r2
 800816c:	3863      	subs	r0, #99	@ 0x63
 800816e:	2815      	cmp	r0, #21
 8008170:	d8f7      	bhi.n	8008162 <_printf_i+0x2e>
 8008172:	f7f7 ffd3 	bl	800011c <__gnu_thumb1_case_shi>
 8008176:	0016      	.short	0x0016
 8008178:	fff6001f 	.word	0xfff6001f
 800817c:	fff6fff6 	.word	0xfff6fff6
 8008180:	001ffff6 	.word	0x001ffff6
 8008184:	fff6fff6 	.word	0xfff6fff6
 8008188:	fff6fff6 	.word	0xfff6fff6
 800818c:	003600a1 	.word	0x003600a1
 8008190:	fff60080 	.word	0xfff60080
 8008194:	00b2fff6 	.word	0x00b2fff6
 8008198:	0036fff6 	.word	0x0036fff6
 800819c:	fff6fff6 	.word	0xfff6fff6
 80081a0:	0084      	.short	0x0084
 80081a2:	0025      	movs	r5, r4
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	3542      	adds	r5, #66	@ 0x42
 80081a8:	1d11      	adds	r1, r2, #4
 80081aa:	6019      	str	r1, [r3, #0]
 80081ac:	6813      	ldr	r3, [r2, #0]
 80081ae:	702b      	strb	r3, [r5, #0]
 80081b0:	2301      	movs	r3, #1
 80081b2:	e0a0      	b.n	80082f6 <_printf_i+0x1c2>
 80081b4:	6818      	ldr	r0, [r3, #0]
 80081b6:	6809      	ldr	r1, [r1, #0]
 80081b8:	1d02      	adds	r2, r0, #4
 80081ba:	060d      	lsls	r5, r1, #24
 80081bc:	d50b      	bpl.n	80081d6 <_printf_i+0xa2>
 80081be:	6806      	ldr	r6, [r0, #0]
 80081c0:	601a      	str	r2, [r3, #0]
 80081c2:	2e00      	cmp	r6, #0
 80081c4:	da03      	bge.n	80081ce <_printf_i+0x9a>
 80081c6:	232d      	movs	r3, #45	@ 0x2d
 80081c8:	9a03      	ldr	r2, [sp, #12]
 80081ca:	4276      	negs	r6, r6
 80081cc:	7013      	strb	r3, [r2, #0]
 80081ce:	4b5e      	ldr	r3, [pc, #376]	@ (8008348 <_printf_i+0x214>)
 80081d0:	270a      	movs	r7, #10
 80081d2:	9304      	str	r3, [sp, #16]
 80081d4:	e018      	b.n	8008208 <_printf_i+0xd4>
 80081d6:	6806      	ldr	r6, [r0, #0]
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	0649      	lsls	r1, r1, #25
 80081dc:	d5f1      	bpl.n	80081c2 <_printf_i+0x8e>
 80081de:	b236      	sxth	r6, r6
 80081e0:	e7ef      	b.n	80081c2 <_printf_i+0x8e>
 80081e2:	6808      	ldr	r0, [r1, #0]
 80081e4:	6819      	ldr	r1, [r3, #0]
 80081e6:	c940      	ldmia	r1!, {r6}
 80081e8:	0605      	lsls	r5, r0, #24
 80081ea:	d402      	bmi.n	80081f2 <_printf_i+0xbe>
 80081ec:	0640      	lsls	r0, r0, #25
 80081ee:	d500      	bpl.n	80081f2 <_printf_i+0xbe>
 80081f0:	b2b6      	uxth	r6, r6
 80081f2:	6019      	str	r1, [r3, #0]
 80081f4:	4b54      	ldr	r3, [pc, #336]	@ (8008348 <_printf_i+0x214>)
 80081f6:	270a      	movs	r7, #10
 80081f8:	9304      	str	r3, [sp, #16]
 80081fa:	2a6f      	cmp	r2, #111	@ 0x6f
 80081fc:	d100      	bne.n	8008200 <_printf_i+0xcc>
 80081fe:	3f02      	subs	r7, #2
 8008200:	0023      	movs	r3, r4
 8008202:	2200      	movs	r2, #0
 8008204:	3343      	adds	r3, #67	@ 0x43
 8008206:	701a      	strb	r2, [r3, #0]
 8008208:	6863      	ldr	r3, [r4, #4]
 800820a:	60a3      	str	r3, [r4, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	db03      	blt.n	8008218 <_printf_i+0xe4>
 8008210:	2104      	movs	r1, #4
 8008212:	6822      	ldr	r2, [r4, #0]
 8008214:	438a      	bics	r2, r1
 8008216:	6022      	str	r2, [r4, #0]
 8008218:	2e00      	cmp	r6, #0
 800821a:	d102      	bne.n	8008222 <_printf_i+0xee>
 800821c:	9d03      	ldr	r5, [sp, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00c      	beq.n	800823c <_printf_i+0x108>
 8008222:	9d03      	ldr	r5, [sp, #12]
 8008224:	0030      	movs	r0, r6
 8008226:	0039      	movs	r1, r7
 8008228:	f7f8 f808 	bl	800023c <__aeabi_uidivmod>
 800822c:	9b04      	ldr	r3, [sp, #16]
 800822e:	3d01      	subs	r5, #1
 8008230:	5c5b      	ldrb	r3, [r3, r1]
 8008232:	702b      	strb	r3, [r5, #0]
 8008234:	0033      	movs	r3, r6
 8008236:	0006      	movs	r6, r0
 8008238:	429f      	cmp	r7, r3
 800823a:	d9f3      	bls.n	8008224 <_printf_i+0xf0>
 800823c:	2f08      	cmp	r7, #8
 800823e:	d109      	bne.n	8008254 <_printf_i+0x120>
 8008240:	6823      	ldr	r3, [r4, #0]
 8008242:	07db      	lsls	r3, r3, #31
 8008244:	d506      	bpl.n	8008254 <_printf_i+0x120>
 8008246:	6862      	ldr	r2, [r4, #4]
 8008248:	6923      	ldr	r3, [r4, #16]
 800824a:	429a      	cmp	r2, r3
 800824c:	dc02      	bgt.n	8008254 <_printf_i+0x120>
 800824e:	2330      	movs	r3, #48	@ 0x30
 8008250:	3d01      	subs	r5, #1
 8008252:	702b      	strb	r3, [r5, #0]
 8008254:	9b03      	ldr	r3, [sp, #12]
 8008256:	1b5b      	subs	r3, r3, r5
 8008258:	6123      	str	r3, [r4, #16]
 800825a:	9b07      	ldr	r3, [sp, #28]
 800825c:	0021      	movs	r1, r4
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	9805      	ldr	r0, [sp, #20]
 8008262:	9b06      	ldr	r3, [sp, #24]
 8008264:	aa09      	add	r2, sp, #36	@ 0x24
 8008266:	f7ff fef5 	bl	8008054 <_printf_common>
 800826a:	3001      	adds	r0, #1
 800826c:	d148      	bne.n	8008300 <_printf_i+0x1cc>
 800826e:	2001      	movs	r0, #1
 8008270:	4240      	negs	r0, r0
 8008272:	b00b      	add	sp, #44	@ 0x2c
 8008274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008276:	2220      	movs	r2, #32
 8008278:	6809      	ldr	r1, [r1, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	6022      	str	r2, [r4, #0]
 800827e:	2278      	movs	r2, #120	@ 0x78
 8008280:	4932      	ldr	r1, [pc, #200]	@ (800834c <_printf_i+0x218>)
 8008282:	9104      	str	r1, [sp, #16]
 8008284:	0021      	movs	r1, r4
 8008286:	3145      	adds	r1, #69	@ 0x45
 8008288:	700a      	strb	r2, [r1, #0]
 800828a:	6819      	ldr	r1, [r3, #0]
 800828c:	6822      	ldr	r2, [r4, #0]
 800828e:	c940      	ldmia	r1!, {r6}
 8008290:	0610      	lsls	r0, r2, #24
 8008292:	d402      	bmi.n	800829a <_printf_i+0x166>
 8008294:	0650      	lsls	r0, r2, #25
 8008296:	d500      	bpl.n	800829a <_printf_i+0x166>
 8008298:	b2b6      	uxth	r6, r6
 800829a:	6019      	str	r1, [r3, #0]
 800829c:	07d3      	lsls	r3, r2, #31
 800829e:	d502      	bpl.n	80082a6 <_printf_i+0x172>
 80082a0:	2320      	movs	r3, #32
 80082a2:	4313      	orrs	r3, r2
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	2e00      	cmp	r6, #0
 80082a8:	d001      	beq.n	80082ae <_printf_i+0x17a>
 80082aa:	2710      	movs	r7, #16
 80082ac:	e7a8      	b.n	8008200 <_printf_i+0xcc>
 80082ae:	2220      	movs	r2, #32
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	4393      	bics	r3, r2
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	e7f8      	b.n	80082aa <_printf_i+0x176>
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	680d      	ldr	r5, [r1, #0]
 80082bc:	1d10      	adds	r0, r2, #4
 80082be:	6949      	ldr	r1, [r1, #20]
 80082c0:	6018      	str	r0, [r3, #0]
 80082c2:	6813      	ldr	r3, [r2, #0]
 80082c4:	062e      	lsls	r6, r5, #24
 80082c6:	d501      	bpl.n	80082cc <_printf_i+0x198>
 80082c8:	6019      	str	r1, [r3, #0]
 80082ca:	e002      	b.n	80082d2 <_printf_i+0x19e>
 80082cc:	066d      	lsls	r5, r5, #25
 80082ce:	d5fb      	bpl.n	80082c8 <_printf_i+0x194>
 80082d0:	8019      	strh	r1, [r3, #0]
 80082d2:	2300      	movs	r3, #0
 80082d4:	9d03      	ldr	r5, [sp, #12]
 80082d6:	6123      	str	r3, [r4, #16]
 80082d8:	e7bf      	b.n	800825a <_printf_i+0x126>
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	1d11      	adds	r1, r2, #4
 80082de:	6019      	str	r1, [r3, #0]
 80082e0:	6815      	ldr	r5, [r2, #0]
 80082e2:	2100      	movs	r1, #0
 80082e4:	0028      	movs	r0, r5
 80082e6:	6862      	ldr	r2, [r4, #4]
 80082e8:	f000 f858 	bl	800839c <memchr>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	d001      	beq.n	80082f4 <_printf_i+0x1c0>
 80082f0:	1b40      	subs	r0, r0, r5
 80082f2:	6060      	str	r0, [r4, #4]
 80082f4:	6863      	ldr	r3, [r4, #4]
 80082f6:	6123      	str	r3, [r4, #16]
 80082f8:	2300      	movs	r3, #0
 80082fa:	9a03      	ldr	r2, [sp, #12]
 80082fc:	7013      	strb	r3, [r2, #0]
 80082fe:	e7ac      	b.n	800825a <_printf_i+0x126>
 8008300:	002a      	movs	r2, r5
 8008302:	6923      	ldr	r3, [r4, #16]
 8008304:	9906      	ldr	r1, [sp, #24]
 8008306:	9805      	ldr	r0, [sp, #20]
 8008308:	9d07      	ldr	r5, [sp, #28]
 800830a:	47a8      	blx	r5
 800830c:	3001      	adds	r0, #1
 800830e:	d0ae      	beq.n	800826e <_printf_i+0x13a>
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	079b      	lsls	r3, r3, #30
 8008314:	d415      	bmi.n	8008342 <_printf_i+0x20e>
 8008316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008318:	68e0      	ldr	r0, [r4, #12]
 800831a:	4298      	cmp	r0, r3
 800831c:	daa9      	bge.n	8008272 <_printf_i+0x13e>
 800831e:	0018      	movs	r0, r3
 8008320:	e7a7      	b.n	8008272 <_printf_i+0x13e>
 8008322:	0022      	movs	r2, r4
 8008324:	2301      	movs	r3, #1
 8008326:	9906      	ldr	r1, [sp, #24]
 8008328:	9805      	ldr	r0, [sp, #20]
 800832a:	9e07      	ldr	r6, [sp, #28]
 800832c:	3219      	adds	r2, #25
 800832e:	47b0      	blx	r6
 8008330:	3001      	adds	r0, #1
 8008332:	d09c      	beq.n	800826e <_printf_i+0x13a>
 8008334:	3501      	adds	r5, #1
 8008336:	68e3      	ldr	r3, [r4, #12]
 8008338:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800833a:	1a9b      	subs	r3, r3, r2
 800833c:	42ab      	cmp	r3, r5
 800833e:	dcf0      	bgt.n	8008322 <_printf_i+0x1ee>
 8008340:	e7e9      	b.n	8008316 <_printf_i+0x1e2>
 8008342:	2500      	movs	r5, #0
 8008344:	e7f7      	b.n	8008336 <_printf_i+0x202>
 8008346:	46c0      	nop			@ (mov r8, r8)
 8008348:	08008d29 	.word	0x08008d29
 800834c:	08008d3a 	.word	0x08008d3a

08008350 <memmove>:
 8008350:	b510      	push	{r4, lr}
 8008352:	4288      	cmp	r0, r1
 8008354:	d806      	bhi.n	8008364 <memmove+0x14>
 8008356:	2300      	movs	r3, #0
 8008358:	429a      	cmp	r2, r3
 800835a:	d008      	beq.n	800836e <memmove+0x1e>
 800835c:	5ccc      	ldrb	r4, [r1, r3]
 800835e:	54c4      	strb	r4, [r0, r3]
 8008360:	3301      	adds	r3, #1
 8008362:	e7f9      	b.n	8008358 <memmove+0x8>
 8008364:	188b      	adds	r3, r1, r2
 8008366:	4298      	cmp	r0, r3
 8008368:	d2f5      	bcs.n	8008356 <memmove+0x6>
 800836a:	3a01      	subs	r2, #1
 800836c:	d200      	bcs.n	8008370 <memmove+0x20>
 800836e:	bd10      	pop	{r4, pc}
 8008370:	5c8b      	ldrb	r3, [r1, r2]
 8008372:	5483      	strb	r3, [r0, r2]
 8008374:	e7f9      	b.n	800836a <memmove+0x1a>
	...

08008378 <_sbrk_r>:
 8008378:	2300      	movs	r3, #0
 800837a:	b570      	push	{r4, r5, r6, lr}
 800837c:	4d06      	ldr	r5, [pc, #24]	@ (8008398 <_sbrk_r+0x20>)
 800837e:	0004      	movs	r4, r0
 8008380:	0008      	movs	r0, r1
 8008382:	602b      	str	r3, [r5, #0]
 8008384:	f7f9 f9ec 	bl	8001760 <_sbrk>
 8008388:	1c43      	adds	r3, r0, #1
 800838a:	d103      	bne.n	8008394 <_sbrk_r+0x1c>
 800838c:	682b      	ldr	r3, [r5, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d000      	beq.n	8008394 <_sbrk_r+0x1c>
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	bd70      	pop	{r4, r5, r6, pc}
 8008396:	46c0      	nop			@ (mov r8, r8)
 8008398:	20000870 	.word	0x20000870

0800839c <memchr>:
 800839c:	b2c9      	uxtb	r1, r1
 800839e:	1882      	adds	r2, r0, r2
 80083a0:	4290      	cmp	r0, r2
 80083a2:	d101      	bne.n	80083a8 <memchr+0xc>
 80083a4:	2000      	movs	r0, #0
 80083a6:	4770      	bx	lr
 80083a8:	7803      	ldrb	r3, [r0, #0]
 80083aa:	428b      	cmp	r3, r1
 80083ac:	d0fb      	beq.n	80083a6 <memchr+0xa>
 80083ae:	3001      	adds	r0, #1
 80083b0:	e7f6      	b.n	80083a0 <memchr+0x4>

080083b2 <_realloc_r>:
 80083b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083b4:	0006      	movs	r6, r0
 80083b6:	000c      	movs	r4, r1
 80083b8:	0015      	movs	r5, r2
 80083ba:	2900      	cmp	r1, #0
 80083bc:	d105      	bne.n	80083ca <_realloc_r+0x18>
 80083be:	0011      	movs	r1, r2
 80083c0:	f7ff fc5a 	bl	8007c78 <_malloc_r>
 80083c4:	0004      	movs	r4, r0
 80083c6:	0020      	movs	r0, r4
 80083c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083ca:	2a00      	cmp	r2, #0
 80083cc:	d103      	bne.n	80083d6 <_realloc_r+0x24>
 80083ce:	f7ff fbe7 	bl	8007ba0 <_free_r>
 80083d2:	2400      	movs	r4, #0
 80083d4:	e7f7      	b.n	80083c6 <_realloc_r+0x14>
 80083d6:	f000 f81b 	bl	8008410 <_malloc_usable_size_r>
 80083da:	0007      	movs	r7, r0
 80083dc:	4285      	cmp	r5, r0
 80083de:	d802      	bhi.n	80083e6 <_realloc_r+0x34>
 80083e0:	0843      	lsrs	r3, r0, #1
 80083e2:	42ab      	cmp	r3, r5
 80083e4:	d3ef      	bcc.n	80083c6 <_realloc_r+0x14>
 80083e6:	0029      	movs	r1, r5
 80083e8:	0030      	movs	r0, r6
 80083ea:	f7ff fc45 	bl	8007c78 <_malloc_r>
 80083ee:	9001      	str	r0, [sp, #4]
 80083f0:	2800      	cmp	r0, #0
 80083f2:	d0ee      	beq.n	80083d2 <_realloc_r+0x20>
 80083f4:	002a      	movs	r2, r5
 80083f6:	42bd      	cmp	r5, r7
 80083f8:	d900      	bls.n	80083fc <_realloc_r+0x4a>
 80083fa:	003a      	movs	r2, r7
 80083fc:	0021      	movs	r1, r4
 80083fe:	9801      	ldr	r0, [sp, #4]
 8008400:	f7ff fbc4 	bl	8007b8c <memcpy>
 8008404:	0021      	movs	r1, r4
 8008406:	0030      	movs	r0, r6
 8008408:	f7ff fbca 	bl	8007ba0 <_free_r>
 800840c:	9c01      	ldr	r4, [sp, #4]
 800840e:	e7da      	b.n	80083c6 <_realloc_r+0x14>

08008410 <_malloc_usable_size_r>:
 8008410:	1f0b      	subs	r3, r1, #4
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	1f18      	subs	r0, r3, #4
 8008416:	2b00      	cmp	r3, #0
 8008418:	da01      	bge.n	800841e <_malloc_usable_size_r+0xe>
 800841a:	580b      	ldr	r3, [r1, r0]
 800841c:	18c0      	adds	r0, r0, r3
 800841e:	4770      	bx	lr

08008420 <_init>:
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	46c0      	nop			@ (mov r8, r8)
 8008424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008426:	bc08      	pop	{r3}
 8008428:	469e      	mov	lr, r3
 800842a:	4770      	bx	lr

0800842c <_fini>:
 800842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842e:	46c0      	nop			@ (mov r8, r8)
 8008430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008432:	bc08      	pop	{r3}
 8008434:	469e      	mov	lr, r3
 8008436:	4770      	bx	lr
