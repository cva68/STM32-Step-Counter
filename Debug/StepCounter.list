
StepCounter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ed8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000920  08007f98  08007f98  00008f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088b8  080088b8  0000a090  2**0
                  CONTENTS
  4 .ARM          00000000  080088b8  080088b8  0000a090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088b8  080088b8  0000a090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088b8  080088b8  000098b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088bc  080088bc  000098bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  080088c0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000828  20000090  08008950  0000a090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b8  08008950  0000a8b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018663  00000000  00000000  0000a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000418a  00000000  00000000  0002271b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  000268a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001151  00000000  00000000  00027f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b2a1  00000000  00000000  00029079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002154a  00000000  00000000  0004431a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a249  00000000  00000000  00065864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ffaad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ec  00000000  00000000  000ffaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00104ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000090 	.word	0x20000090
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007f80 	.word	0x08007f80

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000094 	.word	0x20000094
 8000104:	08007f80 	.word	0x08007f80

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	0018      	movs	r0, r3
 8000412:	230c      	movs	r3, #12
 8000414:	001a      	movs	r2, r3
 8000416:	2100      	movs	r1, #0
 8000418:	f007 f934 	bl	8007684 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800041c:	4b31      	ldr	r3, [pc, #196]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 800041e:	4a32      	ldr	r2, [pc, #200]	@ (80004e8 <MX_ADC1_Init+0xe0>)
 8000420:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000422:	4b30      	ldr	r3, [pc, #192]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000424:	22c0      	movs	r2, #192	@ 0xc0
 8000426:	0612      	lsls	r2, r2, #24
 8000428:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800042a:	4b2e      	ldr	r3, [pc, #184]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000430:	4b2c      	ldr	r3, [pc, #176]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000436:	4b2b      	ldr	r3, [pc, #172]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000438:	2280      	movs	r2, #128	@ 0x80
 800043a:	0612      	lsls	r2, r2, #24
 800043c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800043e:	4b29      	ldr	r3, [pc, #164]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000440:	2204      	movs	r2, #4
 8000442:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000444:	4b27      	ldr	r3, [pc, #156]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000446:	2200      	movs	r2, #0
 8000448:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800044a:	4b26      	ldr	r3, [pc, #152]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 800044c:	2200      	movs	r2, #0
 800044e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000450:	4b24      	ldr	r3, [pc, #144]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000452:	2200      	movs	r2, #0
 8000454:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 8000456:	4b23      	ldr	r3, [pc, #140]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000458:	2200      	movs	r2, #0
 800045a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800045c:	4b21      	ldr	r3, [pc, #132]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 800045e:	2220      	movs	r2, #32
 8000460:	2100      	movs	r1, #0
 8000462:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000464:	4b1f      	ldr	r3, [pc, #124]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000466:	2200      	movs	r2, #0
 8000468:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800046a:	4b1e      	ldr	r3, [pc, #120]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 800046c:	2200      	movs	r2, #0
 800046e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000470:	4b1c      	ldr	r3, [pc, #112]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000472:	222c      	movs	r2, #44	@ 0x2c
 8000474:	2100      	movs	r1, #0
 8000476:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000478:	4b1a      	ldr	r3, [pc, #104]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 800047a:	2200      	movs	r2, #0
 800047c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800047e:	4b19      	ldr	r3, [pc, #100]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000480:	2200      	movs	r2, #0
 8000482:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000484:	4b17      	ldr	r3, [pc, #92]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000486:	223c      	movs	r2, #60	@ 0x3c
 8000488:	2100      	movs	r1, #0
 800048a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800048c:	4b15      	ldr	r3, [pc, #84]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 800048e:	2200      	movs	r2, #0
 8000490:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000492:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 8000494:	0018      	movs	r0, r3
 8000496:	f001 fdb9 	bl	800200c <HAL_ADC_Init>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800049e:	f000 fcf4 	bl	8000e8a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4a11      	ldr	r2, [pc, #68]	@ (80004ec <MX_ADC1_Init+0xe4>)
 80004a6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2201      	movs	r2, #1
 80004ac:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ae:	1d3a      	adds	r2, r7, #4
 80004b0:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 80004b2:	0011      	movs	r1, r2
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 ffed 	bl	8002494 <HAL_ADC_ConfigChannel>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80004be:	f000 fce4 	bl	8000e8a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4a0a      	ldr	r2, [pc, #40]	@ (80004f0 <MX_ADC1_Init+0xe8>)
 80004c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c8:	1d3a      	adds	r2, r7, #4
 80004ca:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <MX_ADC1_Init+0xdc>)
 80004cc:	0011      	movs	r1, r2
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 ffe0 	bl	8002494 <HAL_ADC_ConfigChannel>
 80004d4:	1e03      	subs	r3, r0, #0
 80004d6:	d001      	beq.n	80004dc <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80004d8:	f000 fcd7 	bl	8000e8a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004dc:	46c0      	nop			@ (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	b004      	add	sp, #16
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	200000ac 	.word	0x200000ac
 80004e8:	40012400 	.word	0x40012400
 80004ec:	2c000800 	.word	0x2c000800
 80004f0:	30001000 	.word	0x30001000

080004f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b093      	sub	sp, #76	@ 0x4c
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fc:	2334      	movs	r3, #52	@ 0x34
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	0018      	movs	r0, r3
 8000502:	2314      	movs	r3, #20
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f007 f8bc 	bl	8007684 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050c:	2414      	movs	r4, #20
 800050e:	193b      	adds	r3, r7, r4
 8000510:	0018      	movs	r0, r3
 8000512:	2320      	movs	r3, #32
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f007 f8b4 	bl	8007684 <memset>
  if(adcHandle->Instance==ADC1)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a34      	ldr	r2, [pc, #208]	@ (80005f4 <HAL_ADC_MspInit+0x100>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d162      	bne.n	80005ec <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2220      	movs	r2, #32
 800052a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000532:	193b      	adds	r3, r7, r4
 8000534:	0018      	movs	r0, r3
 8000536:	f005 fd73 	bl	8006020 <HAL_RCCEx_PeriphCLKConfig>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 800053e:	f000 fca4 	bl	8000e8a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000542:	4b2d      	ldr	r3, [pc, #180]	@ (80005f8 <HAL_ADC_MspInit+0x104>)
 8000544:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000546:	4b2c      	ldr	r3, [pc, #176]	@ (80005f8 <HAL_ADC_MspInit+0x104>)
 8000548:	2180      	movs	r1, #128	@ 0x80
 800054a:	0349      	lsls	r1, r1, #13
 800054c:	430a      	orrs	r2, r1
 800054e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000550:	4b29      	ldr	r3, [pc, #164]	@ (80005f8 <HAL_ADC_MspInit+0x104>)
 8000552:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000554:	2380      	movs	r3, #128	@ 0x80
 8000556:	035b      	lsls	r3, r3, #13
 8000558:	4013      	ands	r3, r2
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800055e:	4b26      	ldr	r3, [pc, #152]	@ (80005f8 <HAL_ADC_MspInit+0x104>)
 8000560:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000562:	4b25      	ldr	r3, [pc, #148]	@ (80005f8 <HAL_ADC_MspInit+0x104>)
 8000564:	2104      	movs	r1, #4
 8000566:	430a      	orrs	r2, r1
 8000568:	635a      	str	r2, [r3, #52]	@ 0x34
 800056a:	4b23      	ldr	r3, [pc, #140]	@ (80005f8 <HAL_ADC_MspInit+0x104>)
 800056c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800056e:	2204      	movs	r2, #4
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN11
    PC5     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = JOYSTICK_X_Pin|JOYSTICK_Y_Pin;
 8000576:	2134      	movs	r1, #52	@ 0x34
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2230      	movs	r2, #48	@ 0x30
 800057c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2203      	movs	r2, #3
 8000582:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800058a:	187b      	adds	r3, r7, r1
 800058c:	4a1b      	ldr	r2, [pc, #108]	@ (80005fc <HAL_ADC_MspInit+0x108>)
 800058e:	0019      	movs	r1, r3
 8000590:	0010      	movs	r0, r2
 8000592:	f002 fe19 	bl	80031c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000596:	4b1a      	ldr	r3, [pc, #104]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 8000598:	4a1a      	ldr	r2, [pc, #104]	@ (8000604 <HAL_ADC_MspInit+0x110>)
 800059a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800059c:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 800059e:	2205      	movs	r2, #5
 80005a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005a2:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005a8:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005ae:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005b0:	2280      	movs	r2, #128	@ 0x80
 80005b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	0052      	lsls	r2, r2, #1
 80005ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005bc:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005be:	2280      	movs	r2, #128	@ 0x80
 80005c0:	00d2      	lsls	r2, r2, #3
 80005c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80005c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f002 fb1e 	bl	8002c14 <HAL_DMA_Init>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 80005dc:	f000 fc55 	bl	8000e8a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a07      	ldr	r2, [pc, #28]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <HAL_ADC_MspInit+0x10c>)
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005ec:	46c0      	nop			@ (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b013      	add	sp, #76	@ 0x4c
 80005f2:	bd90      	pop	{r4, r7, pc}
 80005f4:	40012400 	.word	0x40012400
 80005f8:	40021000 	.word	0x40021000
 80005fc:	50000800 	.word	0x50000800
 8000600:	20000110 	.word	0x20000110
 8000604:	40020008 	.word	0x40020008

08000608 <app_main>:
static uint32_t displayTaskNextRun = 0;
static uint32_t uartTaskNextRun = 0;
static uint32_t fsmTaskNextRun = 0;

void app_main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
	// Initialise and start timer.
	uint32_t ticks;
	buttonTaskNextRun = HAL_GetTick() + BUTTON_TASK_PERIOD_TICKS;
 800060e:	f001 fb87 	bl	8001d20 <HAL_GetTick>
 8000612:	0003      	movs	r3, r0
 8000614:	330a      	adds	r3, #10
 8000616:	001a      	movs	r2, r3
 8000618:	4b2c      	ldr	r3, [pc, #176]	@ (80006cc <app_main+0xc4>)
 800061a:	601a      	str	r2, [r3, #0]
	joystickTaskNextRun = HAL_GetTick() + JOYSTICK_TASK_PERIOD_TICKS;
 800061c:	f001 fb80 	bl	8001d20 <HAL_GetTick>
 8000620:	0003      	movs	r3, r0
 8000622:	3364      	adds	r3, #100	@ 0x64
 8000624:	001a      	movs	r2, r3
 8000626:	4b2a      	ldr	r3, [pc, #168]	@ (80006d0 <app_main+0xc8>)
 8000628:	601a      	str	r2, [r3, #0]
	displayTaskNextRun = HAL_GetTick() + DISPLAY_TASK_PERIOD_TICKS;
 800062a:	f001 fb79 	bl	8001d20 <HAL_GetTick>
 800062e:	0003      	movs	r3, r0
 8000630:	33fa      	adds	r3, #250	@ 0xfa
 8000632:	001a      	movs	r2, r3
 8000634:	4b27      	ldr	r3, [pc, #156]	@ (80006d4 <app_main+0xcc>)
 8000636:	601a      	str	r2, [r3, #0]

	// Initialise tasks.
	buttons_task_init();
 8000638:	f001 f882 	bl	8001740 <buttons_task_init>
	display_task_init();
 800063c:	f001 f88f 	bl	800175e <display_task_init>


	// Periodically execute tasks at the frequency defined above.
	while(1)
	{
		ticks = HAL_GetTick();
 8000640:	f001 fb6e 	bl	8001d20 <HAL_GetTick>
 8000644:	0003      	movs	r3, r0
 8000646:	607b      	str	r3, [r7, #4]

		if(ticks > buttonTaskNextRun) {
 8000648:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <app_main+0xc4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	429a      	cmp	r2, r3
 8000650:	d907      	bls.n	8000662 <app_main+0x5a>
			buttons_task_execute();
 8000652:	f001 f87c 	bl	800174e <buttons_task_execute>
			buttonTaskNextRun += BUTTON_TASK_PERIOD_TICKS;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <app_main+0xc4>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	330a      	adds	r3, #10
 800065c:	001a      	movs	r2, r3
 800065e:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <app_main+0xc4>)
 8000660:	601a      	str	r2, [r3, #0]
		}

		if (ticks > joystickTaskNextRun) {
 8000662:	4b1b      	ldr	r3, [pc, #108]	@ (80006d0 <app_main+0xc8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	429a      	cmp	r2, r3
 800066a:	d907      	bls.n	800067c <app_main+0x74>
			joystick_task_execute();
 800066c:	f001 f95e 	bl	800192c <joystick_task_execute>
			joystickTaskNextRun += JOYSTICK_TASK_PERIOD_TICKS;
 8000670:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <app_main+0xc8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3364      	adds	r3, #100	@ 0x64
 8000676:	001a      	movs	r2, r3
 8000678:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <app_main+0xc8>)
 800067a:	601a      	str	r2, [r3, #0]
		}

		if (ticks > displayTaskNextRun) {
 800067c:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <app_main+0xcc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	429a      	cmp	r2, r3
 8000684:	d907      	bls.n	8000696 <app_main+0x8e>
			display_task_execute();
 8000686:	f001 f875 	bl	8001774 <display_task_execute>
			displayTaskNextRun += DISPLAY_TASK_PERIOD_TICKS;
 800068a:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <app_main+0xcc>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	33fa      	adds	r3, #250	@ 0xfa
 8000690:	001a      	movs	r2, r3
 8000692:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <app_main+0xcc>)
 8000694:	601a      	str	r2, [r3, #0]
		}

		if (ticks > uartTaskNextRun) {
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <app_main+0xd0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	429a      	cmp	r2, r3
 800069e:	d907      	bls.n	80006b0 <app_main+0xa8>
			uart_task_execute();
 80006a0:	f001 f94b 	bl	800193a <uart_task_execute>
			uartTaskNextRun += UART_TASK_PERIOD_TICKS;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <app_main+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	33fa      	adds	r3, #250	@ 0xfa
 80006aa:	001a      	movs	r2, r3
 80006ac:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <app_main+0xd0>)
 80006ae:	601a      	str	r2, [r3, #0]
		}

		if (ticks > fsmTaskNextRun) {
 80006b0:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <app_main+0xd4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d9c2      	bls.n	8000640 <app_main+0x38>
			fsm_task_execute();
 80006ba:	f001 f883 	bl	80017c4 <fsm_task_execute>
			fsmTaskNextRun += FSM_TASK_PERIOD_TICKS;
 80006be:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <app_main+0xd4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	3314      	adds	r3, #20
 80006c4:	001a      	movs	r2, r3
 80006c6:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <app_main+0xd4>)
 80006c8:	601a      	str	r2, [r3, #0]
		ticks = HAL_GetTick();
 80006ca:	e7b9      	b.n	8000640 <app_main+0x38>
 80006cc:	2000016c 	.word	0x2000016c
 80006d0:	20000170 	.word	0x20000170
 80006d4:	20000174 	.word	0x20000174
 80006d8:	20000178 	.word	0x20000178
 80006dc:	2000017c 	.word	0x2000017c

080006e0 <buttons_init>:
};

// *******************************************************
// buttons_init: Initialise the variables associated with the set of buttons.
void buttons_init (void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	e029      	b.n	8000740 <buttons_init+0x60>
	{
		buttons[i].state = buttons[i].normalState;
 80006ec:	4918      	ldr	r1, [pc, #96]	@ (8000750 <buttons_init+0x70>)
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	0013      	movs	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	189b      	adds	r3, r3, r2
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	18cb      	adds	r3, r1, r3
 80006fa:	3306      	adds	r3, #6
 80006fc:	7818      	ldrb	r0, [r3, #0]
 80006fe:	4914      	ldr	r1, [pc, #80]	@ (8000750 <buttons_init+0x70>)
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	0013      	movs	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	189b      	adds	r3, r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	18cb      	adds	r3, r1, r3
 800070c:	3307      	adds	r3, #7
 800070e:	1c02      	adds	r2, r0, #0
 8000710:	701a      	strb	r2, [r3, #0]
		buttons[i].newStateCount = 0;
 8000712:	490f      	ldr	r1, [pc, #60]	@ (8000750 <buttons_init+0x70>)
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	0013      	movs	r3, r2
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	189b      	adds	r3, r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	18cb      	adds	r3, r1, r3
 8000720:	3308      	adds	r3, #8
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
		buttons[i].hasChanged = false;
 8000726:	490a      	ldr	r1, [pc, #40]	@ (8000750 <buttons_init+0x70>)
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	0013      	movs	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	189b      	adds	r3, r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	18cb      	adds	r3, r1, r3
 8000734:	3309      	adds	r3, #9
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BUTTONS; i++)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3301      	adds	r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b03      	cmp	r3, #3
 8000744:	ddd2      	ble.n	80006ec <buttons_init+0xc>
	}
}
 8000746:	46c0      	nop			@ (mov r8, r8)
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b002      	add	sp, #8
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000000 	.word	0x20000000

08000754 <buttons_update>:
// Debouncing algorithm: A finite state machine (FSM) is associated with each button.
// A state change can be declared only after NUM_BUT_POLLS consecutive polls have
// read the pin in the opposite condition, before the state changes and
// a flag is set. Set NUM_BUT_POLLS according to the polling rate.
void buttons_update (void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
	static uint8_t dutyCycle = 0;
	// Iterate through the buttons, updating button variables as required
	for (int i = 0; i < NUM_BUTTONS; i++)
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	e06f      	b.n	8000840 <buttons_update+0xec>
	{
		// Read the pin value
		GPIO_PinState rawState = HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin);
 8000760:	493b      	ldr	r1, [pc, #236]	@ (8000850 <buttons_update+0xfc>)
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	0013      	movs	r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	189b      	adds	r3, r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	5858      	ldr	r0, [r3, r1]
 800076e:	4938      	ldr	r1, [pc, #224]	@ (8000850 <buttons_update+0xfc>)
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	0013      	movs	r3, r2
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	189b      	adds	r3, r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	18cb      	adds	r3, r1, r3
 800077c:	3304      	adds	r3, #4
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	1cfc      	adds	r4, r7, #3
 8000782:	0019      	movs	r1, r3
 8000784:	f002 fe92 	bl	80034ac <HAL_GPIO_ReadPin>
 8000788:	0003      	movs	r3, r0
 800078a:	7023      	strb	r3, [r4, #0]

		// If reading is different from last confirmed state, increment counter
        if (rawState != buttons[i].state)
 800078c:	4930      	ldr	r1, [pc, #192]	@ (8000850 <buttons_update+0xfc>)
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	0013      	movs	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	189b      	adds	r3, r3, r2
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	18cb      	adds	r3, r1, r3
 800079a:	3307      	adds	r3, #7
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	1cfa      	adds	r2, r7, #3
 80007a0:	7812      	ldrb	r2, [r2, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d03f      	beq.n	8000826 <buttons_update+0xd2>
        {
        	buttons[i].newStateCount++;
 80007a6:	492a      	ldr	r1, [pc, #168]	@ (8000850 <buttons_update+0xfc>)
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	0013      	movs	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	189b      	adds	r3, r3, r2
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	18cb      	adds	r3, r1, r3
 80007b4:	3308      	adds	r3, #8
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	3301      	adds	r3, #1
 80007ba:	b2d8      	uxtb	r0, r3
 80007bc:	4924      	ldr	r1, [pc, #144]	@ (8000850 <buttons_update+0xfc>)
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	0013      	movs	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	189b      	adds	r3, r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	18cb      	adds	r3, r1, r3
 80007ca:	3308      	adds	r3, #8
 80007cc:	1c02      	adds	r2, r0, #0
 80007ce:	701a      	strb	r2, [r3, #0]

        	// If count exceeds poll count, confirm change of state
        	if (buttons[i].newStateCount >= NUM_BUT_POLLS)
 80007d0:	491f      	ldr	r1, [pc, #124]	@ (8000850 <buttons_update+0xfc>)
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	0013      	movs	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	189b      	adds	r3, r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	18cb      	adds	r3, r1, r3
 80007de:	3308      	adds	r3, #8
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b02      	cmp	r3, #2
 80007e4:	d929      	bls.n	800083a <buttons_update+0xe6>
        	{
        		buttons[i].state = rawState;
 80007e6:	491a      	ldr	r1, [pc, #104]	@ (8000850 <buttons_update+0xfc>)
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	0013      	movs	r3, r2
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	189b      	adds	r3, r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	18cb      	adds	r3, r1, r3
 80007f4:	3307      	adds	r3, #7
 80007f6:	1cfa      	adds	r2, r7, #3
 80007f8:	7812      	ldrb	r2, [r2, #0]
 80007fa:	701a      	strb	r2, [r3, #0]
        		buttons[i].hasChanged = true;	// Reset by call to buttons_checkButton()
 80007fc:	4914      	ldr	r1, [pc, #80]	@ (8000850 <buttons_update+0xfc>)
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	0013      	movs	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	189b      	adds	r3, r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	18cb      	adds	r3, r1, r3
 800080a:	3309      	adds	r3, #9
 800080c:	2201      	movs	r2, #1
 800080e:	701a      	strb	r2, [r3, #0]
        		buttons[i].newStateCount = 0;
 8000810:	490f      	ldr	r1, [pc, #60]	@ (8000850 <buttons_update+0xfc>)
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	0013      	movs	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	189b      	adds	r3, r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	18cb      	adds	r3, r1, r3
 800081e:	3308      	adds	r3, #8
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	e009      	b.n	800083a <buttons_update+0xe6>
        	}
        }
        else
        {
        	buttons[i].newStateCount = 0;
 8000826:	490a      	ldr	r1, [pc, #40]	@ (8000850 <buttons_update+0xfc>)
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	0013      	movs	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	189b      	adds	r3, r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	18cb      	adds	r3, r1, r3
 8000834:	3308      	adds	r3, #8
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BUTTONS; i++)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3301      	adds	r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b03      	cmp	r3, #3
 8000844:	dd8c      	ble.n	8000760 <buttons_update+0xc>
        }
	}
}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b003      	add	sp, #12
 800084e:	bd90      	pop	{r4, r7, pc}
 8000850:	20000000 	.word	0x20000000

08000854 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800085a:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_DMA_Init+0x48>)
 800085c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800085e:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_DMA_Init+0x48>)
 8000860:	2101      	movs	r1, #1
 8000862:	430a      	orrs	r2, r1
 8000864:	639a      	str	r2, [r3, #56]	@ 0x38
 8000866:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <MX_DMA_Init+0x48>)
 8000868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800086a:	2201      	movs	r2, #1
 800086c:	4013      	ands	r3, r2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	2009      	movs	r0, #9
 8000878:	f002 f99a 	bl	8002bb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800087c:	2009      	movs	r0, #9
 800087e:	f002 f9ac 	bl	8002bda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	200a      	movs	r0, #10
 8000888:	f002 f992 	bl	8002bb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800088c:	200a      	movs	r0, #10
 800088e:	f002 f9a4 	bl	8002bda <HAL_NVIC_EnableIRQ>

}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b002      	add	sp, #8
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	40021000 	.word	0x40021000

080008a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b08b      	sub	sp, #44	@ 0x2c
 80008a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	2414      	movs	r4, #20
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	0018      	movs	r0, r3
 80008ac:	2314      	movs	r3, #20
 80008ae:	001a      	movs	r2, r3
 80008b0:	2100      	movs	r1, #0
 80008b2:	f006 fee7 	bl	8007684 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b79      	ldr	r3, [pc, #484]	@ (8000a9c <MX_GPIO_Init+0x1fc>)
 80008b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ba:	4b78      	ldr	r3, [pc, #480]	@ (8000a9c <MX_GPIO_Init+0x1fc>)
 80008bc:	2104      	movs	r1, #4
 80008be:	430a      	orrs	r2, r1
 80008c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008c2:	4b76      	ldr	r3, [pc, #472]	@ (8000a9c <MX_GPIO_Init+0x1fc>)
 80008c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008c6:	2204      	movs	r2, #4
 80008c8:	4013      	ands	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ce:	4b73      	ldr	r3, [pc, #460]	@ (8000a9c <MX_GPIO_Init+0x1fc>)
 80008d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008d2:	4b72      	ldr	r3, [pc, #456]	@ (8000a9c <MX_GPIO_Init+0x1fc>)
 80008d4:	2120      	movs	r1, #32
 80008d6:	430a      	orrs	r2, r1
 80008d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80008da:	4b70      	ldr	r3, [pc, #448]	@ (8000a9c <MX_GPIO_Init+0x1fc>)
 80008dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008de:	2220      	movs	r2, #32
 80008e0:	4013      	ands	r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b6d      	ldr	r3, [pc, #436]	@ (8000a9c <MX_GPIO_Init+0x1fc>)
 80008e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ea:	4b6c      	ldr	r3, [pc, #432]	@ (8000a9c <MX_GPIO_Init+0x1fc>)
 80008ec:	2101      	movs	r1, #1
 80008ee:	430a      	orrs	r2, r1
 80008f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008f2:	4b6a      	ldr	r3, [pc, #424]	@ (8000a9c <MX_GPIO_Init+0x1fc>)
 80008f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008f6:	2201      	movs	r2, #1
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b67      	ldr	r3, [pc, #412]	@ (8000a9c <MX_GPIO_Init+0x1fc>)
 8000900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000902:	4b66      	ldr	r3, [pc, #408]	@ (8000a9c <MX_GPIO_Init+0x1fc>)
 8000904:	2102      	movs	r1, #2
 8000906:	430a      	orrs	r2, r1
 8000908:	635a      	str	r2, [r3, #52]	@ 0x34
 800090a:	4b64      	ldr	r3, [pc, #400]	@ (8000a9c <MX_GPIO_Init+0x1fc>)
 800090c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800090e:	2202      	movs	r2, #2
 8000910:	4013      	ands	r3, r2
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	4b61      	ldr	r3, [pc, #388]	@ (8000a9c <MX_GPIO_Init+0x1fc>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800091a:	4b60      	ldr	r3, [pc, #384]	@ (8000a9c <MX_GPIO_Init+0x1fc>)
 800091c:	2108      	movs	r1, #8
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	@ 0x34
 8000922:	4b5e      	ldr	r3, [pc, #376]	@ (8000a9c <MX_GPIO_Init+0x1fc>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000926:	2208      	movs	r2, #8
 8000928:	4013      	ands	r3, r2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB_DS4_Pin|RGB_DS2_Pin, GPIO_PIN_SET);
 800092e:	495c      	ldr	r1, [pc, #368]	@ (8000aa0 <MX_GPIO_Init+0x200>)
 8000930:	4b5c      	ldr	r3, [pc, #368]	@ (8000aa4 <MX_GPIO_Init+0x204>)
 8000932:	2201      	movs	r2, #1
 8000934:	0018      	movs	r0, r3
 8000936:	f002 fdd6 	bl	80034e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_DS1_GPIO_Port, RGB_DS1_Pin, GPIO_PIN_SET);
 800093a:	4b5b      	ldr	r3, [pc, #364]	@ (8000aa8 <MX_GPIO_Init+0x208>)
 800093c:	2201      	movs	r2, #1
 800093e:	2108      	movs	r1, #8
 8000940:	0018      	movs	r0, r3
 8000942:	f002 fdd0 	bl	80034e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NUCLEO_LD1_GPIO_Port, NUCLEO_LD1_Pin, GPIO_PIN_RESET);
 8000946:	23a0      	movs	r3, #160	@ 0xa0
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	2200      	movs	r2, #0
 800094c:	2120      	movs	r1, #32
 800094e:	0018      	movs	r0, r3
 8000950:	f002 fdc9 	bl	80034e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NUCLEO_LD2_GPIO_Port, NUCLEO_LD2_Pin, GPIO_PIN_RESET);
 8000954:	2380      	movs	r3, #128	@ 0x80
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4852      	ldr	r0, [pc, #328]	@ (8000aa4 <MX_GPIO_Init+0x204>)
 800095a:	2200      	movs	r2, #0
 800095c:	0019      	movs	r1, r3
 800095e:	f002 fdc2 	bl	80034e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin, GPIO_PIN_RESET);
 8000962:	4b52      	ldr	r3, [pc, #328]	@ (8000aac <MX_GPIO_Init+0x20c>)
 8000964:	2200      	movs	r2, #0
 8000966:	211c      	movs	r1, #28
 8000968:	0018      	movs	r0, r3
 800096a:	f002 fdbc 	bl	80034e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	4a4f      	ldr	r2, [pc, #316]	@ (8000ab0 <MX_GPIO_Init+0x210>)
 8000972:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2200      	movs	r2, #0
 8000978:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800097a:	193b      	adds	r3, r7, r4
 800097c:	2202      	movs	r2, #2
 800097e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000980:	193b      	adds	r3, r7, r4
 8000982:	4a48      	ldr	r2, [pc, #288]	@ (8000aa4 <MX_GPIO_Init+0x204>)
 8000984:	0019      	movs	r1, r3
 8000986:	0010      	movs	r0, r2
 8000988:	f002 fc1e 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RGB_DS4_Pin|RGB_DS2_Pin|NUCLEO_LD2_Pin;
 800098c:	193b      	adds	r3, r7, r4
 800098e:	4a49      	ldr	r2, [pc, #292]	@ (8000ab4 <MX_GPIO_Init+0x214>)
 8000990:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	2201      	movs	r2, #1
 8000996:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	4a3f      	ldr	r2, [pc, #252]	@ (8000aa4 <MX_GPIO_Init+0x204>)
 80009a8:	0019      	movs	r1, r3
 80009aa:	0010      	movs	r0, r2
 80009ac:	f002 fc0c 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW4_Pin;
 80009b0:	0021      	movs	r1, r4
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2280      	movs	r2, #128	@ 0x80
 80009b6:	0192      	lsls	r2, r2, #6
 80009b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	000c      	movs	r4, r1
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	2201      	movs	r2, #1
 80009c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW4_GPIO_Port, &GPIO_InitStruct);
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	4a36      	ldr	r2, [pc, #216]	@ (8000aa4 <MX_GPIO_Init+0x204>)
 80009cc:	0019      	movs	r1, r3
 80009ce:	0010      	movs	r0, r2
 80009d0:	f002 fbfa 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RGB_DS1_Pin;
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	2208      	movs	r2, #8
 80009d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	2201      	movs	r2, #1
 80009de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RGB_DS1_GPIO_Port, &GPIO_InitStruct);
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	4a2e      	ldr	r2, [pc, #184]	@ (8000aa8 <MX_GPIO_Init+0x208>)
 80009f0:	0019      	movs	r1, r3
 80009f2:	0010      	movs	r0, r2
 80009f4:	f002 fbe8 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUCLEO_LD1_Pin;
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	2220      	movs	r2, #32
 80009fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	2201      	movs	r2, #1
 8000a02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NUCLEO_LD1_GPIO_Port, &GPIO_InitStruct);
 8000a10:	193a      	adds	r2, r7, r4
 8000a12:	23a0      	movs	r3, #160	@ 0xa0
 8000a14:	05db      	lsls	r3, r3, #23
 8000a16:	0011      	movs	r1, r2
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f002 fbd5 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOYSTICK_CLICK_Pin;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	2202      	movs	r2, #2
 8000a22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(JOYSTICK_CLICK_GPIO_Port, &GPIO_InitStruct);
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	4a21      	ldr	r2, [pc, #132]	@ (8000ab8 <MX_GPIO_Init+0x218>)
 8000a34:	0019      	movs	r1, r3
 8000a36:	0010      	movs	r0, r2
 8000a38:	f002 fbc6 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	221c      	movs	r2, #28
 8000a40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2201      	movs	r2, #1
 8000a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	4a15      	ldr	r2, [pc, #84]	@ (8000aac <MX_GPIO_Init+0x20c>)
 8000a58:	0019      	movs	r1, r3
 8000a5a:	0010      	movs	r0, r2
 8000a5c:	f002 fbb4 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8000a60:	0021      	movs	r1, r4
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2280      	movs	r2, #128	@ 0x80
 8000a66:	00d2      	lsls	r2, r2, #3
 8000a68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	4a13      	ldr	r2, [pc, #76]	@ (8000abc <MX_GPIO_Init+0x21c>)
 8000a6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2202      	movs	r2, #2
 8000a74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <MX_GPIO_Init+0x204>)
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	0010      	movs	r0, r2
 8000a7e:	f002 fba3 	bl	80031c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	2007      	movs	r0, #7
 8000a88:	f002 f892 	bl	8002bb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a8c:	2007      	movs	r0, #7
 8000a8e:	f002 f8a4 	bl	8002bda <HAL_NVIC_EnableIRQ>

}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b00b      	add	sp, #44	@ 0x2c
 8000a98:	bd90      	pop	{r4, r7, pc}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	00001004 	.word	0x00001004
 8000aa4:	50000800 	.word	0x50000800
 8000aa8:	50001400 	.word	0x50001400
 8000aac:	50000c00 	.word	0x50000c00
 8000ab0:	00000802 	.word	0x00000802
 8000ab4:	00001204 	.word	0x00001204
 8000ab8:	50000400 	.word	0x50000400
 8000abc:	10110000 	.word	0x10110000

08000ac0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b38 <MX_I2C1_Init+0x78>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000acc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b3c <MX_I2C1_Init+0x7c>)
 8000ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000adc:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000afc:	0018      	movs	r0, r3
 8000afe:	f002 fd4d 	bl	800359c <HAL_I2C_Init>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d001      	beq.n	8000b0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b06:	f000 f9c0 	bl	8000e8a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f004 fe22 	bl	8005758 <HAL_I2CEx_ConfigAnalogFilter>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b18:	f000 f9b7 	bl	8000e8a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	0018      	movs	r0, r3
 8000b22:	f004 fe65 	bl	80057f0 <HAL_I2CEx_ConfigDigitalFilter>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b2a:	f000 f9ae 	bl	8000e8a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000180 	.word	0x20000180
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	00402d41 	.word	0x00402d41

08000b40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b093      	sub	sp, #76	@ 0x4c
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	2334      	movs	r3, #52	@ 0x34
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	2314      	movs	r3, #20
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f006 fd96 	bl	8007684 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b58:	2414      	movs	r4, #20
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	2320      	movs	r3, #32
 8000b60:	001a      	movs	r2, r3
 8000b62:	2100      	movs	r1, #0
 8000b64:	f006 fd8e 	bl	8007684 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a3b      	ldr	r2, [pc, #236]	@ (8000c5c <HAL_I2C_MspInit+0x11c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d16f      	bne.n	8000c52 <HAL_I2C_MspInit+0x112>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	2202      	movs	r2, #2
 8000b76:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	0018      	movs	r0, r3
 8000b82:	f005 fa4d 	bl	8006020 <HAL_RCCEx_PeriphCLKConfig>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b8a:	f000 f97e 	bl	8000e8a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	4b34      	ldr	r3, [pc, #208]	@ (8000c60 <HAL_I2C_MspInit+0x120>)
 8000b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b92:	4b33      	ldr	r3, [pc, #204]	@ (8000c60 <HAL_I2C_MspInit+0x120>)
 8000b94:	2102      	movs	r1, #2
 8000b96:	430a      	orrs	r2, r1
 8000b98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b9a:	4b31      	ldr	r3, [pc, #196]	@ (8000c60 <HAL_I2C_MspInit+0x120>)
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ba6:	2134      	movs	r1, #52	@ 0x34
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	22c0      	movs	r2, #192	@ 0xc0
 8000bac:	0092      	lsls	r2, r2, #2
 8000bae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2212      	movs	r2, #18
 8000bb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2206      	movs	r2, #6
 8000bc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	4a26      	ldr	r2, [pc, #152]	@ (8000c64 <HAL_I2C_MspInit+0x124>)
 8000bcc:	0019      	movs	r1, r3
 8000bce:	0010      	movs	r0, r2
 8000bd0:	f002 fafa 	bl	80031c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bd4:	4b22      	ldr	r3, [pc, #136]	@ (8000c60 <HAL_I2C_MspInit+0x120>)
 8000bd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bd8:	4b21      	ldr	r3, [pc, #132]	@ (8000c60 <HAL_I2C_MspInit+0x120>)
 8000bda:	2180      	movs	r1, #128	@ 0x80
 8000bdc:	0389      	lsls	r1, r1, #14
 8000bde:	430a      	orrs	r2, r1
 8000be0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000be2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <HAL_I2C_MspInit+0x120>)
 8000be4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000be6:	2380      	movs	r3, #128	@ 0x80
 8000be8:	039b      	lsls	r3, r3, #14
 8000bea:	4013      	ands	r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <HAL_I2C_MspInit+0x128>)
 8000bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c6c <HAL_I2C_MspInit+0x12c>)
 8000bf4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <HAL_I2C_MspInit+0x128>)
 8000bf8:	220b      	movs	r2, #11
 8000bfa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <HAL_I2C_MspInit+0x128>)
 8000bfe:	2210      	movs	r2, #16
 8000c00:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c02:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <HAL_I2C_MspInit+0x128>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c08:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <HAL_I2C_MspInit+0x128>)
 8000c0a:	2280      	movs	r2, #128	@ 0x80
 8000c0c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <HAL_I2C_MspInit+0x128>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c14:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <HAL_I2C_MspInit+0x128>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <HAL_I2C_MspInit+0x128>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c20:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <HAL_I2C_MspInit+0x128>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000c26:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <HAL_I2C_MspInit+0x128>)
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f001 fff3 	bl	8002c14 <HAL_DMA_Init>
 8000c2e:	1e03      	subs	r3, r0, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_I2C_MspInit+0xf6>
    {
      Error_Handler();
 8000c32:	f000 f92a 	bl	8000e8a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a0b      	ldr	r2, [pc, #44]	@ (8000c68 <HAL_I2C_MspInit+0x128>)
 8000c3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <HAL_I2C_MspInit+0x128>)
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2017      	movs	r0, #23
 8000c48:	f001 ffb2 	bl	8002bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000c4c:	2017      	movs	r0, #23
 8000c4e:	f001 ffc4 	bl	8002bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b013      	add	sp, #76	@ 0x4c
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	40021000 	.word	0x40021000
 8000c64:	50000400 	.word	0x50000400
 8000c68:	200001d4 	.word	0x200001d4
 8000c6c:	4002001c 	.word	0x4002001c

08000c70 <update_joystick>:

#define MIDDLE_ADC_VALUE 2047

static uint16_t raw_adc[2];

void update_joystick(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	// Update the ADC values of the JoyStick X and Y axis inputs
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)raw_adc, 2);
 8000c74:	4904      	ldr	r1, [pc, #16]	@ (8000c88 <update_joystick+0x18>)
 8000c76:	4b05      	ldr	r3, [pc, #20]	@ (8000c8c <update_joystick+0x1c>)
 8000c78:	2202      	movs	r2, #2
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f001 fb6c 	bl	8002358 <HAL_ADC_Start_DMA>

	// Do something here to detect press and hold
	// (although maybe we should just extend button.c?)
}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	20000230 	.word	0x20000230
 8000c8c:	200000ac 	.word	0x200000ac

08000c90 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	// No callback required as of yet
}
 8000c98:	46c0      	nop			@ (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <get_percentage_coordinates>:
uint16_t* get_raw_values(void) {
	// Return raw values (between 0 and 4096) of the analog inputs of the joysticks
	return raw_adc;
}

struct percentage_coords get_percentage_coordinates(void) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
	// Convert raw values to percentage values, stored in percentage_coords struct
	struct percentage_coords output;
	output.x = (((int16_t)raw_adc[1] - MIDDLE_ADC_VALUE) * 100) / MIDDLE_ADC_VALUE;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <get_percentage_coordinates+0x74>)
 8000ca8:	885b      	ldrh	r3, [r3, #2]
 8000caa:	b21b      	sxth	r3, r3
 8000cac:	4a1a      	ldr	r2, [pc, #104]	@ (8000d18 <get_percentage_coordinates+0x78>)
 8000cae:	4694      	mov	ip, r2
 8000cb0:	4463      	add	r3, ip
 8000cb2:	2264      	movs	r2, #100	@ 0x64
 8000cb4:	4353      	muls	r3, r2
 8000cb6:	4919      	ldr	r1, [pc, #100]	@ (8000d1c <get_percentage_coordinates+0x7c>)
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f7ff fab9 	bl	8000230 <__divsi3>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	b25a      	sxtb	r2, r3
 8000cc2:	003b      	movs	r3, r7
 8000cc4:	701a      	strb	r2, [r3, #0]
	output.y = (((int16_t)raw_adc[0] - MIDDLE_ADC_VALUE) * 100) / MIDDLE_ADC_VALUE;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <get_percentage_coordinates+0x74>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	4a12      	ldr	r2, [pc, #72]	@ (8000d18 <get_percentage_coordinates+0x78>)
 8000cce:	4694      	mov	ip, r2
 8000cd0:	4463      	add	r3, ip
 8000cd2:	2264      	movs	r2, #100	@ 0x64
 8000cd4:	4353      	muls	r3, r2
 8000cd6:	4911      	ldr	r1, [pc, #68]	@ (8000d1c <get_percentage_coordinates+0x7c>)
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f7ff faa9 	bl	8000230 <__divsi3>
 8000cde:	0003      	movs	r3, r0
 8000ce0:	b25a      	sxtb	r2, r3
 8000ce2:	003b      	movs	r3, r7
 8000ce4:	705a      	strb	r2, [r3, #1]

	return output;
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	003a      	movs	r2, r7
 8000cea:	8812      	ldrh	r2, [r2, #0]
 8000cec:	801a      	strh	r2, [r3, #0]
 8000cee:	1d3a      	adds	r2, r7, #4
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	7811      	ldrb	r1, [r2, #0]
 8000cf4:	20ff      	movs	r0, #255	@ 0xff
 8000cf6:	4001      	ands	r1, r0
 8000cf8:	20ff      	movs	r0, #255	@ 0xff
 8000cfa:	4383      	bics	r3, r0
 8000cfc:	430b      	orrs	r3, r1
 8000cfe:	7852      	ldrb	r2, [r2, #1]
 8000d00:	21ff      	movs	r1, #255	@ 0xff
 8000d02:	400a      	ands	r2, r1
 8000d04:	0212      	lsls	r2, r2, #8
 8000d06:	4906      	ldr	r1, [pc, #24]	@ (8000d20 <get_percentage_coordinates+0x80>)
 8000d08:	400b      	ands	r3, r1
 8000d0a:	4313      	orrs	r3, r2
}
 8000d0c:	1c18      	adds	r0, r3, #0
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b002      	add	sp, #8
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000230 	.word	0x20000230
 8000d18:	fffff801 	.word	0xfffff801
 8000d1c:	000007ff 	.word	0x000007ff
 8000d20:	ffff00ff 	.word	0xffff00ff

08000d24 <get_joystick_flags>:
	}

	return output;
}

struct joystick_position_flags get_joystick_flags(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
	struct percentage_coords percentages;
	percentages = get_percentage_coordinates();
 8000d2a:	f7ff ffb9 	bl	8000ca0 <get_percentage_coordinates>
 8000d2e:	1c03      	adds	r3, r0, #0
 8000d30:	1c1a      	adds	r2, r3, #0
 8000d32:	2108      	movs	r1, #8
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	801a      	strh	r2, [r3, #0]

	struct joystick_position_flags flags = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]

	if (percentages.x > 10) {
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	2b0a      	cmp	r3, #10
 8000d46:	dd03      	ble.n	8000d50 <get_joystick_flags+0x2c>
		flags.left = true;
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
 8000d4e:	e008      	b.n	8000d62 <get_joystick_flags+0x3e>
	} else if (percentages.x < -10) {
 8000d50:	2308      	movs	r3, #8
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	330a      	adds	r3, #10
 8000d5a:	da02      	bge.n	8000d62 <get_joystick_flags+0x3e>
		flags.right = true;
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2201      	movs	r2, #1
 8000d60:	705a      	strb	r2, [r3, #1]
	}

	if (percentages.y > 10) {
 8000d62:	2308      	movs	r3, #8
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	785b      	ldrb	r3, [r3, #1]
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	2b0a      	cmp	r3, #10
 8000d6c:	dd03      	ble.n	8000d76 <get_joystick_flags+0x52>
		flags.down = true;
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2201      	movs	r2, #1
 8000d72:	70da      	strb	r2, [r3, #3]
 8000d74:	e008      	b.n	8000d88 <get_joystick_flags+0x64>
	} else if (percentages.y < -10) {
 8000d76:	2308      	movs	r3, #8
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	785b      	ldrb	r3, [r3, #1]
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	330a      	adds	r3, #10
 8000d80:	da02      	bge.n	8000d88 <get_joystick_flags+0x64>
		flags.up = true;
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2201      	movs	r2, #1
 8000d86:	709a      	strb	r2, [r3, #2]
	}

	return flags;
 8000d88:	210c      	movs	r1, #12
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	1d3a      	adds	r2, r7, #4
 8000d8e:	6812      	ldr	r2, [r2, #0]
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	187a      	adds	r2, r7, r1
 8000d94:	2300      	movs	r3, #0
 8000d96:	7811      	ldrb	r1, [r2, #0]
 8000d98:	20ff      	movs	r0, #255	@ 0xff
 8000d9a:	4001      	ands	r1, r0
 8000d9c:	20ff      	movs	r0, #255	@ 0xff
 8000d9e:	4383      	bics	r3, r0
 8000da0:	430b      	orrs	r3, r1
 8000da2:	7851      	ldrb	r1, [r2, #1]
 8000da4:	20ff      	movs	r0, #255	@ 0xff
 8000da6:	4001      	ands	r1, r0
 8000da8:	0209      	lsls	r1, r1, #8
 8000daa:	4809      	ldr	r0, [pc, #36]	@ (8000dd0 <get_joystick_flags+0xac>)
 8000dac:	4003      	ands	r3, r0
 8000dae:	430b      	orrs	r3, r1
 8000db0:	7891      	ldrb	r1, [r2, #2]
 8000db2:	20ff      	movs	r0, #255	@ 0xff
 8000db4:	4001      	ands	r1, r0
 8000db6:	0409      	lsls	r1, r1, #16
 8000db8:	4806      	ldr	r0, [pc, #24]	@ (8000dd4 <get_joystick_flags+0xb0>)
 8000dba:	4003      	ands	r3, r0
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	78d2      	ldrb	r2, [r2, #3]
 8000dc0:	0612      	lsls	r2, r2, #24
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	4313      	orrs	r3, r2

	// Presses not yet implemented (although maybe we should just extend button.c?)
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b004      	add	sp, #16
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	ffff00ff 	.word	0xffff00ff
 8000dd4:	ff00ffff 	.word	0xff00ffff

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ddc:	f000 ff2d 	bl	8001c3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de0:	f000 f80f 	bl	8000e02 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de4:	f7ff fd5c 	bl	80008a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000de8:	f7ff fd34 	bl	8000854 <MX_DMA_Init>
  MX_ADC1_Init();
 8000dec:	f7ff fb0c 	bl	8000408 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000df0:	f7ff fe66 	bl	8000ac0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000df4:	f000 fe60 	bl	8001ab8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000df8:	f000 fda4 	bl	8001944 <MX_TIM2_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  app_main();
 8000dfc:	f7ff fc04 	bl	8000608 <app_main>
 8000e00:	e7fc      	b.n	8000dfc <main+0x24>

08000e02 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e02:	b590      	push	{r4, r7, lr}
 8000e04:	b08f      	sub	sp, #60	@ 0x3c
 8000e06:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e08:	2418      	movs	r4, #24
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	2320      	movs	r3, #32
 8000e10:	001a      	movs	r2, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	f006 fc36 	bl	8007684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	2314      	movs	r3, #20
 8000e1e:	001a      	movs	r2, r3
 8000e20:	2100      	movs	r1, #0
 8000e22:	f006 fc2f 	bl	8007684 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e26:	193b      	adds	r3, r7, r4
 8000e28:	2202      	movs	r2, #2
 8000e2a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2c:	193b      	adds	r3, r7, r4
 8000e2e:	2280      	movs	r2, #128	@ 0x80
 8000e30:	0052      	lsls	r2, r2, #1
 8000e32:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	2280      	movs	r2, #128	@ 0x80
 8000e38:	0152      	lsls	r2, r2, #5
 8000e3a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e3c:	193b      	adds	r3, r7, r4
 8000e3e:	2240      	movs	r2, #64	@ 0x40
 8000e40:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e42:	193b      	adds	r3, r7, r4
 8000e44:	0018      	movs	r0, r3
 8000e46:	f004 fd1f 	bl	8005888 <HAL_RCC_OscConfig>
 8000e4a:	1e03      	subs	r3, r0, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e4e:	f000 f81c 	bl	8000e8a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2100      	movs	r1, #0
 8000e74:	0018      	movs	r0, r3
 8000e76:	f004 ff2d 	bl	8005cd4 <HAL_RCC_ClockConfig>
 8000e7a:	1e03      	subs	r3, r0, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e7e:	f000 f804 	bl	8000e8a <Error_Handler>
  }
}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b00f      	add	sp, #60	@ 0x3c
 8000e88:	bd90      	pop	{r4, r7, pc}

08000e8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8e:	b672      	cpsid	i
}
 8000e90:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	e7fd      	b.n	8000e92 <Error_Handler+0x8>

08000e96 <ssd1306_Reset>:

#if defined(SSD1306_USE_I2C)

static uint8_t updateScreenPageIndex = 0;

void ssd1306_Reset(void) {
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af04      	add	r7, sp, #16
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000eac:	4808      	ldr	r0, [pc, #32]	@ (8000ed0 <ssd1306_WriteCommand+0x30>)
 8000eae:	2301      	movs	r3, #1
 8000eb0:	425b      	negs	r3, r3
 8000eb2:	9302      	str	r3, [sp, #8]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	1dfb      	adds	r3, r7, #7
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2178      	movs	r1, #120	@ 0x78
 8000ec2:	f002 fc11 	bl	80036e8 <HAL_I2C_Mem_Write>
}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	20000180 	.word	0x20000180

08000ed4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	@ (8000efc <ssd1306_WriteData+0x28>)
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2301      	movs	r3, #1
 8000eec:	2240      	movs	r2, #64	@ 0x40
 8000eee:	2178      	movs	r1, #120	@ 0x78
 8000ef0:	f002 fd28 	bl	8003944 <HAL_I2C_Mem_Write_DMA>
}
 8000ef4:	46c0      	nop			@ (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b002      	add	sp, #8
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000180 	.word	0x20000180

08000f00 <ssd1306_UpdatePage>:

void ssd1306_UpdatePage(uint8_t pageIndex) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	0002      	movs	r2, r0
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	701a      	strb	r2, [r3, #0]
	ssd1306_WriteCommand(0xB0 + pageIndex); // Set the current RAM page address.
 8000f0c:	1dfb      	adds	r3, r7, #7
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	3b50      	subs	r3, #80	@ 0x50
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff ffc3 	bl	8000ea0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff ffc0 	bl	8000ea0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000f20:	2010      	movs	r0, #16
 8000f22:	f7ff ffbd 	bl	8000ea0 <ssd1306_WriteCommand>
	ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*pageIndex],SSD1306_WIDTH);
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	01da      	lsls	r2, r3, #7
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <ssd1306_UpdatePage+0x40>)
 8000f2e:	18d3      	adds	r3, r2, r3
 8000f30:	2180      	movs	r1, #128	@ 0x80
 8000f32:	0018      	movs	r0, r3
 8000f34:	f7ff ffce 	bl	8000ed4 <ssd1306_WriteData>
}
 8000f38:	46c0      	nop			@ (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000234 	.word	0x20000234

08000f44 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages

	updateScreenPageIndex = 0;
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <ssd1306_UpdateScreen+0x1c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
	ssd1306_UpdatePage(updateScreenPageIndex);
 8000f4e:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <ssd1306_UpdateScreen+0x1c>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	0018      	movs	r0, r3
 8000f54:	f7ff ffd4 	bl	8000f00 <ssd1306_UpdatePage>
}
 8000f58:	46c0      	nop			@ (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	2000063a 	.word	0x2000063a

08000f64 <HAL_I2C_MemTxCpltCallback>:

/* Gets called by HAL when the entire buffer (i.e. one page) is transmitted through DMA */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	if (hi2c == &SSD1306_I2C_PORT)
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <HAL_I2C_MemTxCpltCallback+0x38>)
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d10e      	bne.n	8000f92 <HAL_I2C_MemTxCpltCallback+0x2e>
	{
		updateScreenPageIndex++;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_I2C_MemTxCpltCallback+0x3c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <HAL_I2C_MemTxCpltCallback+0x3c>)
 8000f7e:	701a      	strb	r2, [r3, #0]
		if (updateScreenPageIndex < SSD1306_HEIGHT/8)
 8000f80:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <HAL_I2C_MemTxCpltCallback+0x3c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b07      	cmp	r3, #7
 8000f86:	d804      	bhi.n	8000f92 <HAL_I2C_MemTxCpltCallback+0x2e>
		{
			ssd1306_UpdatePage(updateScreenPageIndex);
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <HAL_I2C_MemTxCpltCallback+0x3c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff ffb7 	bl	8000f00 <ssd1306_UpdatePage>
		}
	}
}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	20000180 	.word	0x20000180
 8000fa0:	2000063a 	.word	0x2000063a

08000fa4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000fa8:	f7ff ff75 	bl	8000e96 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000fac:	2064      	movs	r0, #100	@ 0x64
 8000fae:	f000 fec1 	bl	8001d34 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 f9de 	bl	8001374 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000fb8:	2020      	movs	r0, #32
 8000fba:	f7ff ff71 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff ff6e 	bl	8000ea0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000fc4:	20b0      	movs	r0, #176	@ 0xb0
 8000fc6:	f7ff ff6b 	bl	8000ea0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8000fca:	20c0      	movs	r0, #192	@ 0xc0
 8000fcc:	f7ff ff68 	bl	8000ea0 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff ff65 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000fd6:	2010      	movs	r0, #16
 8000fd8:	f7ff ff62 	bl	8000ea0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000fdc:	2040      	movs	r0, #64	@ 0x40
 8000fde:	f7ff ff5f 	bl	8000ea0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000fe2:	20ff      	movs	r0, #255	@ 0xff
 8000fe4:	f000 f9ae 	bl	8001344 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8000fe8:	20a0      	movs	r0, #160	@ 0xa0
 8000fea:	f7ff ff59 	bl	8000ea0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000fee:	20a6      	movs	r0, #166	@ 0xa6
 8000ff0:	f7ff ff56 	bl	8000ea0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000ff4:	20a8      	movs	r0, #168	@ 0xa8
 8000ff6:	f7ff ff53 	bl	8000ea0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000ffa:	203f      	movs	r0, #63	@ 0x3f
 8000ffc:	f7ff ff50 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001000:	20a4      	movs	r0, #164	@ 0xa4
 8001002:	f7ff ff4d 	bl	8000ea0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001006:	20d3      	movs	r0, #211	@ 0xd3
 8001008:	f7ff ff4a 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff ff47 	bl	8000ea0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001012:	20d5      	movs	r0, #213	@ 0xd5
 8001014:	f7ff ff44 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001018:	20f0      	movs	r0, #240	@ 0xf0
 800101a:	f7ff ff41 	bl	8000ea0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800101e:	20d9      	movs	r0, #217	@ 0xd9
 8001020:	f7ff ff3e 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001024:	2022      	movs	r0, #34	@ 0x22
 8001026:	f7ff ff3b 	bl	8000ea0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800102a:	20da      	movs	r0, #218	@ 0xda
 800102c:	f7ff ff38 	bl	8000ea0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001030:	2012      	movs	r0, #18
 8001032:	f7ff ff35 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001036:	20db      	movs	r0, #219	@ 0xdb
 8001038:	f7ff ff32 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800103c:	2020      	movs	r0, #32
 800103e:	f7ff ff2f 	bl	8000ea0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001042:	208d      	movs	r0, #141	@ 0x8d
 8001044:	f7ff ff2c 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001048:	2014      	movs	r0, #20
 800104a:	f7ff ff29 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800104e:	2001      	movs	r0, #1
 8001050:	f000 f990 	bl	8001374 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001054:	2000      	movs	r0, #0
 8001056:	f000 f811 	bl	800107c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800105a:	f7ff ff73 	bl	8000f44 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <ssd1306_Init+0xd4>)
 8001060:	2200      	movs	r2, #0
 8001062:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001064:	4b04      	ldr	r3, [pc, #16]	@ (8001078 <ssd1306_Init+0xd4>)
 8001066:	2200      	movs	r2, #0
 8001068:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800106a:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <ssd1306_Init+0xd4>)
 800106c:	2201      	movs	r2, #1
 800106e:	711a      	strb	r2, [r3, #4]
}
 8001070:	46c0      	nop			@ (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	20000634 	.word	0x20000634

0800107c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	0002      	movs	r2, r0
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <ssd1306_Fill+0x18>
 8001090:	2300      	movs	r3, #0
 8001092:	e000      	b.n	8001096 <ssd1306_Fill+0x1a>
 8001094:	23ff      	movs	r3, #255	@ 0xff
 8001096:	2280      	movs	r2, #128	@ 0x80
 8001098:	00d2      	lsls	r2, r2, #3
 800109a:	4804      	ldr	r0, [pc, #16]	@ (80010ac <ssd1306_Fill+0x30>)
 800109c:	0019      	movs	r1, r3
 800109e:	f006 faf1 	bl	8007684 <memset>
}
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	20000234 	.word	0x20000234

080010b0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	0004      	movs	r4, r0
 80010b8:	0008      	movs	r0, r1
 80010ba:	0011      	movs	r1, r2
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	1c22      	adds	r2, r4, #0
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	1dbb      	adds	r3, r7, #6
 80010c4:	1c02      	adds	r2, r0, #0
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	1d7b      	adds	r3, r7, #5
 80010ca:	1c0a      	adds	r2, r1, #0
 80010cc:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db47      	blt.n	8001168 <ssd1306_DrawPixel+0xb8>
 80010d8:	1dbb      	adds	r3, r7, #6
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80010de:	d843      	bhi.n	8001168 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80010e0:	1d7b      	adds	r3, r7, #5
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d11e      	bne.n	8001126 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010e8:	1dfb      	adds	r3, r7, #7
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	1dbb      	adds	r3, r7, #6
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	08db      	lsrs	r3, r3, #3
 80010f2:	b2d8      	uxtb	r0, r3
 80010f4:	0003      	movs	r3, r0
 80010f6:	01db      	lsls	r3, r3, #7
 80010f8:	18d3      	adds	r3, r2, r3
 80010fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001170 <ssd1306_DrawPixel+0xc0>)
 80010fc:	5cd3      	ldrb	r3, [r2, r3]
 80010fe:	b25a      	sxtb	r2, r3
 8001100:	1dbb      	adds	r3, r7, #6
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2107      	movs	r1, #7
 8001106:	400b      	ands	r3, r1
 8001108:	2101      	movs	r1, #1
 800110a:	4099      	lsls	r1, r3
 800110c:	000b      	movs	r3, r1
 800110e:	b25b      	sxtb	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b259      	sxtb	r1, r3
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	0003      	movs	r3, r0
 800111a:	01db      	lsls	r3, r3, #7
 800111c:	18d3      	adds	r3, r2, r3
 800111e:	b2c9      	uxtb	r1, r1
 8001120:	4a13      	ldr	r2, [pc, #76]	@ (8001170 <ssd1306_DrawPixel+0xc0>)
 8001122:	54d1      	strb	r1, [r2, r3]
 8001124:	e021      	b.n	800116a <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	781a      	ldrb	r2, [r3, #0]
 800112a:	1dbb      	adds	r3, r7, #6
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	08db      	lsrs	r3, r3, #3
 8001130:	b2d8      	uxtb	r0, r3
 8001132:	0003      	movs	r3, r0
 8001134:	01db      	lsls	r3, r3, #7
 8001136:	18d3      	adds	r3, r2, r3
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <ssd1306_DrawPixel+0xc0>)
 800113a:	5cd3      	ldrb	r3, [r2, r3]
 800113c:	b25b      	sxtb	r3, r3
 800113e:	1dba      	adds	r2, r7, #6
 8001140:	7812      	ldrb	r2, [r2, #0]
 8001142:	2107      	movs	r1, #7
 8001144:	400a      	ands	r2, r1
 8001146:	2101      	movs	r1, #1
 8001148:	4091      	lsls	r1, r2
 800114a:	000a      	movs	r2, r1
 800114c:	b252      	sxtb	r2, r2
 800114e:	43d2      	mvns	r2, r2
 8001150:	b252      	sxtb	r2, r2
 8001152:	4013      	ands	r3, r2
 8001154:	b259      	sxtb	r1, r3
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	0003      	movs	r3, r0
 800115c:	01db      	lsls	r3, r3, #7
 800115e:	18d3      	adds	r3, r2, r3
 8001160:	b2c9      	uxtb	r1, r1
 8001162:	4a03      	ldr	r2, [pc, #12]	@ (8001170 <ssd1306_DrawPixel+0xc0>)
 8001164:	54d1      	strb	r1, [r2, r3]
 8001166:	e000      	b.n	800116a <ssd1306_DrawPixel+0xba>
        return;
 8001168:	46c0      	nop			@ (mov r8, r8)
    }
}
 800116a:	46bd      	mov	sp, r7
 800116c:	b003      	add	sp, #12
 800116e:	bd90      	pop	{r4, r7, pc}
 8001170:	20000234 	.word	0x20000234

08001174 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b089      	sub	sp, #36	@ 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	0004      	movs	r4, r0
 800117c:	0038      	movs	r0, r7
 800117e:	6001      	str	r1, [r0, #0]
 8001180:	6042      	str	r2, [r0, #4]
 8001182:	6083      	str	r3, [r0, #8]
 8001184:	210f      	movs	r1, #15
 8001186:	187b      	adds	r3, r7, r1
 8001188:	1c22      	adds	r2, r4, #0
 800118a:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800118c:	000a      	movs	r2, r1
 800118e:	18bb      	adds	r3, r7, r2
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b1f      	cmp	r3, #31
 8001194:	d903      	bls.n	800119e <ssd1306_WriteChar+0x2a>
 8001196:	18bb      	adds	r3, r7, r2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b7e      	cmp	r3, #126	@ 0x7e
 800119c:	d901      	bls.n	80011a2 <ssd1306_WriteChar+0x2e>
        return 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	e084      	b.n	80012ac <ssd1306_WriteChar+0x138>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80011a2:	4b44      	ldr	r3, [pc, #272]	@ (80012b4 <ssd1306_WriteChar+0x140>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	001a      	movs	r2, r3
 80011a8:	003b      	movs	r3, r7
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	18d3      	adds	r3, r2, r3
 80011ae:	2b80      	cmp	r3, #128	@ 0x80
 80011b0:	dc07      	bgt.n	80011c2 <ssd1306_WriteChar+0x4e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80011b2:	4b40      	ldr	r3, [pc, #256]	@ (80012b4 <ssd1306_WriteChar+0x140>)
 80011b4:	885b      	ldrh	r3, [r3, #2]
 80011b6:	001a      	movs	r2, r3
 80011b8:	003b      	movs	r3, r7
 80011ba:	785b      	ldrb	r3, [r3, #1]
 80011bc:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80011be:	2b40      	cmp	r3, #64	@ 0x40
 80011c0:	dd01      	ble.n	80011c6 <ssd1306_WriteChar+0x52>
    {
        // Not enough space on current line
        return 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e072      	b.n	80012ac <ssd1306_WriteChar+0x138>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
 80011ca:	e051      	b.n	8001270 <ssd1306_WriteChar+0xfc>
        b = Font.data[(ch - 32) * Font.height + i];
 80011cc:	003b      	movs	r3, r7
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	230f      	movs	r3, #15
 80011d2:	18fb      	adds	r3, r7, r3
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	3b20      	subs	r3, #32
 80011d8:	0039      	movs	r1, r7
 80011da:	7849      	ldrb	r1, [r1, #1]
 80011dc:	434b      	muls	r3, r1
 80011de:	0019      	movs	r1, r3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	18cb      	adds	r3, r1, r3
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	18d3      	adds	r3, r2, r3
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
 80011f0:	e035      	b.n	800125e <ssd1306_WriteChar+0xea>
            if((b << j) & 0x8000)  {
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	409a      	lsls	r2, r3
 80011f8:	2380      	movs	r3, #128	@ 0x80
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	4013      	ands	r3, r2
 80011fe:	d014      	beq.n	800122a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001200:	4b2c      	ldr	r3, [pc, #176]	@ (80012b4 <ssd1306_WriteChar+0x140>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	18d3      	adds	r3, r2, r3
 800120c:	b2d8      	uxtb	r0, r3
 800120e:	4b29      	ldr	r3, [pc, #164]	@ (80012b4 <ssd1306_WriteChar+0x140>)
 8001210:	885b      	ldrh	r3, [r3, #2]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	18d3      	adds	r3, r2, r3
 800121a:	b2d9      	uxtb	r1, r3
 800121c:	2330      	movs	r3, #48	@ 0x30
 800121e:	18fb      	adds	r3, r7, r3
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	001a      	movs	r2, r3
 8001224:	f7ff ff44 	bl	80010b0 <ssd1306_DrawPixel>
 8001228:	e016      	b.n	8001258 <ssd1306_WriteChar+0xe4>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800122a:	4b22      	ldr	r3, [pc, #136]	@ (80012b4 <ssd1306_WriteChar+0x140>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	18d3      	adds	r3, r2, r3
 8001236:	b2d8      	uxtb	r0, r3
 8001238:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <ssd1306_WriteChar+0x140>)
 800123a:	885b      	ldrh	r3, [r3, #2]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	18d3      	adds	r3, r2, r3
 8001244:	b2d9      	uxtb	r1, r3
 8001246:	2330      	movs	r3, #48	@ 0x30
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	425a      	negs	r2, r3
 800124e:	4153      	adcs	r3, r2
 8001250:	b2db      	uxtb	r3, r3
 8001252:	001a      	movs	r2, r3
 8001254:	f7ff ff2c 	bl	80010b0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	3301      	adds	r3, #1
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	003b      	movs	r3, r7
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	001a      	movs	r2, r3
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	4293      	cmp	r3, r2
 8001268:	d3c3      	bcc.n	80011f2 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3301      	adds	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	003b      	movs	r3, r7
 8001272:	785b      	ldrb	r3, [r3, #1]
 8001274:	001a      	movs	r2, r3
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	4293      	cmp	r3, r2
 800127a:	d3a7      	bcc.n	80011cc <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 800127c:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <ssd1306_WriteChar+0x140>)
 800127e:	881a      	ldrh	r2, [r3, #0]
 8001280:	003b      	movs	r3, r7
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d008      	beq.n	800129a <ssd1306_WriteChar+0x126>
 8001288:	003b      	movs	r3, r7
 800128a:	6899      	ldr	r1, [r3, #8]
 800128c:	230f      	movs	r3, #15
 800128e:	18fb      	adds	r3, r7, r3
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	3b20      	subs	r3, #32
 8001294:	18cb      	adds	r3, r1, r3
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	e001      	b.n	800129e <ssd1306_WriteChar+0x12a>
 800129a:	003b      	movs	r3, r7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	189b      	adds	r3, r3, r2
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <ssd1306_WriteChar+0x140>)
 80012a4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80012a6:	230f      	movs	r3, #15
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	781b      	ldrb	r3, [r3, #0]
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b009      	add	sp, #36	@ 0x24
 80012b2:	bd90      	pop	{r4, r7, pc}
 80012b4:	20000634 	.word	0x20000634

080012b8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af02      	add	r7, sp, #8
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	0038      	movs	r0, r7
 80012c2:	6001      	str	r1, [r0, #0]
 80012c4:	6042      	str	r2, [r0, #4]
 80012c6:	6083      	str	r3, [r0, #8]
    while (*str) {
 80012c8:	e017      	b.n	80012fa <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	7818      	ldrb	r0, [r3, #0]
 80012ce:	003b      	movs	r3, r7
 80012d0:	2218      	movs	r2, #24
 80012d2:	18ba      	adds	r2, r7, r2
 80012d4:	7812      	ldrb	r2, [r2, #0]
 80012d6:	9200      	str	r2, [sp, #0]
 80012d8:	6819      	ldr	r1, [r3, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f7ff ff49 	bl	8001174 <ssd1306_WriteChar>
 80012e2:	0003      	movs	r3, r0
 80012e4:	001a      	movs	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d002      	beq.n	80012f4 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	e008      	b.n	8001306 <ssd1306_WriteString+0x4e>
        }
        str++;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3301      	adds	r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1e3      	bne.n	80012ca <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	781b      	ldrb	r3, [r3, #0]
}
 8001306:	0018      	movs	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	b004      	add	sp, #16
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	0002      	movs	r2, r0
 8001318:	1dfb      	adds	r3, r7, #7
 800131a:	701a      	strb	r2, [r3, #0]
 800131c:	1dbb      	adds	r3, r7, #6
 800131e:	1c0a      	adds	r2, r1, #0
 8001320:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b29a      	uxth	r2, r3
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <ssd1306_SetCursor+0x30>)
 800132a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800132c:	1dbb      	adds	r3, r7, #6
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b29a      	uxth	r2, r3
 8001332:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <ssd1306_SetCursor+0x30>)
 8001334:	805a      	strh	r2, [r3, #2]
}
 8001336:	46c0      	nop			@ (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b002      	add	sp, #8
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	20000634 	.word	0x20000634

08001344 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	0002      	movs	r2, r0
 800134c:	1dfb      	adds	r3, r7, #7
 800134e:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001350:	210f      	movs	r1, #15
 8001352:	187b      	adds	r3, r7, r1
 8001354:	2281      	movs	r2, #129	@ 0x81
 8001356:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001358:	187b      	adds	r3, r7, r1
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff fd9f 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001362:	1dfb      	adds	r3, r7, #7
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	0018      	movs	r0, r3
 8001368:	f7ff fd9a 	bl	8000ea0 <ssd1306_WriteCommand>
}
 800136c:	46c0      	nop			@ (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b004      	add	sp, #16
 8001372:	bd80      	pop	{r7, pc}

08001374 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	0002      	movs	r2, r0
 800137c:	1dfb      	adds	r3, r7, #7
 800137e:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d007      	beq.n	8001398 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8001388:	230f      	movs	r3, #15
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	22af      	movs	r2, #175	@ 0xaf
 800138e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8001390:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <ssd1306_SetDisplayOn+0x48>)
 8001392:	2201      	movs	r2, #1
 8001394:	715a      	strb	r2, [r3, #5]
 8001396:	e006      	b.n	80013a6 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8001398:	230f      	movs	r3, #15
 800139a:	18fb      	adds	r3, r7, r3
 800139c:	22ae      	movs	r2, #174	@ 0xae
 800139e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <ssd1306_SetDisplayOn+0x48>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80013a6:	230f      	movs	r3, #15
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	0018      	movs	r0, r3
 80013ae:	f7ff fd77 	bl	8000ea0 <ssd1306_WriteCommand>
}
 80013b2:	46c0      	nop			@ (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b004      	add	sp, #16
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	20000634 	.word	0x20000634

080013c0 <get_step_count>:
void decrement_steps(uint16_t by) {
	// Decrease the step count
    step_count -= by;
}

uint16_t get_step_count(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	// Get the step count
    return step_count;
 80013c4:	4b02      	ldr	r3, [pc, #8]	@ (80013d0 <get_step_count+0x10>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
}
 80013c8:	0018      	movs	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	2000063c 	.word	0x2000063c

080013d4 <toggle_step_unit>:

void toggle_step_unit(void) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	steps_as_percentage = !(steps_as_percentage);
 80013d8:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <toggle_step_unit+0x28>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	1e5a      	subs	r2, r3, #1
 80013de:	4193      	sbcs	r3, r2
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2201      	movs	r2, #1
 80013e4:	4053      	eors	r3, r2
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	1c1a      	adds	r2, r3, #0
 80013ea:	2301      	movs	r3, #1
 80013ec:	4013      	ands	r3, r2
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b02      	ldr	r3, [pc, #8]	@ (80013fc <toggle_step_unit+0x28>)
 80013f2:	701a      	strb	r2, [r3, #0]
}
 80013f4:	46c0      	nop			@ (mov r8, r8)
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	2000063e 	.word	0x2000063e

08001400 <steps_state_task_execute>:


void steps_state_task_execute(void)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b085      	sub	sp, #20
 8001404:	af02      	add	r7, sp, #8
	// Display the step count
	static char count[18];
	if (steps_as_percentage) {
 8001406:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <steps_state_task_execute+0x68>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d018      	beq.n	8001440 <steps_state_task_execute+0x40>
		uint16_t step_percentage = (step_count * 100) / get_step_goal(); // avoid floats
 800140e:	4b17      	ldr	r3, [pc, #92]	@ (800146c <steps_state_task_execute+0x6c>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	001a      	movs	r2, r3
 8001414:	2364      	movs	r3, #100	@ 0x64
 8001416:	4353      	muls	r3, r2
 8001418:	001c      	movs	r4, r3
 800141a:	f000 f8af 	bl	800157c <get_step_goal>
 800141e:	0003      	movs	r3, r0
 8001420:	0019      	movs	r1, r3
 8001422:	0020      	movs	r0, r4
 8001424:	f7fe ff04 	bl	8000230 <__divsi3>
 8001428:	0003      	movs	r3, r0
 800142a:	001a      	movs	r2, r3
 800142c:	1dbb      	adds	r3, r7, #6
 800142e:	801a      	strh	r2, [r3, #0]
		snprintf(count, sizeof(count), "Steps: %u%% goal", step_percentage);
 8001430:	1dbb      	adds	r3, r7, #6
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	4a0e      	ldr	r2, [pc, #56]	@ (8001470 <steps_state_task_execute+0x70>)
 8001436:	480f      	ldr	r0, [pc, #60]	@ (8001474 <steps_state_task_execute+0x74>)
 8001438:	2112      	movs	r1, #18
 800143a:	f006 f8ef 	bl	800761c <sniprintf>
 800143e:	e006      	b.n	800144e <steps_state_task_execute+0x4e>
	} else {
		snprintf(count, sizeof(count), "Steps: %u", step_count);
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <steps_state_task_execute+0x6c>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	4a0c      	ldr	r2, [pc, #48]	@ (8001478 <steps_state_task_execute+0x78>)
 8001446:	480b      	ldr	r0, [pc, #44]	@ (8001474 <steps_state_task_execute+0x74>)
 8001448:	2112      	movs	r1, #18
 800144a:	f006 f8e7 	bl	800761c <sniprintf>
	}
	ssd1306_WriteString(count, Font_7x10, White);
 800144e:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <steps_state_task_execute+0x7c>)
 8001450:	4808      	ldr	r0, [pc, #32]	@ (8001474 <steps_state_task_execute+0x74>)
 8001452:	2201      	movs	r2, #1
 8001454:	9200      	str	r2, [sp, #0]
 8001456:	6819      	ldr	r1, [r3, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f7ff ff2c 	bl	80012b8 <ssd1306_WriteString>
}
 8001460:	46c0      	nop			@ (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b003      	add	sp, #12
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	2000063e 	.word	0x2000063e
 800146c:	2000063c 	.word	0x2000063c
 8001470:	08007f98 	.word	0x08007f98
 8001474:	20000640 	.word	0x20000640
 8001478:	08007fac 	.word	0x08007fac
 800147c:	08008774 	.word	0x08008774

08001480 <toggle_distance_unit>:
#define KILOMETRES_TO_YARDS 1093

// Boolean for selecting units (km/yd)
static bool distance_in_yards = false;

void toggle_distance_unit(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	distance_in_yards = !(distance_in_yards);
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <toggle_distance_unit+0x28>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	1e5a      	subs	r2, r3, #1
 800148a:	4193      	sbcs	r3, r2
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2201      	movs	r2, #1
 8001490:	4053      	eors	r3, r2
 8001492:	b2db      	uxtb	r3, r3
 8001494:	1c1a      	adds	r2, r3, #0
 8001496:	2301      	movs	r3, #1
 8001498:	4013      	ands	r3, r2
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b02      	ldr	r3, [pc, #8]	@ (80014a8 <toggle_distance_unit+0x28>)
 800149e:	701a      	strb	r2, [r3, #0]
}
 80014a0:	46c0      	nop			@ (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			@ (mov r8, r8)
 80014a8:	20000652 	.word	0x20000652

080014ac <distance_state_task_execute>:

void distance_state_task_execute(void)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af02      	add	r7, sp, #8
	// Calculate the distance walked, in meters, avoiding floats
	static char distance_string[18];
	uint16_t meters = ((uint32_t)get_step_count() * CM_PER_STEP) / 100;
 80014b2:	f7ff ff85 	bl	80013c0 <get_step_count>
 80014b6:	0003      	movs	r3, r0
 80014b8:	001a      	movs	r2, r3
 80014ba:	0013      	movs	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	189b      	adds	r3, r3, r2
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	2164      	movs	r1, #100	@ 0x64
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7fe fe29 	bl	800011c <__udivsi3>
 80014ca:	0003      	movs	r3, r0
 80014cc:	001a      	movs	r2, r3
 80014ce:	1dbb      	adds	r3, r7, #6
 80014d0:	801a      	strh	r2, [r3, #0]

	// Convert to yards if requested
	if (distance_in_yards) {
 80014d2:	4b25      	ldr	r3, [pc, #148]	@ (8001568 <distance_state_task_execute+0xbc>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d019      	beq.n	800150e <distance_state_task_execute+0x62>
		uint16_t yards = ((uint32_t)meters * KILOMETRES_TO_YARDS) / 1000;
 80014da:	1dbb      	adds	r3, r7, #6
 80014dc:	881a      	ldrh	r2, [r3, #0]
 80014de:	0013      	movs	r3, r2
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	189b      	adds	r3, r3, r2
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	189b      	adds	r3, r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	189b      	adds	r3, r3, r2
 80014ec:	22fa      	movs	r2, #250	@ 0xfa
 80014ee:	0091      	lsls	r1, r2, #2
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7fe fe13 	bl	800011c <__udivsi3>
 80014f6:	0003      	movs	r3, r0
 80014f8:	001a      	movs	r2, r3
 80014fa:	003b      	movs	r3, r7
 80014fc:	801a      	strh	r2, [r3, #0]
		snprintf(distance_string, sizeof(distance_string), "Dist: %uyd", yards);
 80014fe:	003b      	movs	r3, r7
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	4a1a      	ldr	r2, [pc, #104]	@ (800156c <distance_state_task_execute+0xc0>)
 8001504:	481a      	ldr	r0, [pc, #104]	@ (8001570 <distance_state_task_execute+0xc4>)
 8001506:	2112      	movs	r1, #18
 8001508:	f006 f888 	bl	800761c <sniprintf>
 800150c:	e01e      	b.n	800154c <distance_state_task_execute+0xa0>
	} else {
		// Split into kilometers and meters
		uint16_t kilometers = meters / 1000; // 2600 = 2
 800150e:	1d3c      	adds	r4, r7, #4
 8001510:	1dbb      	adds	r3, r7, #6
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	22fa      	movs	r2, #250	@ 0xfa
 8001516:	0091      	lsls	r1, r2, #2
 8001518:	0018      	movs	r0, r3
 800151a:	f7fe fdff 	bl	800011c <__udivsi3>
 800151e:	0003      	movs	r3, r0
 8001520:	8023      	strh	r3, [r4, #0]
		uint16_t remainder_meters = meters % 1000; // = 600
 8001522:	1cbc      	adds	r4, r7, #2
 8001524:	1dbb      	adds	r3, r7, #6
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	22fa      	movs	r2, #250	@ 0xfa
 800152a:	0091      	lsls	r1, r2, #2
 800152c:	0018      	movs	r0, r3
 800152e:	f7fe fe7b 	bl	8000228 <__aeabi_uidivmod>
 8001532:	000b      	movs	r3, r1
 8001534:	8023      	strh	r3, [r4, #0]
		snprintf(distance_string, sizeof(distance_string), "Dist: %u.%03ukm", kilometers, remainder_meters);
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	8819      	ldrh	r1, [r3, #0]
 800153a:	1cbb      	adds	r3, r7, #2
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	4a0d      	ldr	r2, [pc, #52]	@ (8001574 <distance_state_task_execute+0xc8>)
 8001540:	480b      	ldr	r0, [pc, #44]	@ (8001570 <distance_state_task_execute+0xc4>)
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	000b      	movs	r3, r1
 8001546:	2112      	movs	r1, #18
 8001548:	f006 f868 	bl	800761c <sniprintf>
	}

	ssd1306_WriteString(distance_string, Font_7x10, White);
 800154c:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <distance_state_task_execute+0xcc>)
 800154e:	4808      	ldr	r0, [pc, #32]	@ (8001570 <distance_state_task_execute+0xc4>)
 8001550:	2201      	movs	r2, #1
 8001552:	9200      	str	r2, [sp, #0]
 8001554:	6819      	ldr	r1, [r3, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f7ff fead 	bl	80012b8 <ssd1306_WriteString>
}
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	46bd      	mov	sp, r7
 8001562:	b003      	add	sp, #12
 8001564:	bd90      	pop	{r4, r7, pc}
 8001566:	46c0      	nop			@ (mov r8, r8)
 8001568:	20000652 	.word	0x20000652
 800156c:	08007fb8 	.word	0x08007fb8
 8001570:	20000654 	.word	0x20000654
 8001574:	08007fc4 	.word	0x08007fc4
 8001578:	08008774 	.word	0x08008774

0800157c <get_step_goal>:

void set_step_goal(uint16_t goal) {
    step_goal = goal;
}

uint16_t get_step_goal() {
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	return step_goal;
 8001580:	4b02      	ldr	r3, [pc, #8]	@ (800158c <get_step_goal+0x10>)
 8001582:	881b      	ldrh	r3, [r3, #0]
}
 8001584:	0018      	movs	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	20000030 	.word	0x20000030

08001590 <goal_state_task_execute>:


void goal_state_task_execute(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af02      	add	r7, sp, #8
	// Display the step goal
	static char goal[18];
	snprintf(goal, sizeof(goal), "Goal: %u\n", step_goal);
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <goal_state_task_execute+0x2c>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	4a09      	ldr	r2, [pc, #36]	@ (80015c0 <goal_state_task_execute+0x30>)
 800159c:	4809      	ldr	r0, [pc, #36]	@ (80015c4 <goal_state_task_execute+0x34>)
 800159e:	2112      	movs	r1, #18
 80015a0:	f006 f83c 	bl	800761c <sniprintf>
	ssd1306_WriteString(goal, Font_7x10, White);
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <goal_state_task_execute+0x38>)
 80015a6:	4807      	ldr	r0, [pc, #28]	@ (80015c4 <goal_state_task_execute+0x34>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	9200      	str	r2, [sp, #0]
 80015ac:	6819      	ldr	r1, [r3, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f7ff fe81 	bl	80012b8 <ssd1306_WriteString>
}
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000030 	.word	0x20000030
 80015c0:	08007fd4 	.word	0x08007fd4
 80015c4:	20000668 	.word	0x20000668
 80015c8:	08008774 	.word	0x08008774

080015cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <HAL_MspInit+0x44>)
 80015d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <HAL_MspInit+0x44>)
 80015d8:	2101      	movs	r1, #1
 80015da:	430a      	orrs	r2, r1
 80015dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80015de:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <HAL_MspInit+0x44>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	2201      	movs	r2, #1
 80015e4:	4013      	ands	r3, r2
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <HAL_MspInit+0x44>)
 80015ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015ee:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <HAL_MspInit+0x44>)
 80015f0:	2180      	movs	r1, #128	@ 0x80
 80015f2:	0549      	lsls	r1, r1, #21
 80015f4:	430a      	orrs	r2, r1
 80015f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015f8:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <HAL_MspInit+0x44>)
 80015fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015fc:	2380      	movs	r3, #128	@ 0x80
 80015fe:	055b      	lsls	r3, r3, #21
 8001600:	4013      	ands	r3, r2
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	b002      	add	sp, #8
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	40021000 	.word	0x40021000

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001618:	46c0      	nop			@ (mov r8, r8)
 800161a:	e7fd      	b.n	8001618 <NMI_Handler+0x4>

0800161c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001620:	46c0      	nop			@ (mov r8, r8)
 8001622:	e7fd      	b.n	8001620 <HardFault_Handler+0x4>

08001624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001628:	46c0      	nop			@ (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	46c0      	nop			@ (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163c:	f000 fb5e 	bl	8001cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001640:	46c0      	nop			@ (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 800164a:	2380      	movs	r3, #128	@ 0x80
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	0018      	movs	r0, r3
 8001650:	f001 ff66 	bl	8003520 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001654:	46c0      	nop			@ (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001660:	4b03      	ldr	r3, [pc, #12]	@ (8001670 <DMA1_Channel1_IRQHandler+0x14>)
 8001662:	0018      	movs	r0, r3
 8001664:	f001 fc62 	bl	8002f2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001668:	46c0      	nop			@ (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	20000110 	.word	0x20000110

08001674 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001678:	4b03      	ldr	r3, [pc, #12]	@ (8001688 <DMA1_Channel2_3_IRQHandler+0x14>)
 800167a:	0018      	movs	r0, r3
 800167c:	f001 fc56 	bl	8002f2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001680:	46c0      	nop			@ (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			@ (mov r8, r8)
 8001688:	200001d4 	.word	0x200001d4

0800168c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001690:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <I2C1_IRQHandler+0x2c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699a      	ldr	r2, [r3, #24]
 8001696:	23e0      	movs	r3, #224	@ 0xe0
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4013      	ands	r3, r2
 800169c:	d004      	beq.n	80016a8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <I2C1_IRQHandler+0x2c>)
 80016a0:	0018      	movs	r0, r3
 80016a2:	f002 fa6b 	bl	8003b7c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80016a6:	e003      	b.n	80016b0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80016a8:	4b03      	ldr	r3, [pc, #12]	@ (80016b8 <I2C1_IRQHandler+0x2c>)
 80016aa:	0018      	movs	r0, r3
 80016ac:	f002 fa4c 	bl	8003b48 <HAL_I2C_EV_IRQHandler>
}
 80016b0:	46c0      	nop			@ (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			@ (mov r8, r8)
 80016b8:	20000180 	.word	0x20000180

080016bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c4:	4a14      	ldr	r2, [pc, #80]	@ (8001718 <_sbrk+0x5c>)
 80016c6:	4b15      	ldr	r3, [pc, #84]	@ (800171c <_sbrk+0x60>)
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d0:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d8:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <_sbrk+0x64>)
 80016da:	4a12      	ldr	r2, [pc, #72]	@ (8001724 <_sbrk+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	18d3      	adds	r3, r2, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d207      	bcs.n	80016fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ec:	f005 ffd2 	bl	8007694 <__errno>
 80016f0:	0003      	movs	r3, r0
 80016f2:	220c      	movs	r2, #12
 80016f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f6:	2301      	movs	r3, #1
 80016f8:	425b      	negs	r3, r3
 80016fa:	e009      	b.n	8001710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016fc:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001702:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	18d2      	adds	r2, r2, r3
 800170a:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <_sbrk+0x64>)
 800170c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	b006      	add	sp, #24
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20006000 	.word	0x20006000
 800171c:	00000400 	.word	0x00000400
 8001720:	2000067c 	.word	0x2000067c
 8001724:	200008b8 	.word	0x200008b8

08001728 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800172c:	4b03      	ldr	r3, [pc, #12]	@ (800173c <SystemInit+0x14>)
 800172e:	2280      	movs	r2, #128	@ 0x80
 8001730:	0512      	lsls	r2, r2, #20
 8001732:	609a      	str	r2, [r3, #8]
#endif
}
 8001734:	46c0      	nop			@ (mov r8, r8)
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			@ (mov r8, r8)
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <buttons_task_init>:
#include "task_buttons.h"
#include "buttons.h"

#include <stdbool.h>

void buttons_task_init(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	// Initialise the upstream button driver, enable all RGB LED colour channels.
	buttons_init();
 8001744:	f7fe ffcc 	bl	80006e0 <buttons_init>
}
 8001748:	46c0      	nop			@ (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <buttons_task_execute>:

bool buttons_task_execute(void) {
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
	buttons_update();
 8001752:	f7fe ffff 	bl	8000754 <buttons_update>
}
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	0018      	movs	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <display_task_init>:

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

void display_task_init(void) {
 800175e:	b580      	push	{r7, lr}
 8001760:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8001762:	f7ff fc1f 	bl	8000fa4 <ssd1306_Init>
	ssd1306_SetCursor(0, 0);
 8001766:	2100      	movs	r1, #0
 8001768:	2000      	movs	r0, #0
 800176a:	f7ff fdd1 	bl	8001310 <ssd1306_SetCursor>
}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <display_task_execute>:

void display_task_execute(void) {
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	// Fetch coordinate strings
	ssd1306_UpdateScreen();
 8001778:	f7ff fbe4 	bl	8000f44 <ssd1306_UpdateScreen>
}
 800177c:	46c0      	nop			@ (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <fsm_state_entry>:
static uint32_t fsmTaskNextRun = 0;

static bool update_display = false;


void fsm_state_entry(state_t state) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	0002      	movs	r2, r0
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	701a      	strb	r2, [r3, #0]
	// Set up the screen

	// Call the function associated with this state
	switch(state) {
 8001790:	1dfb      	adds	r3, r7, #7
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b04      	cmp	r3, #4
 8001796:	d80e      	bhi.n	80017b6 <fsm_state_entry+0x32>
 8001798:	009a      	lsls	r2, r3, #2
 800179a:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <fsm_state_entry+0x3c>)
 800179c:	18d3      	adds	r3, r2, r3
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	469f      	mov	pc, r3
		case STATE_STEPS:
			steps_state_task_execute();
 80017a2:	f7ff fe2d 	bl	8001400 <steps_state_task_execute>
			break;
 80017a6:	e006      	b.n	80017b6 <fsm_state_entry+0x32>
		case STATE_DISTANCE:
			distance_state_task_execute();
 80017a8:	f7ff fe80 	bl	80014ac <distance_state_task_execute>
			break;
 80017ac:	e003      	b.n	80017b6 <fsm_state_entry+0x32>
		case STATE_GOAL:
			goal_state_task_execute();
 80017ae:	f7ff feef 	bl	8001590 <goal_state_task_execute>
			break;
 80017b2:	e000      	b.n	80017b6 <fsm_state_entry+0x32>
		case STATE_MODIFY_GOAL:
			//modify_state_task_execute();
			break;
		case STATE_TEST:
			//test_state_task_execute();
			break;
 80017b4:	46c0      	nop			@ (mov r8, r8)
	}
}
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			@ (mov r8, r8)
 80017c0:	080087e0 	.word	0x080087e0

080017c4 <fsm_task_execute>:

void fsm_task_execute(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af02      	add	r7, sp, #8
	// Task to be called by the scheduler, to move between FSM states

	// Don't do anything if the last input was recent
	if (HAL_GetTick() < fsmTaskNextRun) return;
 80017ca:	f000 faa9 	bl	8001d20 <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	4b4e      	ldr	r3, [pc, #312]	@ (800190c <fsm_task_execute+0x148>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d200      	bcs.n	80017da <fsm_task_execute+0x16>
 80017d8:	e094      	b.n	8001904 <fsm_task_execute+0x140>

	// Pull flags from the joystick module
	struct joystick_position_flags joystick_position = get_joystick_flags();
 80017da:	f7ff faa3 	bl	8000d24 <get_joystick_flags>
 80017de:	0003      	movs	r3, r0
 80017e0:	001a      	movs	r2, r3
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	601a      	str	r2, [r3, #0]

	// Pull flags from the button module
	// not implemented

	// Implement state machine
	switch (current_state) {
 80017e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001910 <fsm_task_execute+0x14c>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d84d      	bhi.n	800188a <fsm_task_execute+0xc6>
 80017ee:	009a      	lsls	r2, r3, #2
 80017f0:	4b48      	ldr	r3, [pc, #288]	@ (8001914 <fsm_task_execute+0x150>)
 80017f2:	18d3      	adds	r3, r2, r3
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	469f      	mov	pc, r3
		case STATE_STEPS:
			if (joystick_position.left) current_state = STATE_DISTANCE;
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <fsm_task_execute+0x44>
 8001800:	4b43      	ldr	r3, [pc, #268]	@ (8001910 <fsm_task_execute+0x14c>)
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
 8001806:	e006      	b.n	8001816 <fsm_task_execute+0x52>
			else if (joystick_position.right) current_state = STATE_GOAL;
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	785b      	ldrb	r3, [r3, #1]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <fsm_task_execute+0x52>
 8001810:	4b3f      	ldr	r3, [pc, #252]	@ (8001910 <fsm_task_execute+0x14c>)
 8001812:	2202      	movs	r2, #2
 8001814:	701a      	strb	r2, [r3, #0]
			// If joystick is up in this position, switch between count / % on display
			if (joystick_position.up) {
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	789b      	ldrb	r3, [r3, #2]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d030      	beq.n	8001880 <fsm_task_execute+0xbc>
				toggle_step_unit();
 800181e:	f7ff fdd9 	bl	80013d4 <toggle_step_unit>
				update_display = true;
 8001822:	4b3d      	ldr	r3, [pc, #244]	@ (8001918 <fsm_task_execute+0x154>)
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001828:	e02a      	b.n	8001880 <fsm_task_execute+0xbc>

		case STATE_DISTANCE:
			if (joystick_position.left) current_state = STATE_GOAL;
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <fsm_task_execute+0x76>
 8001832:	4b37      	ldr	r3, [pc, #220]	@ (8001910 <fsm_task_execute+0x14c>)
 8001834:	2202      	movs	r2, #2
 8001836:	701a      	strb	r2, [r3, #0]
 8001838:	e006      	b.n	8001848 <fsm_task_execute+0x84>
			else if (joystick_position.right) current_state = STATE_STEPS;
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	785b      	ldrb	r3, [r3, #1]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <fsm_task_execute+0x84>
 8001842:	4b33      	ldr	r3, [pc, #204]	@ (8001910 <fsm_task_execute+0x14c>)
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
			// If joystick is up
			if (joystick_position.up) {
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	789b      	ldrb	r3, [r3, #2]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d019      	beq.n	8001884 <fsm_task_execute+0xc0>
				toggle_distance_unit();
 8001850:	f7ff fe16 	bl	8001480 <toggle_distance_unit>
				update_display = true;
 8001854:	4b30      	ldr	r3, [pc, #192]	@ (8001918 <fsm_task_execute+0x154>)
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
			}
			break;
 800185a:	e013      	b.n	8001884 <fsm_task_execute+0xc0>

		case STATE_GOAL:
			if (false) { // joystick long press
				current_state = STATE_MODIFY_GOAL;
			}
			else if (joystick_position.left) current_state = STATE_STEPS;
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <fsm_task_execute+0xa8>
 8001864:	4b2a      	ldr	r3, [pc, #168]	@ (8001910 <fsm_task_execute+0x14c>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
			else if (joystick_position.right) current_state = STATE_DISTANCE;
			break;
 800186a:	e00d      	b.n	8001888 <fsm_task_execute+0xc4>
			else if (joystick_position.right) current_state = STATE_DISTANCE;
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	785b      	ldrb	r3, [r3, #1]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d009      	beq.n	8001888 <fsm_task_execute+0xc4>
 8001874:	4b26      	ldr	r3, [pc, #152]	@ (8001910 <fsm_task_execute+0x14c>)
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]
			break;
 800187a:	e005      	b.n	8001888 <fsm_task_execute+0xc4>
			// joystick long press and joystick short press
			break;

		case STATE_TEST:
			// double press of sw2
			break;
 800187c:	46c0      	nop			@ (mov r8, r8)
 800187e:	e004      	b.n	800188a <fsm_task_execute+0xc6>
			break;
 8001880:	46c0      	nop			@ (mov r8, r8)
 8001882:	e002      	b.n	800188a <fsm_task_execute+0xc6>
			break;
 8001884:	46c0      	nop			@ (mov r8, r8)
 8001886:	e000      	b.n	800188a <fsm_task_execute+0xc6>
			break;
 8001888:	46c0      	nop			@ (mov r8, r8)
	}


	if (current_state != prev_state || update_display) {
 800188a:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <fsm_task_execute+0x14c>)
 800188c:	781a      	ldrb	r2, [r3, #0]
 800188e:	4b23      	ldr	r3, [pc, #140]	@ (800191c <fsm_task_execute+0x158>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d103      	bne.n	800189e <fsm_task_execute+0xda>
 8001896:	4b20      	ldr	r3, [pc, #128]	@ (8001918 <fsm_task_execute+0x154>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d033      	beq.n	8001906 <fsm_task_execute+0x142>
		// Reset the display before changing state
		ssd1306_SetCursor(0, 0);
 800189e:	2100      	movs	r1, #0
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff fd35 	bl	8001310 <ssd1306_SetCursor>
		ssd1306_WriteString("== STEP COUNTER ==", Font_7x10, White);
 80018a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001920 <fsm_task_execute+0x15c>)
 80018a8:	481e      	ldr	r0, [pc, #120]	@ (8001924 <fsm_task_execute+0x160>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	9200      	str	r2, [sp, #0]
 80018ae:	6819      	ldr	r1, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f7ff fd00 	bl	80012b8 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 13);
 80018b8:	210d      	movs	r1, #13
 80018ba:	2000      	movs	r0, #0
 80018bc:	f7ff fd28 	bl	8001310 <ssd1306_SetCursor>
		ssd1306_WriteString("                  ", Font_7x10, White); // Clear previous text
 80018c0:	4b17      	ldr	r3, [pc, #92]	@ (8001920 <fsm_task_execute+0x15c>)
 80018c2:	4819      	ldr	r0, [pc, #100]	@ (8001928 <fsm_task_execute+0x164>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	9200      	str	r2, [sp, #0]
 80018c8:	6819      	ldr	r1, [r3, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f7ff fcf3 	bl	80012b8 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 13);
 80018d2:	210d      	movs	r1, #13
 80018d4:	2000      	movs	r0, #0
 80018d6:	f7ff fd1b 	bl	8001310 <ssd1306_SetCursor>

		// Change state
		fsmTaskNextRun = HAL_GetTick() + STATE_CHANGE_DELAY;
 80018da:	f000 fa21 	bl	8001d20 <HAL_GetTick>
 80018de:	0003      	movs	r3, r0
 80018e0:	33f5      	adds	r3, #245	@ 0xf5
 80018e2:	33ff      	adds	r3, #255	@ 0xff
 80018e4:	001a      	movs	r2, r3
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <fsm_task_execute+0x148>)
 80018e8:	601a      	str	r2, [r3, #0]
		fsm_state_entry(current_state);
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <fsm_task_execute+0x14c>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	0018      	movs	r0, r3
 80018f0:	f7ff ff48 	bl	8001784 <fsm_state_entry>
		prev_state = current_state;
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <fsm_task_execute+0x14c>)
 80018f6:	781a      	ldrb	r2, [r3, #0]
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <fsm_task_execute+0x158>)
 80018fa:	701a      	strb	r2, [r3, #0]
		update_display = false;
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <fsm_task_execute+0x154>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	e000      	b.n	8001906 <fsm_task_execute+0x142>
	if (HAL_GetTick() < fsmTaskNextRun) return;
 8001904:	46c0      	nop			@ (mov r8, r8)
	}
}
 8001906:	46bd      	mov	sp, r7
 8001908:	b002      	add	sp, #8
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000684 	.word	0x20000684
 8001910:	20000680 	.word	0x20000680
 8001914:	080087f4 	.word	0x080087f4
 8001918:	20000688 	.word	0x20000688
 800191c:	20000681 	.word	0x20000681
 8001920:	08008774 	.word	0x08008774
 8001924:	08007fe0 	.word	0x08007fe0
 8001928:	08007ff4 	.word	0x08007ff4

0800192c <joystick_task_execute>:
 */

#include "task_joystick.h"
#include "joystick.h"

void joystick_task_execute(void) {
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	// Update the ADC values of the JoyStick X and Y axis inputs
	update_joystick();
 8001930:	f7ff f99e 	bl	8000c70 <update_joystick>
}
 8001934:	46c0      	nop			@ (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <uart_task_execute>:
#include "uart_debugger.h"
#include "joystick.h"

#include <stdbool.h>

void uart_task_execute() {
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
	// Transmit debug values, if SW2_state is 1
	// Do something here later
}
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	@ 0x28
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194a:	231c      	movs	r3, #28
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	0018      	movs	r0, r3
 8001950:	230c      	movs	r3, #12
 8001952:	001a      	movs	r2, r3
 8001954:	2100      	movs	r1, #0
 8001956:	f005 fe95 	bl	8007684 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800195a:	003b      	movs	r3, r7
 800195c:	0018      	movs	r0, r3
 800195e:	231c      	movs	r3, #28
 8001960:	001a      	movs	r2, r3
 8001962:	2100      	movs	r1, #0
 8001964:	f005 fe8e 	bl	8007684 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001968:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <MX_TIM2_Init+0xb8>)
 800196a:	2280      	movs	r2, #128	@ 0x80
 800196c:	05d2      	lsls	r2, r2, #23
 800196e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001970:	4b22      	ldr	r3, [pc, #136]	@ (80019fc <MX_TIM2_Init+0xb8>)
 8001972:	2200      	movs	r2, #0
 8001974:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001976:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <MX_TIM2_Init+0xb8>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 800197c:	4b1f      	ldr	r3, [pc, #124]	@ (80019fc <MX_TIM2_Init+0xb8>)
 800197e:	4a20      	ldr	r2, [pc, #128]	@ (8001a00 <MX_TIM2_Init+0xbc>)
 8001980:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001982:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <MX_TIM2_Init+0xb8>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001988:	4b1c      	ldr	r3, [pc, #112]	@ (80019fc <MX_TIM2_Init+0xb8>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800198e:	4b1b      	ldr	r3, [pc, #108]	@ (80019fc <MX_TIM2_Init+0xb8>)
 8001990:	0018      	movs	r0, r3
 8001992:	f004 fc41 	bl	8006218 <HAL_TIM_PWM_Init>
 8001996:	1e03      	subs	r3, r0, #0
 8001998:	d001      	beq.n	800199e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800199a:	f7ff fa76 	bl	8000e8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199e:	211c      	movs	r1, #28
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a6:	187b      	adds	r3, r7, r1
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ac:	187a      	adds	r2, r7, r1
 80019ae:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <MX_TIM2_Init+0xb8>)
 80019b0:	0011      	movs	r1, r2
 80019b2:	0018      	movs	r0, r3
 80019b4:	f005 f8a8 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 80019b8:	1e03      	subs	r3, r0, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80019bc:	f7ff fa65 	bl	8000e8a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c0:	003b      	movs	r3, r7
 80019c2:	2260      	movs	r2, #96	@ 0x60
 80019c4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 15000;
 80019c6:	003b      	movs	r3, r7
 80019c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001a04 <MX_TIM2_Init+0xc0>)
 80019ca:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80019cc:	003b      	movs	r3, r7
 80019ce:	2202      	movs	r2, #2
 80019d0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d2:	003b      	movs	r3, r7
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019d8:	0039      	movs	r1, r7
 80019da:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <MX_TIM2_Init+0xb8>)
 80019dc:	2208      	movs	r2, #8
 80019de:	0018      	movs	r0, r3
 80019e0:	f004 fc72 	bl	80062c8 <HAL_TIM_PWM_ConfigChannel>
 80019e4:	1e03      	subs	r3, r0, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80019e8:	f7ff fa4f 	bl	8000e8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019ec:	4b03      	ldr	r3, [pc, #12]	@ (80019fc <MX_TIM2_Init+0xb8>)
 80019ee:	0018      	movs	r0, r3
 80019f0:	f000 f826 	bl	8001a40 <HAL_TIM_MspPostInit>

}
 80019f4:	46c0      	nop			@ (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b00a      	add	sp, #40	@ 0x28
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	2000068c 	.word	0x2000068c
 8001a00:	000186a0 	.word	0x000186a0
 8001a04:	00003a98 	.word	0x00003a98

08001a08 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	2380      	movs	r3, #128	@ 0x80
 8001a16:	05db      	lsls	r3, r3, #23
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d10b      	bne.n	8001a34 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1c:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <HAL_TIM_PWM_MspInit+0x34>)
 8001a1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_TIM_PWM_MspInit+0x34>)
 8001a22:	2101      	movs	r1, #1
 8001a24:	430a      	orrs	r2, r1
 8001a26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a28:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <HAL_TIM_PWM_MspInit+0x34>)
 8001a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a34:	46c0      	nop			@ (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b004      	add	sp, #16
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b089      	sub	sp, #36	@ 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	240c      	movs	r4, #12
 8001a4a:	193b      	adds	r3, r7, r4
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	2314      	movs	r3, #20
 8001a50:	001a      	movs	r2, r3
 8001a52:	2100      	movs	r1, #0
 8001a54:	f005 fe16 	bl	8007684 <memset>
  if(timHandle->Instance==TIM2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	@ 0x80
 8001a5e:	05db      	lsls	r3, r3, #23
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d121      	bne.n	8001aa8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a64:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_TIM_MspPostInit+0x70>)
 8001a66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <HAL_TIM_MspPostInit+0x70>)
 8001a6a:	2104      	movs	r1, #4
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a70:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <HAL_TIM_MspPostInit+0x70>)
 8001a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a74:	2204      	movs	r2, #4
 8001a76:	4013      	ands	r3, r2
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a7c:	0021      	movs	r1, r4
 8001a7e:	187b      	adds	r3, r7, r1
 8001a80:	2240      	movs	r2, #64	@ 0x40
 8001a82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	2202      	movs	r2, #2
 8001a88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	187b      	adds	r3, r7, r1
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM2;
 8001a96:	187b      	adds	r3, r7, r1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <HAL_TIM_MspPostInit+0x74>)
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	0010      	movs	r0, r2
 8001aa4:	f001 fb90 	bl	80031c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001aa8:	46c0      	nop			@ (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b009      	add	sp, #36	@ 0x24
 8001aae:	bd90      	pop	{r4, r7, pc}
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	50000800 	.word	0x50000800

08001ab8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001abc:	4b23      	ldr	r3, [pc, #140]	@ (8001b4c <MX_USART2_UART_Init+0x94>)
 8001abe:	4a24      	ldr	r2, [pc, #144]	@ (8001b50 <MX_USART2_UART_Init+0x98>)
 8001ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ac2:	4b22      	ldr	r3, [pc, #136]	@ (8001b4c <MX_USART2_UART_Init+0x94>)
 8001ac4:	22e1      	movs	r2, #225	@ 0xe1
 8001ac6:	0252      	lsls	r2, r2, #9
 8001ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aca:	4b20      	ldr	r3, [pc, #128]	@ (8001b4c <MX_USART2_UART_Init+0x94>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b4c <MX_USART2_UART_Init+0x94>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b4c <MX_USART2_UART_Init+0x94>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <MX_USART2_UART_Init+0x94>)
 8001ade:	220c      	movs	r2, #12
 8001ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b4c <MX_USART2_UART_Init+0x94>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <MX_USART2_UART_Init+0x94>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aee:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <MX_USART2_UART_Init+0x94>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001af4:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <MX_USART2_UART_Init+0x94>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001afa:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <MX_USART2_UART_Init+0x94>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b00:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <MX_USART2_UART_Init+0x94>)
 8001b02:	0018      	movs	r0, r3
 8001b04:	f005 f868 	bl	8006bd8 <HAL_UART_Init>
 8001b08:	1e03      	subs	r3, r0, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b0c:	f7ff f9bd 	bl	8000e8a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b10:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <MX_USART2_UART_Init+0x94>)
 8001b12:	2100      	movs	r1, #0
 8001b14:	0018      	movs	r0, r3
 8001b16:	f005 fca1 	bl	800745c <HAL_UARTEx_SetTxFifoThreshold>
 8001b1a:	1e03      	subs	r3, r0, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b1e:	f7ff f9b4 	bl	8000e8a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b22:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <MX_USART2_UART_Init+0x94>)
 8001b24:	2100      	movs	r1, #0
 8001b26:	0018      	movs	r0, r3
 8001b28:	f005 fcd8 	bl	80074dc <HAL_UARTEx_SetRxFifoThreshold>
 8001b2c:	1e03      	subs	r3, r0, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b30:	f7ff f9ab 	bl	8000e8a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <MX_USART2_UART_Init+0x94>)
 8001b36:	0018      	movs	r0, r3
 8001b38:	f005 fc56 	bl	80073e8 <HAL_UARTEx_DisableFifoMode>
 8001b3c:	1e03      	subs	r3, r0, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b40:	f7ff f9a3 	bl	8000e8a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b44:	46c0      	nop			@ (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	46c0      	nop			@ (mov r8, r8)
 8001b4c:	200006d8 	.word	0x200006d8
 8001b50:	40004400 	.word	0x40004400

08001b54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b08b      	sub	sp, #44	@ 0x2c
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	2414      	movs	r4, #20
 8001b5e:	193b      	adds	r3, r7, r4
 8001b60:	0018      	movs	r0, r3
 8001b62:	2314      	movs	r3, #20
 8001b64:	001a      	movs	r2, r3
 8001b66:	2100      	movs	r1, #0
 8001b68:	f005 fd8c 	bl	8007684 <memset>
  if(uartHandle->Instance==USART2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a1b      	ldr	r2, [pc, #108]	@ (8001be0 <HAL_UART_MspInit+0x8c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d130      	bne.n	8001bd8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b76:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <HAL_UART_MspInit+0x90>)
 8001b78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <HAL_UART_MspInit+0x90>)
 8001b7c:	2180      	movs	r1, #128	@ 0x80
 8001b7e:	0289      	lsls	r1, r1, #10
 8001b80:	430a      	orrs	r2, r1
 8001b82:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b84:	4b17      	ldr	r3, [pc, #92]	@ (8001be4 <HAL_UART_MspInit+0x90>)
 8001b86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b88:	2380      	movs	r3, #128	@ 0x80
 8001b8a:	029b      	lsls	r3, r3, #10
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <HAL_UART_MspInit+0x90>)
 8001b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b96:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <HAL_UART_MspInit+0x90>)
 8001b98:	2101      	movs	r1, #1
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <HAL_UART_MspInit+0x90>)
 8001ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001baa:	0021      	movs	r1, r4
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	220c      	movs	r2, #12
 8001bb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	187b      	adds	r3, r7, r1
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	187b      	adds	r3, r7, r1
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001bc4:	187b      	adds	r3, r7, r1
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	187a      	adds	r2, r7, r1
 8001bcc:	23a0      	movs	r3, #160	@ 0xa0
 8001bce:	05db      	lsls	r3, r3, #23
 8001bd0:	0011      	movs	r1, r2
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f001 faf8 	bl	80031c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bd8:	46c0      	nop			@ (mov r8, r8)
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b00b      	add	sp, #44	@ 0x2c
 8001bde:	bd90      	pop	{r4, r7, pc}
 8001be0:	40004400 	.word	0x40004400
 8001be4:	40021000 	.word	0x40021000

08001be8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001be8:	480d      	ldr	r0, [pc, #52]	@ (8001c20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bec:	f7ff fd9c 	bl	8001728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001bf0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001bf2:	e003      	b.n	8001bfc <LoopCopyDataInit>

08001bf4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001bf6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001bf8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bfa:	3104      	adds	r1, #4

08001bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bfc:	480a      	ldr	r0, [pc, #40]	@ (8001c28 <LoopForever+0xa>)
  ldr r3, =_edata
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <LoopForever+0xe>)
  adds r2, r0, r1
 8001c00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c04:	d3f6      	bcc.n	8001bf4 <CopyDataInit>
  ldr r2, =_sbss
 8001c06:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <LoopForever+0x12>)
  b LoopFillZerobss
 8001c08:	e002      	b.n	8001c10 <LoopFillZerobss>

08001c0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  str  r3, [r2]
 8001c0c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c0e:	3204      	adds	r2, #4

08001c10 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001c10:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <LoopForever+0x16>)
  cmp r2, r3
 8001c12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c14:	d3f9      	bcc.n	8001c0a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001c16:	f005 fd43 	bl	80076a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c1a:	f7ff f8dd 	bl	8000dd8 <main>

08001c1e <LoopForever>:

LoopForever:
    b LoopForever
 8001c1e:	e7fe      	b.n	8001c1e <LoopForever>
  ldr   r0, =_estack
 8001c20:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8001c24:	080088c0 	.word	0x080088c0
  ldr r0, =_sdata
 8001c28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c2c:	20000090 	.word	0x20000090
  ldr r2, =_sbss
 8001c30:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 8001c34:	200008b8 	.word	0x200008b8

08001c38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c38:	e7fe      	b.n	8001c38 <ADC1_IRQHandler>

08001c3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c40:	1dfb      	adds	r3, r7, #7
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c46:	2003      	movs	r0, #3
 8001c48:	f000 f80e 	bl	8001c68 <HAL_InitTick>
 8001c4c:	1e03      	subs	r3, r0, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001c50:	1dfb      	adds	r3, r7, #7
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	e001      	b.n	8001c5c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c58:	f7ff fcb8 	bl	80015cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c5c:	1dfb      	adds	r3, r7, #7
 8001c5e:	781b      	ldrb	r3, [r3, #0]
}
 8001c60:	0018      	movs	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b002      	add	sp, #8
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c70:	230f      	movs	r3, #15
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001c78:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf0 <HAL_InitTick+0x88>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d02b      	beq.n	8001cd8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001c80:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf4 <HAL_InitTick+0x8c>)
 8001c82:	681c      	ldr	r4, [r3, #0]
 8001c84:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <HAL_InitTick+0x88>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	0019      	movs	r1, r3
 8001c8a:	23fa      	movs	r3, #250	@ 0xfa
 8001c8c:	0098      	lsls	r0, r3, #2
 8001c8e:	f7fe fa45 	bl	800011c <__udivsi3>
 8001c92:	0003      	movs	r3, r0
 8001c94:	0019      	movs	r1, r3
 8001c96:	0020      	movs	r0, r4
 8001c98:	f7fe fa40 	bl	800011c <__udivsi3>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f000 ffab 	bl	8002bfa <HAL_SYSTICK_Config>
 8001ca4:	1e03      	subs	r3, r0, #0
 8001ca6:	d112      	bne.n	8001cce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d80a      	bhi.n	8001cc4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	425b      	negs	r3, r3
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f000 ff7a 	bl	8002bb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf8 <HAL_InitTick+0x90>)
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e00d      	b.n	8001ce0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001cc4:	230f      	movs	r3, #15
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	e008      	b.n	8001ce0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cce:	230f      	movs	r3, #15
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	701a      	strb	r2, [r3, #0]
 8001cd6:	e003      	b.n	8001ce0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cd8:	230f      	movs	r3, #15
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001ce0:	230f      	movs	r3, #15
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	781b      	ldrb	r3, [r3, #0]
}
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b005      	add	sp, #20
 8001cec:	bd90      	pop	{r4, r7, pc}
 8001cee:	46c0      	nop			@ (mov r8, r8)
 8001cf0:	2000003c 	.word	0x2000003c
 8001cf4:	20000034 	.word	0x20000034
 8001cf8:	20000038 	.word	0x20000038

08001cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <HAL_IncTick+0x1c>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	001a      	movs	r2, r3
 8001d06:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <HAL_IncTick+0x20>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	18d2      	adds	r2, r2, r3
 8001d0c:	4b03      	ldr	r3, [pc, #12]	@ (8001d1c <HAL_IncTick+0x20>)
 8001d0e:	601a      	str	r2, [r3, #0]
}
 8001d10:	46c0      	nop			@ (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	2000003c 	.word	0x2000003c
 8001d1c:	2000076c 	.word	0x2000076c

08001d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  return uwTick;
 8001d24:	4b02      	ldr	r3, [pc, #8]	@ (8001d30 <HAL_GetTick+0x10>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	2000076c 	.word	0x2000076c

08001d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d3c:	f7ff fff0 	bl	8001d20 <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	d005      	beq.n	8001d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <HAL_Delay+0x44>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	001a      	movs	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	189b      	adds	r3, r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	f7ff ffe0 	bl	8001d20 <HAL_GetTick>
 8001d60:	0002      	movs	r2, r0
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d8f7      	bhi.n	8001d5c <HAL_Delay+0x28>
  {
  }
}
 8001d6c:	46c0      	nop			@ (mov r8, r8)
 8001d6e:	46c0      	nop			@ (mov r8, r8)
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b004      	add	sp, #16
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			@ (mov r8, r8)
 8001d78:	2000003c 	.word	0x2000003c

08001d7c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a05      	ldr	r2, [pc, #20]	@ (8001da0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	431a      	orrs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	601a      	str	r2, [r3, #0]
}
 8001d96:	46c0      	nop			@ (mov r8, r8)
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b002      	add	sp, #8
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	ff3fffff 	.word	0xff3fffff

08001da4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	23c0      	movs	r3, #192	@ 0xc0
 8001db2:	041b      	lsls	r3, r3, #16
 8001db4:	4013      	ands	r3, r2
}
 8001db6:	0018      	movs	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b002      	add	sp, #8
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	2107      	movs	r1, #7
 8001dd6:	4091      	lsls	r1, r2
 8001dd8:	000a      	movs	r2, r1
 8001dda:	43d2      	mvns	r2, r2
 8001ddc:	401a      	ands	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2104      	movs	r1, #4
 8001de2:	400b      	ands	r3, r1
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4099      	lsls	r1, r3
 8001de8:	000b      	movs	r3, r1
 8001dea:	431a      	orrs	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001df0:	46c0      	nop			@ (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b004      	add	sp, #16
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	2104      	movs	r1, #4
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	2107      	movs	r1, #7
 8001e0e:	4091      	lsls	r1, r2
 8001e10:	000a      	movs	r2, r1
 8001e12:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	2104      	movs	r1, #4
 8001e18:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001e1a:	40da      	lsrs	r2, r3
 8001e1c:	0013      	movs	r3, r2
}
 8001e1e:	0018      	movs	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b002      	add	sp, #8
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	23c0      	movs	r3, #192	@ 0xc0
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	4013      	ands	r3, r2
 8001e38:	d101      	bne.n	8001e3e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b002      	add	sp, #8
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	211f      	movs	r1, #31
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	210f      	movs	r1, #15
 8001e60:	4091      	lsls	r1, r2
 8001e62:	000a      	movs	r2, r1
 8001e64:	43d2      	mvns	r2, r2
 8001e66:	401a      	ands	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	0e9b      	lsrs	r3, r3, #26
 8001e6c:	210f      	movs	r1, #15
 8001e6e:	4019      	ands	r1, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	201f      	movs	r0, #31
 8001e74:	4003      	ands	r3, r0
 8001e76:	4099      	lsls	r1, r3
 8001e78:	000b      	movs	r3, r1
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e80:	46c0      	nop			@ (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b004      	add	sp, #16
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	025b      	lsls	r3, r3, #9
 8001e9a:	0a5b      	lsrs	r3, r3, #9
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ea2:	46c0      	nop			@ (mov r8, r8)
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b002      	add	sp, #8
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	0252      	lsls	r2, r2, #9
 8001ebc:	0a52      	lsrs	r2, r2, #9
 8001ebe:	43d2      	mvns	r2, r2
 8001ec0:	401a      	ands	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ec6:	46c0      	nop			@ (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b002      	add	sp, #8
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	0212      	lsls	r2, r2, #8
 8001ee4:	43d2      	mvns	r2, r2
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	021b      	lsls	r3, r3, #8
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	400b      	ands	r3, r1
 8001ef0:	4904      	ldr	r1, [pc, #16]	@ (8001f04 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001ef2:	400b      	ands	r3, r1
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b004      	add	sp, #16
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			@ (mov r8, r8)
 8001f04:	7fffff00 	.word	0x7fffff00

08001f08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4a05      	ldr	r2, [pc, #20]	@ (8001f2c <LL_ADC_EnableInternalRegulator+0x24>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	2280      	movs	r2, #128	@ 0x80
 8001f1a:	0552      	lsls	r2, r2, #21
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f22:	46c0      	nop			@ (mov r8, r8)
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b002      	add	sp, #8
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	6fffffe8 	.word	0x6fffffe8

08001f30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	055b      	lsls	r3, r3, #21
 8001f40:	401a      	ands	r2, r3
 8001f42:	2380      	movs	r3, #128	@ 0x80
 8001f44:	055b      	lsls	r3, r3, #21
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d101      	bne.n	8001f4e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b002      	add	sp, #8
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	4a04      	ldr	r2, [pc, #16]	@ (8001f78 <LL_ADC_Enable+0x20>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	2201      	movs	r2, #1
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f70:	46c0      	nop			@ (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	7fffffe8 	.word	0x7fffffe8

08001f7c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	4a04      	ldr	r2, [pc, #16]	@ (8001f9c <LL_ADC_Disable+0x20>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f94:	46c0      	nop			@ (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b002      	add	sp, #8
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	7fffffe8 	.word	0x7fffffe8

08001fa0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2201      	movs	r2, #1
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <LL_ADC_IsEnabled+0x18>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <LL_ADC_IsEnabled+0x1a>
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	0018      	movs	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b002      	add	sp, #8
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <LL_ADC_REG_StartConversion+0x20>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fdc:	46c0      	nop			@ (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	7fffffe8 	.word	0x7fffffe8

08001fe8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d101      	bne.n	8002000 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002000:	2300      	movs	r3, #0
}
 8002002:	0018      	movs	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	b002      	add	sp, #8
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002014:	231f      	movs	r3, #31
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e17e      	b.n	8002330 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10a      	bne.n	8002050 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	0018      	movs	r0, r3
 800203e:	f7fe fa59 	bl	80004f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2254      	movs	r2, #84	@ 0x54
 800204c:	2100      	movs	r1, #0
 800204e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0018      	movs	r0, r3
 8002056:	f7ff ff6b 	bl	8001f30 <LL_ADC_IsInternalRegulatorEnabled>
 800205a:	1e03      	subs	r3, r0, #0
 800205c:	d114      	bne.n	8002088 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	0018      	movs	r0, r3
 8002064:	f7ff ff50 	bl	8001f08 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002068:	4bb3      	ldr	r3, [pc, #716]	@ (8002338 <HAL_ADC_Init+0x32c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	49b3      	ldr	r1, [pc, #716]	@ (800233c <HAL_ADC_Init+0x330>)
 800206e:	0018      	movs	r0, r3
 8002070:	f7fe f854 	bl	800011c <__udivsi3>
 8002074:	0003      	movs	r3, r0
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800207a:	e002      	b.n	8002082 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3b01      	subs	r3, #1
 8002080:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f9      	bne.n	800207c <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff ff4f 	bl	8001f30 <LL_ADC_IsInternalRegulatorEnabled>
 8002092:	1e03      	subs	r3, r0, #0
 8002094:	d10f      	bne.n	80020b6 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	2210      	movs	r2, #16
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a6:	2201      	movs	r2, #1
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80020ae:	231f      	movs	r3, #31
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	2201      	movs	r2, #1
 80020b4:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	0018      	movs	r0, r3
 80020bc:	f7ff ff94 	bl	8001fe8 <LL_ADC_REG_IsConversionOngoing>
 80020c0:	0003      	movs	r3, r0
 80020c2:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c8:	2210      	movs	r2, #16
 80020ca:	4013      	ands	r3, r2
 80020cc:	d000      	beq.n	80020d0 <HAL_ADC_Init+0xc4>
 80020ce:	e122      	b.n	8002316 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d000      	beq.n	80020d8 <HAL_ADC_Init+0xcc>
 80020d6:	e11e      	b.n	8002316 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020dc:	4a98      	ldr	r2, [pc, #608]	@ (8002340 <HAL_ADC_Init+0x334>)
 80020de:	4013      	ands	r3, r2
 80020e0:	2202      	movs	r2, #2
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f7ff ff57 	bl	8001fa0 <LL_ADC_IsEnabled>
 80020f2:	1e03      	subs	r3, r0, #0
 80020f4:	d000      	beq.n	80020f8 <HAL_ADC_Init+0xec>
 80020f6:	e0ad      	b.n	8002254 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7e1b      	ldrb	r3, [r3, #24]
 8002100:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002102:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7e5b      	ldrb	r3, [r3, #25]
 8002108:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800210a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7e9b      	ldrb	r3, [r3, #26]
 8002110:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002112:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <HAL_ADC_Init+0x116>
 800211c:	2380      	movs	r3, #128	@ 0x80
 800211e:	015b      	lsls	r3, r3, #5
 8002120:	e000      	b.n	8002124 <HAL_ADC_Init+0x118>
 8002122:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002124:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800212a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	da04      	bge.n	800213e <HAL_ADC_Init+0x132>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	e001      	b.n	8002142 <HAL_ADC_Init+0x136>
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002142:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	212c      	movs	r1, #44	@ 0x2c
 8002148:	5c5b      	ldrb	r3, [r3, r1]
 800214a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800214c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2220      	movs	r2, #32
 8002158:	5c9b      	ldrb	r3, [r3, r2]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d115      	bne.n	800218a <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7e9b      	ldrb	r3, [r3, #26]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d105      	bne.n	8002172 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2280      	movs	r2, #128	@ 0x80
 800216a:	0252      	lsls	r2, r2, #9
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	e00b      	b.n	800218a <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002176:	2220      	movs	r2, #32
 8002178:	431a      	orrs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002182:	2201      	movs	r2, #1
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002196:	23e0      	movs	r3, #224	@ 0xe0
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80021a0:	4313      	orrs	r3, r2
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	4a65      	ldr	r2, [pc, #404]	@ (8002344 <HAL_ADC_Init+0x338>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	0019      	movs	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	0f9b      	lsrs	r3, r3, #30
 80021c4:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021ca:	4313      	orrs	r3, r2
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	223c      	movs	r2, #60	@ 0x3c
 80021d6:	5c9b      	ldrb	r3, [r3, r2]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d111      	bne.n	8002200 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	0f9b      	lsrs	r3, r3, #30
 80021e2:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021e8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80021ee:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80021f4:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	2201      	movs	r2, #1
 80021fc:	4313      	orrs	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	4a50      	ldr	r2, [pc, #320]	@ (8002348 <HAL_ADC_Init+0x33c>)
 8002208:	4013      	ands	r3, r2
 800220a:	0019      	movs	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	430a      	orrs	r2, r1
 8002214:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	23c0      	movs	r3, #192	@ 0xc0
 800221c:	061b      	lsls	r3, r3, #24
 800221e:	429a      	cmp	r2, r3
 8002220:	d018      	beq.n	8002254 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002226:	2380      	movs	r3, #128	@ 0x80
 8002228:	05db      	lsls	r3, r3, #23
 800222a:	429a      	cmp	r2, r3
 800222c:	d012      	beq.n	8002254 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002232:	2380      	movs	r3, #128	@ 0x80
 8002234:	061b      	lsls	r3, r3, #24
 8002236:	429a      	cmp	r2, r3
 8002238:	d00c      	beq.n	8002254 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800223a:	4b44      	ldr	r3, [pc, #272]	@ (800234c <HAL_ADC_Init+0x340>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a44      	ldr	r2, [pc, #272]	@ (8002350 <HAL_ADC_Init+0x344>)
 8002240:	4013      	ands	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	23f0      	movs	r3, #240	@ 0xf0
 800224a:	039b      	lsls	r3, r3, #14
 800224c:	401a      	ands	r2, r3
 800224e:	4b3f      	ldr	r3, [pc, #252]	@ (800234c <HAL_ADC_Init+0x340>)
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800225c:	001a      	movs	r2, r3
 800225e:	2100      	movs	r1, #0
 8002260:	f7ff fdad 	bl	8001dbe <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226c:	4939      	ldr	r1, [pc, #228]	@ (8002354 <HAL_ADC_Init+0x348>)
 800226e:	001a      	movs	r2, r3
 8002270:	f7ff fda5 	bl	8001dbe <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2110      	movs	r1, #16
 8002288:	4249      	negs	r1, r1
 800228a:	430a      	orrs	r2, r1
 800228c:	629a      	str	r2, [r3, #40]	@ 0x28
 800228e:	e018      	b.n	80022c2 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	2380      	movs	r3, #128	@ 0x80
 8002296:	039b      	lsls	r3, r3, #14
 8002298:	429a      	cmp	r2, r3
 800229a:	d112      	bne.n	80022c2 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	221c      	movs	r2, #28
 80022ac:	4013      	ands	r3, r2
 80022ae:	2210      	movs	r2, #16
 80022b0:	4252      	negs	r2, r2
 80022b2:	409a      	lsls	r2, r3
 80022b4:	0011      	movs	r1, r2
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2100      	movs	r1, #0
 80022c8:	0018      	movs	r0, r3
 80022ca:	f7ff fd95 	bl	8001df8 <LL_ADC_GetSamplingTimeCommonChannels>
 80022ce:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d10b      	bne.n	80022f0 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e2:	2203      	movs	r2, #3
 80022e4:	4393      	bics	r3, r2
 80022e6:	2201      	movs	r2, #1
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80022ee:	e01c      	b.n	800232a <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f4:	2212      	movs	r2, #18
 80022f6:	4393      	bics	r3, r2
 80022f8:	2210      	movs	r2, #16
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002304:	2201      	movs	r2, #1
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800230c:	231f      	movs	r3, #31
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002314:	e009      	b.n	800232a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231a:	2210      	movs	r2, #16
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002322:	231f      	movs	r3, #31
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800232a:	231f      	movs	r3, #31
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	781b      	ldrb	r3, [r3, #0]
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	b008      	add	sp, #32
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000034 	.word	0x20000034
 800233c:	00030d40 	.word	0x00030d40
 8002340:	fffffefd 	.word	0xfffffefd
 8002344:	ffde0201 	.word	0xffde0201
 8002348:	1ffffc02 	.word	0x1ffffc02
 800234c:	40012708 	.word	0x40012708
 8002350:	ffc3ffff 	.word	0xffc3ffff
 8002354:	7fffff04 	.word	0x7fffff04

08002358 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002358:	b5b0      	push	{r4, r5, r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	0018      	movs	r0, r3
 800236a:	f7ff fe3d 	bl	8001fe8 <LL_ADC_REG_IsConversionOngoing>
 800236e:	1e03      	subs	r3, r0, #0
 8002370:	d16c      	bne.n	800244c <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2254      	movs	r2, #84	@ 0x54
 8002376:	5c9b      	ldrb	r3, [r3, r2]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_ADC_Start_DMA+0x28>
 800237c:	2302      	movs	r3, #2
 800237e:	e06c      	b.n	800245a <HAL_ADC_Start_DMA+0x102>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2254      	movs	r2, #84	@ 0x54
 8002384:	2101      	movs	r1, #1
 8002386:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	4013      	ands	r3, r2
 8002392:	d113      	bne.n	80023bc <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0018      	movs	r0, r3
 800239a:	f7ff fe01 	bl	8001fa0 <LL_ADC_IsEnabled>
 800239e:	1e03      	subs	r3, r0, #0
 80023a0:	d004      	beq.n	80023ac <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	0018      	movs	r0, r3
 80023a8:	f7ff fde8 	bl	8001f7c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2101      	movs	r1, #1
 80023b8:	430a      	orrs	r2, r1
 80023ba:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023bc:	2517      	movs	r5, #23
 80023be:	197c      	adds	r4, r7, r5
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f000 fa3c 	bl	8002840 <ADC_Enable>
 80023c8:	0003      	movs	r3, r0
 80023ca:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023cc:	002c      	movs	r4, r5
 80023ce:	193b      	adds	r3, r7, r4
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d13e      	bne.n	8002454 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023da:	4a22      	ldr	r2, [pc, #136]	@ (8002464 <HAL_ADC_Start_DMA+0x10c>)
 80023dc:	4013      	ands	r3, r2
 80023de:	2280      	movs	r2, #128	@ 0x80
 80023e0:	0052      	lsls	r2, r2, #1
 80023e2:	431a      	orrs	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002468 <HAL_ADC_Start_DMA+0x110>)
 80023f4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023fa:	4a1c      	ldr	r2, [pc, #112]	@ (800246c <HAL_ADC_Start_DMA+0x114>)
 80023fc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002402:	4a1b      	ldr	r2, [pc, #108]	@ (8002470 <HAL_ADC_Start_DMA+0x118>)
 8002404:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	221c      	movs	r2, #28
 800240c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2254      	movs	r2, #84	@ 0x54
 8002412:	2100      	movs	r1, #0
 8002414:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2110      	movs	r1, #16
 8002422:	430a      	orrs	r2, r1
 8002424:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3340      	adds	r3, #64	@ 0x40
 8002430:	0019      	movs	r1, r3
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	193c      	adds	r4, r7, r4
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f000 fc76 	bl	8002d28 <HAL_DMA_Start_IT>
 800243c:	0003      	movs	r3, r0
 800243e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	0018      	movs	r0, r3
 8002446:	f7ff fdbd 	bl	8001fc4 <LL_ADC_REG_StartConversion>
 800244a:	e003      	b.n	8002454 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800244c:	2317      	movs	r3, #23
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	2202      	movs	r2, #2
 8002452:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002454:	2317      	movs	r3, #23
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	781b      	ldrb	r3, [r3, #0]
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b006      	add	sp, #24
 8002460:	bdb0      	pop	{r4, r5, r7, pc}
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	fffff0fe 	.word	0xfffff0fe
 8002468:	0800293d 	.word	0x0800293d
 800246c:	08002a05 	.word	0x08002a05
 8002470:	08002a23 	.word	0x08002a23

08002474 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800247c:	46c0      	nop			@ (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	b002      	add	sp, #8
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800248c:	46c0      	nop			@ (mov r8, r8)
 800248e:	46bd      	mov	sp, r7
 8002490:	b002      	add	sp, #8
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800249e:	2317      	movs	r3, #23
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2254      	movs	r2, #84	@ 0x54
 80024ae:	5c9b      	ldrb	r3, [r3, r2]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x24>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e1be      	b.n	8002836 <HAL_ADC_ConfigChannel+0x3a2>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2254      	movs	r2, #84	@ 0x54
 80024bc:	2101      	movs	r1, #1
 80024be:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7ff fd8f 	bl	8001fe8 <LL_ADC_REG_IsConversionOngoing>
 80024ca:	1e03      	subs	r3, r0, #0
 80024cc:	d000      	beq.n	80024d0 <HAL_ADC_ConfigChannel+0x3c>
 80024ce:	e1a1      	b.n	8002814 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d100      	bne.n	80024da <HAL_ADC_ConfigChannel+0x46>
 80024d8:	e152      	b.n	8002780 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	2380      	movs	r3, #128	@ 0x80
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d004      	beq.n	80024f0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80024ea:	4ac2      	ldr	r2, [pc, #776]	@ (80027f4 <HAL_ADC_ConfigChannel+0x360>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d108      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0019      	movs	r1, r3
 80024fa:	0010      	movs	r0, r2
 80024fc:	f7ff fcc4 	bl	8001e88 <LL_ADC_REG_SetSequencerChAdd>
 8002500:	e0ed      	b.n	80026de <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	211f      	movs	r1, #31
 800250c:	400b      	ands	r3, r1
 800250e:	210f      	movs	r1, #15
 8002510:	4099      	lsls	r1, r3
 8002512:	000b      	movs	r3, r1
 8002514:	43db      	mvns	r3, r3
 8002516:	4013      	ands	r3, r2
 8002518:	0019      	movs	r1, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	025b      	lsls	r3, r3, #9
 8002520:	0a5b      	lsrs	r3, r3, #9
 8002522:	d105      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x9c>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	0e9b      	lsrs	r3, r3, #26
 800252a:	221f      	movs	r2, #31
 800252c:	4013      	ands	r3, r2
 800252e:	e0bc      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2201      	movs	r2, #1
 8002536:	4013      	ands	r3, r2
 8002538:	d000      	beq.n	800253c <HAL_ADC_ConfigChannel+0xa8>
 800253a:	e0b5      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x214>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2202      	movs	r2, #2
 8002542:	4013      	ands	r3, r2
 8002544:	d000      	beq.n	8002548 <HAL_ADC_ConfigChannel+0xb4>
 8002546:	e0ad      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x210>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2204      	movs	r2, #4
 800254e:	4013      	ands	r3, r2
 8002550:	d000      	beq.n	8002554 <HAL_ADC_ConfigChannel+0xc0>
 8002552:	e0a5      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x20c>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2208      	movs	r2, #8
 800255a:	4013      	ands	r3, r2
 800255c:	d000      	beq.n	8002560 <HAL_ADC_ConfigChannel+0xcc>
 800255e:	e09d      	b.n	800269c <HAL_ADC_ConfigChannel+0x208>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2210      	movs	r2, #16
 8002566:	4013      	ands	r3, r2
 8002568:	d000      	beq.n	800256c <HAL_ADC_ConfigChannel+0xd8>
 800256a:	e095      	b.n	8002698 <HAL_ADC_ConfigChannel+0x204>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2220      	movs	r2, #32
 8002572:	4013      	ands	r3, r2
 8002574:	d000      	beq.n	8002578 <HAL_ADC_ConfigChannel+0xe4>
 8002576:	e08d      	b.n	8002694 <HAL_ADC_ConfigChannel+0x200>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2240      	movs	r2, #64	@ 0x40
 800257e:	4013      	ands	r3, r2
 8002580:	d000      	beq.n	8002584 <HAL_ADC_ConfigChannel+0xf0>
 8002582:	e085      	b.n	8002690 <HAL_ADC_ConfigChannel+0x1fc>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2280      	movs	r2, #128	@ 0x80
 800258a:	4013      	ands	r3, r2
 800258c:	d000      	beq.n	8002590 <HAL_ADC_ConfigChannel+0xfc>
 800258e:	e07d      	b.n	800268c <HAL_ADC_ConfigChannel+0x1f8>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	2380      	movs	r3, #128	@ 0x80
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4013      	ands	r3, r2
 800259a:	d000      	beq.n	800259e <HAL_ADC_ConfigChannel+0x10a>
 800259c:	e074      	b.n	8002688 <HAL_ADC_ConfigChannel+0x1f4>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	2380      	movs	r3, #128	@ 0x80
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4013      	ands	r3, r2
 80025a8:	d000      	beq.n	80025ac <HAL_ADC_ConfigChannel+0x118>
 80025aa:	e06b      	b.n	8002684 <HAL_ADC_ConfigChannel+0x1f0>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4013      	ands	r3, r2
 80025b6:	d000      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x126>
 80025b8:	e062      	b.n	8002680 <HAL_ADC_ConfigChannel+0x1ec>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	@ 0x80
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	4013      	ands	r3, r2
 80025c4:	d000      	beq.n	80025c8 <HAL_ADC_ConfigChannel+0x134>
 80025c6:	e059      	b.n	800267c <HAL_ADC_ConfigChannel+0x1e8>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	2380      	movs	r3, #128	@ 0x80
 80025ce:	015b      	lsls	r3, r3, #5
 80025d0:	4013      	ands	r3, r2
 80025d2:	d151      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x1e4>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2380      	movs	r3, #128	@ 0x80
 80025da:	019b      	lsls	r3, r3, #6
 80025dc:	4013      	ands	r3, r2
 80025de:	d149      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x1e0>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2380      	movs	r3, #128	@ 0x80
 80025e6:	01db      	lsls	r3, r3, #7
 80025e8:	4013      	ands	r3, r2
 80025ea:	d141      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1dc>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2380      	movs	r3, #128	@ 0x80
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	4013      	ands	r3, r2
 80025f6:	d139      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1d8>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2380      	movs	r3, #128	@ 0x80
 80025fe:	025b      	lsls	r3, r3, #9
 8002600:	4013      	ands	r3, r2
 8002602:	d131      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x1d4>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	@ 0x80
 800260a:	029b      	lsls	r3, r3, #10
 800260c:	4013      	ands	r3, r2
 800260e:	d129      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x1d0>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	@ 0x80
 8002616:	02db      	lsls	r3, r3, #11
 8002618:	4013      	ands	r3, r2
 800261a:	d121      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x1cc>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2380      	movs	r3, #128	@ 0x80
 8002622:	031b      	lsls	r3, r3, #12
 8002624:	4013      	ands	r3, r2
 8002626:	d119      	bne.n	800265c <HAL_ADC_ConfigChannel+0x1c8>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	035b      	lsls	r3, r3, #13
 8002630:	4013      	ands	r3, r2
 8002632:	d111      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1c4>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	039b      	lsls	r3, r3, #14
 800263c:	4013      	ands	r3, r2
 800263e:	d109      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x1c0>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	03db      	lsls	r3, r3, #15
 8002648:	4013      	ands	r3, r2
 800264a:	d001      	beq.n	8002650 <HAL_ADC_ConfigChannel+0x1bc>
 800264c:	2316      	movs	r3, #22
 800264e:	e02c      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 8002650:	2300      	movs	r3, #0
 8002652:	e02a      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 8002654:	2315      	movs	r3, #21
 8002656:	e028      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 8002658:	2314      	movs	r3, #20
 800265a:	e026      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 800265c:	2313      	movs	r3, #19
 800265e:	e024      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 8002660:	2312      	movs	r3, #18
 8002662:	e022      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 8002664:	2311      	movs	r3, #17
 8002666:	e020      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 8002668:	2310      	movs	r3, #16
 800266a:	e01e      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 800266c:	230f      	movs	r3, #15
 800266e:	e01c      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 8002670:	230e      	movs	r3, #14
 8002672:	e01a      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 8002674:	230d      	movs	r3, #13
 8002676:	e018      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 8002678:	230c      	movs	r3, #12
 800267a:	e016      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 800267c:	230b      	movs	r3, #11
 800267e:	e014      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 8002680:	230a      	movs	r3, #10
 8002682:	e012      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 8002684:	2309      	movs	r3, #9
 8002686:	e010      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 8002688:	2308      	movs	r3, #8
 800268a:	e00e      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 800268c:	2307      	movs	r3, #7
 800268e:	e00c      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 8002690:	2306      	movs	r3, #6
 8002692:	e00a      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 8002694:	2305      	movs	r3, #5
 8002696:	e008      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 8002698:	2304      	movs	r3, #4
 800269a:	e006      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 800269c:	2303      	movs	r3, #3
 800269e:	e004      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e002      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <HAL_ADC_ConfigChannel+0x216>
 80026a8:	2300      	movs	r3, #0
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	6852      	ldr	r2, [r2, #4]
 80026ae:	201f      	movs	r0, #31
 80026b0:	4002      	ands	r2, r0
 80026b2:	4093      	lsls	r3, r2
 80026b4:	000a      	movs	r2, r1
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	089b      	lsrs	r3, r3, #2
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d808      	bhi.n	80026de <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	001a      	movs	r2, r3
 80026da:	f7ff fbb5 	bl	8001e48 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6819      	ldr	r1, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	001a      	movs	r2, r3
 80026ec:	f7ff fbf0 	bl	8001ed0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	db00      	blt.n	80026fa <HAL_ADC_ConfigChannel+0x266>
 80026f8:	e096      	b.n	8002828 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026fa:	4b3f      	ldr	r3, [pc, #252]	@ (80027f8 <HAL_ADC_ConfigChannel+0x364>)
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff fb51 	bl	8001da4 <LL_ADC_GetCommonPathInternalCh>
 8002702:	0003      	movs	r3, r0
 8002704:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a3c      	ldr	r2, [pc, #240]	@ (80027fc <HAL_ADC_ConfigChannel+0x368>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d123      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	2380      	movs	r3, #128	@ 0x80
 8002714:	041b      	lsls	r3, r3, #16
 8002716:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002718:	d11e      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2280      	movs	r2, #128	@ 0x80
 800271e:	0412      	lsls	r2, r2, #16
 8002720:	4313      	orrs	r3, r2
 8002722:	4a35      	ldr	r2, [pc, #212]	@ (80027f8 <HAL_ADC_ConfigChannel+0x364>)
 8002724:	0019      	movs	r1, r3
 8002726:	0010      	movs	r0, r2
 8002728:	f7ff fb28 	bl	8001d7c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800272c:	4b34      	ldr	r3, [pc, #208]	@ (8002800 <HAL_ADC_ConfigChannel+0x36c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4934      	ldr	r1, [pc, #208]	@ (8002804 <HAL_ADC_ConfigChannel+0x370>)
 8002732:	0018      	movs	r0, r3
 8002734:	f7fd fcf2 	bl	800011c <__udivsi3>
 8002738:	0003      	movs	r3, r0
 800273a:	001a      	movs	r2, r3
 800273c:	0013      	movs	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	189b      	adds	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	3301      	adds	r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002748:	e002      	b.n	8002750 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3b01      	subs	r3, #1
 800274e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f9      	bne.n	800274a <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002756:	e067      	b.n	8002828 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a2a      	ldr	r2, [pc, #168]	@ (8002808 <HAL_ADC_ConfigChannel+0x374>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d162      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	2380      	movs	r3, #128	@ 0x80
 8002766:	03db      	lsls	r3, r3, #15
 8002768:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800276a:	d15d      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	2280      	movs	r2, #128	@ 0x80
 8002770:	03d2      	lsls	r2, r2, #15
 8002772:	4313      	orrs	r3, r2
 8002774:	4a20      	ldr	r2, [pc, #128]	@ (80027f8 <HAL_ADC_ConfigChannel+0x364>)
 8002776:	0019      	movs	r1, r3
 8002778:	0010      	movs	r0, r2
 800277a:	f7ff faff 	bl	8001d7c <LL_ADC_SetCommonPathInternalCh>
 800277e:	e053      	b.n	8002828 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	2380      	movs	r3, #128	@ 0x80
 8002786:	061b      	lsls	r3, r3, #24
 8002788:	429a      	cmp	r2, r3
 800278a:	d004      	beq.n	8002796 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002790:	4a18      	ldr	r2, [pc, #96]	@ (80027f4 <HAL_ADC_ConfigChannel+0x360>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d107      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	0019      	movs	r1, r3
 80027a0:	0010      	movs	r0, r2
 80027a2:	f7ff fb82 	bl	8001eaa <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	da3c      	bge.n	8002828 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027ae:	4b12      	ldr	r3, [pc, #72]	@ (80027f8 <HAL_ADC_ConfigChannel+0x364>)
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7ff faf7 	bl	8001da4 <LL_ADC_GetCommonPathInternalCh>
 80027b6:	0003      	movs	r3, r0
 80027b8:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a0f      	ldr	r2, [pc, #60]	@ (80027fc <HAL_ADC_ConfigChannel+0x368>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d108      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4a11      	ldr	r2, [pc, #68]	@ (800280c <HAL_ADC_ConfigChannel+0x378>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	4a0b      	ldr	r2, [pc, #44]	@ (80027f8 <HAL_ADC_ConfigChannel+0x364>)
 80027cc:	0019      	movs	r1, r3
 80027ce:	0010      	movs	r0, r2
 80027d0:	f7ff fad4 	bl	8001d7c <LL_ADC_SetCommonPathInternalCh>
 80027d4:	e028      	b.n	8002828 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a0b      	ldr	r2, [pc, #44]	@ (8002808 <HAL_ADC_ConfigChannel+0x374>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d123      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002810 <HAL_ADC_ConfigChannel+0x37c>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	4a04      	ldr	r2, [pc, #16]	@ (80027f8 <HAL_ADC_ConfigChannel+0x364>)
 80027e8:	0019      	movs	r1, r3
 80027ea:	0010      	movs	r0, r2
 80027ec:	f7ff fac6 	bl	8001d7c <LL_ADC_SetCommonPathInternalCh>
 80027f0:	e01a      	b.n	8002828 <HAL_ADC_ConfigChannel+0x394>
 80027f2:	46c0      	nop			@ (mov r8, r8)
 80027f4:	80000004 	.word	0x80000004
 80027f8:	40012708 	.word	0x40012708
 80027fc:	a4000200 	.word	0xa4000200
 8002800:	20000034 	.word	0x20000034
 8002804:	00030d40 	.word	0x00030d40
 8002808:	a8000400 	.word	0xa8000400
 800280c:	ff7fffff 	.word	0xff7fffff
 8002810:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002818:	2220      	movs	r2, #32
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002820:	2317      	movs	r3, #23
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2254      	movs	r2, #84	@ 0x54
 800282c:	2100      	movs	r1, #0
 800282e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002830:	2317      	movs	r3, #23
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	781b      	ldrb	r3, [r3, #0]
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b006      	add	sp, #24
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			@ (mov r8, r8)

08002840 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002848:	2300      	movs	r3, #0
 800284a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	0018      	movs	r0, r3
 8002852:	f7ff fba5 	bl	8001fa0 <LL_ADC_IsEnabled>
 8002856:	1e03      	subs	r3, r0, #0
 8002858:	d162      	bne.n	8002920 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a32      	ldr	r2, [pc, #200]	@ (800292c <ADC_Enable+0xec>)
 8002862:	4013      	ands	r3, r2
 8002864:	d00d      	beq.n	8002882 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286a:	2210      	movs	r2, #16
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002876:	2201      	movs	r2, #1
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e04f      	b.n	8002922 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	0018      	movs	r0, r3
 8002888:	f7ff fb66 	bl	8001f58 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800288c:	4b28      	ldr	r3, [pc, #160]	@ (8002930 <ADC_Enable+0xf0>)
 800288e:	0018      	movs	r0, r3
 8002890:	f7ff fa88 	bl	8001da4 <LL_ADC_GetCommonPathInternalCh>
 8002894:	0002      	movs	r2, r0
 8002896:	2380      	movs	r3, #128	@ 0x80
 8002898:	041b      	lsls	r3, r3, #16
 800289a:	4013      	ands	r3, r2
 800289c:	d00f      	beq.n	80028be <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800289e:	4b25      	ldr	r3, [pc, #148]	@ (8002934 <ADC_Enable+0xf4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4925      	ldr	r1, [pc, #148]	@ (8002938 <ADC_Enable+0xf8>)
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7fd fc39 	bl	800011c <__udivsi3>
 80028aa:	0003      	movs	r3, r0
 80028ac:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80028ae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80028b0:	e002      	b.n	80028b8 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f9      	bne.n	80028b2 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	7e5b      	ldrb	r3, [r3, #25]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d02c      	beq.n	8002920 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80028c6:	f7ff fa2b 	bl	8001d20 <HAL_GetTick>
 80028ca:	0003      	movs	r3, r0
 80028cc:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028ce:	e020      	b.n	8002912 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	0018      	movs	r0, r3
 80028d6:	f7ff fb63 	bl	8001fa0 <LL_ADC_IsEnabled>
 80028da:	1e03      	subs	r3, r0, #0
 80028dc:	d104      	bne.n	80028e8 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	0018      	movs	r0, r3
 80028e4:	f7ff fb38 	bl	8001f58 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028e8:	f7ff fa1a 	bl	8001d20 <HAL_GetTick>
 80028ec:	0002      	movs	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d90d      	bls.n	8002912 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fa:	2210      	movs	r2, #16
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002906:	2201      	movs	r2, #1
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e007      	b.n	8002922 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2201      	movs	r2, #1
 800291a:	4013      	ands	r3, r2
 800291c:	2b01      	cmp	r3, #1
 800291e:	d1d7      	bne.n	80028d0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	0018      	movs	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	b004      	add	sp, #16
 8002928:	bd80      	pop	{r7, pc}
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	80000017 	.word	0x80000017
 8002930:	40012708 	.word	0x40012708
 8002934:	20000034 	.word	0x20000034
 8002938:	00030d40 	.word	0x00030d40

0800293c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002948:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294e:	2250      	movs	r2, #80	@ 0x50
 8002950:	4013      	ands	r3, r2
 8002952:	d141      	bne.n	80029d8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002958:	2280      	movs	r2, #128	@ 0x80
 800295a:	0092      	lsls	r2, r2, #2
 800295c:	431a      	orrs	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	0018      	movs	r0, r3
 8002968:	f7ff fa5d 	bl	8001e26 <LL_ADC_REG_IsTriggerSourceSWStart>
 800296c:	1e03      	subs	r3, r0, #0
 800296e:	d02e      	beq.n	80029ce <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	7e9b      	ldrb	r3, [r3, #26]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d12a      	bne.n	80029ce <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2208      	movs	r2, #8
 8002980:	4013      	ands	r3, r2
 8002982:	2b08      	cmp	r3, #8
 8002984:	d123      	bne.n	80029ce <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	0018      	movs	r0, r3
 800298c:	f7ff fb2c 	bl	8001fe8 <LL_ADC_REG_IsConversionOngoing>
 8002990:	1e03      	subs	r3, r0, #0
 8002992:	d110      	bne.n	80029b6 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	210c      	movs	r1, #12
 80029a0:	438a      	bics	r2, r1
 80029a2:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a8:	4a15      	ldr	r2, [pc, #84]	@ (8002a00 <ADC_DMAConvCplt+0xc4>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	2201      	movs	r2, #1
 80029ae:	431a      	orrs	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80029b4:	e00b      	b.n	80029ce <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ba:	2220      	movs	r2, #32
 80029bc:	431a      	orrs	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c6:	2201      	movs	r2, #1
 80029c8:	431a      	orrs	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7fe f95d 	bl	8000c90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029d6:	e00f      	b.n	80029f8 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029dc:	2210      	movs	r2, #16
 80029de:	4013      	ands	r3, r2
 80029e0:	d004      	beq.n	80029ec <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f7ff fd4d 	bl	8002484 <HAL_ADC_ErrorCallback>
}
 80029ea:	e005      	b.n	80029f8 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	0010      	movs	r0, r2
 80029f6:	4798      	blx	r3
}
 80029f8:	46c0      	nop			@ (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b004      	add	sp, #16
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	fffffefe 	.word	0xfffffefe

08002a04 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	0018      	movs	r0, r3
 8002a16:	f7ff fd2d 	bl	8002474 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a1a:	46c0      	nop			@ (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b004      	add	sp, #16
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a34:	2240      	movs	r2, #64	@ 0x40
 8002a36:	431a      	orrs	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a40:	2204      	movs	r2, #4
 8002a42:	431a      	orrs	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f7ff fd1a 	bl	8002484 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a50:	46c0      	nop			@ (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b004      	add	sp, #16
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	0002      	movs	r2, r0
 8002a60:	1dfb      	adds	r3, r7, #7
 8002a62:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a64:	1dfb      	adds	r3, r7, #7
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a6a:	d809      	bhi.n	8002a80 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a6c:	1dfb      	adds	r3, r7, #7
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	001a      	movs	r2, r3
 8002a72:	231f      	movs	r3, #31
 8002a74:	401a      	ands	r2, r3
 8002a76:	4b04      	ldr	r3, [pc, #16]	@ (8002a88 <__NVIC_EnableIRQ+0x30>)
 8002a78:	2101      	movs	r1, #1
 8002a7a:	4091      	lsls	r1, r2
 8002a7c:	000a      	movs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002a80:	46c0      	nop			@ (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b002      	add	sp, #8
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	e000e100 	.word	0xe000e100

08002a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	0002      	movs	r2, r0
 8002a94:	6039      	str	r1, [r7, #0]
 8002a96:	1dfb      	adds	r3, r7, #7
 8002a98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a9a:	1dfb      	adds	r3, r7, #7
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002aa0:	d828      	bhi.n	8002af4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002aa2:	4a2f      	ldr	r2, [pc, #188]	@ (8002b60 <__NVIC_SetPriority+0xd4>)
 8002aa4:	1dfb      	adds	r3, r7, #7
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	b25b      	sxtb	r3, r3
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	33c0      	adds	r3, #192	@ 0xc0
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	589b      	ldr	r3, [r3, r2]
 8002ab2:	1dfa      	adds	r2, r7, #7
 8002ab4:	7812      	ldrb	r2, [r2, #0]
 8002ab6:	0011      	movs	r1, r2
 8002ab8:	2203      	movs	r2, #3
 8002aba:	400a      	ands	r2, r1
 8002abc:	00d2      	lsls	r2, r2, #3
 8002abe:	21ff      	movs	r1, #255	@ 0xff
 8002ac0:	4091      	lsls	r1, r2
 8002ac2:	000a      	movs	r2, r1
 8002ac4:	43d2      	mvns	r2, r2
 8002ac6:	401a      	ands	r2, r3
 8002ac8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	019b      	lsls	r3, r3, #6
 8002ace:	22ff      	movs	r2, #255	@ 0xff
 8002ad0:	401a      	ands	r2, r3
 8002ad2:	1dfb      	adds	r3, r7, #7
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	2303      	movs	r3, #3
 8002ada:	4003      	ands	r3, r0
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ae0:	481f      	ldr	r0, [pc, #124]	@ (8002b60 <__NVIC_SetPriority+0xd4>)
 8002ae2:	1dfb      	adds	r3, r7, #7
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	b25b      	sxtb	r3, r3
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	430a      	orrs	r2, r1
 8002aec:	33c0      	adds	r3, #192	@ 0xc0
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002af2:	e031      	b.n	8002b58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002af4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b64 <__NVIC_SetPriority+0xd8>)
 8002af6:	1dfb      	adds	r3, r7, #7
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	0019      	movs	r1, r3
 8002afc:	230f      	movs	r3, #15
 8002afe:	400b      	ands	r3, r1
 8002b00:	3b08      	subs	r3, #8
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	3306      	adds	r3, #6
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	18d3      	adds	r3, r2, r3
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	1dfa      	adds	r2, r7, #7
 8002b10:	7812      	ldrb	r2, [r2, #0]
 8002b12:	0011      	movs	r1, r2
 8002b14:	2203      	movs	r2, #3
 8002b16:	400a      	ands	r2, r1
 8002b18:	00d2      	lsls	r2, r2, #3
 8002b1a:	21ff      	movs	r1, #255	@ 0xff
 8002b1c:	4091      	lsls	r1, r2
 8002b1e:	000a      	movs	r2, r1
 8002b20:	43d2      	mvns	r2, r2
 8002b22:	401a      	ands	r2, r3
 8002b24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	019b      	lsls	r3, r3, #6
 8002b2a:	22ff      	movs	r2, #255	@ 0xff
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	1dfb      	adds	r3, r7, #7
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	0018      	movs	r0, r3
 8002b34:	2303      	movs	r3, #3
 8002b36:	4003      	ands	r3, r0
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b3c:	4809      	ldr	r0, [pc, #36]	@ (8002b64 <__NVIC_SetPriority+0xd8>)
 8002b3e:	1dfb      	adds	r3, r7, #7
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	001c      	movs	r4, r3
 8002b44:	230f      	movs	r3, #15
 8002b46:	4023      	ands	r3, r4
 8002b48:	3b08      	subs	r3, #8
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	3306      	adds	r3, #6
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	18c3      	adds	r3, r0, r3
 8002b54:	3304      	adds	r3, #4
 8002b56:	601a      	str	r2, [r3, #0]
}
 8002b58:	46c0      	nop			@ (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b003      	add	sp, #12
 8002b5e:	bd90      	pop	{r4, r7, pc}
 8002b60:	e000e100 	.word	0xe000e100
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	1e5a      	subs	r2, r3, #1
 8002b74:	2380      	movs	r3, #128	@ 0x80
 8002b76:	045b      	lsls	r3, r3, #17
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d301      	bcc.n	8002b80 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e010      	b.n	8002ba2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b80:	4b0a      	ldr	r3, [pc, #40]	@ (8002bac <SysTick_Config+0x44>)
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	3a01      	subs	r2, #1
 8002b86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b88:	2301      	movs	r3, #1
 8002b8a:	425b      	negs	r3, r3
 8002b8c:	2103      	movs	r1, #3
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f7ff ff7c 	bl	8002a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b94:	4b05      	ldr	r3, [pc, #20]	@ (8002bac <SysTick_Config+0x44>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9a:	4b04      	ldr	r3, [pc, #16]	@ (8002bac <SysTick_Config+0x44>)
 8002b9c:	2207      	movs	r2, #7
 8002b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b002      	add	sp, #8
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	e000e010 	.word	0xe000e010

08002bb0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	210f      	movs	r1, #15
 8002bbc:	187b      	adds	r3, r7, r1
 8002bbe:	1c02      	adds	r2, r0, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	187b      	adds	r3, r7, r1
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	0011      	movs	r1, r2
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f7ff ff5d 	bl	8002a8c <__NVIC_SetPriority>
}
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b004      	add	sp, #16
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	0002      	movs	r2, r0
 8002be2:	1dfb      	adds	r3, r7, #7
 8002be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be6:	1dfb      	adds	r3, r7, #7
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	b25b      	sxtb	r3, r3
 8002bec:	0018      	movs	r0, r3
 8002bee:	f7ff ff33 	bl	8002a58 <__NVIC_EnableIRQ>
}
 8002bf2:	46c0      	nop			@ (mov r8, r8)
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b002      	add	sp, #8
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0018      	movs	r0, r3
 8002c06:	f7ff ffaf 	bl	8002b68 <SysTick_Config>
 8002c0a:	0003      	movs	r3, r0
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b002      	add	sp, #8
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e077      	b.n	8002d16 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d20 <HAL_DMA_Init+0x10c>)
 8002c2c:	4694      	mov	ip, r2
 8002c2e:	4463      	add	r3, ip
 8002c30:	2114      	movs	r1, #20
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7fd fa72 	bl	800011c <__udivsi3>
 8002c38:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002c3a:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2225      	movs	r2, #37	@ 0x25
 8002c44:	2102      	movs	r1, #2
 8002c46:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4934      	ldr	r1, [pc, #208]	@ (8002d24 <HAL_DMA_Init+0x110>)
 8002c54:	400a      	ands	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6819      	ldr	r1, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	0018      	movs	r0, r3
 8002c92:	f000 fa49 	bl	8003128 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	2380      	movs	r3, #128	@ 0x80
 8002c9c:	01db      	lsls	r3, r3, #7
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d102      	bne.n	8002ca8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb0:	21ff      	movs	r1, #255	@ 0xff
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002cbe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d011      	beq.n	8002cec <HAL_DMA_Init+0xd8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d80d      	bhi.n	8002cec <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f000 fa54 	bl	8003180 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	e008      	b.n	8002cfe <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2225      	movs	r2, #37	@ 0x25
 8002d08:	2101      	movs	r1, #1
 8002d0a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2224      	movs	r2, #36	@ 0x24
 8002d10:	2100      	movs	r1, #0
 8002d12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	0018      	movs	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b002      	add	sp, #8
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	bffdfff8 	.word	0xbffdfff8
 8002d24:	ffff800f 	.word	0xffff800f

08002d28 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d36:	2317      	movs	r3, #23
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2224      	movs	r2, #36	@ 0x24
 8002d42:	5c9b      	ldrb	r3, [r3, r2]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_DMA_Start_IT+0x24>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e070      	b.n	8002e2e <HAL_DMA_Start_IT+0x106>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2224      	movs	r2, #36	@ 0x24
 8002d50:	2101      	movs	r1, #1
 8002d52:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2225      	movs	r2, #37	@ 0x25
 8002d58:	5c9b      	ldrb	r3, [r3, r2]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d157      	bne.n	8002e10 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2225      	movs	r2, #37	@ 0x25
 8002d64:	2102      	movs	r1, #2
 8002d66:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2101      	movs	r1, #1
 8002d7a:	438a      	bics	r2, r1
 8002d7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f98f 	bl	80030a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	210e      	movs	r1, #14
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e00f      	b.n	8002dc4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2104      	movs	r1, #4
 8002db0:	438a      	bics	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	210a      	movs	r1, #10
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	2380      	movs	r3, #128	@ 0x80
 8002dcc:	025b      	lsls	r3, r3, #9
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d008      	beq.n	8002de4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ddc:	2180      	movs	r1, #128	@ 0x80
 8002dde:	0049      	lsls	r1, r1, #1
 8002de0:	430a      	orrs	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df6:	2180      	movs	r1, #128	@ 0x80
 8002df8:	0049      	lsls	r1, r1, #1
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2101      	movs	r1, #1
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	e007      	b.n	8002e20 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2224      	movs	r2, #36	@ 0x24
 8002e14:	2100      	movs	r1, #0
 8002e16:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e18:	2317      	movs	r3, #23
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2224      	movs	r2, #36	@ 0x24
 8002e24:	2100      	movs	r1, #0
 8002e26:	5499      	strb	r1, [r3, r2]

  return status;
 8002e28:	2317      	movs	r3, #23
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	781b      	ldrb	r3, [r3, #0]
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b006      	add	sp, #24
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e40:	230f      	movs	r3, #15
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2224      	movs	r2, #36	@ 0x24
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2224      	movs	r2, #36	@ 0x24
 8002e54:	5c9b      	ldrb	r3, [r3, r2]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_DMA_Abort_IT+0x26>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e05e      	b.n	8002f1c <HAL_DMA_Abort_IT+0xe4>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2224      	movs	r2, #36	@ 0x24
 8002e62:	2101      	movs	r1, #1
 8002e64:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2225      	movs	r2, #37	@ 0x25
 8002e6a:	5c9b      	ldrb	r3, [r3, r2]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d007      	beq.n	8002e82 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2204      	movs	r2, #4
 8002e76:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002e78:	230f      	movs	r3, #15
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	e049      	b.n	8002f16 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	210e      	movs	r1, #14
 8002e8e:	438a      	bics	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	438a      	bics	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eac:	491d      	ldr	r1, [pc, #116]	@ (8002f24 <HAL_DMA_Abort_IT+0xec>)
 8002eae:	400a      	ands	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f28 <HAL_DMA_Abort_IT+0xf0>)
 8002eb4:	6859      	ldr	r1, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	221c      	movs	r2, #28
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	4b19      	ldr	r3, [pc, #100]	@ (8002f28 <HAL_DMA_Abort_IT+0xf0>)
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ed0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ee4:	490f      	ldr	r1, [pc, #60]	@ (8002f24 <HAL_DMA_Abort_IT+0xec>)
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002ef2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2225      	movs	r2, #37	@ 0x25
 8002ef8:	2101      	movs	r1, #1
 8002efa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2224      	movs	r2, #36	@ 0x24
 8002f00:	2100      	movs	r1, #0
 8002f02:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d004      	beq.n	8002f16 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	0010      	movs	r0, r2
 8002f14:	4798      	blx	r3
    }
  }
  return status;
 8002f16:	230f      	movs	r3, #15
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	781b      	ldrb	r3, [r3, #0]
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b004      	add	sp, #16
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	fffffeff 	.word	0xfffffeff
 8002f28:	40020000 	.word	0x40020000

08002f2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8002f34:	4b55      	ldr	r3, [pc, #340]	@ (800308c <HAL_DMA_IRQHandler+0x160>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	221c      	movs	r2, #28
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	0013      	movs	r3, r2
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4013      	ands	r3, r2
 8002f54:	d027      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x7a>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2204      	movs	r2, #4
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d023      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2220      	movs	r2, #32
 8002f66:	4013      	ands	r3, r2
 8002f68:	d107      	bne.n	8002f7a <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2104      	movs	r1, #4
 8002f76:	438a      	bics	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8002f7a:	4b44      	ldr	r3, [pc, #272]	@ (800308c <HAL_DMA_IRQHandler+0x160>)
 8002f7c:	6859      	ldr	r1, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	221c      	movs	r2, #28
 8002f84:	4013      	ands	r3, r2
 8002f86:	2204      	movs	r2, #4
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	4b40      	ldr	r3, [pc, #256]	@ (800308c <HAL_DMA_IRQHandler+0x160>)
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d100      	bne.n	8002f9a <HAL_DMA_IRQHandler+0x6e>
 8002f98:	e073      	b.n	8003082 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	0010      	movs	r0, r2
 8002fa2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002fa4:	e06d      	b.n	8003082 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	221c      	movs	r2, #28
 8002fac:	4013      	ands	r3, r2
 8002fae:	2202      	movs	r2, #2
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	0013      	movs	r3, r2
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d02e      	beq.n	8003018 <HAL_DMA_IRQHandler+0xec>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d02a      	beq.n	8003018 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d10b      	bne.n	8002fe6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	210a      	movs	r1, #10
 8002fda:	438a      	bics	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2225      	movs	r2, #37	@ 0x25
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8002fe6:	4b29      	ldr	r3, [pc, #164]	@ (800308c <HAL_DMA_IRQHandler+0x160>)
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	221c      	movs	r2, #28
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	4b25      	ldr	r3, [pc, #148]	@ (800308c <HAL_DMA_IRQHandler+0x160>)
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2224      	movs	r2, #36	@ 0x24
 8003000:	2100      	movs	r1, #0
 8003002:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d03a      	beq.n	8003082 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	0010      	movs	r0, r2
 8003014:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003016:	e034      	b.n	8003082 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	221c      	movs	r2, #28
 800301e:	4013      	ands	r3, r2
 8003020:	2208      	movs	r2, #8
 8003022:	409a      	lsls	r2, r3
 8003024:	0013      	movs	r3, r2
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4013      	ands	r3, r2
 800302a:	d02b      	beq.n	8003084 <HAL_DMA_IRQHandler+0x158>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2208      	movs	r2, #8
 8003030:	4013      	ands	r3, r2
 8003032:	d027      	beq.n	8003084 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	210e      	movs	r1, #14
 8003040:	438a      	bics	r2, r1
 8003042:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003044:	4b11      	ldr	r3, [pc, #68]	@ (800308c <HAL_DMA_IRQHandler+0x160>)
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	221c      	movs	r2, #28
 800304e:	4013      	ands	r3, r2
 8003050:	2201      	movs	r2, #1
 8003052:	409a      	lsls	r2, r3
 8003054:	4b0d      	ldr	r3, [pc, #52]	@ (800308c <HAL_DMA_IRQHandler+0x160>)
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2225      	movs	r2, #37	@ 0x25
 8003064:	2101      	movs	r1, #1
 8003066:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2224      	movs	r2, #36	@ 0x24
 800306c:	2100      	movs	r1, #0
 800306e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	0010      	movs	r0, r2
 8003080:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003082:	46c0      	nop			@ (mov r8, r8)
 8003084:	46c0      	nop			@ (mov r8, r8)
}
 8003086:	46bd      	mov	sp, r7
 8003088:	b004      	add	sp, #16
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40020000 	.word	0x40020000

08003090 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2225      	movs	r2, #37	@ 0x25
 800309c:	5c9b      	ldrb	r3, [r3, r2]
 800309e:	b2db      	uxtb	r3, r3
}
 80030a0:	0018      	movs	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80030be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d004      	beq.n	80030d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80030d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80030d2:	4b14      	ldr	r3, [pc, #80]	@ (8003124 <DMA_SetConfig+0x7c>)
 80030d4:	6859      	ldr	r1, [r3, #4]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	221c      	movs	r2, #28
 80030dc:	4013      	ands	r3, r2
 80030de:	2201      	movs	r2, #1
 80030e0:	409a      	lsls	r2, r3
 80030e2:	4b10      	ldr	r3, [pc, #64]	@ (8003124 <DMA_SetConfig+0x7c>)
 80030e4:	430a      	orrs	r2, r1
 80030e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b10      	cmp	r3, #16
 80030f6:	d108      	bne.n	800310a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003108:	e007      	b.n	800311a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	60da      	str	r2, [r3, #12]
}
 800311a:	46c0      	nop			@ (mov r8, r8)
 800311c:	46bd      	mov	sp, r7
 800311e:	b004      	add	sp, #16
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	40020000 	.word	0x40020000

08003128 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	001a      	movs	r2, r3
 8003136:	23ff      	movs	r3, #255	@ 0xff
 8003138:	4013      	ands	r3, r2
 800313a:	3b08      	subs	r3, #8
 800313c:	2114      	movs	r1, #20
 800313e:	0018      	movs	r0, r3
 8003140:	f7fc ffec 	bl	800011c <__udivsi3>
 8003144:	0003      	movs	r3, r0
 8003146:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314c:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800314e:	4a0a      	ldr	r2, [pc, #40]	@ (8003178 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003150:	4694      	mov	ip, r2
 8003152:	4463      	add	r3, ip
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	001a      	movs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a07      	ldr	r2, [pc, #28]	@ (800317c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003160:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	221c      	movs	r2, #28
 8003166:	4013      	ands	r3, r2
 8003168:	2201      	movs	r2, #1
 800316a:	409a      	lsls	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003170:	46c0      	nop			@ (mov r8, r8)
 8003172:	46bd      	mov	sp, r7
 8003174:	b004      	add	sp, #16
 8003176:	bd80      	pop	{r7, pc}
 8003178:	10008200 	.word	0x10008200
 800317c:	40020880 	.word	0x40020880

08003180 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	22ff      	movs	r2, #255	@ 0xff
 800318e:	4013      	ands	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4a0a      	ldr	r2, [pc, #40]	@ (80031c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003196:	4694      	mov	ip, r2
 8003198:	4463      	add	r3, ip
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	001a      	movs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a07      	ldr	r2, [pc, #28]	@ (80031c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80031a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	2203      	movs	r2, #3
 80031ae:	4013      	ands	r3, r2
 80031b0:	2201      	movs	r2, #1
 80031b2:	409a      	lsls	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80031b8:	46c0      	nop			@ (mov r8, r8)
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b004      	add	sp, #16
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	1000823f 	.word	0x1000823f
 80031c4:	40020940 	.word	0x40020940

080031c8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80031d6:	e153      	b.n	8003480 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2101      	movs	r1, #1
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4091      	lsls	r1, r2
 80031e2:	000a      	movs	r2, r1
 80031e4:	4013      	ands	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d100      	bne.n	80031f0 <HAL_GPIO_Init+0x28>
 80031ee:	e144      	b.n	800347a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d003      	beq.n	8003200 <HAL_GPIO_Init+0x38>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b12      	cmp	r3, #18
 80031fe:	d125      	bne.n	800324c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	08da      	lsrs	r2, r3, #3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3208      	adds	r2, #8
 8003208:	0092      	lsls	r2, r2, #2
 800320a:	58d3      	ldr	r3, [r2, r3]
 800320c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	2207      	movs	r2, #7
 8003212:	4013      	ands	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	220f      	movs	r2, #15
 8003218:	409a      	lsls	r2, r3
 800321a:	0013      	movs	r3, r2
 800321c:	43da      	mvns	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	4013      	ands	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	220f      	movs	r2, #15
 800322a:	401a      	ands	r2, r3
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	2107      	movs	r1, #7
 8003230:	400b      	ands	r3, r1
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	409a      	lsls	r2, r3
 8003236:	0013      	movs	r3, r2
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	08da      	lsrs	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3208      	adds	r2, #8
 8003246:	0092      	lsls	r2, r2, #2
 8003248:	6979      	ldr	r1, [r7, #20]
 800324a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	2203      	movs	r2, #3
 8003258:	409a      	lsls	r2, r3
 800325a:	0013      	movs	r3, r2
 800325c:	43da      	mvns	r2, r3
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	4013      	ands	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2203      	movs	r2, #3
 800326a:	401a      	ands	r2, r3
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	409a      	lsls	r2, r3
 8003272:	0013      	movs	r3, r2
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d00b      	beq.n	80032a0 <HAL_GPIO_Init+0xd8>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d007      	beq.n	80032a0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003294:	2b11      	cmp	r3, #17
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b12      	cmp	r3, #18
 800329e:	d130      	bne.n	8003302 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	2203      	movs	r2, #3
 80032ac:	409a      	lsls	r2, r3
 80032ae:	0013      	movs	r3, r2
 80032b0:	43da      	mvns	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	4013      	ands	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	409a      	lsls	r2, r3
 80032c2:	0013      	movs	r3, r2
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032d6:	2201      	movs	r2, #1
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	409a      	lsls	r2, r3
 80032dc:	0013      	movs	r3, r2
 80032de:	43da      	mvns	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	4013      	ands	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	2201      	movs	r2, #1
 80032ee:	401a      	ands	r2, r3
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	409a      	lsls	r2, r3
 80032f4:	0013      	movs	r3, r2
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b03      	cmp	r3, #3
 8003308:	d017      	beq.n	800333a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	2203      	movs	r2, #3
 8003316:	409a      	lsls	r2, r3
 8003318:	0013      	movs	r3, r2
 800331a:	43da      	mvns	r2, r3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	4013      	ands	r3, r2
 8003320:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	409a      	lsls	r2, r3
 800332c:	0013      	movs	r3, r2
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	2380      	movs	r3, #128	@ 0x80
 8003340:	055b      	lsls	r3, r3, #21
 8003342:	4013      	ands	r3, r2
 8003344:	d100      	bne.n	8003348 <HAL_GPIO_Init+0x180>
 8003346:	e098      	b.n	800347a <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003348:	4a53      	ldr	r2, [pc, #332]	@ (8003498 <HAL_GPIO_Init+0x2d0>)
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	3318      	adds	r3, #24
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	589b      	ldr	r3, [r3, r2]
 8003354:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2203      	movs	r2, #3
 800335a:	4013      	ands	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	220f      	movs	r2, #15
 8003360:	409a      	lsls	r2, r3
 8003362:	0013      	movs	r3, r2
 8003364:	43da      	mvns	r2, r3
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	4013      	ands	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	23a0      	movs	r3, #160	@ 0xa0
 8003370:	05db      	lsls	r3, r3, #23
 8003372:	429a      	cmp	r2, r3
 8003374:	d019      	beq.n	80033aa <HAL_GPIO_Init+0x1e2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a48      	ldr	r2, [pc, #288]	@ (800349c <HAL_GPIO_Init+0x2d4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d013      	beq.n	80033a6 <HAL_GPIO_Init+0x1de>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a47      	ldr	r2, [pc, #284]	@ (80034a0 <HAL_GPIO_Init+0x2d8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00d      	beq.n	80033a2 <HAL_GPIO_Init+0x1da>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a46      	ldr	r2, [pc, #280]	@ (80034a4 <HAL_GPIO_Init+0x2dc>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d007      	beq.n	800339e <HAL_GPIO_Init+0x1d6>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a45      	ldr	r2, [pc, #276]	@ (80034a8 <HAL_GPIO_Init+0x2e0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d101      	bne.n	800339a <HAL_GPIO_Init+0x1d2>
 8003396:	2305      	movs	r3, #5
 8003398:	e008      	b.n	80033ac <HAL_GPIO_Init+0x1e4>
 800339a:	2306      	movs	r3, #6
 800339c:	e006      	b.n	80033ac <HAL_GPIO_Init+0x1e4>
 800339e:	2303      	movs	r3, #3
 80033a0:	e004      	b.n	80033ac <HAL_GPIO_Init+0x1e4>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e002      	b.n	80033ac <HAL_GPIO_Init+0x1e4>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <HAL_GPIO_Init+0x1e4>
 80033aa:	2300      	movs	r3, #0
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	2103      	movs	r1, #3
 80033b0:	400a      	ands	r2, r1
 80033b2:	00d2      	lsls	r2, r2, #3
 80033b4:	4093      	lsls	r3, r2
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80033bc:	4936      	ldr	r1, [pc, #216]	@ (8003498 <HAL_GPIO_Init+0x2d0>)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	089b      	lsrs	r3, r3, #2
 80033c2:	3318      	adds	r3, #24
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80033ca:	4a33      	ldr	r2, [pc, #204]	@ (8003498 <HAL_GPIO_Init+0x2d0>)
 80033cc:	2380      	movs	r3, #128	@ 0x80
 80033ce:	58d3      	ldr	r3, [r2, r3]
 80033d0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	43da      	mvns	r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	4013      	ands	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	2380      	movs	r3, #128	@ 0x80
 80033e2:	025b      	lsls	r3, r3, #9
 80033e4:	4013      	ands	r3, r2
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80033f0:	4929      	ldr	r1, [pc, #164]	@ (8003498 <HAL_GPIO_Init+0x2d0>)
 80033f2:	2280      	movs	r2, #128	@ 0x80
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80033f8:	4a27      	ldr	r2, [pc, #156]	@ (8003498 <HAL_GPIO_Init+0x2d0>)
 80033fa:	2384      	movs	r3, #132	@ 0x84
 80033fc:	58d3      	ldr	r3, [r2, r3]
 80033fe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	43da      	mvns	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	4013      	ands	r3, r2
 8003408:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	2380      	movs	r3, #128	@ 0x80
 8003410:	029b      	lsls	r3, r3, #10
 8003412:	4013      	ands	r3, r2
 8003414:	d003      	beq.n	800341e <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800341e:	491e      	ldr	r1, [pc, #120]	@ (8003498 <HAL_GPIO_Init+0x2d0>)
 8003420:	2284      	movs	r2, #132	@ 0x84
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003426:	4b1c      	ldr	r3, [pc, #112]	@ (8003498 <HAL_GPIO_Init+0x2d0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	43da      	mvns	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	4013      	ands	r3, r2
 8003434:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	2380      	movs	r3, #128	@ 0x80
 800343c:	035b      	lsls	r3, r3, #13
 800343e:	4013      	ands	r3, r2
 8003440:	d003      	beq.n	800344a <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800344a:	4b13      	ldr	r3, [pc, #76]	@ (8003498 <HAL_GPIO_Init+0x2d0>)
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003450:	4b11      	ldr	r3, [pc, #68]	@ (8003498 <HAL_GPIO_Init+0x2d0>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	43da      	mvns	r2, r3
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	4013      	ands	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	2380      	movs	r3, #128	@ 0x80
 8003466:	039b      	lsls	r3, r3, #14
 8003468:	4013      	ands	r3, r2
 800346a:	d003      	beq.n	8003474 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003474:	4b08      	ldr	r3, [pc, #32]	@ (8003498 <HAL_GPIO_Init+0x2d0>)
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	3301      	adds	r3, #1
 800347e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	40da      	lsrs	r2, r3
 8003488:	1e13      	subs	r3, r2, #0
 800348a:	d000      	beq.n	800348e <HAL_GPIO_Init+0x2c6>
 800348c:	e6a4      	b.n	80031d8 <HAL_GPIO_Init+0x10>
  }
}
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	46c0      	nop			@ (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	b006      	add	sp, #24
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021800 	.word	0x40021800
 800349c:	50000400 	.word	0x50000400
 80034a0:	50000800 	.word	0x50000800
 80034a4:	50000c00 	.word	0x50000c00
 80034a8:	50001400 	.word	0x50001400

080034ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	000a      	movs	r2, r1
 80034b6:	1cbb      	adds	r3, r7, #2
 80034b8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	1cba      	adds	r2, r7, #2
 80034c0:	8812      	ldrh	r2, [r2, #0]
 80034c2:	4013      	ands	r3, r2
 80034c4:	d004      	beq.n	80034d0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80034c6:	230f      	movs	r3, #15
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e003      	b.n	80034d8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034d0:	230f      	movs	r3, #15
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	2200      	movs	r2, #0
 80034d6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80034d8:	230f      	movs	r3, #15
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	781b      	ldrb	r3, [r3, #0]
}
 80034de:	0018      	movs	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b004      	add	sp, #16
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	0008      	movs	r0, r1
 80034f0:	0011      	movs	r1, r2
 80034f2:	1cbb      	adds	r3, r7, #2
 80034f4:	1c02      	adds	r2, r0, #0
 80034f6:	801a      	strh	r2, [r3, #0]
 80034f8:	1c7b      	adds	r3, r7, #1
 80034fa:	1c0a      	adds	r2, r1, #0
 80034fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034fe:	1c7b      	adds	r3, r7, #1
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d004      	beq.n	8003510 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003506:	1cbb      	adds	r3, r7, #2
 8003508:	881a      	ldrh	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800350e:	e003      	b.n	8003518 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003510:	1cbb      	adds	r3, r7, #2
 8003512:	881a      	ldrh	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003518:	46c0      	nop			@ (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b002      	add	sp, #8
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	0002      	movs	r2, r0
 8003528:	1dbb      	adds	r3, r7, #6
 800352a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800352c:	4b10      	ldr	r3, [pc, #64]	@ (8003570 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	1dba      	adds	r2, r7, #6
 8003532:	8812      	ldrh	r2, [r2, #0]
 8003534:	4013      	ands	r3, r2
 8003536:	d008      	beq.n	800354a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003538:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800353a:	1dba      	adds	r2, r7, #6
 800353c:	8812      	ldrh	r2, [r2, #0]
 800353e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003540:	1dbb      	adds	r3, r7, #6
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	0018      	movs	r0, r3
 8003546:	f000 f815 	bl	8003574 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800354a:	4b09      	ldr	r3, [pc, #36]	@ (8003570 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	1dba      	adds	r2, r7, #6
 8003550:	8812      	ldrh	r2, [r2, #0]
 8003552:	4013      	ands	r3, r2
 8003554:	d008      	beq.n	8003568 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003556:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003558:	1dba      	adds	r2, r7, #6
 800355a:	8812      	ldrh	r2, [r2, #0]
 800355c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800355e:	1dbb      	adds	r3, r7, #6
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	0018      	movs	r0, r3
 8003564:	f000 f810 	bl	8003588 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003568:	46c0      	nop			@ (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021800 	.word	0x40021800

08003574 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	0002      	movs	r2, r0
 800357c:	1dbb      	adds	r3, r7, #6
 800357e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003580:	46c0      	nop			@ (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	b002      	add	sp, #8
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	0002      	movs	r2, r0
 8003590:	1dbb      	adds	r3, r7, #6
 8003592:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003594:	46c0      	nop			@ (mov r8, r8)
 8003596:	46bd      	mov	sp, r7
 8003598:	b002      	add	sp, #8
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e08f      	b.n	80036ce <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2241      	movs	r2, #65	@ 0x41
 80035b2:	5c9b      	ldrb	r3, [r3, r2]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d107      	bne.n	80035ca <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2240      	movs	r2, #64	@ 0x40
 80035be:	2100      	movs	r1, #0
 80035c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7fd fabb 	bl	8000b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2241      	movs	r2, #65	@ 0x41
 80035ce:	2124      	movs	r1, #36	@ 0x24
 80035d0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2101      	movs	r1, #1
 80035de:	438a      	bics	r2, r1
 80035e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	493b      	ldr	r1, [pc, #236]	@ (80036d8 <HAL_I2C_Init+0x13c>)
 80035ec:	400a      	ands	r2, r1
 80035ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4938      	ldr	r1, [pc, #224]	@ (80036dc <HAL_I2C_Init+0x140>)
 80035fc:	400a      	ands	r2, r1
 80035fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d108      	bne.n	800361a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2180      	movs	r1, #128	@ 0x80
 8003612:	0209      	lsls	r1, r1, #8
 8003614:	430a      	orrs	r2, r1
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	e007      	b.n	800362a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2184      	movs	r1, #132	@ 0x84
 8003624:	0209      	lsls	r1, r1, #8
 8003626:	430a      	orrs	r2, r1
 8003628:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d109      	bne.n	8003646 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2180      	movs	r1, #128	@ 0x80
 800363e:	0109      	lsls	r1, r1, #4
 8003640:	430a      	orrs	r2, r1
 8003642:	605a      	str	r2, [r3, #4]
 8003644:	e007      	b.n	8003656 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4923      	ldr	r1, [pc, #140]	@ (80036e0 <HAL_I2C_Init+0x144>)
 8003652:	400a      	ands	r2, r1
 8003654:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4920      	ldr	r1, [pc, #128]	@ (80036e4 <HAL_I2C_Init+0x148>)
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	491a      	ldr	r1, [pc, #104]	@ (80036dc <HAL_I2C_Init+0x140>)
 8003672:	400a      	ands	r2, r1
 8003674:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	431a      	orrs	r2, r3
 8003680:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69d9      	ldr	r1, [r3, #28]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1a      	ldr	r2, [r3, #32]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2101      	movs	r1, #1
 80036ac:	430a      	orrs	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2241      	movs	r2, #65	@ 0x41
 80036ba:	2120      	movs	r1, #32
 80036bc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2242      	movs	r2, #66	@ 0x42
 80036c8:	2100      	movs	r1, #0
 80036ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	0018      	movs	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b002      	add	sp, #8
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			@ (mov r8, r8)
 80036d8:	f0ffffff 	.word	0xf0ffffff
 80036dc:	ffff7fff 	.word	0xffff7fff
 80036e0:	fffff7ff 	.word	0xfffff7ff
 80036e4:	02008000 	.word	0x02008000

080036e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e8:	b590      	push	{r4, r7, lr}
 80036ea:	b089      	sub	sp, #36	@ 0x24
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	000c      	movs	r4, r1
 80036f2:	0010      	movs	r0, r2
 80036f4:	0019      	movs	r1, r3
 80036f6:	230a      	movs	r3, #10
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	1c22      	adds	r2, r4, #0
 80036fc:	801a      	strh	r2, [r3, #0]
 80036fe:	2308      	movs	r3, #8
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	1c02      	adds	r2, r0, #0
 8003704:	801a      	strh	r2, [r3, #0]
 8003706:	1dbb      	adds	r3, r7, #6
 8003708:	1c0a      	adds	r2, r1, #0
 800370a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2241      	movs	r2, #65	@ 0x41
 8003710:	5c9b      	ldrb	r3, [r3, r2]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b20      	cmp	r3, #32
 8003716:	d000      	beq.n	800371a <HAL_I2C_Mem_Write+0x32>
 8003718:	e10c      	b.n	8003934 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800371a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371c:	2b00      	cmp	r3, #0
 800371e:	d004      	beq.n	800372a <HAL_I2C_Mem_Write+0x42>
 8003720:	232c      	movs	r3, #44	@ 0x2c
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d105      	bne.n	8003736 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2280      	movs	r2, #128	@ 0x80
 800372e:	0092      	lsls	r2, r2, #2
 8003730:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e0ff      	b.n	8003936 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2240      	movs	r2, #64	@ 0x40
 800373a:	5c9b      	ldrb	r3, [r3, r2]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_I2C_Mem_Write+0x5c>
 8003740:	2302      	movs	r3, #2
 8003742:	e0f8      	b.n	8003936 <HAL_I2C_Mem_Write+0x24e>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2240      	movs	r2, #64	@ 0x40
 8003748:	2101      	movs	r1, #1
 800374a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800374c:	f7fe fae8 	bl	8001d20 <HAL_GetTick>
 8003750:	0003      	movs	r3, r0
 8003752:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003754:	2380      	movs	r3, #128	@ 0x80
 8003756:	0219      	lsls	r1, r3, #8
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	2319      	movs	r3, #25
 8003760:	2201      	movs	r2, #1
 8003762:	f001 fcf7 	bl	8005154 <I2C_WaitOnFlagUntilTimeout>
 8003766:	1e03      	subs	r3, r0, #0
 8003768:	d001      	beq.n	800376e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e0e3      	b.n	8003936 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2241      	movs	r2, #65	@ 0x41
 8003772:	2121      	movs	r1, #33	@ 0x21
 8003774:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2242      	movs	r2, #66	@ 0x42
 800377a:	2140      	movs	r1, #64	@ 0x40
 800377c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003788:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	222c      	movs	r2, #44	@ 0x2c
 800378e:	18ba      	adds	r2, r7, r2
 8003790:	8812      	ldrh	r2, [r2, #0]
 8003792:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800379a:	1dbb      	adds	r3, r7, #6
 800379c:	881c      	ldrh	r4, [r3, #0]
 800379e:	2308      	movs	r3, #8
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	881a      	ldrh	r2, [r3, #0]
 80037a4:	230a      	movs	r3, #10
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	8819      	ldrh	r1, [r3, #0]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	0023      	movs	r3, r4
 80037b6:	f000 fe9b 	bl	80044f0 <I2C_RequestMemoryWrite>
 80037ba:	1e03      	subs	r3, r0, #0
 80037bc:	d005      	beq.n	80037ca <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2240      	movs	r2, #64	@ 0x40
 80037c2:	2100      	movs	r1, #0
 80037c4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e0b5      	b.n	8003936 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2bff      	cmp	r3, #255	@ 0xff
 80037d2:	d911      	bls.n	80037f8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	22ff      	movs	r2, #255	@ 0xff
 80037d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	2380      	movs	r3, #128	@ 0x80
 80037e2:	045c      	lsls	r4, r3, #17
 80037e4:	230a      	movs	r3, #10
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	8819      	ldrh	r1, [r3, #0]
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	2300      	movs	r3, #0
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	0023      	movs	r3, r4
 80037f2:	f001 fe89 	bl	8005508 <I2C_TransferConfig>
 80037f6:	e012      	b.n	800381e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003806:	b2da      	uxtb	r2, r3
 8003808:	2380      	movs	r3, #128	@ 0x80
 800380a:	049c      	lsls	r4, r3, #18
 800380c:	230a      	movs	r3, #10
 800380e:	18fb      	adds	r3, r7, r3
 8003810:	8819      	ldrh	r1, [r3, #0]
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	2300      	movs	r3, #0
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	0023      	movs	r3, r4
 800381a:	f001 fe75 	bl	8005508 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	0018      	movs	r0, r3
 8003826:	f001 fced 	bl	8005204 <I2C_WaitOnTXISFlagUntilTimeout>
 800382a:	1e03      	subs	r3, r0, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e081      	b.n	8003936 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d03a      	beq.n	80038e2 <HAL_I2C_Mem_Write+0x1fa>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	d136      	bne.n	80038e2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	0013      	movs	r3, r2
 800387e:	2200      	movs	r2, #0
 8003880:	2180      	movs	r1, #128	@ 0x80
 8003882:	f001 fc67 	bl	8005154 <I2C_WaitOnFlagUntilTimeout>
 8003886:	1e03      	subs	r3, r0, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e053      	b.n	8003936 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	2bff      	cmp	r3, #255	@ 0xff
 8003896:	d911      	bls.n	80038bc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	22ff      	movs	r2, #255	@ 0xff
 800389c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	2380      	movs	r3, #128	@ 0x80
 80038a6:	045c      	lsls	r4, r3, #17
 80038a8:	230a      	movs	r3, #10
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	8819      	ldrh	r1, [r3, #0]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	2300      	movs	r3, #0
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	0023      	movs	r3, r4
 80038b6:	f001 fe27 	bl	8005508 <I2C_TransferConfig>
 80038ba:	e012      	b.n	80038e2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	2380      	movs	r3, #128	@ 0x80
 80038ce:	049c      	lsls	r4, r3, #18
 80038d0:	230a      	movs	r3, #10
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	8819      	ldrh	r1, [r3, #0]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	2300      	movs	r3, #0
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	0023      	movs	r3, r4
 80038de:	f001 fe13 	bl	8005508 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d198      	bne.n	800381e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	0018      	movs	r0, r3
 80038f4:	f001 fccc 	bl	8005290 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038f8:	1e03      	subs	r3, r0, #0
 80038fa:	d001      	beq.n	8003900 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e01a      	b.n	8003936 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2220      	movs	r2, #32
 8003906:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	490b      	ldr	r1, [pc, #44]	@ (8003940 <HAL_I2C_Mem_Write+0x258>)
 8003914:	400a      	ands	r2, r1
 8003916:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2241      	movs	r2, #65	@ 0x41
 800391c:	2120      	movs	r1, #32
 800391e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2242      	movs	r2, #66	@ 0x42
 8003924:	2100      	movs	r1, #0
 8003926:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2240      	movs	r2, #64	@ 0x40
 800392c:	2100      	movs	r1, #0
 800392e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	e000      	b.n	8003936 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003934:	2302      	movs	r3, #2
  }
}
 8003936:	0018      	movs	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	b007      	add	sp, #28
 800393c:	bd90      	pop	{r4, r7, pc}
 800393e:	46c0      	nop			@ (mov r8, r8)
 8003940:	fe00e800 	.word	0xfe00e800

08003944 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003944:	b5b0      	push	{r4, r5, r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	000c      	movs	r4, r1
 800394e:	0010      	movs	r0, r2
 8003950:	0019      	movs	r1, r3
 8003952:	230a      	movs	r3, #10
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	1c22      	adds	r2, r4, #0
 8003958:	801a      	strh	r2, [r3, #0]
 800395a:	2308      	movs	r3, #8
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	1c02      	adds	r2, r0, #0
 8003960:	801a      	strh	r2, [r3, #0]
 8003962:	1dbb      	adds	r3, r7, #6
 8003964:	1c0a      	adds	r2, r1, #0
 8003966:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2241      	movs	r2, #65	@ 0x41
 800396c:	5c9b      	ldrb	r3, [r3, r2]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b20      	cmp	r3, #32
 8003972:	d000      	beq.n	8003976 <HAL_I2C_Mem_Write_DMA+0x32>
 8003974:	e0d8      	b.n	8003b28 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <HAL_I2C_Mem_Write_DMA+0x42>
 800397c:	232c      	movs	r3, #44	@ 0x2c
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d105      	bne.n	8003992 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2280      	movs	r2, #128	@ 0x80
 800398a:	0092      	lsls	r2, r2, #2
 800398c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e0cb      	b.n	8003b2a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699a      	ldr	r2, [r3, #24]
 8003998:	2380      	movs	r3, #128	@ 0x80
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	401a      	ands	r2, r3
 800399e:	2380      	movs	r3, #128	@ 0x80
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d101      	bne.n	80039aa <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 80039a6:	2302      	movs	r3, #2
 80039a8:	e0bf      	b.n	8003b2a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2240      	movs	r2, #64	@ 0x40
 80039ae:	5c9b      	ldrb	r3, [r3, r2]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_I2C_Mem_Write_DMA+0x74>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e0b8      	b.n	8003b2a <HAL_I2C_Mem_Write_DMA+0x1e6>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2240      	movs	r2, #64	@ 0x40
 80039bc:	2101      	movs	r1, #1
 80039be:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2241      	movs	r2, #65	@ 0x41
 80039c4:	2121      	movs	r1, #33	@ 0x21
 80039c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2242      	movs	r2, #66	@ 0x42
 80039cc:	2140      	movs	r1, #64	@ 0x40
 80039ce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	222c      	movs	r2, #44	@ 0x2c
 80039e0:	18ba      	adds	r2, r7, r2
 80039e2:	8812      	ldrh	r2, [r2, #0]
 80039e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4a52      	ldr	r2, [pc, #328]	@ (8003b34 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 80039ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4a52      	ldr	r2, [pc, #328]	@ (8003b38 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 80039f0:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80039f2:	230a      	movs	r3, #10
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	881a      	ldrh	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2bff      	cmp	r3, #255	@ 0xff
 8003a04:	d903      	bls.n	8003a0e <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	22ff      	movs	r2, #255	@ 0xff
 8003a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003a0c:	e004      	b.n	8003a18 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a18:	1dbb      	adds	r3, r7, #6
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d10b      	bne.n	8003a38 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a20:	2308      	movs	r3, #8
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	4252      	negs	r2, r2
 8003a34:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a36:	e00e      	b.n	8003a56 <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a38:	2108      	movs	r1, #8
 8003a3a:	187b      	adds	r3, r7, r1
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	0a1b      	lsrs	r3, r3, #8
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8003a4a:	187b      	adds	r3, r7, r1
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	001a      	movs	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d023      	beq.n	8003aa6 <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a62:	4a36      	ldr	r2, [pc, #216]	@ (8003b3c <HAL_I2C_Mem_Write_DMA+0x1f8>)
 8003a64:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6a:	4a35      	ldr	r2, [pc, #212]	@ (8003b40 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 8003a6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003a82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3328      	adds	r3, #40	@ 0x28
 8003a8a:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003a90:	2517      	movs	r5, #23
 8003a92:	197c      	adds	r4, r7, r5
 8003a94:	f7ff f948 	bl	8002d28 <HAL_DMA_Start_IT>
 8003a98:	0003      	movs	r3, r0
 8003a9a:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003a9c:	197b      	adds	r3, r7, r5
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d12d      	bne.n	8003b00 <HAL_I2C_Mem_Write_DMA+0x1bc>
 8003aa4:	e013      	b.n	8003ace <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2241      	movs	r2, #65	@ 0x41
 8003aaa:	2120      	movs	r1, #32
 8003aac:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2242      	movs	r2, #66	@ 0x42
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aba:	2280      	movs	r2, #128	@ 0x80
 8003abc:	431a      	orrs	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2240      	movs	r2, #64	@ 0x40
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e02d      	b.n	8003b2a <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ace:	1dbb      	adds	r3, r7, #6
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	2380      	movs	r3, #128	@ 0x80
 8003ad6:	045c      	lsls	r4, r3, #17
 8003ad8:	230a      	movs	r3, #10
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	8819      	ldrh	r1, [r3, #0]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	4b18      	ldr	r3, [pc, #96]	@ (8003b44 <HAL_I2C_Mem_Write_DMA+0x200>)
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	0023      	movs	r3, r4
 8003ae6:	f001 fd0f 	bl	8005508 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2240      	movs	r2, #64	@ 0x40
 8003aee:	2100      	movs	r1, #0
 8003af0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2101      	movs	r1, #1
 8003af6:	0018      	movs	r0, r3
 8003af8:	f001 fd40 	bl	800557c <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	e014      	b.n	8003b2a <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2241      	movs	r2, #65	@ 0x41
 8003b04:	2120      	movs	r1, #32
 8003b06:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2242      	movs	r2, #66	@ 0x42
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b14:	2210      	movs	r2, #16
 8003b16:	431a      	orrs	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2240      	movs	r2, #64	@ 0x40
 8003b20:	2100      	movs	r1, #0
 8003b22:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
  }
}
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b006      	add	sp, #24
 8003b30:	bdb0      	pop	{r4, r5, r7, pc}
 8003b32:	46c0      	nop			@ (mov r8, r8)
 8003b34:	ffff0000 	.word	0xffff0000
 8003b38:	080040c9 	.word	0x080040c9
 8003b3c:	08005045 	.word	0x08005045
 8003b40:	080050e5 	.word	0x080050e5
 8003b44:	80002000 	.word	0x80002000

08003b48 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	68f9      	ldr	r1, [r7, #12]
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
  }
}
 8003b74:	46c0      	nop			@ (mov r8, r8)
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b004      	add	sp, #16
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	2380      	movs	r3, #128	@ 0x80
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d00e      	beq.n	8003bbc <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2280      	movs	r2, #128	@ 0x80
 8003ba2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003ba4:	d00a      	beq.n	8003bbc <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003baa:	2201      	movs	r2, #1
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2280      	movs	r2, #128	@ 0x80
 8003bb8:	0052      	lsls	r2, r2, #1
 8003bba:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	2380      	movs	r3, #128	@ 0x80
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d00e      	beq.n	8003be4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2280      	movs	r2, #128	@ 0x80
 8003bca:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003bcc:	d00a      	beq.n	8003be4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2280      	movs	r2, #128	@ 0x80
 8003be0:	00d2      	lsls	r2, r2, #3
 8003be2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	2380      	movs	r3, #128	@ 0x80
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4013      	ands	r3, r2
 8003bec:	d00e      	beq.n	8003c0c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	2280      	movs	r2, #128	@ 0x80
 8003bf2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003bf4:	d00a      	beq.n	8003c0c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2280      	movs	r2, #128	@ 0x80
 8003c08:	0092      	lsls	r2, r2, #2
 8003c0a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	220b      	movs	r2, #11
 8003c16:	4013      	ands	r3, r2
 8003c18:	d005      	beq.n	8003c26 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	0011      	movs	r1, r2
 8003c20:	0018      	movs	r0, r3
 8003c22:	f001 f8c1 	bl	8004da8 <I2C_ITError>
  }
}
 8003c26:	46c0      	nop			@ (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b006      	add	sp, #24
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003c36:	46c0      	nop			@ (mov r8, r8)
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b002      	add	sp, #8
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	b002      	add	sp, #8
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003c56:	46c0      	nop			@ (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b002      	add	sp, #8
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003c66:	46c0      	nop			@ (mov r8, r8)
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b002      	add	sp, #8
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	0008      	movs	r0, r1
 8003c78:	0011      	movs	r1, r2
 8003c7a:	1cfb      	adds	r3, r7, #3
 8003c7c:	1c02      	adds	r2, r0, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	003b      	movs	r3, r7
 8003c82:	1c0a      	adds	r2, r1, #0
 8003c84:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b002      	add	sp, #8
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b002      	add	sp, #8
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b002      	add	sp, #8
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b002      	add	sp, #8
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003cc6:	46c0      	nop			@ (mov r8, r8)
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b002      	add	sp, #8
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2240      	movs	r2, #64	@ 0x40
 8003cea:	5c9b      	ldrb	r3, [r3, r2]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <I2C_Slave_ISR_IT+0x24>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e0e7      	b.n	8003ec4 <I2C_Slave_ISR_IT+0x1f4>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2240      	movs	r2, #64	@ 0x40
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	4013      	ands	r3, r2
 8003d02:	d00a      	beq.n	8003d1a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d0a:	d006      	beq.n	8003d1a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	0011      	movs	r1, r2
 8003d12:	0018      	movs	r0, r3
 8003d14:	f000 fe68 	bl	80049e8 <I2C_ITSlaveCplt>
 8003d18:	e0cf      	b.n	8003eba <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2210      	movs	r2, #16
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d052      	beq.n	8003dc8 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2210      	movs	r2, #16
 8003d26:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003d28:	d04e      	beq.n	8003dc8 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d12d      	bne.n	8003d90 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2241      	movs	r2, #65	@ 0x41
 8003d38:	5c9b      	ldrb	r3, [r3, r2]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b28      	cmp	r3, #40	@ 0x28
 8003d3e:	d10b      	bne.n	8003d58 <I2C_Slave_ISR_IT+0x88>
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	2380      	movs	r3, #128	@ 0x80
 8003d44:	049b      	lsls	r3, r3, #18
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d106      	bne.n	8003d58 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	0011      	movs	r1, r2
 8003d50:	0018      	movs	r0, r3
 8003d52:	f000 ffd1 	bl	8004cf8 <I2C_ITListenCplt>
 8003d56:	e036      	b.n	8003dc6 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2241      	movs	r2, #65	@ 0x41
 8003d5c:	5c9b      	ldrb	r3, [r3, r2]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b29      	cmp	r3, #41	@ 0x29
 8003d62:	d110      	bne.n	8003d86 <I2C_Slave_ISR_IT+0xb6>
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	4a59      	ldr	r2, [pc, #356]	@ (8003ecc <I2C_Slave_ISR_IT+0x1fc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00c      	beq.n	8003d86 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2210      	movs	r2, #16
 8003d72:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	0018      	movs	r0, r3
 8003d78:	f001 f941 	bl	8004ffe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f000 fd00 	bl	8004784 <I2C_ITSlaveSeqCplt>
 8003d84:	e01f      	b.n	8003dc6 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2210      	movs	r2, #16
 8003d8c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003d8e:	e091      	b.n	8003eb4 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2210      	movs	r2, #16
 8003d96:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <I2C_Slave_ISR_IT+0xe6>
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	2380      	movs	r3, #128	@ 0x80
 8003dae:	045b      	lsls	r3, r3, #17
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d000      	beq.n	8003db6 <I2C_Slave_ISR_IT+0xe6>
 8003db4:	e07e      	b.n	8003eb4 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	0011      	movs	r1, r2
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f000 fff2 	bl	8004da8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003dc4:	e076      	b.n	8003eb4 <I2C_Slave_ISR_IT+0x1e4>
 8003dc6:	e075      	b.n	8003eb4 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	2204      	movs	r2, #4
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d02f      	beq.n	8003e30 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003dd6:	d02b      	beq.n	8003e30 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d018      	beq.n	8003e14 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d14c      	bne.n	8003eb8 <I2C_Slave_ISR_IT+0x1e8>
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	4a2a      	ldr	r2, [pc, #168]	@ (8003ecc <I2C_Slave_ISR_IT+0x1fc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d048      	beq.n	8003eb8 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f000 fcab 	bl	8004784 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003e2e:	e043      	b.n	8003eb8 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2208      	movs	r2, #8
 8003e34:	4013      	ands	r3, r2
 8003e36:	d00a      	beq.n	8003e4e <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003e3e:	d006      	beq.n	8003e4e <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	0011      	movs	r1, r2
 8003e46:	0018      	movs	r0, r3
 8003e48:	f000 fbb6 	bl	80045b8 <I2C_ITAddrCplt>
 8003e4c:	e035      	b.n	8003eba <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	2202      	movs	r2, #2
 8003e52:	4013      	ands	r3, r2
 8003e54:	d031      	beq.n	8003eba <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003e5c:	d02d      	beq.n	8003eba <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d018      	beq.n	8003e9a <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	781a      	ldrb	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003e98:	e00f      	b.n	8003eba <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	2380      	movs	r3, #128	@ 0x80
 8003e9e:	045b      	lsls	r3, r3, #17
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d002      	beq.n	8003eaa <I2C_Slave_ISR_IT+0x1da>
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d107      	bne.n	8003eba <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f000 fc69 	bl	8004784 <I2C_ITSlaveSeqCplt>
 8003eb2:	e002      	b.n	8003eba <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8003eb4:	46c0      	nop			@ (mov r8, r8)
 8003eb6:	e000      	b.n	8003eba <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8003eb8:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2240      	movs	r2, #64	@ 0x40
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b006      	add	sp, #24
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	ffff0000 	.word	0xffff0000

08003ed0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003ed0:	b590      	push	{r4, r7, lr}
 8003ed2:	b089      	sub	sp, #36	@ 0x24
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2240      	movs	r2, #64	@ 0x40
 8003ee0:	5c9b      	ldrb	r3, [r3, r2]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <I2C_Master_ISR_DMA+0x1a>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e0e7      	b.n	80040ba <I2C_Master_ISR_DMA+0x1ea>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2240      	movs	r2, #64	@ 0x40
 8003eee:	2101      	movs	r1, #1
 8003ef0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2210      	movs	r2, #16
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d017      	beq.n	8003f2a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2210      	movs	r2, #16
 8003efe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003f00:	d013      	beq.n	8003f2a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2210      	movs	r2, #16
 8003f08:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0e:	2204      	movs	r2, #4
 8003f10:	431a      	orrs	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2120      	movs	r1, #32
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f001 fb2e 	bl	800557c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	0018      	movs	r0, r3
 8003f24:	f001 f86b 	bl	8004ffe <I2C_Flush_TXDR>
 8003f28:	e0c2      	b.n	80040b0 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2280      	movs	r2, #128	@ 0x80
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d100      	bne.n	8003f34 <I2C_Master_ISR_DMA+0x64>
 8003f32:	e07c      	b.n	800402e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2240      	movs	r2, #64	@ 0x40
 8003f38:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003f3a:	d100      	bne.n	8003f3e <I2C_Master_ISR_DMA+0x6e>
 8003f3c:	e077      	b.n	800402e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2140      	movs	r1, #64	@ 0x40
 8003f4a:	438a      	bics	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d055      	beq.n	8004004 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	2312      	movs	r3, #18
 8003f62:	18fb      	adds	r3, r7, r3
 8003f64:	0592      	lsls	r2, r2, #22
 8003f66:	0d92      	lsrs	r2, r2, #22
 8003f68:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2bff      	cmp	r3, #255	@ 0xff
 8003f72:	d906      	bls.n	8003f82 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	22ff      	movs	r2, #255	@ 0xff
 8003f78:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8003f7a:	2380      	movs	r3, #128	@ 0x80
 8003f7c:	045b      	lsls	r3, r3, #17
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	e010      	b.n	8003fa4 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	4a4c      	ldr	r2, [pc, #304]	@ (80040c4 <I2C_Master_ISR_DMA+0x1f4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d003      	beq.n	8003f9e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	e002      	b.n	8003fa4 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003f9e:	2380      	movs	r3, #128	@ 0x80
 8003fa0:	049b      	lsls	r3, r3, #18
 8003fa2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	697c      	ldr	r4, [r7, #20]
 8003fac:	2312      	movs	r3, #18
 8003fae:	18fb      	adds	r3, r7, r3
 8003fb0:	8819      	ldrh	r1, [r3, #0]
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	0023      	movs	r3, r4
 8003fba:	f001 faa5 	bl	8005508 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2241      	movs	r2, #65	@ 0x41
 8003fd4:	5c9b      	ldrb	r3, [r3, r2]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b22      	cmp	r3, #34	@ 0x22
 8003fda:	d109      	bne.n	8003ff0 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2180      	movs	r1, #128	@ 0x80
 8003fe8:	0209      	lsls	r1, r1, #8
 8003fea:	430a      	orrs	r2, r1
 8003fec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003fee:	e05f      	b.n	80040b0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2180      	movs	r1, #128	@ 0x80
 8003ffc:	01c9      	lsls	r1, r1, #7
 8003ffe:	430a      	orrs	r2, r1
 8004000:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004002:	e055      	b.n	80040b0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	2380      	movs	r3, #128	@ 0x80
 800400c:	049b      	lsls	r3, r3, #18
 800400e:	401a      	ands	r2, r3
 8004010:	2380      	movs	r3, #128	@ 0x80
 8004012:	049b      	lsls	r3, r3, #18
 8004014:	429a      	cmp	r2, r3
 8004016:	d004      	beq.n	8004022 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	0018      	movs	r0, r3
 800401c:	f000 fb70 	bl	8004700 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004020:	e046      	b.n	80040b0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2140      	movs	r1, #64	@ 0x40
 8004026:	0018      	movs	r0, r3
 8004028:	f000 febe 	bl	8004da8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800402c:	e040      	b.n	80040b0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2240      	movs	r2, #64	@ 0x40
 8004032:	4013      	ands	r3, r2
 8004034:	d02c      	beq.n	8004090 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2240      	movs	r2, #64	@ 0x40
 800403a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800403c:	d028      	beq.n	8004090 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d11d      	bne.n	8004084 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	2380      	movs	r3, #128	@ 0x80
 8004050:	049b      	lsls	r3, r3, #18
 8004052:	401a      	ands	r2, r3
 8004054:	2380      	movs	r3, #128	@ 0x80
 8004056:	049b      	lsls	r3, r3, #18
 8004058:	429a      	cmp	r2, r3
 800405a:	d028      	beq.n	80040ae <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004060:	4a18      	ldr	r2, [pc, #96]	@ (80040c4 <I2C_Master_ISR_DMA+0x1f4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d109      	bne.n	800407a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2180      	movs	r1, #128	@ 0x80
 8004072:	01c9      	lsls	r1, r1, #7
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004078:	e019      	b.n	80040ae <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	0018      	movs	r0, r3
 800407e:	f000 fb3f 	bl	8004700 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004082:	e014      	b.n	80040ae <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2140      	movs	r1, #64	@ 0x40
 8004088:	0018      	movs	r0, r3
 800408a:	f000 fe8d 	bl	8004da8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800408e:	e00e      	b.n	80040ae <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2220      	movs	r2, #32
 8004094:	4013      	ands	r3, r2
 8004096:	d00b      	beq.n	80040b0 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800409e:	d007      	beq.n	80040b0 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	0011      	movs	r1, r2
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 fbd0 	bl	800484c <I2C_ITMasterCplt>
 80040ac:	e000      	b.n	80040b0 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80040ae:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2240      	movs	r2, #64	@ 0x40
 80040b4:	2100      	movs	r1, #0
 80040b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	0018      	movs	r0, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	b007      	add	sp, #28
 80040c0:	bd90      	pop	{r4, r7, pc}
 80040c2:	46c0      	nop			@ (mov r8, r8)
 80040c4:	ffff0000 	.word	0xffff0000

080040c8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80040c8:	b590      	push	{r4, r7, lr}
 80040ca:	b089      	sub	sp, #36	@ 0x24
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80040d4:	4b90      	ldr	r3, [pc, #576]	@ (8004318 <I2C_Mem_ISR_DMA+0x250>)
 80040d6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2240      	movs	r2, #64	@ 0x40
 80040dc:	5c9b      	ldrb	r3, [r3, r2]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <I2C_Mem_ISR_DMA+0x1e>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e113      	b.n	800430e <I2C_Mem_ISR_DMA+0x246>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2240      	movs	r2, #64	@ 0x40
 80040ea:	2101      	movs	r1, #1
 80040ec:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2210      	movs	r2, #16
 80040f2:	4013      	ands	r3, r2
 80040f4:	d017      	beq.n	8004126 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2210      	movs	r2, #16
 80040fa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80040fc:	d013      	beq.n	8004126 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2210      	movs	r2, #16
 8004104:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410a:	2204      	movs	r2, #4
 800410c:	431a      	orrs	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2120      	movs	r1, #32
 8004116:	0018      	movs	r0, r3
 8004118:	f001 fa30 	bl	800557c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	0018      	movs	r0, r3
 8004120:	f000 ff6d 	bl	8004ffe <I2C_Flush_TXDR>
 8004124:	e0ee      	b.n	8004304 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2202      	movs	r2, #2
 800412a:	4013      	ands	r3, r2
 800412c:	d00d      	beq.n	800414a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2202      	movs	r2, #2
 8004132:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004134:	d009      	beq.n	800414a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800413e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	4252      	negs	r2, r2
 8004146:	651a      	str	r2, [r3, #80]	@ 0x50
 8004148:	e0dc      	b.n	8004304 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2280      	movs	r2, #128	@ 0x80
 800414e:	4013      	ands	r3, r2
 8004150:	d063      	beq.n	800421a <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2240      	movs	r2, #64	@ 0x40
 8004156:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004158:	d05f      	beq.n	800421a <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2101      	movs	r1, #1
 800415e:	0018      	movs	r0, r3
 8004160:	f001 fa96 	bl	8005690 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2110      	movs	r1, #16
 8004168:	0018      	movs	r0, r3
 800416a:	f001 fa07 	bl	800557c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d04a      	beq.n	800420e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417c:	b29b      	uxth	r3, r3
 800417e:	2bff      	cmp	r3, #255	@ 0xff
 8004180:	d910      	bls.n	80041a4 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	22ff      	movs	r2, #255	@ 0xff
 8004186:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800418c:	b299      	uxth	r1, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004192:	b2da      	uxtb	r2, r3
 8004194:	2380      	movs	r3, #128	@ 0x80
 8004196:	045b      	lsls	r3, r3, #17
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	2400      	movs	r4, #0
 800419c:	9400      	str	r4, [sp, #0]
 800419e:	f001 f9b3 	bl	8005508 <I2C_TransferConfig>
 80041a2:	e011      	b.n	80041c8 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b2:	b299      	uxth	r1, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	2380      	movs	r3, #128	@ 0x80
 80041bc:	049b      	lsls	r3, r3, #18
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	2400      	movs	r4, #0
 80041c2:	9400      	str	r4, [sp, #0]
 80041c4:	f001 f9a0 	bl	8005508 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2241      	movs	r2, #65	@ 0x41
 80041de:	5c9b      	ldrb	r3, [r3, r2]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b22      	cmp	r3, #34	@ 0x22
 80041e4:	d109      	bne.n	80041fa <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2180      	movs	r1, #128	@ 0x80
 80041f2:	0209      	lsls	r1, r1, #8
 80041f4:	430a      	orrs	r2, r1
 80041f6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80041f8:	e084      	b.n	8004304 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2180      	movs	r1, #128	@ 0x80
 8004206:	01c9      	lsls	r1, r1, #7
 8004208:	430a      	orrs	r2, r1
 800420a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800420c:	e07a      	b.n	8004304 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2140      	movs	r1, #64	@ 0x40
 8004212:	0018      	movs	r0, r3
 8004214:	f000 fdc8 	bl	8004da8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004218:	e074      	b.n	8004304 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2240      	movs	r2, #64	@ 0x40
 800421e:	4013      	ands	r3, r2
 8004220:	d062      	beq.n	80042e8 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2240      	movs	r2, #64	@ 0x40
 8004226:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004228:	d05e      	beq.n	80042e8 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2101      	movs	r1, #1
 800422e:	0018      	movs	r0, r3
 8004230:	f001 fa2e 	bl	8005690 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2110      	movs	r1, #16
 8004238:	0018      	movs	r0, r3
 800423a:	f001 f99f 	bl	800557c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2241      	movs	r2, #65	@ 0x41
 8004242:	5c9b      	ldrb	r3, [r3, r2]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b22      	cmp	r3, #34	@ 0x22
 8004248:	d101      	bne.n	800424e <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 800424a:	4b34      	ldr	r3, [pc, #208]	@ (800431c <I2C_Mem_ISR_DMA+0x254>)
 800424c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	2bff      	cmp	r3, #255	@ 0xff
 8004256:	d911      	bls.n	800427c <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	22ff      	movs	r2, #255	@ 0xff
 800425c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004262:	b299      	uxth	r1, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004268:	b2da      	uxtb	r2, r3
 800426a:	2380      	movs	r3, #128	@ 0x80
 800426c:	045c      	lsls	r4, r3, #17
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	0023      	movs	r3, r4
 8004276:	f001 f947 	bl	8005508 <I2C_TransferConfig>
 800427a:	e012      	b.n	80042a2 <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428a:	b299      	uxth	r1, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004290:	b2da      	uxtb	r2, r3
 8004292:	2380      	movs	r3, #128	@ 0x80
 8004294:	049c      	lsls	r4, r3, #18
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	0023      	movs	r3, r4
 800429e:	f001 f933 	bl	8005508 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2241      	movs	r2, #65	@ 0x41
 80042b8:	5c9b      	ldrb	r3, [r3, r2]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b22      	cmp	r3, #34	@ 0x22
 80042be:	d109      	bne.n	80042d4 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2180      	movs	r1, #128	@ 0x80
 80042cc:	0209      	lsls	r1, r1, #8
 80042ce:	430a      	orrs	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042d2:	e017      	b.n	8004304 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2180      	movs	r1, #128	@ 0x80
 80042e0:	01c9      	lsls	r1, r1, #7
 80042e2:	430a      	orrs	r2, r1
 80042e4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042e6:	e00d      	b.n	8004304 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2220      	movs	r2, #32
 80042ec:	4013      	ands	r3, r2
 80042ee:	d009      	beq.n	8004304 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80042f6:	d005      	beq.n	8004304 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	0011      	movs	r1, r2
 80042fe:	0018      	movs	r0, r3
 8004300:	f000 faa4 	bl	800484c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2240      	movs	r2, #64	@ 0x40
 8004308:	2100      	movs	r1, #0
 800430a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	0018      	movs	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	b007      	add	sp, #28
 8004314:	bd90      	pop	{r4, r7, pc}
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	80002000 	.word	0x80002000
 800431c:	80002400 	.word	0x80002400

08004320 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004330:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2240      	movs	r2, #64	@ 0x40
 800433a:	5c9b      	ldrb	r3, [r3, r2]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <I2C_Slave_ISR_DMA+0x24>
 8004340:	2302      	movs	r3, #2
 8004342:	e0ce      	b.n	80044e2 <I2C_Slave_ISR_DMA+0x1c2>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2240      	movs	r2, #64	@ 0x40
 8004348:	2101      	movs	r1, #1
 800434a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2220      	movs	r2, #32
 8004350:	4013      	ands	r3, r2
 8004352:	d00a      	beq.n	800436a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800435a:	d006      	beq.n	800436a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	0011      	movs	r1, r2
 8004362:	0018      	movs	r0, r3
 8004364:	f000 fb40 	bl	80049e8 <I2C_ITSlaveCplt>
 8004368:	e0b6      	b.n	80044d8 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2210      	movs	r2, #16
 800436e:	4013      	ands	r3, r2
 8004370:	d100      	bne.n	8004374 <I2C_Slave_ISR_DMA+0x54>
 8004372:	e0a3      	b.n	80044bc <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2210      	movs	r2, #16
 8004378:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800437a:	d100      	bne.n	800437e <I2C_Slave_ISR_DMA+0x5e>
 800437c:	e09e      	b.n	80044bc <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	2380      	movs	r3, #128	@ 0x80
 8004382:	01db      	lsls	r3, r3, #7
 8004384:	4013      	ands	r3, r2
 8004386:	d105      	bne.n	8004394 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	2380      	movs	r3, #128	@ 0x80
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004390:	d100      	bne.n	8004394 <I2C_Slave_ISR_DMA+0x74>
 8004392:	e08c      	b.n	80044ae <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00c      	beq.n	80043b6 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	2380      	movs	r3, #128	@ 0x80
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	4013      	ands	r3, r2
 80043a4:	d007      	beq.n	80043b6 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80043b2:	2301      	movs	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00c      	beq.n	80043d8 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	2380      	movs	r3, #128	@ 0x80
 80043c2:	01db      	lsls	r3, r3, #7
 80043c4:	4013      	ands	r3, r2
 80043c6:	d007      	beq.n	80043d8 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80043d4:	2301      	movs	r3, #1
 80043d6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d12d      	bne.n	800443a <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2241      	movs	r2, #65	@ 0x41
 80043e2:	5c9b      	ldrb	r3, [r3, r2]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b28      	cmp	r3, #40	@ 0x28
 80043e8:	d10b      	bne.n	8004402 <I2C_Slave_ISR_DMA+0xe2>
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	2380      	movs	r3, #128	@ 0x80
 80043ee:	049b      	lsls	r3, r3, #18
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d106      	bne.n	8004402 <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	0011      	movs	r1, r2
 80043fa:	0018      	movs	r0, r3
 80043fc:	f000 fc7c 	bl	8004cf8 <I2C_ITListenCplt>
 8004400:	e054      	b.n	80044ac <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2241      	movs	r2, #65	@ 0x41
 8004406:	5c9b      	ldrb	r3, [r3, r2]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b29      	cmp	r3, #41	@ 0x29
 800440c:	d110      	bne.n	8004430 <I2C_Slave_ISR_DMA+0x110>
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	4a36      	ldr	r2, [pc, #216]	@ (80044ec <I2C_Slave_ISR_DMA+0x1cc>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00c      	beq.n	8004430 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2210      	movs	r2, #16
 800441c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	0018      	movs	r0, r3
 8004422:	f000 fdec 	bl	8004ffe <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	0018      	movs	r0, r3
 800442a:	f000 f9ab 	bl	8004784 <I2C_ITSlaveSeqCplt>
 800442e:	e03d      	b.n	80044ac <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2210      	movs	r2, #16
 8004436:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004438:	e03e      	b.n	80044b8 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2210      	movs	r2, #16
 8004440:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004446:	2204      	movs	r2, #4
 8004448:	431a      	orrs	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800444e:	2317      	movs	r3, #23
 8004450:	18fb      	adds	r3, r7, r3
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	2141      	movs	r1, #65	@ 0x41
 8004456:	5c52      	ldrb	r2, [r2, r1]
 8004458:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d004      	beq.n	800446a <I2C_Slave_ISR_DMA+0x14a>
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	2380      	movs	r3, #128	@ 0x80
 8004464:	045b      	lsls	r3, r3, #17
 8004466:	429a      	cmp	r2, r3
 8004468:	d126      	bne.n	80044b8 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800446a:	2217      	movs	r2, #23
 800446c:	18bb      	adds	r3, r7, r2
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b21      	cmp	r3, #33	@ 0x21
 8004472:	d003      	beq.n	800447c <I2C_Slave_ISR_DMA+0x15c>
 8004474:	18bb      	adds	r3, r7, r2
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b29      	cmp	r3, #41	@ 0x29
 800447a:	d103      	bne.n	8004484 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2221      	movs	r2, #33	@ 0x21
 8004480:	631a      	str	r2, [r3, #48]	@ 0x30
 8004482:	e00b      	b.n	800449c <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004484:	2217      	movs	r2, #23
 8004486:	18bb      	adds	r3, r7, r2
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b22      	cmp	r3, #34	@ 0x22
 800448c:	d003      	beq.n	8004496 <I2C_Slave_ISR_DMA+0x176>
 800448e:	18bb      	adds	r3, r7, r2
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b2a      	cmp	r3, #42	@ 0x2a
 8004494:	d102      	bne.n	800449c <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2222      	movs	r2, #34	@ 0x22
 800449a:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	0011      	movs	r1, r2
 80044a4:	0018      	movs	r0, r3
 80044a6:	f000 fc7f 	bl	8004da8 <I2C_ITError>
      if (treatdmanack == 1U)
 80044aa:	e005      	b.n	80044b8 <I2C_Slave_ISR_DMA+0x198>
 80044ac:	e004      	b.n	80044b8 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2210      	movs	r2, #16
 80044b4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80044b6:	e00f      	b.n	80044d8 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 80044b8:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80044ba:	e00d      	b.n	80044d8 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2208      	movs	r2, #8
 80044c0:	4013      	ands	r3, r2
 80044c2:	d009      	beq.n	80044d8 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2208      	movs	r2, #8
 80044c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80044ca:	d005      	beq.n	80044d8 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	0011      	movs	r1, r2
 80044d2:	0018      	movs	r0, r3
 80044d4:	f000 f870 	bl	80045b8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2240      	movs	r2, #64	@ 0x40
 80044dc:	2100      	movs	r1, #0
 80044de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	0018      	movs	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b008      	add	sp, #32
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	46c0      	nop			@ (mov r8, r8)
 80044ec:	ffff0000 	.word	0xffff0000

080044f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044f0:	b5b0      	push	{r4, r5, r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	000c      	movs	r4, r1
 80044fa:	0010      	movs	r0, r2
 80044fc:	0019      	movs	r1, r3
 80044fe:	250a      	movs	r5, #10
 8004500:	197b      	adds	r3, r7, r5
 8004502:	1c22      	adds	r2, r4, #0
 8004504:	801a      	strh	r2, [r3, #0]
 8004506:	2308      	movs	r3, #8
 8004508:	18fb      	adds	r3, r7, r3
 800450a:	1c02      	adds	r2, r0, #0
 800450c:	801a      	strh	r2, [r3, #0]
 800450e:	1dbb      	adds	r3, r7, #6
 8004510:	1c0a      	adds	r2, r1, #0
 8004512:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004514:	1dbb      	adds	r3, r7, #6
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	2380      	movs	r3, #128	@ 0x80
 800451c:	045c      	lsls	r4, r3, #17
 800451e:	197b      	adds	r3, r7, r5
 8004520:	8819      	ldrh	r1, [r3, #0]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	4b23      	ldr	r3, [pc, #140]	@ (80045b4 <I2C_RequestMemoryWrite+0xc4>)
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	0023      	movs	r3, r4
 800452a:	f000 ffed 	bl	8005508 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800452e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004530:	6a39      	ldr	r1, [r7, #32]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	0018      	movs	r0, r3
 8004536:	f000 fe65 	bl	8005204 <I2C_WaitOnTXISFlagUntilTimeout>
 800453a:	1e03      	subs	r3, r0, #0
 800453c:	d001      	beq.n	8004542 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e033      	b.n	80045aa <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004542:	1dbb      	adds	r3, r7, #6
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d107      	bne.n	800455a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800454a:	2308      	movs	r3, #8
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	629a      	str	r2, [r3, #40]	@ 0x28
 8004558:	e019      	b.n	800458e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800455a:	2308      	movs	r3, #8
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	0a1b      	lsrs	r3, r3, #8
 8004562:	b29b      	uxth	r3, r3
 8004564:	b2da      	uxtb	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800456c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800456e:	6a39      	ldr	r1, [r7, #32]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	0018      	movs	r0, r3
 8004574:	f000 fe46 	bl	8005204 <I2C_WaitOnTXISFlagUntilTimeout>
 8004578:	1e03      	subs	r3, r0, #0
 800457a:	d001      	beq.n	8004580 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e014      	b.n	80045aa <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004580:	2308      	movs	r3, #8
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	b2da      	uxtb	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800458e:	6a3a      	ldr	r2, [r7, #32]
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	0013      	movs	r3, r2
 8004598:	2200      	movs	r2, #0
 800459a:	2180      	movs	r1, #128	@ 0x80
 800459c:	f000 fdda 	bl	8005154 <I2C_WaitOnFlagUntilTimeout>
 80045a0:	1e03      	subs	r3, r0, #0
 80045a2:	d001      	beq.n	80045a8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	0018      	movs	r0, r3
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b004      	add	sp, #16
 80045b0:	bdb0      	pop	{r4, r5, r7, pc}
 80045b2:	46c0      	nop			@ (mov r8, r8)
 80045b4:	80002000 	.word	0x80002000

080045b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80045b8:	b5b0      	push	{r4, r5, r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2241      	movs	r2, #65	@ 0x41
 80045c6:	5c9b      	ldrb	r3, [r3, r2]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	001a      	movs	r2, r3
 80045cc:	2328      	movs	r3, #40	@ 0x28
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b28      	cmp	r3, #40	@ 0x28
 80045d2:	d000      	beq.n	80045d6 <I2C_ITAddrCplt+0x1e>
 80045d4:	e088      	b.n	80046e8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	0c1b      	lsrs	r3, r3, #16
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	250f      	movs	r5, #15
 80045e2:	197b      	adds	r3, r7, r5
 80045e4:	2101      	movs	r1, #1
 80045e6:	400a      	ands	r2, r1
 80045e8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	0c1b      	lsrs	r3, r3, #16
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	200c      	movs	r0, #12
 80045f6:	183b      	adds	r3, r7, r0
 80045f8:	21fe      	movs	r1, #254	@ 0xfe
 80045fa:	400a      	ands	r2, r1
 80045fc:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	b29a      	uxth	r2, r3
 8004606:	240a      	movs	r4, #10
 8004608:	193b      	adds	r3, r7, r4
 800460a:	0592      	lsls	r2, r2, #22
 800460c:	0d92      	lsrs	r2, r2, #22
 800460e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	b29a      	uxth	r2, r3
 8004618:	2308      	movs	r3, #8
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	21fe      	movs	r1, #254	@ 0xfe
 800461e:	400a      	ands	r2, r1
 8004620:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d148      	bne.n	80046bc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800462a:	0021      	movs	r1, r4
 800462c:	187b      	adds	r3, r7, r1
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	09db      	lsrs	r3, r3, #7
 8004632:	b29a      	uxth	r2, r3
 8004634:	183b      	adds	r3, r7, r0
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	4053      	eors	r3, r2
 800463a:	b29b      	uxth	r3, r3
 800463c:	001a      	movs	r2, r3
 800463e:	2306      	movs	r3, #6
 8004640:	4013      	ands	r3, r2
 8004642:	d120      	bne.n	8004686 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004644:	183b      	adds	r3, r7, r0
 8004646:	187a      	adds	r2, r7, r1
 8004648:	8812      	ldrh	r2, [r2, #0]
 800464a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800465a:	2b02      	cmp	r3, #2
 800465c:	d14c      	bne.n	80046f8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2208      	movs	r2, #8
 800466a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2240      	movs	r2, #64	@ 0x40
 8004670:	2100      	movs	r1, #0
 8004672:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004674:	183b      	adds	r3, r7, r0
 8004676:	881a      	ldrh	r2, [r3, #0]
 8004678:	197b      	adds	r3, r7, r5
 800467a:	7819      	ldrb	r1, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	0018      	movs	r0, r3
 8004680:	f7ff faf5 	bl	8003c6e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004684:	e038      	b.n	80046f8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004686:	240c      	movs	r4, #12
 8004688:	193b      	adds	r3, r7, r4
 800468a:	2208      	movs	r2, #8
 800468c:	18ba      	adds	r2, r7, r2
 800468e:	8812      	ldrh	r2, [r2, #0]
 8004690:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004692:	2380      	movs	r3, #128	@ 0x80
 8004694:	021a      	lsls	r2, r3, #8
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	0011      	movs	r1, r2
 800469a:	0018      	movs	r0, r3
 800469c:	f000 fff8 	bl	8005690 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2240      	movs	r2, #64	@ 0x40
 80046a4:	2100      	movs	r1, #0
 80046a6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80046a8:	193b      	adds	r3, r7, r4
 80046aa:	881a      	ldrh	r2, [r3, #0]
 80046ac:	230f      	movs	r3, #15
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	7819      	ldrb	r1, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	0018      	movs	r0, r3
 80046b6:	f7ff fada 	bl	8003c6e <HAL_I2C_AddrCallback>
}
 80046ba:	e01d      	b.n	80046f8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80046bc:	2380      	movs	r3, #128	@ 0x80
 80046be:	021a      	lsls	r2, r3, #8
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	0011      	movs	r1, r2
 80046c4:	0018      	movs	r0, r3
 80046c6:	f000 ffe3 	bl	8005690 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2240      	movs	r2, #64	@ 0x40
 80046ce:	2100      	movs	r1, #0
 80046d0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80046d2:	230c      	movs	r3, #12
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	881a      	ldrh	r2, [r3, #0]
 80046d8:	230f      	movs	r3, #15
 80046da:	18fb      	adds	r3, r7, r3
 80046dc:	7819      	ldrb	r1, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	0018      	movs	r0, r3
 80046e2:	f7ff fac4 	bl	8003c6e <HAL_I2C_AddrCallback>
}
 80046e6:	e007      	b.n	80046f8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2208      	movs	r2, #8
 80046ee:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2240      	movs	r2, #64	@ 0x40
 80046f4:	2100      	movs	r1, #0
 80046f6:	5499      	strb	r1, [r3, r2]
}
 80046f8:	46c0      	nop			@ (mov r8, r8)
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b004      	add	sp, #16
 80046fe:	bdb0      	pop	{r4, r5, r7, pc}

08004700 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2242      	movs	r2, #66	@ 0x42
 800470c:	2100      	movs	r1, #0
 800470e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2241      	movs	r2, #65	@ 0x41
 8004714:	5c9b      	ldrb	r3, [r3, r2]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b21      	cmp	r3, #33	@ 0x21
 800471a:	d117      	bne.n	800474c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2241      	movs	r2, #65	@ 0x41
 8004720:	2120      	movs	r1, #32
 8004722:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2211      	movs	r2, #17
 8004728:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2101      	movs	r1, #1
 8004734:	0018      	movs	r0, r3
 8004736:	f000 ffab 	bl	8005690 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2240      	movs	r2, #64	@ 0x40
 800473e:	2100      	movs	r1, #0
 8004740:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	0018      	movs	r0, r3
 8004746:	f7ff fa72 	bl	8003c2e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800474a:	e016      	b.n	800477a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2241      	movs	r2, #65	@ 0x41
 8004750:	2120      	movs	r1, #32
 8004752:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2212      	movs	r2, #18
 8004758:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2102      	movs	r1, #2
 8004764:	0018      	movs	r0, r3
 8004766:	f000 ff93 	bl	8005690 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2240      	movs	r2, #64	@ 0x40
 800476e:	2100      	movs	r1, #0
 8004770:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	0018      	movs	r0, r3
 8004776:	f7ff fa62 	bl	8003c3e <HAL_I2C_MasterRxCpltCallback>
}
 800477a:	46c0      	nop			@ (mov r8, r8)
 800477c:	46bd      	mov	sp, r7
 800477e:	b002      	add	sp, #8
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2242      	movs	r2, #66	@ 0x42
 8004798:	2100      	movs	r1, #0
 800479a:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	2380      	movs	r3, #128	@ 0x80
 80047a0:	01db      	lsls	r3, r3, #7
 80047a2:	4013      	ands	r3, r2
 80047a4:	d008      	beq.n	80047b8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4924      	ldr	r1, [pc, #144]	@ (8004844 <I2C_ITSlaveSeqCplt+0xc0>)
 80047b2:	400a      	ands	r2, r1
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e00c      	b.n	80047d2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	2380      	movs	r3, #128	@ 0x80
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	4013      	ands	r3, r2
 80047c0:	d007      	beq.n	80047d2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	491e      	ldr	r1, [pc, #120]	@ (8004848 <I2C_ITSlaveSeqCplt+0xc4>)
 80047ce:	400a      	ands	r2, r1
 80047d0:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2241      	movs	r2, #65	@ 0x41
 80047d6:	5c9b      	ldrb	r3, [r3, r2]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b29      	cmp	r3, #41	@ 0x29
 80047dc:	d114      	bne.n	8004808 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2241      	movs	r2, #65	@ 0x41
 80047e2:	2128      	movs	r1, #40	@ 0x28
 80047e4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2221      	movs	r2, #33	@ 0x21
 80047ea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2101      	movs	r1, #1
 80047f0:	0018      	movs	r0, r3
 80047f2:	f000 ff4d 	bl	8005690 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2240      	movs	r2, #64	@ 0x40
 80047fa:	2100      	movs	r1, #0
 80047fc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	0018      	movs	r0, r3
 8004802:	f7ff fa24 	bl	8003c4e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004806:	e019      	b.n	800483c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2241      	movs	r2, #65	@ 0x41
 800480c:	5c9b      	ldrb	r3, [r3, r2]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b2a      	cmp	r3, #42	@ 0x2a
 8004812:	d113      	bne.n	800483c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2241      	movs	r2, #65	@ 0x41
 8004818:	2128      	movs	r1, #40	@ 0x28
 800481a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2222      	movs	r2, #34	@ 0x22
 8004820:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2102      	movs	r1, #2
 8004826:	0018      	movs	r0, r3
 8004828:	f000 ff32 	bl	8005690 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2240      	movs	r2, #64	@ 0x40
 8004830:	2100      	movs	r1, #0
 8004832:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	0018      	movs	r0, r3
 8004838:	f7ff fa11 	bl	8003c5e <HAL_I2C_SlaveRxCpltCallback>
}
 800483c:	46c0      	nop			@ (mov r8, r8)
 800483e:	46bd      	mov	sp, r7
 8004840:	b004      	add	sp, #16
 8004842:	bd80      	pop	{r7, pc}
 8004844:	ffffbfff 	.word	0xffffbfff
 8004848:	ffff7fff 	.word	0xffff7fff

0800484c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2220      	movs	r2, #32
 8004860:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2241      	movs	r2, #65	@ 0x41
 8004866:	5c9b      	ldrb	r3, [r3, r2]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b21      	cmp	r3, #33	@ 0x21
 800486c:	d108      	bne.n	8004880 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2101      	movs	r1, #1
 8004872:	0018      	movs	r0, r3
 8004874:	f000 ff0c 	bl	8005690 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2211      	movs	r2, #17
 800487c:	631a      	str	r2, [r3, #48]	@ 0x30
 800487e:	e00d      	b.n	800489c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2241      	movs	r2, #65	@ 0x41
 8004884:	5c9b      	ldrb	r3, [r3, r2]
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b22      	cmp	r3, #34	@ 0x22
 800488a:	d107      	bne.n	800489c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2102      	movs	r1, #2
 8004890:	0018      	movs	r0, r3
 8004892:	f000 fefd 	bl	8005690 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2212      	movs	r2, #18
 800489a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	494e      	ldr	r1, [pc, #312]	@ (80049e0 <I2C_ITMasterCplt+0x194>)
 80048a8:	400a      	ands	r2, r1
 80048aa:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a4b      	ldr	r2, [pc, #300]	@ (80049e4 <I2C_ITMasterCplt+0x198>)
 80048b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2210      	movs	r2, #16
 80048bc:	4013      	ands	r3, r2
 80048be:	d009      	beq.n	80048d4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2210      	movs	r2, #16
 80048c6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048cc:	2204      	movs	r2, #4
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2241      	movs	r2, #65	@ 0x41
 80048d8:	5c9b      	ldrb	r3, [r3, r2]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b60      	cmp	r3, #96	@ 0x60
 80048de:	d109      	bne.n	80048f4 <I2C_ITMasterCplt+0xa8>
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2204      	movs	r2, #4
 80048e4:	4013      	ands	r3, r2
 80048e6:	d005      	beq.n	80048f4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80048f2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	0018      	movs	r0, r3
 80048f8:	f000 fb81 	bl	8004ffe <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004900:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2241      	movs	r2, #65	@ 0x41
 8004906:	5c9b      	ldrb	r3, [r3, r2]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b60      	cmp	r3, #96	@ 0x60
 800490c:	d002      	beq.n	8004914 <I2C_ITMasterCplt+0xc8>
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	0011      	movs	r1, r2
 800491c:	0018      	movs	r0, r3
 800491e:	f000 fa43 	bl	8004da8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004922:	e058      	b.n	80049d6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2241      	movs	r2, #65	@ 0x41
 8004928:	5c9b      	ldrb	r3, [r3, r2]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b21      	cmp	r3, #33	@ 0x21
 800492e:	d126      	bne.n	800497e <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2241      	movs	r2, #65	@ 0x41
 8004934:	2120      	movs	r1, #32
 8004936:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2242      	movs	r2, #66	@ 0x42
 8004942:	5c9b      	ldrb	r3, [r3, r2]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b40      	cmp	r3, #64	@ 0x40
 8004948:	d10c      	bne.n	8004964 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2242      	movs	r2, #66	@ 0x42
 800494e:	2100      	movs	r1, #0
 8004950:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2240      	movs	r2, #64	@ 0x40
 8004956:	2100      	movs	r1, #0
 8004958:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	0018      	movs	r0, r3
 800495e:	f7fc fb01 	bl	8000f64 <HAL_I2C_MemTxCpltCallback>
}
 8004962:	e038      	b.n	80049d6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2242      	movs	r2, #66	@ 0x42
 8004968:	2100      	movs	r1, #0
 800496a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2240      	movs	r2, #64	@ 0x40
 8004970:	2100      	movs	r1, #0
 8004972:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	0018      	movs	r0, r3
 8004978:	f7ff f959 	bl	8003c2e <HAL_I2C_MasterTxCpltCallback>
}
 800497c:	e02b      	b.n	80049d6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2241      	movs	r2, #65	@ 0x41
 8004982:	5c9b      	ldrb	r3, [r3, r2]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b22      	cmp	r3, #34	@ 0x22
 8004988:	d125      	bne.n	80049d6 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2241      	movs	r2, #65	@ 0x41
 800498e:	2120      	movs	r1, #32
 8004990:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2242      	movs	r2, #66	@ 0x42
 800499c:	5c9b      	ldrb	r3, [r3, r2]
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b40      	cmp	r3, #64	@ 0x40
 80049a2:	d10c      	bne.n	80049be <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2242      	movs	r2, #66	@ 0x42
 80049a8:	2100      	movs	r1, #0
 80049aa:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2240      	movs	r2, #64	@ 0x40
 80049b0:	2100      	movs	r1, #0
 80049b2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	0018      	movs	r0, r3
 80049b8:	f7ff f971 	bl	8003c9e <HAL_I2C_MemRxCpltCallback>
}
 80049bc:	e00b      	b.n	80049d6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2242      	movs	r2, #66	@ 0x42
 80049c2:	2100      	movs	r1, #0
 80049c4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2240      	movs	r2, #64	@ 0x40
 80049ca:	2100      	movs	r1, #0
 80049cc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	0018      	movs	r0, r3
 80049d2:	f7ff f934 	bl	8003c3e <HAL_I2C_MasterRxCpltCallback>
}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	46bd      	mov	sp, r7
 80049da:	b006      	add	sp, #24
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	46c0      	nop			@ (mov r8, r8)
 80049e0:	fe00e800 	.word	0xfe00e800
 80049e4:	ffff0000 	.word	0xffff0000

080049e8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a02:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a04:	200b      	movs	r0, #11
 8004a06:	183b      	adds	r3, r7, r0
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	2141      	movs	r1, #65	@ 0x41
 8004a0c:	5c52      	ldrb	r2, [r2, r1]
 8004a0e:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2220      	movs	r2, #32
 8004a16:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a18:	183b      	adds	r3, r7, r0
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b21      	cmp	r3, #33	@ 0x21
 8004a1e:	d003      	beq.n	8004a28 <I2C_ITSlaveCplt+0x40>
 8004a20:	183b      	adds	r3, r7, r0
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b29      	cmp	r3, #41	@ 0x29
 8004a26:	d109      	bne.n	8004a3c <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004a28:	4aac      	ldr	r2, [pc, #688]	@ (8004cdc <I2C_ITSlaveCplt+0x2f4>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	0011      	movs	r1, r2
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f000 fe2e 	bl	8005690 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2221      	movs	r2, #33	@ 0x21
 8004a38:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a3a:	e020      	b.n	8004a7e <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a3c:	220b      	movs	r2, #11
 8004a3e:	18bb      	adds	r3, r7, r2
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b22      	cmp	r3, #34	@ 0x22
 8004a44:	d003      	beq.n	8004a4e <I2C_ITSlaveCplt+0x66>
 8004a46:	18bb      	adds	r3, r7, r2
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a4c:	d109      	bne.n	8004a62 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004a4e:	4aa4      	ldr	r2, [pc, #656]	@ (8004ce0 <I2C_ITSlaveCplt+0x2f8>)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	0011      	movs	r1, r2
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 fe1b 	bl	8005690 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2222      	movs	r2, #34	@ 0x22
 8004a5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a60:	e00d      	b.n	8004a7e <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004a62:	230b      	movs	r3, #11
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b28      	cmp	r3, #40	@ 0x28
 8004a6a:	d108      	bne.n	8004a7e <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004a6c:	4a9d      	ldr	r2, [pc, #628]	@ (8004ce4 <I2C_ITSlaveCplt+0x2fc>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	0011      	movs	r1, r2
 8004a72:	0018      	movs	r0, r3
 8004a74:	f000 fe0c 	bl	8005690 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2180      	movs	r1, #128	@ 0x80
 8004a8a:	0209      	lsls	r1, r1, #8
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4993      	ldr	r1, [pc, #588]	@ (8004ce8 <I2C_ITSlaveCplt+0x300>)
 8004a9c:	400a      	ands	r2, r1
 8004a9e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f000 faab 	bl	8004ffe <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	2380      	movs	r3, #128	@ 0x80
 8004aac:	01db      	lsls	r3, r3, #7
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d013      	beq.n	8004ada <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	498b      	ldr	r1, [pc, #556]	@ (8004cec <I2C_ITSlaveCplt+0x304>)
 8004abe:	400a      	ands	r2, r1
 8004ac0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d01f      	beq.n	8004b0a <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ad8:	e017      	b.n	8004b0a <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	2380      	movs	r3, #128	@ 0x80
 8004ade:	021b      	lsls	r3, r3, #8
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	d012      	beq.n	8004b0a <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4980      	ldr	r1, [pc, #512]	@ (8004cf0 <I2C_ITSlaveCplt+0x308>)
 8004af0:	400a      	ands	r2, r1
 8004af2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d006      	beq.n	8004b0a <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d020      	beq.n	8004b54 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2204      	movs	r2, #4
 8004b16:	4393      	bics	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	b2d2      	uxtb	r2, r2
 8004b26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00c      	beq.n	8004b54 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b62:	2204      	movs	r2, #4
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2210      	movs	r2, #16
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d04f      	beq.n	8004c12 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2210      	movs	r2, #16
 8004b76:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004b78:	d04b      	beq.n	8004c12 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d12d      	bne.n	8004be0 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2241      	movs	r2, #65	@ 0x41
 8004b88:	5c9b      	ldrb	r3, [r3, r2]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b28      	cmp	r3, #40	@ 0x28
 8004b8e:	d10b      	bne.n	8004ba8 <I2C_ITSlaveCplt+0x1c0>
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	2380      	movs	r3, #128	@ 0x80
 8004b94:	049b      	lsls	r3, r3, #18
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d106      	bne.n	8004ba8 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	0011      	movs	r1, r2
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f000 f8a9 	bl	8004cf8 <I2C_ITListenCplt>
 8004ba6:	e034      	b.n	8004c12 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2241      	movs	r2, #65	@ 0x41
 8004bac:	5c9b      	ldrb	r3, [r3, r2]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b29      	cmp	r3, #41	@ 0x29
 8004bb2:	d110      	bne.n	8004bd6 <I2C_ITSlaveCplt+0x1ee>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4a4f      	ldr	r2, [pc, #316]	@ (8004cf4 <I2C_ITSlaveCplt+0x30c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00c      	beq.n	8004bd6 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2210      	movs	r2, #16
 8004bc2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f000 fa19 	bl	8004ffe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f7ff fdd8 	bl	8004784 <I2C_ITSlaveSeqCplt>
 8004bd4:	e01d      	b.n	8004c12 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2210      	movs	r2, #16
 8004bdc:	61da      	str	r2, [r3, #28]
 8004bde:	e018      	b.n	8004c12 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2210      	movs	r2, #16
 8004be6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bec:	2204      	movs	r2, #4
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d004      	beq.n	8004c04 <I2C_ITSlaveCplt+0x21c>
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	2380      	movs	r3, #128	@ 0x80
 8004bfe:	045b      	lsls	r3, r3, #17
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d106      	bne.n	8004c12 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	0011      	movs	r1, r2
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f000 f8cb 	bl	8004da8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2242      	movs	r2, #66	@ 0x42
 8004c16:	2100      	movs	r1, #0
 8004c18:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d013      	beq.n	8004c50 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	0011      	movs	r1, r2
 8004c30:	0018      	movs	r0, r3
 8004c32:	f000 f8b9 	bl	8004da8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2241      	movs	r2, #65	@ 0x41
 8004c3a:	5c9b      	ldrb	r3, [r3, r2]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b28      	cmp	r3, #40	@ 0x28
 8004c40:	d147      	bne.n	8004cd2 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	0011      	movs	r1, r2
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f000 f855 	bl	8004cf8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c4e:	e040      	b.n	8004cd2 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c54:	4a27      	ldr	r2, [pc, #156]	@ (8004cf4 <I2C_ITSlaveCplt+0x30c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d016      	beq.n	8004c88 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f7ff fd91 	bl	8004784 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a23      	ldr	r2, [pc, #140]	@ (8004cf4 <I2C_ITSlaveCplt+0x30c>)
 8004c66:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2241      	movs	r2, #65	@ 0x41
 8004c6c:	2120      	movs	r1, #32
 8004c6e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2240      	movs	r2, #64	@ 0x40
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	0018      	movs	r0, r3
 8004c82:	f7ff f804 	bl	8003c8e <HAL_I2C_ListenCpltCallback>
}
 8004c86:	e024      	b.n	8004cd2 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2241      	movs	r2, #65	@ 0x41
 8004c8c:	5c9b      	ldrb	r3, [r3, r2]
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b22      	cmp	r3, #34	@ 0x22
 8004c92:	d10f      	bne.n	8004cb4 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2241      	movs	r2, #65	@ 0x41
 8004c98:	2120      	movs	r1, #32
 8004c9a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2240      	movs	r2, #64	@ 0x40
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7fe ffd6 	bl	8003c5e <HAL_I2C_SlaveRxCpltCallback>
}
 8004cb2:	e00e      	b.n	8004cd2 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2241      	movs	r2, #65	@ 0x41
 8004cb8:	2120      	movs	r1, #32
 8004cba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2240      	movs	r2, #64	@ 0x40
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f7fe ffbe 	bl	8003c4e <HAL_I2C_SlaveTxCpltCallback>
}
 8004cd2:	46c0      	nop			@ (mov r8, r8)
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	b006      	add	sp, #24
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	46c0      	nop			@ (mov r8, r8)
 8004cdc:	00008001 	.word	0x00008001
 8004ce0:	00008002 	.word	0x00008002
 8004ce4:	00008003 	.word	0x00008003
 8004ce8:	fe00e800 	.word	0xfe00e800
 8004cec:	ffffbfff 	.word	0xffffbfff
 8004cf0:	ffff7fff 	.word	0xffff7fff
 8004cf4:	ffff0000 	.word	0xffff0000

08004cf8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a26      	ldr	r2, [pc, #152]	@ (8004da0 <I2C_ITListenCplt+0xa8>)
 8004d06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2241      	movs	r2, #65	@ 0x41
 8004d12:	2120      	movs	r1, #32
 8004d14:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2242      	movs	r2, #66	@ 0x42
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2204      	movs	r2, #4
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d022      	beq.n	8004d72 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d012      	beq.n	8004d72 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6a:	2204      	movs	r2, #4
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d72:	4a0c      	ldr	r2, [pc, #48]	@ (8004da4 <I2C_ITListenCplt+0xac>)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	0011      	movs	r1, r2
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f000 fc89 	bl	8005690 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2210      	movs	r2, #16
 8004d84:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2240      	movs	r2, #64	@ 0x40
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	0018      	movs	r0, r3
 8004d92:	f7fe ff7c 	bl	8003c8e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	b002      	add	sp, #8
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	46c0      	nop			@ (mov r8, r8)
 8004da0:	ffff0000 	.word	0xffff0000
 8004da4:	00008003 	.word	0x00008003

08004da8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004db2:	200f      	movs	r0, #15
 8004db4:	183b      	adds	r3, r7, r0
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	2141      	movs	r1, #65	@ 0x41
 8004dba:	5c52      	ldrb	r2, [r2, r1]
 8004dbc:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2242      	movs	r2, #66	@ 0x42
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a72      	ldr	r2, [pc, #456]	@ (8004f94 <I2C_ITError+0x1ec>)
 8004dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004dde:	183b      	adds	r3, r7, r0
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b28      	cmp	r3, #40	@ 0x28
 8004de4:	d007      	beq.n	8004df6 <I2C_ITError+0x4e>
 8004de6:	183b      	adds	r3, r7, r0
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b29      	cmp	r3, #41	@ 0x29
 8004dec:	d003      	beq.n	8004df6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004dee:	183b      	adds	r3, r7, r0
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004df4:	d10c      	bne.n	8004e10 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2103      	movs	r1, #3
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f000 fc48 	bl	8005690 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2241      	movs	r2, #65	@ 0x41
 8004e04:	2128      	movs	r1, #40	@ 0x28
 8004e06:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a63      	ldr	r2, [pc, #396]	@ (8004f98 <I2C_ITError+0x1f0>)
 8004e0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e0e:	e032      	b.n	8004e76 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e10:	4a62      	ldr	r2, [pc, #392]	@ (8004f9c <I2C_ITError+0x1f4>)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	0011      	movs	r1, r2
 8004e16:	0018      	movs	r0, r3
 8004e18:	f000 fc3a 	bl	8005690 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f000 f8ed 	bl	8004ffe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2241      	movs	r2, #65	@ 0x41
 8004e28:	5c9b      	ldrb	r3, [r3, r2]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b60      	cmp	r3, #96	@ 0x60
 8004e2e:	d01f      	beq.n	8004e70 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2241      	movs	r2, #65	@ 0x41
 8004e34:	2120      	movs	r1, #32
 8004e36:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d114      	bne.n	8004e70 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2210      	movs	r2, #16
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d109      	bne.n	8004e68 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2210      	movs	r2, #16
 8004e5a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e60:	2204      	movs	r2, #4
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d03b      	beq.n	8004efc <I2C_ITError+0x154>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b11      	cmp	r3, #17
 8004e88:	d002      	beq.n	8004e90 <I2C_ITError+0xe8>
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b21      	cmp	r3, #33	@ 0x21
 8004e8e:	d135      	bne.n	8004efc <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	2380      	movs	r3, #128	@ 0x80
 8004e98:	01db      	lsls	r3, r3, #7
 8004e9a:	401a      	ands	r2, r3
 8004e9c:	2380      	movs	r3, #128	@ 0x80
 8004e9e:	01db      	lsls	r3, r3, #7
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d107      	bne.n	8004eb4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	493c      	ldr	r1, [pc, #240]	@ (8004fa0 <I2C_ITError+0x1f8>)
 8004eb0:	400a      	ands	r2, r1
 8004eb2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f7fe f8e9 	bl	8003090 <HAL_DMA_GetState>
 8004ebe:	0003      	movs	r3, r0
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d016      	beq.n	8004ef2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec8:	4a36      	ldr	r2, [pc, #216]	@ (8004fa4 <I2C_ITError+0x1fc>)
 8004eca:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2240      	movs	r2, #64	@ 0x40
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f7fd ffad 	bl	8002e38 <HAL_DMA_Abort_IT>
 8004ede:	1e03      	subs	r3, r0, #0
 8004ee0:	d051      	beq.n	8004f86 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eec:	0018      	movs	r0, r3
 8004eee:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ef0:	e049      	b.n	8004f86 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f000 f859 	bl	8004fac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004efa:	e044      	b.n	8004f86 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d03b      	beq.n	8004f7c <I2C_ITError+0x1d4>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b12      	cmp	r3, #18
 8004f08:	d002      	beq.n	8004f10 <I2C_ITError+0x168>
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b22      	cmp	r3, #34	@ 0x22
 8004f0e:	d135      	bne.n	8004f7c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	2380      	movs	r3, #128	@ 0x80
 8004f18:	021b      	lsls	r3, r3, #8
 8004f1a:	401a      	ands	r2, r3
 8004f1c:	2380      	movs	r3, #128	@ 0x80
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d107      	bne.n	8004f34 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	491e      	ldr	r1, [pc, #120]	@ (8004fa8 <I2C_ITError+0x200>)
 8004f30:	400a      	ands	r2, r1
 8004f32:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f7fe f8a9 	bl	8003090 <HAL_DMA_GetState>
 8004f3e:	0003      	movs	r3, r0
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d016      	beq.n	8004f72 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f48:	4a16      	ldr	r2, [pc, #88]	@ (8004fa4 <I2C_ITError+0x1fc>)
 8004f4a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2240      	movs	r2, #64	@ 0x40
 8004f50:	2100      	movs	r1, #0
 8004f52:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f58:	0018      	movs	r0, r3
 8004f5a:	f7fd ff6d 	bl	8002e38 <HAL_DMA_Abort_IT>
 8004f5e:	1e03      	subs	r3, r0, #0
 8004f60:	d013      	beq.n	8004f8a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f70:	e00b      	b.n	8004f8a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	0018      	movs	r0, r3
 8004f76:	f000 f819 	bl	8004fac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f7a:	e006      	b.n	8004f8a <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	0018      	movs	r0, r3
 8004f80:	f000 f814 	bl	8004fac <I2C_TreatErrorCallback>
  }
}
 8004f84:	e002      	b.n	8004f8c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f86:	46c0      	nop			@ (mov r8, r8)
 8004f88:	e000      	b.n	8004f8c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f8a:	46c0      	nop			@ (mov r8, r8)
}
 8004f8c:	46c0      	nop			@ (mov r8, r8)
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b004      	add	sp, #16
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	ffff0000 	.word	0xffff0000
 8004f98:	08003cd1 	.word	0x08003cd1
 8004f9c:	00008003 	.word	0x00008003
 8004fa0:	ffffbfff 	.word	0xffffbfff
 8004fa4:	08005117 	.word	0x08005117
 8004fa8:	ffff7fff 	.word	0xffff7fff

08004fac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2241      	movs	r2, #65	@ 0x41
 8004fb8:	5c9b      	ldrb	r3, [r3, r2]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b60      	cmp	r3, #96	@ 0x60
 8004fbe:	d10f      	bne.n	8004fe0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2241      	movs	r2, #65	@ 0x41
 8004fc4:	2120      	movs	r1, #32
 8004fc6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2240      	movs	r2, #64	@ 0x40
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f7fe fe70 	bl	8003cbe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fde:	e00a      	b.n	8004ff6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2240      	movs	r2, #64	@ 0x40
 8004fea:	2100      	movs	r1, #0
 8004fec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	f7fe fe5c 	bl	8003cae <HAL_I2C_ErrorCallback>
}
 8004ff6:	46c0      	nop			@ (mov r8, r8)
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	b002      	add	sp, #8
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b082      	sub	sp, #8
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	2202      	movs	r2, #2
 800500e:	4013      	ands	r3, r2
 8005010:	2b02      	cmp	r3, #2
 8005012:	d103      	bne.n	800501c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2200      	movs	r2, #0
 800501a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	2201      	movs	r2, #1
 8005024:	4013      	ands	r3, r2
 8005026:	2b01      	cmp	r3, #1
 8005028:	d007      	beq.n	800503a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699a      	ldr	r2, [r3, #24]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2101      	movs	r1, #1
 8005036:	430a      	orrs	r2, r1
 8005038:	619a      	str	r2, [r3, #24]
  }
}
 800503a:	46c0      	nop			@ (mov r8, r8)
 800503c:	46bd      	mov	sp, r7
 800503e:	b002      	add	sp, #8
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005050:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4920      	ldr	r1, [pc, #128]	@ (80050e0 <I2C_DMAMasterTransmitCplt+0x9c>)
 800505e:	400a      	ands	r2, r1
 8005060:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d105      	bne.n	8005078 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2120      	movs	r1, #32
 8005070:	0018      	movs	r0, r3
 8005072:	f000 fa83 	bl	800557c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005076:	e02e      	b.n	80050d6 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005080:	189a      	adds	r2, r3, r2
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800508a:	b29b      	uxth	r3, r3
 800508c:	2bff      	cmp	r3, #255	@ 0xff
 800508e:	d903      	bls.n	8005098 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	22ff      	movs	r2, #255	@ 0xff
 8005094:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005096:	e004      	b.n	80050a2 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050aa:	0019      	movs	r1, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3328      	adds	r3, #40	@ 0x28
 80050b2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80050b8:	f7fd fe36 	bl	8002d28 <HAL_DMA_Start_IT>
 80050bc:	1e03      	subs	r3, r0, #0
 80050be:	d005      	beq.n	80050cc <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2110      	movs	r1, #16
 80050c4:	0018      	movs	r0, r3
 80050c6:	f7ff fe6f 	bl	8004da8 <I2C_ITError>
}
 80050ca:	e004      	b.n	80050d6 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2140      	movs	r1, #64	@ 0x40
 80050d0:	0018      	movs	r0, r3
 80050d2:	f000 fa53 	bl	800557c <I2C_Enable_IRQ>
}
 80050d6:	46c0      	nop			@ (mov r8, r8)
 80050d8:	46bd      	mov	sp, r7
 80050da:	b004      	add	sp, #16
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	46c0      	nop			@ (mov r8, r8)
 80050e0:	ffffbfff 	.word	0xffffbfff

080050e4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f0:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2180      	movs	r1, #128	@ 0x80
 80050fe:	0209      	lsls	r1, r1, #8
 8005100:	430a      	orrs	r2, r1
 8005102:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2110      	movs	r1, #16
 8005108:	0018      	movs	r0, r3
 800510a:	f7ff fe4d 	bl	8004da8 <I2C_ITError>
}
 800510e:	46c0      	nop			@ (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	b004      	add	sp, #16
 8005114:	bd80      	pop	{r7, pc}

08005116 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005130:	2200      	movs	r2, #0
 8005132:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005140:	2200      	movs	r2, #0
 8005142:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	0018      	movs	r0, r3
 8005148:	f7ff ff30 	bl	8004fac <I2C_TreatErrorCallback>
}
 800514c:	46c0      	nop			@ (mov r8, r8)
 800514e:	46bd      	mov	sp, r7
 8005150:	b004      	add	sp, #16
 8005152:	bd80      	pop	{r7, pc}

08005154 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	1dfb      	adds	r3, r7, #7
 8005162:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005164:	e03a      	b.n	80051dc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	6839      	ldr	r1, [r7, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	0018      	movs	r0, r3
 800516e:	f000 f8d3 	bl	8005318 <I2C_IsErrorOccurred>
 8005172:	1e03      	subs	r3, r0, #0
 8005174:	d001      	beq.n	800517a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e040      	b.n	80051fc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	3301      	adds	r3, #1
 800517e:	d02d      	beq.n	80051dc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005180:	f7fc fdce 	bl	8001d20 <HAL_GetTick>
 8005184:	0002      	movs	r2, r0
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d302      	bcc.n	8005196 <I2C_WaitOnFlagUntilTimeout+0x42>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d122      	bne.n	80051dc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	4013      	ands	r3, r2
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	425a      	negs	r2, r3
 80051a6:	4153      	adcs	r3, r2
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	001a      	movs	r2, r3
 80051ac:	1dfb      	adds	r3, r7, #7
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d113      	bne.n	80051dc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b8:	2220      	movs	r2, #32
 80051ba:	431a      	orrs	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2241      	movs	r2, #65	@ 0x41
 80051c4:	2120      	movs	r1, #32
 80051c6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2242      	movs	r2, #66	@ 0x42
 80051cc:	2100      	movs	r1, #0
 80051ce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2240      	movs	r2, #64	@ 0x40
 80051d4:	2100      	movs	r1, #0
 80051d6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e00f      	b.n	80051fc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	4013      	ands	r3, r2
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	425a      	negs	r2, r3
 80051ec:	4153      	adcs	r3, r2
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	001a      	movs	r2, r3
 80051f2:	1dfb      	adds	r3, r7, #7
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d0b5      	beq.n	8005166 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	0018      	movs	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	b004      	add	sp, #16
 8005202:	bd80      	pop	{r7, pc}

08005204 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005210:	e032      	b.n	8005278 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	0018      	movs	r0, r3
 800521a:	f000 f87d 	bl	8005318 <I2C_IsErrorOccurred>
 800521e:	1e03      	subs	r3, r0, #0
 8005220:	d001      	beq.n	8005226 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e030      	b.n	8005288 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	3301      	adds	r3, #1
 800522a:	d025      	beq.n	8005278 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522c:	f7fc fd78 	bl	8001d20 <HAL_GetTick>
 8005230:	0002      	movs	r2, r0
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	429a      	cmp	r2, r3
 800523a:	d302      	bcc.n	8005242 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d11a      	bne.n	8005278 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	2202      	movs	r2, #2
 800524a:	4013      	ands	r3, r2
 800524c:	2b02      	cmp	r3, #2
 800524e:	d013      	beq.n	8005278 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005254:	2220      	movs	r2, #32
 8005256:	431a      	orrs	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2241      	movs	r2, #65	@ 0x41
 8005260:	2120      	movs	r1, #32
 8005262:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2242      	movs	r2, #66	@ 0x42
 8005268:	2100      	movs	r1, #0
 800526a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2240      	movs	r2, #64	@ 0x40
 8005270:	2100      	movs	r1, #0
 8005272:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e007      	b.n	8005288 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	2202      	movs	r2, #2
 8005280:	4013      	ands	r3, r2
 8005282:	2b02      	cmp	r3, #2
 8005284:	d1c5      	bne.n	8005212 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	0018      	movs	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	b004      	add	sp, #16
 800528e:	bd80      	pop	{r7, pc}

08005290 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800529c:	e02f      	b.n	80052fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	0018      	movs	r0, r3
 80052a6:	f000 f837 	bl	8005318 <I2C_IsErrorOccurred>
 80052aa:	1e03      	subs	r3, r0, #0
 80052ac:	d001      	beq.n	80052b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e02d      	b.n	800530e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b2:	f7fc fd35 	bl	8001d20 <HAL_GetTick>
 80052b6:	0002      	movs	r2, r0
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d302      	bcc.n	80052c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d11a      	bne.n	80052fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	2220      	movs	r2, #32
 80052d0:	4013      	ands	r3, r2
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d013      	beq.n	80052fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052da:	2220      	movs	r2, #32
 80052dc:	431a      	orrs	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2241      	movs	r2, #65	@ 0x41
 80052e6:	2120      	movs	r1, #32
 80052e8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2242      	movs	r2, #66	@ 0x42
 80052ee:	2100      	movs	r1, #0
 80052f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2240      	movs	r2, #64	@ 0x40
 80052f6:	2100      	movs	r1, #0
 80052f8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e007      	b.n	800530e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	2220      	movs	r2, #32
 8005306:	4013      	ands	r3, r2
 8005308:	2b20      	cmp	r3, #32
 800530a:	d1c8      	bne.n	800529e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	0018      	movs	r0, r3
 8005310:	46bd      	mov	sp, r7
 8005312:	b004      	add	sp, #16
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08a      	sub	sp, #40	@ 0x28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005324:	2327      	movs	r3, #39	@ 0x27
 8005326:	18fb      	adds	r3, r7, r3
 8005328:	2200      	movs	r2, #0
 800532a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2210      	movs	r2, #16
 8005340:	4013      	ands	r3, r2
 8005342:	d100      	bne.n	8005346 <I2C_IsErrorOccurred+0x2e>
 8005344:	e079      	b.n	800543a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2210      	movs	r2, #16
 800534c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800534e:	e057      	b.n	8005400 <I2C_IsErrorOccurred+0xe8>
 8005350:	2227      	movs	r2, #39	@ 0x27
 8005352:	18bb      	adds	r3, r7, r2
 8005354:	18ba      	adds	r2, r7, r2
 8005356:	7812      	ldrb	r2, [r2, #0]
 8005358:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	3301      	adds	r3, #1
 800535e:	d04f      	beq.n	8005400 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005360:	f7fc fcde 	bl	8001d20 <HAL_GetTick>
 8005364:	0002      	movs	r2, r0
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	429a      	cmp	r2, r3
 800536e:	d302      	bcc.n	8005376 <I2C_IsErrorOccurred+0x5e>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d144      	bne.n	8005400 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	2380      	movs	r3, #128	@ 0x80
 800537e:	01db      	lsls	r3, r3, #7
 8005380:	4013      	ands	r3, r2
 8005382:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005384:	2013      	movs	r0, #19
 8005386:	183b      	adds	r3, r7, r0
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	2142      	movs	r1, #66	@ 0x42
 800538c:	5c52      	ldrb	r2, [r2, r1]
 800538e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	2380      	movs	r3, #128	@ 0x80
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	401a      	ands	r2, r3
 800539c:	2380      	movs	r3, #128	@ 0x80
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d126      	bne.n	80053f2 <I2C_IsErrorOccurred+0xda>
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	2380      	movs	r3, #128	@ 0x80
 80053a8:	01db      	lsls	r3, r3, #7
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d021      	beq.n	80053f2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80053ae:	183b      	adds	r3, r7, r0
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	d01d      	beq.n	80053f2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2180      	movs	r1, #128	@ 0x80
 80053c2:	01c9      	lsls	r1, r1, #7
 80053c4:	430a      	orrs	r2, r1
 80053c6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80053c8:	f7fc fcaa 	bl	8001d20 <HAL_GetTick>
 80053cc:	0003      	movs	r3, r0
 80053ce:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053d0:	e00f      	b.n	80053f2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80053d2:	f7fc fca5 	bl	8001d20 <HAL_GetTick>
 80053d6:	0002      	movs	r2, r0
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b19      	cmp	r3, #25
 80053de:	d908      	bls.n	80053f2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	2220      	movs	r2, #32
 80053e4:	4313      	orrs	r3, r2
 80053e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80053e8:	2327      	movs	r3, #39	@ 0x27
 80053ea:	18fb      	adds	r3, r7, r3
 80053ec:	2201      	movs	r2, #1
 80053ee:	701a      	strb	r2, [r3, #0]

              break;
 80053f0:	e006      	b.n	8005400 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	2220      	movs	r2, #32
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d1e8      	bne.n	80053d2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	2220      	movs	r2, #32
 8005408:	4013      	ands	r3, r2
 800540a:	2b20      	cmp	r3, #32
 800540c:	d004      	beq.n	8005418 <I2C_IsErrorOccurred+0x100>
 800540e:	2327      	movs	r3, #39	@ 0x27
 8005410:	18fb      	adds	r3, r7, r3
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d09b      	beq.n	8005350 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005418:	2327      	movs	r3, #39	@ 0x27
 800541a:	18fb      	adds	r3, r7, r3
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d103      	bne.n	800542a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2220      	movs	r2, #32
 8005428:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	2204      	movs	r2, #4
 800542e:	4313      	orrs	r3, r2
 8005430:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005432:	2327      	movs	r3, #39	@ 0x27
 8005434:	18fb      	adds	r3, r7, r3
 8005436:	2201      	movs	r2, #1
 8005438:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	2380      	movs	r3, #128	@ 0x80
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	4013      	ands	r3, r2
 800544a:	d00c      	beq.n	8005466 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	2201      	movs	r2, #1
 8005450:	4313      	orrs	r3, r2
 8005452:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2280      	movs	r2, #128	@ 0x80
 800545a:	0052      	lsls	r2, r2, #1
 800545c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800545e:	2327      	movs	r3, #39	@ 0x27
 8005460:	18fb      	adds	r3, r7, r3
 8005462:	2201      	movs	r2, #1
 8005464:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	2380      	movs	r3, #128	@ 0x80
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	4013      	ands	r3, r2
 800546e:	d00c      	beq.n	800548a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	2208      	movs	r2, #8
 8005474:	4313      	orrs	r3, r2
 8005476:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2280      	movs	r2, #128	@ 0x80
 800547e:	00d2      	lsls	r2, r2, #3
 8005480:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005482:	2327      	movs	r3, #39	@ 0x27
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	2201      	movs	r2, #1
 8005488:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	2380      	movs	r3, #128	@ 0x80
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4013      	ands	r3, r2
 8005492:	d00c      	beq.n	80054ae <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	2202      	movs	r2, #2
 8005498:	4313      	orrs	r3, r2
 800549a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2280      	movs	r2, #128	@ 0x80
 80054a2:	0092      	lsls	r2, r2, #2
 80054a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054a6:	2327      	movs	r3, #39	@ 0x27
 80054a8:	18fb      	adds	r3, r7, r3
 80054aa:	2201      	movs	r2, #1
 80054ac:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80054ae:	2327      	movs	r3, #39	@ 0x27
 80054b0:	18fb      	adds	r3, r7, r3
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01d      	beq.n	80054f4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	0018      	movs	r0, r3
 80054bc:	f7ff fd9f 	bl	8004ffe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	490e      	ldr	r1, [pc, #56]	@ (8005504 <I2C_IsErrorOccurred+0x1ec>)
 80054cc:	400a      	ands	r2, r1
 80054ce:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2241      	movs	r2, #65	@ 0x41
 80054e0:	2120      	movs	r1, #32
 80054e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2242      	movs	r2, #66	@ 0x42
 80054e8:	2100      	movs	r1, #0
 80054ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2240      	movs	r2, #64	@ 0x40
 80054f0:	2100      	movs	r1, #0
 80054f2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80054f4:	2327      	movs	r3, #39	@ 0x27
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	781b      	ldrb	r3, [r3, #0]
}
 80054fa:	0018      	movs	r0, r3
 80054fc:	46bd      	mov	sp, r7
 80054fe:	b00a      	add	sp, #40	@ 0x28
 8005500:	bd80      	pop	{r7, pc}
 8005502:	46c0      	nop			@ (mov r8, r8)
 8005504:	fe00e800 	.word	0xfe00e800

08005508 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005508:	b590      	push	{r4, r7, lr}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	0008      	movs	r0, r1
 8005512:	0011      	movs	r1, r2
 8005514:	607b      	str	r3, [r7, #4]
 8005516:	240a      	movs	r4, #10
 8005518:	193b      	adds	r3, r7, r4
 800551a:	1c02      	adds	r2, r0, #0
 800551c:	801a      	strh	r2, [r3, #0]
 800551e:	2009      	movs	r0, #9
 8005520:	183b      	adds	r3, r7, r0
 8005522:	1c0a      	adds	r2, r1, #0
 8005524:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005526:	193b      	adds	r3, r7, r4
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	059b      	lsls	r3, r3, #22
 800552c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800552e:	183b      	adds	r3, r7, r0
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	0419      	lsls	r1, r3, #16
 8005534:	23ff      	movs	r3, #255	@ 0xff
 8005536:	041b      	lsls	r3, r3, #16
 8005538:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800553a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005542:	4313      	orrs	r3, r2
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	085b      	lsrs	r3, r3, #1
 8005548:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005552:	0d51      	lsrs	r1, r2, #21
 8005554:	2280      	movs	r2, #128	@ 0x80
 8005556:	00d2      	lsls	r2, r2, #3
 8005558:	400a      	ands	r2, r1
 800555a:	4907      	ldr	r1, [pc, #28]	@ (8005578 <I2C_TransferConfig+0x70>)
 800555c:	430a      	orrs	r2, r1
 800555e:	43d2      	mvns	r2, r2
 8005560:	401a      	ands	r2, r3
 8005562:	0011      	movs	r1, r2
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	430a      	orrs	r2, r1
 800556c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800556e:	46c0      	nop			@ (mov r8, r8)
 8005570:	46bd      	mov	sp, r7
 8005572:	b007      	add	sp, #28
 8005574:	bd90      	pop	{r4, r7, pc}
 8005576:	46c0      	nop			@ (mov r8, r8)
 8005578:	03ff63ff 	.word	0x03ff63ff

0800557c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	000a      	movs	r2, r1
 8005586:	1cbb      	adds	r3, r7, #2
 8005588:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005592:	4b3c      	ldr	r3, [pc, #240]	@ (8005684 <I2C_Enable_IRQ+0x108>)
 8005594:	429a      	cmp	r2, r3
 8005596:	d035      	beq.n	8005604 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800559c:	4b3a      	ldr	r3, [pc, #232]	@ (8005688 <I2C_Enable_IRQ+0x10c>)
 800559e:	429a      	cmp	r2, r3
 80055a0:	d030      	beq.n	8005604 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80055a6:	4b39      	ldr	r3, [pc, #228]	@ (800568c <I2C_Enable_IRQ+0x110>)
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d02b      	beq.n	8005604 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80055ac:	1cbb      	adds	r3, r7, #2
 80055ae:	2200      	movs	r2, #0
 80055b0:	5e9b      	ldrsh	r3, [r3, r2]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	da03      	bge.n	80055be <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	22b8      	movs	r2, #184	@ 0xb8
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80055be:	1cbb      	adds	r3, r7, #2
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	2201      	movs	r2, #1
 80055c4:	4013      	ands	r3, r2
 80055c6:	d003      	beq.n	80055d0 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	22f2      	movs	r2, #242	@ 0xf2
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80055d0:	1cbb      	adds	r3, r7, #2
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	2202      	movs	r2, #2
 80055d6:	4013      	ands	r3, r2
 80055d8:	d003      	beq.n	80055e2 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	22f4      	movs	r2, #244	@ 0xf4
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80055e2:	1cbb      	adds	r3, r7, #2
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	2b10      	cmp	r3, #16
 80055e8:	d103      	bne.n	80055f2 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2290      	movs	r2, #144	@ 0x90
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80055f2:	1cbb      	adds	r3, r7, #2
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	d137      	bne.n	800566a <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2220      	movs	r2, #32
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005602:	e032      	b.n	800566a <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005604:	1cbb      	adds	r3, r7, #2
 8005606:	2200      	movs	r2, #0
 8005608:	5e9b      	ldrsh	r3, [r3, r2]
 800560a:	2b00      	cmp	r3, #0
 800560c:	da03      	bge.n	8005616 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	22b8      	movs	r2, #184	@ 0xb8
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005616:	1cbb      	adds	r3, r7, #2
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	2201      	movs	r2, #1
 800561c:	4013      	ands	r3, r2
 800561e:	d003      	beq.n	8005628 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	22f2      	movs	r2, #242	@ 0xf2
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005628:	1cbb      	adds	r3, r7, #2
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	2202      	movs	r2, #2
 800562e:	4013      	ands	r3, r2
 8005630:	d003      	beq.n	800563a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	22f4      	movs	r2, #244	@ 0xf4
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800563a:	1cbb      	adds	r3, r7, #2
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	2b10      	cmp	r3, #16
 8005640:	d103      	bne.n	800564a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2290      	movs	r2, #144	@ 0x90
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800564a:	1cbb      	adds	r3, r7, #2
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	2b20      	cmp	r3, #32
 8005650:	d103      	bne.n	800565a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2260      	movs	r2, #96	@ 0x60
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800565a:	1cbb      	adds	r3, r7, #2
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	2b40      	cmp	r3, #64	@ 0x40
 8005660:	d103      	bne.n	800566a <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2240      	movs	r2, #64	@ 0x40
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6819      	ldr	r1, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	430a      	orrs	r2, r1
 8005678:	601a      	str	r2, [r3, #0]
}
 800567a:	46c0      	nop			@ (mov r8, r8)
 800567c:	46bd      	mov	sp, r7
 800567e:	b004      	add	sp, #16
 8005680:	bd80      	pop	{r7, pc}
 8005682:	46c0      	nop			@ (mov r8, r8)
 8005684:	08003ed1 	.word	0x08003ed1
 8005688:	08004321 	.word	0x08004321
 800568c:	080040c9 	.word	0x080040c9

08005690 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	000a      	movs	r2, r1
 800569a:	1cbb      	adds	r3, r7, #2
 800569c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80056a2:	1cbb      	adds	r3, r7, #2
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	2201      	movs	r2, #1
 80056a8:	4013      	ands	r3, r2
 80056aa:	d010      	beq.n	80056ce <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2242      	movs	r2, #66	@ 0x42
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2241      	movs	r2, #65	@ 0x41
 80056b8:	5c9b      	ldrb	r3, [r3, r2]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	001a      	movs	r2, r3
 80056be:	2328      	movs	r3, #40	@ 0x28
 80056c0:	4013      	ands	r3, r2
 80056c2:	2b28      	cmp	r3, #40	@ 0x28
 80056c4:	d003      	beq.n	80056ce <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	22b0      	movs	r2, #176	@ 0xb0
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80056ce:	1cbb      	adds	r3, r7, #2
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	2202      	movs	r2, #2
 80056d4:	4013      	ands	r3, r2
 80056d6:	d010      	beq.n	80056fa <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2244      	movs	r2, #68	@ 0x44
 80056dc:	4313      	orrs	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2241      	movs	r2, #65	@ 0x41
 80056e4:	5c9b      	ldrb	r3, [r3, r2]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	001a      	movs	r2, r3
 80056ea:	2328      	movs	r3, #40	@ 0x28
 80056ec:	4013      	ands	r3, r2
 80056ee:	2b28      	cmp	r3, #40	@ 0x28
 80056f0:	d003      	beq.n	80056fa <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	22b0      	movs	r2, #176	@ 0xb0
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80056fa:	1cbb      	adds	r3, r7, #2
 80056fc:	2200      	movs	r2, #0
 80056fe:	5e9b      	ldrsh	r3, [r3, r2]
 8005700:	2b00      	cmp	r3, #0
 8005702:	da03      	bge.n	800570c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	22b8      	movs	r2, #184	@ 0xb8
 8005708:	4313      	orrs	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800570c:	1cbb      	adds	r3, r7, #2
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	2b10      	cmp	r3, #16
 8005712:	d103      	bne.n	800571c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2290      	movs	r2, #144	@ 0x90
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800571c:	1cbb      	adds	r3, r7, #2
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	2b20      	cmp	r3, #32
 8005722:	d103      	bne.n	800572c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800572c:	1cbb      	adds	r3, r7, #2
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	2b40      	cmp	r3, #64	@ 0x40
 8005732:	d103      	bne.n	800573c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2240      	movs	r2, #64	@ 0x40
 8005738:	4313      	orrs	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	43d9      	mvns	r1, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	400a      	ands	r2, r1
 800574c:	601a      	str	r2, [r3, #0]
}
 800574e:	46c0      	nop			@ (mov r8, r8)
 8005750:	46bd      	mov	sp, r7
 8005752:	b004      	add	sp, #16
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2241      	movs	r2, #65	@ 0x41
 8005766:	5c9b      	ldrb	r3, [r3, r2]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b20      	cmp	r3, #32
 800576c:	d138      	bne.n	80057e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2240      	movs	r2, #64	@ 0x40
 8005772:	5c9b      	ldrb	r3, [r3, r2]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005778:	2302      	movs	r3, #2
 800577a:	e032      	b.n	80057e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2240      	movs	r2, #64	@ 0x40
 8005780:	2101      	movs	r1, #1
 8005782:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2241      	movs	r2, #65	@ 0x41
 8005788:	2124      	movs	r1, #36	@ 0x24
 800578a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2101      	movs	r1, #1
 8005798:	438a      	bics	r2, r1
 800579a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4911      	ldr	r1, [pc, #68]	@ (80057ec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80057a8:	400a      	ands	r2, r1
 80057aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6819      	ldr	r1, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2101      	movs	r1, #1
 80057c8:	430a      	orrs	r2, r1
 80057ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2241      	movs	r2, #65	@ 0x41
 80057d0:	2120      	movs	r1, #32
 80057d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2240      	movs	r2, #64	@ 0x40
 80057d8:	2100      	movs	r1, #0
 80057da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	e000      	b.n	80057e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057e0:	2302      	movs	r3, #2
  }
}
 80057e2:	0018      	movs	r0, r3
 80057e4:	46bd      	mov	sp, r7
 80057e6:	b002      	add	sp, #8
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	46c0      	nop			@ (mov r8, r8)
 80057ec:	ffffefff 	.word	0xffffefff

080057f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2241      	movs	r2, #65	@ 0x41
 80057fe:	5c9b      	ldrb	r3, [r3, r2]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b20      	cmp	r3, #32
 8005804:	d139      	bne.n	800587a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2240      	movs	r2, #64	@ 0x40
 800580a:	5c9b      	ldrb	r3, [r3, r2]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005810:	2302      	movs	r3, #2
 8005812:	e033      	b.n	800587c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2240      	movs	r2, #64	@ 0x40
 8005818:	2101      	movs	r1, #1
 800581a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2241      	movs	r2, #65	@ 0x41
 8005820:	2124      	movs	r1, #36	@ 0x24
 8005822:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2101      	movs	r1, #1
 8005830:	438a      	bics	r2, r1
 8005832:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4a11      	ldr	r2, [pc, #68]	@ (8005884 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005840:	4013      	ands	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	021b      	lsls	r3, r3, #8
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2101      	movs	r1, #1
 8005862:	430a      	orrs	r2, r1
 8005864:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2241      	movs	r2, #65	@ 0x41
 800586a:	2120      	movs	r1, #32
 800586c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2240      	movs	r2, #64	@ 0x40
 8005872:	2100      	movs	r1, #0
 8005874:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	e000      	b.n	800587c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800587a:	2302      	movs	r3, #2
  }
}
 800587c:	0018      	movs	r0, r3
 800587e:	46bd      	mov	sp, r7
 8005880:	b004      	add	sp, #16
 8005882:	bd80      	pop	{r7, pc}
 8005884:	fffff0ff 	.word	0xfffff0ff

08005888 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e20f      	b.n	8005cba <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2201      	movs	r2, #1
 80058a0:	4013      	ands	r3, r2
 80058a2:	d100      	bne.n	80058a6 <HAL_RCC_OscConfig+0x1e>
 80058a4:	e069      	b.n	800597a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058a6:	4bc8      	ldr	r3, [pc, #800]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2238      	movs	r2, #56	@ 0x38
 80058ac:	4013      	ands	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b08      	cmp	r3, #8
 80058b4:	d105      	bne.n	80058c2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d15d      	bne.n	800597a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e1fb      	b.n	8005cba <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	2380      	movs	r3, #128	@ 0x80
 80058c8:	025b      	lsls	r3, r3, #9
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d107      	bne.n	80058de <HAL_RCC_OscConfig+0x56>
 80058ce:	4bbe      	ldr	r3, [pc, #760]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	4bbd      	ldr	r3, [pc, #756]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 80058d4:	2180      	movs	r1, #128	@ 0x80
 80058d6:	0249      	lsls	r1, r1, #9
 80058d8:	430a      	orrs	r2, r1
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	e020      	b.n	8005920 <HAL_RCC_OscConfig+0x98>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	23a0      	movs	r3, #160	@ 0xa0
 80058e4:	02db      	lsls	r3, r3, #11
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d10e      	bne.n	8005908 <HAL_RCC_OscConfig+0x80>
 80058ea:	4bb7      	ldr	r3, [pc, #732]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	4bb6      	ldr	r3, [pc, #728]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 80058f0:	2180      	movs	r1, #128	@ 0x80
 80058f2:	02c9      	lsls	r1, r1, #11
 80058f4:	430a      	orrs	r2, r1
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	4bb3      	ldr	r3, [pc, #716]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	4bb2      	ldr	r3, [pc, #712]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 80058fe:	2180      	movs	r1, #128	@ 0x80
 8005900:	0249      	lsls	r1, r1, #9
 8005902:	430a      	orrs	r2, r1
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	e00b      	b.n	8005920 <HAL_RCC_OscConfig+0x98>
 8005908:	4baf      	ldr	r3, [pc, #700]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	4bae      	ldr	r3, [pc, #696]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 800590e:	49af      	ldr	r1, [pc, #700]	@ (8005bcc <HAL_RCC_OscConfig+0x344>)
 8005910:	400a      	ands	r2, r1
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	4bac      	ldr	r3, [pc, #688]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	4bab      	ldr	r3, [pc, #684]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 800591a:	49ad      	ldr	r1, [pc, #692]	@ (8005bd0 <HAL_RCC_OscConfig+0x348>)
 800591c:	400a      	ands	r2, r1
 800591e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d014      	beq.n	8005952 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005928:	f7fc f9fa 	bl	8001d20 <HAL_GetTick>
 800592c:	0003      	movs	r3, r0
 800592e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005930:	e008      	b.n	8005944 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005932:	f7fc f9f5 	bl	8001d20 <HAL_GetTick>
 8005936:	0002      	movs	r2, r0
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b64      	cmp	r3, #100	@ 0x64
 800593e:	d901      	bls.n	8005944 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e1ba      	b.n	8005cba <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005944:	4ba0      	ldr	r3, [pc, #640]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	2380      	movs	r3, #128	@ 0x80
 800594a:	029b      	lsls	r3, r3, #10
 800594c:	4013      	ands	r3, r2
 800594e:	d0f0      	beq.n	8005932 <HAL_RCC_OscConfig+0xaa>
 8005950:	e013      	b.n	800597a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005952:	f7fc f9e5 	bl	8001d20 <HAL_GetTick>
 8005956:	0003      	movs	r3, r0
 8005958:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800595c:	f7fc f9e0 	bl	8001d20 <HAL_GetTick>
 8005960:	0002      	movs	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b64      	cmp	r3, #100	@ 0x64
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e1a5      	b.n	8005cba <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800596e:	4b96      	ldr	r3, [pc, #600]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	2380      	movs	r3, #128	@ 0x80
 8005974:	029b      	lsls	r3, r3, #10
 8005976:	4013      	ands	r3, r2
 8005978:	d1f0      	bne.n	800595c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2202      	movs	r2, #2
 8005980:	4013      	ands	r3, r2
 8005982:	d100      	bne.n	8005986 <HAL_RCC_OscConfig+0xfe>
 8005984:	e086      	b.n	8005a94 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005986:	4b90      	ldr	r3, [pc, #576]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2238      	movs	r2, #56	@ 0x38
 800598c:	4013      	ands	r3, r2
 800598e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d12f      	bne.n	80059f6 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e18b      	b.n	8005cba <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a2:	4b89      	ldr	r3, [pc, #548]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	4a8b      	ldr	r2, [pc, #556]	@ (8005bd4 <HAL_RCC_OscConfig+0x34c>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	0019      	movs	r1, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	021a      	lsls	r2, r3, #8
 80059b2:	4b85      	ldr	r3, [pc, #532]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 80059b4:	430a      	orrs	r2, r1
 80059b6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d112      	bne.n	80059e4 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80059be:	4b82      	ldr	r3, [pc, #520]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a85      	ldr	r2, [pc, #532]	@ (8005bd8 <HAL_RCC_OscConfig+0x350>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	0019      	movs	r1, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	4b7e      	ldr	r3, [pc, #504]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 80059ce:	430a      	orrs	r2, r1
 80059d0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80059d2:	4b7d      	ldr	r3, [pc, #500]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	0adb      	lsrs	r3, r3, #11
 80059d8:	2207      	movs	r2, #7
 80059da:	4013      	ands	r3, r2
 80059dc:	4a7f      	ldr	r2, [pc, #508]	@ (8005bdc <HAL_RCC_OscConfig+0x354>)
 80059de:	40da      	lsrs	r2, r3
 80059e0:	4b7f      	ldr	r3, [pc, #508]	@ (8005be0 <HAL_RCC_OscConfig+0x358>)
 80059e2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80059e4:	4b7f      	ldr	r3, [pc, #508]	@ (8005be4 <HAL_RCC_OscConfig+0x35c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	0018      	movs	r0, r3
 80059ea:	f7fc f93d 	bl	8001c68 <HAL_InitTick>
 80059ee:	1e03      	subs	r3, r0, #0
 80059f0:	d050      	beq.n	8005a94 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e161      	b.n	8005cba <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d030      	beq.n	8005a60 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80059fe:	4b72      	ldr	r3, [pc, #456]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a75      	ldr	r2, [pc, #468]	@ (8005bd8 <HAL_RCC_OscConfig+0x350>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	0019      	movs	r1, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	4b6e      	ldr	r3, [pc, #440]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8005a12:	4b6d      	ldr	r3, [pc, #436]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	4b6c      	ldr	r3, [pc, #432]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005a18:	2180      	movs	r1, #128	@ 0x80
 8005a1a:	0049      	lsls	r1, r1, #1
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a20:	f7fc f97e 	bl	8001d20 <HAL_GetTick>
 8005a24:	0003      	movs	r3, r0
 8005a26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005a2a:	f7fc f979 	bl	8001d20 <HAL_GetTick>
 8005a2e:	0002      	movs	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e13e      	b.n	8005cba <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a3c:	4b62      	ldr	r3, [pc, #392]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	2380      	movs	r3, #128	@ 0x80
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	4013      	ands	r3, r2
 8005a46:	d0f0      	beq.n	8005a2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a48:	4b5f      	ldr	r3, [pc, #380]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	4a61      	ldr	r2, [pc, #388]	@ (8005bd4 <HAL_RCC_OscConfig+0x34c>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	0019      	movs	r1, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	021a      	lsls	r2, r3, #8
 8005a58:	4b5b      	ldr	r3, [pc, #364]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	605a      	str	r2, [r3, #4]
 8005a5e:	e019      	b.n	8005a94 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8005a60:	4b59      	ldr	r3, [pc, #356]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	4b58      	ldr	r3, [pc, #352]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005a66:	4960      	ldr	r1, [pc, #384]	@ (8005be8 <HAL_RCC_OscConfig+0x360>)
 8005a68:	400a      	ands	r2, r1
 8005a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6c:	f7fc f958 	bl	8001d20 <HAL_GetTick>
 8005a70:	0003      	movs	r3, r0
 8005a72:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005a76:	f7fc f953 	bl	8001d20 <HAL_GetTick>
 8005a7a:	0002      	movs	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e118      	b.n	8005cba <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a88:	4b4f      	ldr	r3, [pc, #316]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	2380      	movs	r3, #128	@ 0x80
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	4013      	ands	r3, r2
 8005a92:	d1f0      	bne.n	8005a76 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2208      	movs	r2, #8
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d042      	beq.n	8005b24 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2238      	movs	r2, #56	@ 0x38
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	2b18      	cmp	r3, #24
 8005aa8:	d105      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d138      	bne.n	8005b24 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e101      	b.n	8005cba <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d019      	beq.n	8005af2 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005abe:	4b42      	ldr	r3, [pc, #264]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005ac0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ac2:	4b41      	ldr	r3, [pc, #260]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aca:	f7fc f929 	bl	8001d20 <HAL_GetTick>
 8005ace:	0003      	movs	r3, r0
 8005ad0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005ad4:	f7fc f924 	bl	8001d20 <HAL_GetTick>
 8005ad8:	0002      	movs	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e0e9      	b.n	8005cba <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005ae6:	4b38      	ldr	r3, [pc, #224]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aea:	2202      	movs	r2, #2
 8005aec:	4013      	ands	r3, r2
 8005aee:	d0f1      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x24c>
 8005af0:	e018      	b.n	8005b24 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005af2:	4b35      	ldr	r3, [pc, #212]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005af4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005af6:	4b34      	ldr	r3, [pc, #208]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005af8:	2101      	movs	r1, #1
 8005afa:	438a      	bics	r2, r1
 8005afc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afe:	f7fc f90f 	bl	8001d20 <HAL_GetTick>
 8005b02:	0003      	movs	r3, r0
 8005b04:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005b08:	f7fc f90a 	bl	8001d20 <HAL_GetTick>
 8005b0c:	0002      	movs	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e0cf      	b.n	8005cba <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8005b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b1e:	2202      	movs	r2, #2
 8005b20:	4013      	ands	r3, r2
 8005b22:	d1f1      	bne.n	8005b08 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2204      	movs	r2, #4
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d100      	bne.n	8005b30 <HAL_RCC_OscConfig+0x2a8>
 8005b2e:	e084      	b.n	8005c3a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b30:	230f      	movs	r3, #15
 8005b32:	18fb      	adds	r3, r7, r3
 8005b34:	2200      	movs	r2, #0
 8005b36:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005b38:	4b23      	ldr	r3, [pc, #140]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	2238      	movs	r2, #56	@ 0x38
 8005b3e:	4013      	ands	r3, r2
 8005b40:	2b20      	cmp	r3, #32
 8005b42:	d106      	bne.n	8005b52 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d000      	beq.n	8005b4e <HAL_RCC_OscConfig+0x2c6>
 8005b4c:	e075      	b.n	8005c3a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e0b3      	b.n	8005cba <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d106      	bne.n	8005b68 <HAL_RCC_OscConfig+0x2e0>
 8005b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005b5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005b60:	2101      	movs	r1, #1
 8005b62:	430a      	orrs	r2, r1
 8005b64:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b66:	e01c      	b.n	8005ba2 <HAL_RCC_OscConfig+0x31a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b05      	cmp	r3, #5
 8005b6e:	d10c      	bne.n	8005b8a <HAL_RCC_OscConfig+0x302>
 8005b70:	4b15      	ldr	r3, [pc, #84]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005b72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b74:	4b14      	ldr	r3, [pc, #80]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005b76:	2104      	movs	r1, #4
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b7c:	4b12      	ldr	r3, [pc, #72]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005b7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b80:	4b11      	ldr	r3, [pc, #68]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005b82:	2101      	movs	r1, #1
 8005b84:	430a      	orrs	r2, r1
 8005b86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b88:	e00b      	b.n	8005ba2 <HAL_RCC_OscConfig+0x31a>
 8005b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005b8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005b90:	2101      	movs	r1, #1
 8005b92:	438a      	bics	r2, r1
 8005b94:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b96:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005b98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005b9c:	2104      	movs	r1, #4
 8005b9e:	438a      	bics	r2, r1
 8005ba0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d028      	beq.n	8005bfc <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005baa:	f7fc f8b9 	bl	8001d20 <HAL_GetTick>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005bb2:	e01d      	b.n	8005bf0 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb4:	f7fc f8b4 	bl	8001d20 <HAL_GetTick>
 8005bb8:	0002      	movs	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	4a0b      	ldr	r2, [pc, #44]	@ (8005bec <HAL_RCC_OscConfig+0x364>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d915      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e078      	b.n	8005cba <HAL_RCC_OscConfig+0x432>
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	fffeffff 	.word	0xfffeffff
 8005bd0:	fffbffff 	.word	0xfffbffff
 8005bd4:	ffff80ff 	.word	0xffff80ff
 8005bd8:	ffffc7ff 	.word	0xffffc7ff
 8005bdc:	02dc6c00 	.word	0x02dc6c00
 8005be0:	20000034 	.word	0x20000034
 8005be4:	20000038 	.word	0x20000038
 8005be8:	fffffeff 	.word	0xfffffeff
 8005bec:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005bf0:	4b34      	ldr	r3, [pc, #208]	@ (8005cc4 <HAL_RCC_OscConfig+0x43c>)
 8005bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d0dc      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x32c>
 8005bfa:	e013      	b.n	8005c24 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfc:	f7fc f890 	bl	8001d20 <HAL_GetTick>
 8005c00:	0003      	movs	r3, r0
 8005c02:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005c04:	e009      	b.n	8005c1a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c06:	f7fc f88b 	bl	8001d20 <HAL_GetTick>
 8005c0a:	0002      	movs	r2, r0
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	4a2d      	ldr	r2, [pc, #180]	@ (8005cc8 <HAL_RCC_OscConfig+0x440>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e04f      	b.n	8005cba <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8005cc4 <HAL_RCC_OscConfig+0x43c>)
 8005c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c1e:	2202      	movs	r2, #2
 8005c20:	4013      	ands	r3, r2
 8005c22:	d1f0      	bne.n	8005c06 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005c24:	230f      	movs	r3, #15
 8005c26:	18fb      	adds	r3, r7, r3
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d105      	bne.n	8005c3a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005c2e:	4b25      	ldr	r3, [pc, #148]	@ (8005cc4 <HAL_RCC_OscConfig+0x43c>)
 8005c30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c32:	4b24      	ldr	r3, [pc, #144]	@ (8005cc4 <HAL_RCC_OscConfig+0x43c>)
 8005c34:	4925      	ldr	r1, [pc, #148]	@ (8005ccc <HAL_RCC_OscConfig+0x444>)
 8005c36:	400a      	ands	r2, r1
 8005c38:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2210      	movs	r2, #16
 8005c40:	4013      	ands	r3, r2
 8005c42:	d039      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01b      	beq.n	8005c84 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005cc4 <HAL_RCC_OscConfig+0x43c>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	4b1c      	ldr	r3, [pc, #112]	@ (8005cc4 <HAL_RCC_OscConfig+0x43c>)
 8005c52:	2180      	movs	r1, #128	@ 0x80
 8005c54:	03c9      	lsls	r1, r1, #15
 8005c56:	430a      	orrs	r2, r1
 8005c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5a:	f7fc f861 	bl	8001d20 <HAL_GetTick>
 8005c5e:	0003      	movs	r3, r0
 8005c60:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c64:	f7fc f85c 	bl	8001d20 <HAL_GetTick>
 8005c68:	0002      	movs	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e021      	b.n	8005cba <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8005c76:	4b13      	ldr	r3, [pc, #76]	@ (8005cc4 <HAL_RCC_OscConfig+0x43c>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	2380      	movs	r3, #128	@ 0x80
 8005c7c:	041b      	lsls	r3, r3, #16
 8005c7e:	4013      	ands	r3, r2
 8005c80:	d0f0      	beq.n	8005c64 <HAL_RCC_OscConfig+0x3dc>
 8005c82:	e019      	b.n	8005cb8 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c84:	4b0f      	ldr	r3, [pc, #60]	@ (8005cc4 <HAL_RCC_OscConfig+0x43c>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	4b0e      	ldr	r3, [pc, #56]	@ (8005cc4 <HAL_RCC_OscConfig+0x43c>)
 8005c8a:	4911      	ldr	r1, [pc, #68]	@ (8005cd0 <HAL_RCC_OscConfig+0x448>)
 8005c8c:	400a      	ands	r2, r1
 8005c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c90:	f7fc f846 	bl	8001d20 <HAL_GetTick>
 8005c94:	0003      	movs	r3, r0
 8005c96:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8005c98:	e008      	b.n	8005cac <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c9a:	f7fc f841 	bl	8001d20 <HAL_GetTick>
 8005c9e:	0002      	movs	r2, r0
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e006      	b.n	8005cba <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8005cac:	4b05      	ldr	r3, [pc, #20]	@ (8005cc4 <HAL_RCC_OscConfig+0x43c>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	2380      	movs	r3, #128	@ 0x80
 8005cb2:	041b      	lsls	r3, r3, #16
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	d1f0      	bne.n	8005c9a <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	0018      	movs	r0, r3
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	b006      	add	sp, #24
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	46c0      	nop			@ (mov r8, r8)
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	00001388 	.word	0x00001388
 8005ccc:	efffffff 	.word	0xefffffff
 8005cd0:	ffbfffff 	.word	0xffbfffff

08005cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e0f6      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ce8:	4b7d      	ldr	r3, [pc, #500]	@ (8005ee0 <HAL_RCC_ClockConfig+0x20c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2207      	movs	r2, #7
 8005cee:	4013      	ands	r3, r2
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d91e      	bls.n	8005d34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf6:	4b7a      	ldr	r3, [pc, #488]	@ (8005ee0 <HAL_RCC_ClockConfig+0x20c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2207      	movs	r2, #7
 8005cfc:	4393      	bics	r3, r2
 8005cfe:	0019      	movs	r1, r3
 8005d00:	4b77      	ldr	r3, [pc, #476]	@ (8005ee0 <HAL_RCC_ClockConfig+0x20c>)
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d08:	f7fc f80a 	bl	8001d20 <HAL_GetTick>
 8005d0c:	0003      	movs	r3, r0
 8005d0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d10:	e009      	b.n	8005d26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005d12:	f7fc f805 	bl	8001d20 <HAL_GetTick>
 8005d16:	0002      	movs	r2, r0
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	4a71      	ldr	r2, [pc, #452]	@ (8005ee4 <HAL_RCC_ClockConfig+0x210>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e0d7      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d26:	4b6e      	ldr	r3, [pc, #440]	@ (8005ee0 <HAL_RCC_ClockConfig+0x20c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2207      	movs	r2, #7
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d1ee      	bne.n	8005d12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	d017      	beq.n	8005d6e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2204      	movs	r2, #4
 8005d44:	4013      	ands	r3, r2
 8005d46:	d008      	beq.n	8005d5a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005d48:	4b67      	ldr	r3, [pc, #412]	@ (8005ee8 <HAL_RCC_ClockConfig+0x214>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	4a67      	ldr	r2, [pc, #412]	@ (8005eec <HAL_RCC_ClockConfig+0x218>)
 8005d4e:	401a      	ands	r2, r3
 8005d50:	4b65      	ldr	r3, [pc, #404]	@ (8005ee8 <HAL_RCC_ClockConfig+0x214>)
 8005d52:	21b0      	movs	r1, #176	@ 0xb0
 8005d54:	0109      	lsls	r1, r1, #4
 8005d56:	430a      	orrs	r2, r1
 8005d58:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d5a:	4b63      	ldr	r3, [pc, #396]	@ (8005ee8 <HAL_RCC_ClockConfig+0x214>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	4a64      	ldr	r2, [pc, #400]	@ (8005ef0 <HAL_RCC_ClockConfig+0x21c>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	0019      	movs	r1, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	4b5f      	ldr	r3, [pc, #380]	@ (8005ee8 <HAL_RCC_ClockConfig+0x214>)
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2201      	movs	r2, #1
 8005d74:	4013      	ands	r3, r2
 8005d76:	d100      	bne.n	8005d7a <HAL_RCC_ClockConfig+0xa6>
 8005d78:	e061      	b.n	8005e3e <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8005d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ee8 <HAL_RCC_ClockConfig+0x214>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	221c      	movs	r2, #28
 8005d80:	4393      	bics	r3, r2
 8005d82:	0019      	movs	r1, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	4b57      	ldr	r3, [pc, #348]	@ (8005ee8 <HAL_RCC_ClockConfig+0x214>)
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d107      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d96:	4b54      	ldr	r3, [pc, #336]	@ (8005ee8 <HAL_RCC_ClockConfig+0x214>)
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	2380      	movs	r3, #128	@ 0x80
 8005d9c:	029b      	lsls	r3, r3, #10
 8005d9e:	4013      	ands	r3, r2
 8005da0:	d12b      	bne.n	8005dfa <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e097      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d107      	bne.n	8005dbe <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dae:	4b4e      	ldr	r3, [pc, #312]	@ (8005ee8 <HAL_RCC_ClockConfig+0x214>)
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	2380      	movs	r3, #128	@ 0x80
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	4013      	ands	r3, r2
 8005db8:	d11f      	bne.n	8005dfa <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e08b      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d107      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8005dc6:	4b48      	ldr	r3, [pc, #288]	@ (8005ee8 <HAL_RCC_ClockConfig+0x214>)
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	2380      	movs	r3, #128	@ 0x80
 8005dcc:	041b      	lsls	r3, r3, #16
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d113      	bne.n	8005dfa <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e07f      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d106      	bne.n	8005dec <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005dde:	4b42      	ldr	r3, [pc, #264]	@ (8005ee8 <HAL_RCC_ClockConfig+0x214>)
 8005de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005de2:	2202      	movs	r2, #2
 8005de4:	4013      	ands	r3, r2
 8005de6:	d108      	bne.n	8005dfa <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e074      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005dec:	4b3e      	ldr	r3, [pc, #248]	@ (8005ee8 <HAL_RCC_ClockConfig+0x214>)
 8005dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005df0:	2202      	movs	r2, #2
 8005df2:	4013      	ands	r3, r2
 8005df4:	d101      	bne.n	8005dfa <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e06d      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8005ee8 <HAL_RCC_ClockConfig+0x214>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	2207      	movs	r2, #7
 8005e00:	4393      	bics	r3, r2
 8005e02:	0019      	movs	r1, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	4b37      	ldr	r3, [pc, #220]	@ (8005ee8 <HAL_RCC_ClockConfig+0x214>)
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e0e:	f7fb ff87 	bl	8001d20 <HAL_GetTick>
 8005e12:	0003      	movs	r3, r0
 8005e14:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e16:	e009      	b.n	8005e2c <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005e18:	f7fb ff82 	bl	8001d20 <HAL_GetTick>
 8005e1c:	0002      	movs	r2, r0
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	4a30      	ldr	r2, [pc, #192]	@ (8005ee4 <HAL_RCC_ClockConfig+0x210>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d901      	bls.n	8005e2c <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e054      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8005ee8 <HAL_RCC_ClockConfig+0x214>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	2238      	movs	r2, #56	@ 0x38
 8005e32:	401a      	ands	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d1ec      	bne.n	8005e18 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e3e:	4b28      	ldr	r3, [pc, #160]	@ (8005ee0 <HAL_RCC_ClockConfig+0x20c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2207      	movs	r2, #7
 8005e44:	4013      	ands	r3, r2
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d21e      	bcs.n	8005e8a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e4c:	4b24      	ldr	r3, [pc, #144]	@ (8005ee0 <HAL_RCC_ClockConfig+0x20c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2207      	movs	r2, #7
 8005e52:	4393      	bics	r3, r2
 8005e54:	0019      	movs	r1, r3
 8005e56:	4b22      	ldr	r3, [pc, #136]	@ (8005ee0 <HAL_RCC_ClockConfig+0x20c>)
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e5e:	f7fb ff5f 	bl	8001d20 <HAL_GetTick>
 8005e62:	0003      	movs	r3, r0
 8005e64:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e66:	e009      	b.n	8005e7c <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005e68:	f7fb ff5a 	bl	8001d20 <HAL_GetTick>
 8005e6c:	0002      	movs	r2, r0
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	4a1c      	ldr	r2, [pc, #112]	@ (8005ee4 <HAL_RCC_ClockConfig+0x210>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e02c      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e7c:	4b18      	ldr	r3, [pc, #96]	@ (8005ee0 <HAL_RCC_ClockConfig+0x20c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2207      	movs	r2, #7
 8005e82:	4013      	ands	r3, r2
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d1ee      	bne.n	8005e68 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2204      	movs	r2, #4
 8005e90:	4013      	ands	r3, r2
 8005e92:	d009      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005e94:	4b14      	ldr	r3, [pc, #80]	@ (8005ee8 <HAL_RCC_ClockConfig+0x214>)
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	4a16      	ldr	r2, [pc, #88]	@ (8005ef4 <HAL_RCC_ClockConfig+0x220>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	0019      	movs	r1, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691a      	ldr	r2, [r3, #16]
 8005ea2:	4b11      	ldr	r3, [pc, #68]	@ (8005ee8 <HAL_RCC_ClockConfig+0x214>)
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005ea8:	f000 f82c 	bl	8005f04 <HAL_RCC_GetSysClockFreq>
 8005eac:	0001      	movs	r1, r0
 8005eae:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee8 <HAL_RCC_ClockConfig+0x214>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	220f      	movs	r2, #15
 8005eb6:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8005ef8 <HAL_RCC_ClockConfig+0x224>)
 8005eba:	0092      	lsls	r2, r2, #2
 8005ebc:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005ebe:	221f      	movs	r2, #31
 8005ec0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005ec2:	000a      	movs	r2, r1
 8005ec4:	40da      	lsrs	r2, r3
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8005efc <HAL_RCC_ClockConfig+0x228>)
 8005ec8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005eca:	4b0d      	ldr	r3, [pc, #52]	@ (8005f00 <HAL_RCC_ClockConfig+0x22c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	0018      	movs	r0, r3
 8005ed0:	f7fb feca 	bl	8001c68 <HAL_InitTick>
 8005ed4:	0003      	movs	r3, r0
}
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	b004      	add	sp, #16
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	46c0      	nop			@ (mov r8, r8)
 8005ee0:	40022000 	.word	0x40022000
 8005ee4:	00001388 	.word	0x00001388
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	ffff84ff 	.word	0xffff84ff
 8005ef0:	fffff0ff 	.word	0xfffff0ff
 8005ef4:	ffff8fff 	.word	0xffff8fff
 8005ef8:	08008780 	.word	0x08008780
 8005efc:	20000034 	.word	0x20000034
 8005f00:	20000038 	.word	0x20000038

08005f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8005f0a:	4b27      	ldr	r3, [pc, #156]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	089b      	lsrs	r3, r3, #2
 8005f10:	2207      	movs	r2, #7
 8005f12:	4013      	ands	r3, r2
 8005f14:	3301      	adds	r3, #1
 8005f16:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005f18:	4b23      	ldr	r3, [pc, #140]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	2238      	movs	r2, #56	@ 0x38
 8005f1e:	4013      	ands	r3, r2
 8005f20:	d10f      	bne.n	8005f42 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005f22:	4b21      	ldr	r3, [pc, #132]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	0adb      	lsrs	r3, r3, #11
 8005f28:	2207      	movs	r2, #7
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	409a      	lsls	r2, r3
 8005f30:	0013      	movs	r3, r2
 8005f32:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	481d      	ldr	r0, [pc, #116]	@ (8005fac <HAL_RCC_GetSysClockFreq+0xa8>)
 8005f38:	f7fa f8f0 	bl	800011c <__udivsi3>
 8005f3c:	0003      	movs	r3, r0
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	e027      	b.n	8005f92 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005f42:	4b19      	ldr	r3, [pc, #100]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	2238      	movs	r2, #56	@ 0x38
 8005f48:	4013      	ands	r3, r2
 8005f4a:	2b08      	cmp	r3, #8
 8005f4c:	d102      	bne.n	8005f54 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f4e:	4b18      	ldr	r3, [pc, #96]	@ (8005fb0 <HAL_RCC_GetSysClockFreq+0xac>)
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	e01e      	b.n	8005f92 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005f54:	4b14      	ldr	r3, [pc, #80]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	2238      	movs	r2, #56	@ 0x38
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	d103      	bne.n	8005f68 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005f60:	2380      	movs	r3, #128	@ 0x80
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	e014      	b.n	8005f92 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005f68:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2238      	movs	r2, #56	@ 0x38
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b18      	cmp	r3, #24
 8005f72:	d103      	bne.n	8005f7c <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005f74:	23fa      	movs	r3, #250	@ 0xfa
 8005f76:	01db      	lsls	r3, r3, #7
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	e00a      	b.n	8005f92 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8005f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	2238      	movs	r2, #56	@ 0x38
 8005f82:	4013      	ands	r3, r2
 8005f84:	2b10      	cmp	r3, #16
 8005f86:	d102      	bne.n	8005f8e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8005f88:	4b08      	ldr	r3, [pc, #32]	@ (8005fac <HAL_RCC_GetSysClockFreq+0xa8>)
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	e001      	b.n	8005f92 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f7fa f8c1 	bl	800011c <__udivsi3>
 8005f9a:	0003      	movs	r3, r0
 8005f9c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
}
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	b004      	add	sp, #16
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	02dc6c00 	.word	0x02dc6c00
 8005fb0:	007a1200 	.word	0x007a1200

08005fb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005fb8:	f7ff ffa4 	bl	8005f04 <HAL_RCC_GetSysClockFreq>
 8005fbc:	0001      	movs	r1, r0
 8005fbe:	4b09      	ldr	r3, [pc, #36]	@ (8005fe4 <HAL_RCC_GetHCLKFreq+0x30>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005fc2:	0a1b      	lsrs	r3, r3, #8
 8005fc4:	220f      	movs	r2, #15
 8005fc6:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005fc8:	4b07      	ldr	r3, [pc, #28]	@ (8005fe8 <HAL_RCC_GetHCLKFreq+0x34>)
 8005fca:	0092      	lsls	r2, r2, #2
 8005fcc:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005fce:	221f      	movs	r2, #31
 8005fd0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005fd2:	000a      	movs	r2, r1
 8005fd4:	40da      	lsrs	r2, r3
 8005fd6:	4b05      	ldr	r3, [pc, #20]	@ (8005fec <HAL_RCC_GetHCLKFreq+0x38>)
 8005fd8:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8005fda:	4b04      	ldr	r3, [pc, #16]	@ (8005fec <HAL_RCC_GetHCLKFreq+0x38>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
}
 8005fde:	0018      	movs	r0, r3
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	08008780 	.word	0x08008780
 8005fec:	20000034 	.word	0x20000034

08005ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8005ff4:	f7ff ffde 	bl	8005fb4 <HAL_RCC_GetHCLKFreq>
 8005ff8:	0001      	movs	r1, r0
 8005ffa:	4b07      	ldr	r3, [pc, #28]	@ (8006018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	0b1b      	lsrs	r3, r3, #12
 8006000:	2207      	movs	r2, #7
 8006002:	401a      	ands	r2, r3
 8006004:	4b05      	ldr	r3, [pc, #20]	@ (800601c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8006006:	0092      	lsls	r2, r2, #2
 8006008:	58d3      	ldr	r3, [r2, r3]
 800600a:	221f      	movs	r2, #31
 800600c:	4013      	ands	r3, r2
 800600e:	40d9      	lsrs	r1, r3
 8006010:	000b      	movs	r3, r1
}
 8006012:	0018      	movs	r0, r3
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40021000 	.word	0x40021000
 800601c:	080087c0 	.word	0x080087c0

08006020 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006028:	2313      	movs	r3, #19
 800602a:	18fb      	adds	r3, r7, r3
 800602c:	2200      	movs	r2, #0
 800602e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006030:	2312      	movs	r3, #18
 8006032:	18fb      	adds	r3, r7, r3
 8006034:	2200      	movs	r2, #0
 8006036:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2240      	movs	r2, #64	@ 0x40
 800603e:	4013      	ands	r3, r2
 8006040:	d100      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8006042:	e079      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006044:	2011      	movs	r0, #17
 8006046:	183b      	adds	r3, r7, r0
 8006048:	2200      	movs	r2, #0
 800604a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800604c:	4b6a      	ldr	r3, [pc, #424]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800604e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006050:	2380      	movs	r3, #128	@ 0x80
 8006052:	055b      	lsls	r3, r3, #21
 8006054:	4013      	ands	r3, r2
 8006056:	d110      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006058:	4b67      	ldr	r3, [pc, #412]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800605a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800605c:	4b66      	ldr	r3, [pc, #408]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800605e:	2180      	movs	r1, #128	@ 0x80
 8006060:	0549      	lsls	r1, r1, #21
 8006062:	430a      	orrs	r2, r1
 8006064:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006066:	4b64      	ldr	r3, [pc, #400]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006068:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800606a:	2380      	movs	r3, #128	@ 0x80
 800606c:	055b      	lsls	r3, r3, #21
 800606e:	4013      	ands	r3, r2
 8006070:	60bb      	str	r3, [r7, #8]
 8006072:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006074:	183b      	adds	r3, r7, r0
 8006076:	2201      	movs	r2, #1
 8006078:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800607a:	4b5f      	ldr	r3, [pc, #380]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800607c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800607e:	23c0      	movs	r3, #192	@ 0xc0
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4013      	ands	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d019      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	429a      	cmp	r2, r3
 8006094:	d014      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8006096:	4b58      	ldr	r3, [pc, #352]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800609a:	4a58      	ldr	r2, [pc, #352]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800609c:	4013      	ands	r3, r2
 800609e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060a0:	4b55      	ldr	r3, [pc, #340]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060a4:	4b54      	ldr	r3, [pc, #336]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060a6:	2180      	movs	r1, #128	@ 0x80
 80060a8:	0249      	lsls	r1, r1, #9
 80060aa:	430a      	orrs	r2, r1
 80060ac:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060ae:	4b52      	ldr	r3, [pc, #328]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060b2:	4b51      	ldr	r3, [pc, #324]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060b4:	4952      	ldr	r1, [pc, #328]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060b6:	400a      	ands	r2, r1
 80060b8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80060ba:	4b4f      	ldr	r3, [pc, #316]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2201      	movs	r2, #1
 80060c4:	4013      	ands	r3, r2
 80060c6:	d016      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c8:	f7fb fe2a 	bl	8001d20 <HAL_GetTick>
 80060cc:	0003      	movs	r3, r0
 80060ce:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80060d0:	e00c      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d2:	f7fb fe25 	bl	8001d20 <HAL_GetTick>
 80060d6:	0002      	movs	r2, r0
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	4a49      	ldr	r2, [pc, #292]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d904      	bls.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80060e2:	2313      	movs	r3, #19
 80060e4:	18fb      	adds	r3, r7, r3
 80060e6:	2203      	movs	r2, #3
 80060e8:	701a      	strb	r2, [r3, #0]
          break;
 80060ea:	e004      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80060ec:	4b42      	ldr	r3, [pc, #264]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060f0:	2202      	movs	r2, #2
 80060f2:	4013      	ands	r3, r2
 80060f4:	d0ed      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80060f6:	2313      	movs	r3, #19
 80060f8:	18fb      	adds	r3, r7, r3
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006100:	4b3d      	ldr	r3, [pc, #244]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006104:	4a3d      	ldr	r2, [pc, #244]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006106:	4013      	ands	r3, r2
 8006108:	0019      	movs	r1, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69da      	ldr	r2, [r3, #28]
 800610e:	4b3a      	ldr	r3, [pc, #232]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006110:	430a      	orrs	r2, r1
 8006112:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006114:	e005      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006116:	2312      	movs	r3, #18
 8006118:	18fb      	adds	r3, r7, r3
 800611a:	2213      	movs	r2, #19
 800611c:	18ba      	adds	r2, r7, r2
 800611e:	7812      	ldrb	r2, [r2, #0]
 8006120:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006122:	2311      	movs	r3, #17
 8006124:	18fb      	adds	r3, r7, r3
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d105      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800612c:	4b32      	ldr	r3, [pc, #200]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800612e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006130:	4b31      	ldr	r3, [pc, #196]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006132:	4935      	ldr	r1, [pc, #212]	@ (8006208 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006134:	400a      	ands	r2, r1
 8006136:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2201      	movs	r2, #1
 800613e:	4013      	ands	r3, r2
 8006140:	d009      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006142:	4b2d      	ldr	r3, [pc, #180]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006146:	2203      	movs	r2, #3
 8006148:	4393      	bics	r3, r2
 800614a:	0019      	movs	r1, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	4b29      	ldr	r3, [pc, #164]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006152:	430a      	orrs	r2, r1
 8006154:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2202      	movs	r2, #2
 800615c:	4013      	ands	r3, r2
 800615e:	d009      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006160:	4b25      	ldr	r3, [pc, #148]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006164:	4a29      	ldr	r2, [pc, #164]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006166:	4013      	ands	r3, r2
 8006168:	0019      	movs	r1, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	4b22      	ldr	r3, [pc, #136]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006170:	430a      	orrs	r2, r1
 8006172:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2220      	movs	r2, #32
 800617a:	4013      	ands	r3, r2
 800617c:	d008      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800617e:	4b1e      	ldr	r3, [pc, #120]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	0899      	lsrs	r1, r3, #2
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	699a      	ldr	r2, [r3, #24]
 800618a:	4b1b      	ldr	r3, [pc, #108]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800618c:	430a      	orrs	r2, r1
 800618e:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2208      	movs	r2, #8
 8006196:	4013      	ands	r3, r2
 8006198:	d009      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800619a:	4b17      	ldr	r3, [pc, #92]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800619c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800619e:	4a1c      	ldr	r2, [pc, #112]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	0019      	movs	r1, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	695a      	ldr	r2, [r3, #20]
 80061a8:	4b13      	ldr	r3, [pc, #76]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061aa:	430a      	orrs	r2, r1
 80061ac:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2204      	movs	r2, #4
 80061b4:	4013      	ands	r3, r2
 80061b6:	d009      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80061b8:	4b0f      	ldr	r3, [pc, #60]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061bc:	4a15      	ldr	r2, [pc, #84]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80061be:	4013      	ands	r3, r2
 80061c0:	0019      	movs	r1, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	4b0c      	ldr	r3, [pc, #48]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061c8:	430a      	orrs	r2, r1
 80061ca:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2280      	movs	r2, #128	@ 0x80
 80061d2:	4013      	ands	r3, r2
 80061d4:	d009      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80061d6:	4b08      	ldr	r3, [pc, #32]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	22e0      	movs	r2, #224	@ 0xe0
 80061dc:	4393      	bics	r3, r2
 80061de:	0019      	movs	r1, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	4b04      	ldr	r3, [pc, #16]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061e6:	430a      	orrs	r2, r1
 80061e8:	601a      	str	r2, [r3, #0]
  }
  return status;
 80061ea:	2312      	movs	r3, #18
 80061ec:	18fb      	adds	r3, r7, r3
 80061ee:	781b      	ldrb	r3, [r3, #0]
}
 80061f0:	0018      	movs	r0, r3
 80061f2:	46bd      	mov	sp, r7
 80061f4:	b006      	add	sp, #24
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40021000 	.word	0x40021000
 80061fc:	fffffcff 	.word	0xfffffcff
 8006200:	fffeffff 	.word	0xfffeffff
 8006204:	00001388 	.word	0x00001388
 8006208:	efffffff 	.word	0xefffffff
 800620c:	ffffcfff 	.word	0xffffcfff
 8006210:	ffffefff 	.word	0xffffefff
 8006214:	ffff3fff 	.word	0xffff3fff

08006218 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e04a      	b.n	80062c0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	223d      	movs	r2, #61	@ 0x3d
 800622e:	5c9b      	ldrb	r3, [r3, r2]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d107      	bne.n	8006246 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	223c      	movs	r2, #60	@ 0x3c
 800623a:	2100      	movs	r1, #0
 800623c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	0018      	movs	r0, r3
 8006242:	f7fb fbe1 	bl	8001a08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	223d      	movs	r2, #61	@ 0x3d
 800624a:	2102      	movs	r1, #2
 800624c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	3304      	adds	r3, #4
 8006256:	0019      	movs	r1, r3
 8006258:	0010      	movs	r0, r2
 800625a:	f000 f935 	bl	80064c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2248      	movs	r2, #72	@ 0x48
 8006262:	2101      	movs	r1, #1
 8006264:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	223e      	movs	r2, #62	@ 0x3e
 800626a:	2101      	movs	r1, #1
 800626c:	5499      	strb	r1, [r3, r2]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	223f      	movs	r2, #63	@ 0x3f
 8006272:	2101      	movs	r1, #1
 8006274:	5499      	strb	r1, [r3, r2]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2240      	movs	r2, #64	@ 0x40
 800627a:	2101      	movs	r1, #1
 800627c:	5499      	strb	r1, [r3, r2]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2241      	movs	r2, #65	@ 0x41
 8006282:	2101      	movs	r1, #1
 8006284:	5499      	strb	r1, [r3, r2]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2242      	movs	r2, #66	@ 0x42
 800628a:	2101      	movs	r1, #1
 800628c:	5499      	strb	r1, [r3, r2]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2243      	movs	r2, #67	@ 0x43
 8006292:	2101      	movs	r1, #1
 8006294:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2244      	movs	r2, #68	@ 0x44
 800629a:	2101      	movs	r1, #1
 800629c:	5499      	strb	r1, [r3, r2]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2245      	movs	r2, #69	@ 0x45
 80062a2:	2101      	movs	r1, #1
 80062a4:	5499      	strb	r1, [r3, r2]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2246      	movs	r2, #70	@ 0x46
 80062aa:	2101      	movs	r1, #1
 80062ac:	5499      	strb	r1, [r3, r2]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2247      	movs	r2, #71	@ 0x47
 80062b2:	2101      	movs	r1, #1
 80062b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	223d      	movs	r2, #61	@ 0x3d
 80062ba:	2101      	movs	r1, #1
 80062bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	0018      	movs	r0, r3
 80062c2:	46bd      	mov	sp, r7
 80062c4:	b002      	add	sp, #8
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062d4:	2317      	movs	r3, #23
 80062d6:	18fb      	adds	r3, r7, r3
 80062d8:	2200      	movs	r2, #0
 80062da:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	223c      	movs	r2, #60	@ 0x3c
 80062e0:	5c9b      	ldrb	r3, [r3, r2]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <HAL_TIM_PWM_ConfigChannel+0x22>
 80062e6:	2302      	movs	r3, #2
 80062e8:	e0e5      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	223c      	movs	r2, #60	@ 0x3c
 80062ee:	2101      	movs	r1, #1
 80062f0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b14      	cmp	r3, #20
 80062f6:	d900      	bls.n	80062fa <HAL_TIM_PWM_ConfigChannel+0x32>
 80062f8:	e0d1      	b.n	800649e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	009a      	lsls	r2, r3, #2
 80062fe:	4b70      	ldr	r3, [pc, #448]	@ (80064c0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006300:	18d3      	adds	r3, r2, r3
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	0011      	movs	r1, r2
 800630e:	0018      	movs	r0, r3
 8006310:	f000 f95e 	bl	80065d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2108      	movs	r1, #8
 8006320:	430a      	orrs	r2, r1
 8006322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699a      	ldr	r2, [r3, #24]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2104      	movs	r1, #4
 8006330:	438a      	bics	r2, r1
 8006332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6999      	ldr	r1, [r3, #24]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	691a      	ldr	r2, [r3, #16]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	619a      	str	r2, [r3, #24]
      break;
 8006346:	e0af      	b.n	80064a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	0011      	movs	r1, r2
 8006350:	0018      	movs	r0, r3
 8006352:	f000 f9bd 	bl	80066d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	699a      	ldr	r2, [r3, #24]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2180      	movs	r1, #128	@ 0x80
 8006362:	0109      	lsls	r1, r1, #4
 8006364:	430a      	orrs	r2, r1
 8006366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4954      	ldr	r1, [pc, #336]	@ (80064c4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006374:	400a      	ands	r2, r1
 8006376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6999      	ldr	r1, [r3, #24]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	021a      	lsls	r2, r3, #8
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	619a      	str	r2, [r3, #24]
      break;
 800638c:	e08c      	b.n	80064a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	0011      	movs	r1, r2
 8006396:	0018      	movs	r0, r3
 8006398:	f000 fa18 	bl	80067cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	69da      	ldr	r2, [r3, #28]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2108      	movs	r1, #8
 80063a8:	430a      	orrs	r2, r1
 80063aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	69da      	ldr	r2, [r3, #28]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2104      	movs	r1, #4
 80063b8:	438a      	bics	r2, r1
 80063ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	69d9      	ldr	r1, [r3, #28]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	61da      	str	r2, [r3, #28]
      break;
 80063ce:	e06b      	b.n	80064a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	0011      	movs	r1, r2
 80063d8:	0018      	movs	r0, r3
 80063da:	f000 fa79 	bl	80068d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69da      	ldr	r2, [r3, #28]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2180      	movs	r1, #128	@ 0x80
 80063ea:	0109      	lsls	r1, r1, #4
 80063ec:	430a      	orrs	r2, r1
 80063ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	69da      	ldr	r2, [r3, #28]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4932      	ldr	r1, [pc, #200]	@ (80064c4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80063fc:	400a      	ands	r2, r1
 80063fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69d9      	ldr	r1, [r3, #28]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	021a      	lsls	r2, r3, #8
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	61da      	str	r2, [r3, #28]
      break;
 8006414:	e048      	b.n	80064a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	0011      	movs	r1, r2
 800641e:	0018      	movs	r0, r3
 8006420:	f000 faba 	bl	8006998 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2108      	movs	r1, #8
 8006430:	430a      	orrs	r2, r1
 8006432:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2104      	movs	r1, #4
 8006440:	438a      	bics	r2, r1
 8006442:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006456:	e027      	b.n	80064a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	0011      	movs	r1, r2
 8006460:	0018      	movs	r0, r3
 8006462:	f000 faf3 	bl	8006a4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2180      	movs	r1, #128	@ 0x80
 8006472:	0109      	lsls	r1, r1, #4
 8006474:	430a      	orrs	r2, r1
 8006476:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4910      	ldr	r1, [pc, #64]	@ (80064c4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006484:	400a      	ands	r2, r1
 8006486:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	021a      	lsls	r2, r3, #8
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800649c:	e004      	b.n	80064a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800649e:	2317      	movs	r3, #23
 80064a0:	18fb      	adds	r3, r7, r3
 80064a2:	2201      	movs	r2, #1
 80064a4:	701a      	strb	r2, [r3, #0]
      break;
 80064a6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	223c      	movs	r2, #60	@ 0x3c
 80064ac:	2100      	movs	r1, #0
 80064ae:	5499      	strb	r1, [r3, r2]

  return status;
 80064b0:	2317      	movs	r3, #23
 80064b2:	18fb      	adds	r3, r7, r3
 80064b4:	781b      	ldrb	r3, [r3, #0]
}
 80064b6:	0018      	movs	r0, r3
 80064b8:	46bd      	mov	sp, r7
 80064ba:	b006      	add	sp, #24
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	46c0      	nop			@ (mov r8, r8)
 80064c0:	08008808 	.word	0x08008808
 80064c4:	fffffbff 	.word	0xfffffbff

080064c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a37      	ldr	r2, [pc, #220]	@ (80065b8 <TIM_Base_SetConfig+0xf0>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d008      	beq.n	80064f2 <TIM_Base_SetConfig+0x2a>
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	2380      	movs	r3, #128	@ 0x80
 80064e4:	05db      	lsls	r3, r3, #23
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d003      	beq.n	80064f2 <TIM_Base_SetConfig+0x2a>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a33      	ldr	r2, [pc, #204]	@ (80065bc <TIM_Base_SetConfig+0xf4>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d108      	bne.n	8006504 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2270      	movs	r2, #112	@ 0x70
 80064f6:	4393      	bics	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	4313      	orrs	r3, r2
 8006502:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a2c      	ldr	r2, [pc, #176]	@ (80065b8 <TIM_Base_SetConfig+0xf0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d014      	beq.n	8006536 <TIM_Base_SetConfig+0x6e>
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	2380      	movs	r3, #128	@ 0x80
 8006510:	05db      	lsls	r3, r3, #23
 8006512:	429a      	cmp	r2, r3
 8006514:	d00f      	beq.n	8006536 <TIM_Base_SetConfig+0x6e>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a28      	ldr	r2, [pc, #160]	@ (80065bc <TIM_Base_SetConfig+0xf4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00b      	beq.n	8006536 <TIM_Base_SetConfig+0x6e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a27      	ldr	r2, [pc, #156]	@ (80065c0 <TIM_Base_SetConfig+0xf8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d007      	beq.n	8006536 <TIM_Base_SetConfig+0x6e>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a26      	ldr	r2, [pc, #152]	@ (80065c4 <TIM_Base_SetConfig+0xfc>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d003      	beq.n	8006536 <TIM_Base_SetConfig+0x6e>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a25      	ldr	r2, [pc, #148]	@ (80065c8 <TIM_Base_SetConfig+0x100>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d108      	bne.n	8006548 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4a24      	ldr	r2, [pc, #144]	@ (80065cc <TIM_Base_SetConfig+0x104>)
 800653a:	4013      	ands	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2280      	movs	r2, #128	@ 0x80
 800654c:	4393      	bics	r3, r2
 800654e:	001a      	movs	r2, r3
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a11      	ldr	r2, [pc, #68]	@ (80065b8 <TIM_Base_SetConfig+0xf0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d007      	beq.n	8006586 <TIM_Base_SetConfig+0xbe>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a12      	ldr	r2, [pc, #72]	@ (80065c4 <TIM_Base_SetConfig+0xfc>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d003      	beq.n	8006586 <TIM_Base_SetConfig+0xbe>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a11      	ldr	r2, [pc, #68]	@ (80065c8 <TIM_Base_SetConfig+0x100>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d103      	bne.n	800658e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2201      	movs	r2, #1
 800659a:	4013      	ands	r3, r2
 800659c:	2b01      	cmp	r3, #1
 800659e:	d106      	bne.n	80065ae <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	2201      	movs	r2, #1
 80065a6:	4393      	bics	r3, r2
 80065a8:	001a      	movs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	611a      	str	r2, [r3, #16]
  }
}
 80065ae:	46c0      	nop			@ (mov r8, r8)
 80065b0:	46bd      	mov	sp, r7
 80065b2:	b004      	add	sp, #16
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	46c0      	nop			@ (mov r8, r8)
 80065b8:	40012c00 	.word	0x40012c00
 80065bc:	40000400 	.word	0x40000400
 80065c0:	40002000 	.word	0x40002000
 80065c4:	40014400 	.word	0x40014400
 80065c8:	40014800 	.word	0x40014800
 80065cc:	fffffcff 	.word	0xfffffcff

080065d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	2201      	movs	r2, #1
 80065e6:	4393      	bics	r3, r2
 80065e8:	001a      	movs	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4a2e      	ldr	r2, [pc, #184]	@ (80066b8 <TIM_OC1_SetConfig+0xe8>)
 80065fe:	4013      	ands	r3, r2
 8006600:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2203      	movs	r2, #3
 8006606:	4393      	bics	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4313      	orrs	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2202      	movs	r2, #2
 8006618:	4393      	bics	r3, r2
 800661a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	4313      	orrs	r3, r2
 8006624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a24      	ldr	r2, [pc, #144]	@ (80066bc <TIM_OC1_SetConfig+0xec>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d007      	beq.n	800663e <TIM_OC1_SetConfig+0x6e>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a23      	ldr	r2, [pc, #140]	@ (80066c0 <TIM_OC1_SetConfig+0xf0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d003      	beq.n	800663e <TIM_OC1_SetConfig+0x6e>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a22      	ldr	r2, [pc, #136]	@ (80066c4 <TIM_OC1_SetConfig+0xf4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d10c      	bne.n	8006658 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2208      	movs	r2, #8
 8006642:	4393      	bics	r3, r2
 8006644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2204      	movs	r2, #4
 8006654:	4393      	bics	r3, r2
 8006656:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a18      	ldr	r2, [pc, #96]	@ (80066bc <TIM_OC1_SetConfig+0xec>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d007      	beq.n	8006670 <TIM_OC1_SetConfig+0xa0>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a17      	ldr	r2, [pc, #92]	@ (80066c0 <TIM_OC1_SetConfig+0xf0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d003      	beq.n	8006670 <TIM_OC1_SetConfig+0xa0>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a16      	ldr	r2, [pc, #88]	@ (80066c4 <TIM_OC1_SetConfig+0xf4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d111      	bne.n	8006694 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	4a15      	ldr	r2, [pc, #84]	@ (80066c8 <TIM_OC1_SetConfig+0xf8>)
 8006674:	4013      	ands	r3, r2
 8006676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	4a14      	ldr	r2, [pc, #80]	@ (80066cc <TIM_OC1_SetConfig+0xfc>)
 800667c:	4013      	ands	r3, r2
 800667e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	4313      	orrs	r3, r2
 8006688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4313      	orrs	r3, r2
 8006692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	621a      	str	r2, [r3, #32]
}
 80066ae:	46c0      	nop			@ (mov r8, r8)
 80066b0:	46bd      	mov	sp, r7
 80066b2:	b006      	add	sp, #24
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	46c0      	nop			@ (mov r8, r8)
 80066b8:	fffeff8f 	.word	0xfffeff8f
 80066bc:	40012c00 	.word	0x40012c00
 80066c0:	40014400 	.word	0x40014400
 80066c4:	40014800 	.word	0x40014800
 80066c8:	fffffeff 	.word	0xfffffeff
 80066cc:	fffffdff 	.word	0xfffffdff

080066d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	2210      	movs	r2, #16
 80066e6:	4393      	bics	r3, r2
 80066e8:	001a      	movs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4a2c      	ldr	r2, [pc, #176]	@ (80067b0 <TIM_OC2_SetConfig+0xe0>)
 80066fe:	4013      	ands	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4a2b      	ldr	r2, [pc, #172]	@ (80067b4 <TIM_OC2_SetConfig+0xe4>)
 8006706:	4013      	ands	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	4313      	orrs	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2220      	movs	r2, #32
 800671a:	4393      	bics	r3, r2
 800671c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	4313      	orrs	r3, r2
 8006728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a22      	ldr	r2, [pc, #136]	@ (80067b8 <TIM_OC2_SetConfig+0xe8>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d10d      	bne.n	800674e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2280      	movs	r2, #128	@ 0x80
 8006736:	4393      	bics	r3, r2
 8006738:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2240      	movs	r2, #64	@ 0x40
 800674a:	4393      	bics	r3, r2
 800674c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a19      	ldr	r2, [pc, #100]	@ (80067b8 <TIM_OC2_SetConfig+0xe8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d007      	beq.n	8006766 <TIM_OC2_SetConfig+0x96>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a18      	ldr	r2, [pc, #96]	@ (80067bc <TIM_OC2_SetConfig+0xec>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d003      	beq.n	8006766 <TIM_OC2_SetConfig+0x96>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a17      	ldr	r2, [pc, #92]	@ (80067c0 <TIM_OC2_SetConfig+0xf0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d113      	bne.n	800678e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	4a16      	ldr	r2, [pc, #88]	@ (80067c4 <TIM_OC2_SetConfig+0xf4>)
 800676a:	4013      	ands	r3, r2
 800676c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	4a15      	ldr	r2, [pc, #84]	@ (80067c8 <TIM_OC2_SetConfig+0xf8>)
 8006772:	4013      	ands	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4313      	orrs	r3, r2
 8006780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	4313      	orrs	r3, r2
 800678c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	621a      	str	r2, [r3, #32]
}
 80067a8:	46c0      	nop			@ (mov r8, r8)
 80067aa:	46bd      	mov	sp, r7
 80067ac:	b006      	add	sp, #24
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	feff8fff 	.word	0xfeff8fff
 80067b4:	fffffcff 	.word	0xfffffcff
 80067b8:	40012c00 	.word	0x40012c00
 80067bc:	40014400 	.word	0x40014400
 80067c0:	40014800 	.word	0x40014800
 80067c4:	fffffbff 	.word	0xfffffbff
 80067c8:	fffff7ff 	.word	0xfffff7ff

080067cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	4a31      	ldr	r2, [pc, #196]	@ (80068a8 <TIM_OC3_SetConfig+0xdc>)
 80067e2:	401a      	ands	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4a2d      	ldr	r2, [pc, #180]	@ (80068ac <TIM_OC3_SetConfig+0xe0>)
 80067f8:	4013      	ands	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2203      	movs	r2, #3
 8006800:	4393      	bics	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	4a27      	ldr	r2, [pc, #156]	@ (80068b0 <TIM_OC3_SetConfig+0xe4>)
 8006812:	4013      	ands	r3, r2
 8006814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	021b      	lsls	r3, r3, #8
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a23      	ldr	r2, [pc, #140]	@ (80068b4 <TIM_OC3_SetConfig+0xe8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d10d      	bne.n	8006846 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	4a22      	ldr	r2, [pc, #136]	@ (80068b8 <TIM_OC3_SetConfig+0xec>)
 800682e:	4013      	ands	r3, r2
 8006830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	021b      	lsls	r3, r3, #8
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	4313      	orrs	r3, r2
 800683c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	4a1e      	ldr	r2, [pc, #120]	@ (80068bc <TIM_OC3_SetConfig+0xf0>)
 8006842:	4013      	ands	r3, r2
 8006844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a1a      	ldr	r2, [pc, #104]	@ (80068b4 <TIM_OC3_SetConfig+0xe8>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d007      	beq.n	800685e <TIM_OC3_SetConfig+0x92>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a1b      	ldr	r2, [pc, #108]	@ (80068c0 <TIM_OC3_SetConfig+0xf4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d003      	beq.n	800685e <TIM_OC3_SetConfig+0x92>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a1a      	ldr	r2, [pc, #104]	@ (80068c4 <TIM_OC3_SetConfig+0xf8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d113      	bne.n	8006886 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	4a19      	ldr	r2, [pc, #100]	@ (80068c8 <TIM_OC3_SetConfig+0xfc>)
 8006862:	4013      	ands	r3, r2
 8006864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	4a18      	ldr	r2, [pc, #96]	@ (80068cc <TIM_OC3_SetConfig+0x100>)
 800686a:	4013      	ands	r3, r2
 800686c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	011b      	lsls	r3, r3, #4
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	4313      	orrs	r3, r2
 8006878:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	621a      	str	r2, [r3, #32]
}
 80068a0:	46c0      	nop			@ (mov r8, r8)
 80068a2:	46bd      	mov	sp, r7
 80068a4:	b006      	add	sp, #24
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	fffffeff 	.word	0xfffffeff
 80068ac:	fffeff8f 	.word	0xfffeff8f
 80068b0:	fffffdff 	.word	0xfffffdff
 80068b4:	40012c00 	.word	0x40012c00
 80068b8:	fffff7ff 	.word	0xfffff7ff
 80068bc:	fffffbff 	.word	0xfffffbff
 80068c0:	40014400 	.word	0x40014400
 80068c4:	40014800 	.word	0x40014800
 80068c8:	ffffefff 	.word	0xffffefff
 80068cc:	ffffdfff 	.word	0xffffdfff

080068d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	4a24      	ldr	r2, [pc, #144]	@ (8006978 <TIM_OC4_SetConfig+0xa8>)
 80068e6:	401a      	ands	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4a20      	ldr	r2, [pc, #128]	@ (800697c <TIM_OC4_SetConfig+0xac>)
 80068fc:	4013      	ands	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4a1f      	ldr	r2, [pc, #124]	@ (8006980 <TIM_OC4_SetConfig+0xb0>)
 8006904:	4013      	ands	r3, r2
 8006906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	4313      	orrs	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	4a1b      	ldr	r2, [pc, #108]	@ (8006984 <TIM_OC4_SetConfig+0xb4>)
 8006918:	4013      	ands	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	031b      	lsls	r3, r3, #12
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a17      	ldr	r2, [pc, #92]	@ (8006988 <TIM_OC4_SetConfig+0xb8>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d007      	beq.n	8006940 <TIM_OC4_SetConfig+0x70>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a16      	ldr	r2, [pc, #88]	@ (800698c <TIM_OC4_SetConfig+0xbc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <TIM_OC4_SetConfig+0x70>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a15      	ldr	r2, [pc, #84]	@ (8006990 <TIM_OC4_SetConfig+0xc0>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d109      	bne.n	8006954 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	4a14      	ldr	r2, [pc, #80]	@ (8006994 <TIM_OC4_SetConfig+0xc4>)
 8006944:	4013      	ands	r3, r2
 8006946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	019b      	lsls	r3, r3, #6
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	621a      	str	r2, [r3, #32]
}
 800696e:	46c0      	nop			@ (mov r8, r8)
 8006970:	46bd      	mov	sp, r7
 8006972:	b006      	add	sp, #24
 8006974:	bd80      	pop	{r7, pc}
 8006976:	46c0      	nop			@ (mov r8, r8)
 8006978:	ffffefff 	.word	0xffffefff
 800697c:	feff8fff 	.word	0xfeff8fff
 8006980:	fffffcff 	.word	0xfffffcff
 8006984:	ffffdfff 	.word	0xffffdfff
 8006988:	40012c00 	.word	0x40012c00
 800698c:	40014400 	.word	0x40014400
 8006990:	40014800 	.word	0x40014800
 8006994:	ffffbfff 	.word	0xffffbfff

08006998 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	4a21      	ldr	r2, [pc, #132]	@ (8006a34 <TIM_OC5_SetConfig+0x9c>)
 80069ae:	401a      	ands	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4a1d      	ldr	r2, [pc, #116]	@ (8006a38 <TIM_OC5_SetConfig+0xa0>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	4a19      	ldr	r2, [pc, #100]	@ (8006a3c <TIM_OC5_SetConfig+0xa4>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	041b      	lsls	r3, r3, #16
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a15      	ldr	r2, [pc, #84]	@ (8006a40 <TIM_OC5_SetConfig+0xa8>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d007      	beq.n	80069fe <TIM_OC5_SetConfig+0x66>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a14      	ldr	r2, [pc, #80]	@ (8006a44 <TIM_OC5_SetConfig+0xac>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d003      	beq.n	80069fe <TIM_OC5_SetConfig+0x66>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a13      	ldr	r2, [pc, #76]	@ (8006a48 <TIM_OC5_SetConfig+0xb0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d109      	bne.n	8006a12 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	4a0c      	ldr	r2, [pc, #48]	@ (8006a34 <TIM_OC5_SetConfig+0x9c>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	021b      	lsls	r3, r3, #8
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	621a      	str	r2, [r3, #32]
}
 8006a2c:	46c0      	nop			@ (mov r8, r8)
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	b006      	add	sp, #24
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	fffeffff 	.word	0xfffeffff
 8006a38:	fffeff8f 	.word	0xfffeff8f
 8006a3c:	fffdffff 	.word	0xfffdffff
 8006a40:	40012c00 	.word	0x40012c00
 8006a44:	40014400 	.word	0x40014400
 8006a48:	40014800 	.word	0x40014800

08006a4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	4a22      	ldr	r2, [pc, #136]	@ (8006aec <TIM_OC6_SetConfig+0xa0>)
 8006a62:	401a      	ands	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4a1e      	ldr	r2, [pc, #120]	@ (8006af0 <TIM_OC6_SetConfig+0xa4>)
 8006a78:	4013      	ands	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	021b      	lsls	r3, r3, #8
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	4a1a      	ldr	r2, [pc, #104]	@ (8006af4 <TIM_OC6_SetConfig+0xa8>)
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	051b      	lsls	r3, r3, #20
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a16      	ldr	r2, [pc, #88]	@ (8006af8 <TIM_OC6_SetConfig+0xac>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d007      	beq.n	8006ab4 <TIM_OC6_SetConfig+0x68>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a15      	ldr	r2, [pc, #84]	@ (8006afc <TIM_OC6_SetConfig+0xb0>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_OC6_SetConfig+0x68>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a14      	ldr	r2, [pc, #80]	@ (8006b00 <TIM_OC6_SetConfig+0xb4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d109      	bne.n	8006ac8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	4a13      	ldr	r2, [pc, #76]	@ (8006b04 <TIM_OC6_SetConfig+0xb8>)
 8006ab8:	4013      	ands	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	029b      	lsls	r3, r3, #10
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	621a      	str	r2, [r3, #32]
}
 8006ae2:	46c0      	nop			@ (mov r8, r8)
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b006      	add	sp, #24
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	46c0      	nop			@ (mov r8, r8)
 8006aec:	ffefffff 	.word	0xffefffff
 8006af0:	feff8fff 	.word	0xfeff8fff
 8006af4:	ffdfffff 	.word	0xffdfffff
 8006af8:	40012c00 	.word	0x40012c00
 8006afc:	40014400 	.word	0x40014400
 8006b00:	40014800 	.word	0x40014800
 8006b04:	fffbffff 	.word	0xfffbffff

08006b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	223c      	movs	r2, #60	@ 0x3c
 8006b16:	5c9b      	ldrb	r3, [r3, r2]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e050      	b.n	8006bc2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	223c      	movs	r2, #60	@ 0x3c
 8006b24:	2101      	movs	r1, #1
 8006b26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	223d      	movs	r2, #61	@ 0x3d
 8006b2c:	2102      	movs	r1, #2
 8006b2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a21      	ldr	r2, [pc, #132]	@ (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d108      	bne.n	8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4a20      	ldr	r2, [pc, #128]	@ (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b4e:	4013      	ands	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2270      	movs	r2, #112	@ 0x70
 8006b60:	4393      	bics	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a14      	ldr	r2, [pc, #80]	@ (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00a      	beq.n	8006b96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	2380      	movs	r3, #128	@ 0x80
 8006b86:	05db      	lsls	r3, r3, #23
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d004      	beq.n	8006b96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a10      	ldr	r2, [pc, #64]	@ (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d10c      	bne.n	8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2280      	movs	r2, #128	@ 0x80
 8006b9a:	4393      	bics	r3, r2
 8006b9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	223d      	movs	r2, #61	@ 0x3d
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	223c      	movs	r2, #60	@ 0x3c
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	b004      	add	sp, #16
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	46c0      	nop			@ (mov r8, r8)
 8006bcc:	40012c00 	.word	0x40012c00
 8006bd0:	ff0fffff 	.word	0xff0fffff
 8006bd4:	40000400 	.word	0x40000400

08006bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e046      	b.n	8006c78 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2288      	movs	r2, #136	@ 0x88
 8006bee:	589b      	ldr	r3, [r3, r2]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d107      	bne.n	8006c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2284      	movs	r2, #132	@ 0x84
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	0018      	movs	r0, r3
 8006c00:	f7fa ffa8 	bl	8001b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2288      	movs	r2, #136	@ 0x88
 8006c08:	2124      	movs	r1, #36	@ 0x24
 8006c0a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2101      	movs	r1, #1
 8006c18:	438a      	bics	r2, r1
 8006c1a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	0018      	movs	r0, r3
 8006c28:	f000 f9aa 	bl	8006f80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f000 f828 	bl	8006c84 <UART_SetConfig>
 8006c34:	0003      	movs	r3, r0
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e01c      	b.n	8006c78 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	490d      	ldr	r1, [pc, #52]	@ (8006c80 <HAL_UART_Init+0xa8>)
 8006c4a:	400a      	ands	r2, r1
 8006c4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	212a      	movs	r1, #42	@ 0x2a
 8006c5a:	438a      	bics	r2, r1
 8006c5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2101      	movs	r1, #1
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	0018      	movs	r0, r3
 8006c72:	f000 fa39 	bl	80070e8 <UART_CheckIdleState>
 8006c76:	0003      	movs	r3, r0
}
 8006c78:	0018      	movs	r0, r3
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	b002      	add	sp, #8
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	ffffb7ff 	.word	0xffffb7ff

08006c84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c8c:	231e      	movs	r3, #30
 8006c8e:	18fb      	adds	r3, r7, r3
 8006c90:	2200      	movs	r2, #0
 8006c92:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4aab      	ldr	r2, [pc, #684]	@ (8006f60 <UART_SetConfig+0x2dc>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	0019      	movs	r1, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	4aa6      	ldr	r2, [pc, #664]	@ (8006f64 <UART_SetConfig+0x2e0>)
 8006cca:	4013      	ands	r3, r2
 8006ccc:	0019      	movs	r1, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	4a9d      	ldr	r2, [pc, #628]	@ (8006f68 <UART_SetConfig+0x2e4>)
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	0019      	movs	r1, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d06:	220f      	movs	r2, #15
 8006d08:	4393      	bics	r3, r2
 8006d0a:	0019      	movs	r1, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a93      	ldr	r2, [pc, #588]	@ (8006f6c <UART_SetConfig+0x2e8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d127      	bne.n	8006d72 <UART_SetConfig+0xee>
 8006d22:	4b93      	ldr	r3, [pc, #588]	@ (8006f70 <UART_SetConfig+0x2ec>)
 8006d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d26:	2203      	movs	r2, #3
 8006d28:	4013      	ands	r3, r2
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d017      	beq.n	8006d5e <UART_SetConfig+0xda>
 8006d2e:	d81b      	bhi.n	8006d68 <UART_SetConfig+0xe4>
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d00a      	beq.n	8006d4a <UART_SetConfig+0xc6>
 8006d34:	d818      	bhi.n	8006d68 <UART_SetConfig+0xe4>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <UART_SetConfig+0xbc>
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d00a      	beq.n	8006d54 <UART_SetConfig+0xd0>
 8006d3e:	e013      	b.n	8006d68 <UART_SetConfig+0xe4>
 8006d40:	231f      	movs	r3, #31
 8006d42:	18fb      	adds	r3, r7, r3
 8006d44:	2200      	movs	r2, #0
 8006d46:	701a      	strb	r2, [r3, #0]
 8006d48:	e021      	b.n	8006d8e <UART_SetConfig+0x10a>
 8006d4a:	231f      	movs	r3, #31
 8006d4c:	18fb      	adds	r3, r7, r3
 8006d4e:	2202      	movs	r2, #2
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	e01c      	b.n	8006d8e <UART_SetConfig+0x10a>
 8006d54:	231f      	movs	r3, #31
 8006d56:	18fb      	adds	r3, r7, r3
 8006d58:	2204      	movs	r2, #4
 8006d5a:	701a      	strb	r2, [r3, #0]
 8006d5c:	e017      	b.n	8006d8e <UART_SetConfig+0x10a>
 8006d5e:	231f      	movs	r3, #31
 8006d60:	18fb      	adds	r3, r7, r3
 8006d62:	2208      	movs	r2, #8
 8006d64:	701a      	strb	r2, [r3, #0]
 8006d66:	e012      	b.n	8006d8e <UART_SetConfig+0x10a>
 8006d68:	231f      	movs	r3, #31
 8006d6a:	18fb      	adds	r3, r7, r3
 8006d6c:	2210      	movs	r2, #16
 8006d6e:	701a      	strb	r2, [r3, #0]
 8006d70:	e00d      	b.n	8006d8e <UART_SetConfig+0x10a>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a7f      	ldr	r2, [pc, #508]	@ (8006f74 <UART_SetConfig+0x2f0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d104      	bne.n	8006d86 <UART_SetConfig+0x102>
 8006d7c:	231f      	movs	r3, #31
 8006d7e:	18fb      	adds	r3, r7, r3
 8006d80:	2200      	movs	r2, #0
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	e003      	b.n	8006d8e <UART_SetConfig+0x10a>
 8006d86:	231f      	movs	r3, #31
 8006d88:	18fb      	adds	r3, r7, r3
 8006d8a:	2210      	movs	r2, #16
 8006d8c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	69da      	ldr	r2, [r3, #28]
 8006d92:	2380      	movs	r3, #128	@ 0x80
 8006d94:	021b      	lsls	r3, r3, #8
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d000      	beq.n	8006d9c <UART_SetConfig+0x118>
 8006d9a:	e06f      	b.n	8006e7c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8006d9c:	231f      	movs	r3, #31
 8006d9e:	18fb      	adds	r3, r7, r3
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b08      	cmp	r3, #8
 8006da4:	d01f      	beq.n	8006de6 <UART_SetConfig+0x162>
 8006da6:	dc22      	bgt.n	8006dee <UART_SetConfig+0x16a>
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d017      	beq.n	8006ddc <UART_SetConfig+0x158>
 8006dac:	dc1f      	bgt.n	8006dee <UART_SetConfig+0x16a>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <UART_SetConfig+0x134>
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d005      	beq.n	8006dc2 <UART_SetConfig+0x13e>
 8006db6:	e01a      	b.n	8006dee <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db8:	f7ff f91a 	bl	8005ff0 <HAL_RCC_GetPCLK1Freq>
 8006dbc:	0003      	movs	r3, r0
 8006dbe:	61bb      	str	r3, [r7, #24]
        break;
 8006dc0:	e01c      	b.n	8006dfc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8006dc2:	4b6b      	ldr	r3, [pc, #428]	@ (8006f70 <UART_SetConfig+0x2ec>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	2207      	movs	r2, #7
 8006dca:	4013      	ands	r3, r2
 8006dcc:	3301      	adds	r3, #1
 8006dce:	0019      	movs	r1, r3
 8006dd0:	4869      	ldr	r0, [pc, #420]	@ (8006f78 <UART_SetConfig+0x2f4>)
 8006dd2:	f7f9 f9a3 	bl	800011c <__udivsi3>
 8006dd6:	0003      	movs	r3, r0
 8006dd8:	61bb      	str	r3, [r7, #24]
        break;
 8006dda:	e00f      	b.n	8006dfc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ddc:	f7ff f892 	bl	8005f04 <HAL_RCC_GetSysClockFreq>
 8006de0:	0003      	movs	r3, r0
 8006de2:	61bb      	str	r3, [r7, #24]
        break;
 8006de4:	e00a      	b.n	8006dfc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006de6:	2380      	movs	r3, #128	@ 0x80
 8006de8:	021b      	lsls	r3, r3, #8
 8006dea:	61bb      	str	r3, [r7, #24]
        break;
 8006dec:	e006      	b.n	8006dfc <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006df2:	231e      	movs	r3, #30
 8006df4:	18fb      	adds	r3, r7, r3
 8006df6:	2201      	movs	r2, #1
 8006df8:	701a      	strb	r2, [r3, #0]
        break;
 8006dfa:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d100      	bne.n	8006e04 <UART_SetConfig+0x180>
 8006e02:	e097      	b.n	8006f34 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e08:	4b5c      	ldr	r3, [pc, #368]	@ (8006f7c <UART_SetConfig+0x2f8>)
 8006e0a:	0052      	lsls	r2, r2, #1
 8006e0c:	5ad3      	ldrh	r3, [r2, r3]
 8006e0e:	0019      	movs	r1, r3
 8006e10:	69b8      	ldr	r0, [r7, #24]
 8006e12:	f7f9 f983 	bl	800011c <__udivsi3>
 8006e16:	0003      	movs	r3, r0
 8006e18:	005a      	lsls	r2, r3, #1
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	085b      	lsrs	r3, r3, #1
 8006e20:	18d2      	adds	r2, r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	0019      	movs	r1, r3
 8006e28:	0010      	movs	r0, r2
 8006e2a:	f7f9 f977 	bl	800011c <__udivsi3>
 8006e2e:	0003      	movs	r3, r0
 8006e30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	2b0f      	cmp	r3, #15
 8006e36:	d91c      	bls.n	8006e72 <UART_SetConfig+0x1ee>
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	2380      	movs	r3, #128	@ 0x80
 8006e3c:	025b      	lsls	r3, r3, #9
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d217      	bcs.n	8006e72 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	200e      	movs	r0, #14
 8006e48:	183b      	adds	r3, r7, r0
 8006e4a:	210f      	movs	r1, #15
 8006e4c:	438a      	bics	r2, r1
 8006e4e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	085b      	lsrs	r3, r3, #1
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	2207      	movs	r2, #7
 8006e58:	4013      	ands	r3, r2
 8006e5a:	b299      	uxth	r1, r3
 8006e5c:	183b      	adds	r3, r7, r0
 8006e5e:	183a      	adds	r2, r7, r0
 8006e60:	8812      	ldrh	r2, [r2, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	183a      	adds	r2, r7, r0
 8006e6c:	8812      	ldrh	r2, [r2, #0]
 8006e6e:	60da      	str	r2, [r3, #12]
 8006e70:	e060      	b.n	8006f34 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8006e72:	231e      	movs	r3, #30
 8006e74:	18fb      	adds	r3, r7, r3
 8006e76:	2201      	movs	r2, #1
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	e05b      	b.n	8006f34 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e7c:	231f      	movs	r3, #31
 8006e7e:	18fb      	adds	r3, r7, r3
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d01f      	beq.n	8006ec6 <UART_SetConfig+0x242>
 8006e86:	dc22      	bgt.n	8006ece <UART_SetConfig+0x24a>
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d017      	beq.n	8006ebc <UART_SetConfig+0x238>
 8006e8c:	dc1f      	bgt.n	8006ece <UART_SetConfig+0x24a>
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d002      	beq.n	8006e98 <UART_SetConfig+0x214>
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d005      	beq.n	8006ea2 <UART_SetConfig+0x21e>
 8006e96:	e01a      	b.n	8006ece <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e98:	f7ff f8aa 	bl	8005ff0 <HAL_RCC_GetPCLK1Freq>
 8006e9c:	0003      	movs	r3, r0
 8006e9e:	61bb      	str	r3, [r7, #24]
        break;
 8006ea0:	e01c      	b.n	8006edc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8006ea2:	4b33      	ldr	r3, [pc, #204]	@ (8006f70 <UART_SetConfig+0x2ec>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	2207      	movs	r2, #7
 8006eaa:	4013      	ands	r3, r2
 8006eac:	3301      	adds	r3, #1
 8006eae:	0019      	movs	r1, r3
 8006eb0:	4831      	ldr	r0, [pc, #196]	@ (8006f78 <UART_SetConfig+0x2f4>)
 8006eb2:	f7f9 f933 	bl	800011c <__udivsi3>
 8006eb6:	0003      	movs	r3, r0
 8006eb8:	61bb      	str	r3, [r7, #24]
        break;
 8006eba:	e00f      	b.n	8006edc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ebc:	f7ff f822 	bl	8005f04 <HAL_RCC_GetSysClockFreq>
 8006ec0:	0003      	movs	r3, r0
 8006ec2:	61bb      	str	r3, [r7, #24]
        break;
 8006ec4:	e00a      	b.n	8006edc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ec6:	2380      	movs	r3, #128	@ 0x80
 8006ec8:	021b      	lsls	r3, r3, #8
 8006eca:	61bb      	str	r3, [r7, #24]
        break;
 8006ecc:	e006      	b.n	8006edc <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ed2:	231e      	movs	r3, #30
 8006ed4:	18fb      	adds	r3, r7, r3
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	701a      	strb	r2, [r3, #0]
        break;
 8006eda:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d028      	beq.n	8006f34 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ee6:	4b25      	ldr	r3, [pc, #148]	@ (8006f7c <UART_SetConfig+0x2f8>)
 8006ee8:	0052      	lsls	r2, r2, #1
 8006eea:	5ad3      	ldrh	r3, [r2, r3]
 8006eec:	0019      	movs	r1, r3
 8006eee:	69b8      	ldr	r0, [r7, #24]
 8006ef0:	f7f9 f914 	bl	800011c <__udivsi3>
 8006ef4:	0003      	movs	r3, r0
 8006ef6:	001a      	movs	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	085b      	lsrs	r3, r3, #1
 8006efe:	18d2      	adds	r2, r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	0019      	movs	r1, r3
 8006f06:	0010      	movs	r0, r2
 8006f08:	f7f9 f908 	bl	800011c <__udivsi3>
 8006f0c:	0003      	movs	r3, r0
 8006f0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2b0f      	cmp	r3, #15
 8006f14:	d90a      	bls.n	8006f2c <UART_SetConfig+0x2a8>
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	2380      	movs	r3, #128	@ 0x80
 8006f1a:	025b      	lsls	r3, r3, #9
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d205      	bcs.n	8006f2c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60da      	str	r2, [r3, #12]
 8006f2a:	e003      	b.n	8006f34 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8006f2c:	231e      	movs	r3, #30
 8006f2e:	18fb      	adds	r3, r7, r3
 8006f30:	2201      	movs	r2, #1
 8006f32:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	226a      	movs	r2, #106	@ 0x6a
 8006f38:	2101      	movs	r1, #1
 8006f3a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2268      	movs	r2, #104	@ 0x68
 8006f40:	2101      	movs	r1, #1
 8006f42:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f50:	231e      	movs	r3, #30
 8006f52:	18fb      	adds	r3, r7, r3
 8006f54:	781b      	ldrb	r3, [r3, #0]
}
 8006f56:	0018      	movs	r0, r3
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	b008      	add	sp, #32
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	46c0      	nop			@ (mov r8, r8)
 8006f60:	cfff69f3 	.word	0xcfff69f3
 8006f64:	ffffcfff 	.word	0xffffcfff
 8006f68:	11fff4ff 	.word	0x11fff4ff
 8006f6c:	40013800 	.word	0x40013800
 8006f70:	40021000 	.word	0x40021000
 8006f74:	40004400 	.word	0x40004400
 8006f78:	02dc6c00 	.word	0x02dc6c00
 8006f7c:	0800885c 	.word	0x0800885c

08006f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8c:	2208      	movs	r2, #8
 8006f8e:	4013      	ands	r3, r2
 8006f90:	d00b      	beq.n	8006faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	4a4a      	ldr	r2, [pc, #296]	@ (80070c4 <UART_AdvFeatureConfig+0x144>)
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	0019      	movs	r1, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fae:	2201      	movs	r2, #1
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	d00b      	beq.n	8006fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	4a43      	ldr	r2, [pc, #268]	@ (80070c8 <UART_AdvFeatureConfig+0x148>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	0019      	movs	r1, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	d00b      	beq.n	8006fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	4a3b      	ldr	r2, [pc, #236]	@ (80070cc <UART_AdvFeatureConfig+0x14c>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	0019      	movs	r1, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	d00b      	beq.n	8007010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	4a34      	ldr	r2, [pc, #208]	@ (80070d0 <UART_AdvFeatureConfig+0x150>)
 8007000:	4013      	ands	r3, r2
 8007002:	0019      	movs	r1, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	430a      	orrs	r2, r1
 800700e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	2210      	movs	r2, #16
 8007016:	4013      	ands	r3, r2
 8007018:	d00b      	beq.n	8007032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	4a2c      	ldr	r2, [pc, #176]	@ (80070d4 <UART_AdvFeatureConfig+0x154>)
 8007022:	4013      	ands	r3, r2
 8007024:	0019      	movs	r1, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007036:	2220      	movs	r2, #32
 8007038:	4013      	ands	r3, r2
 800703a:	d00b      	beq.n	8007054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	4a25      	ldr	r2, [pc, #148]	@ (80070d8 <UART_AdvFeatureConfig+0x158>)
 8007044:	4013      	ands	r3, r2
 8007046:	0019      	movs	r1, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007058:	2240      	movs	r2, #64	@ 0x40
 800705a:	4013      	ands	r3, r2
 800705c:	d01d      	beq.n	800709a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	4a1d      	ldr	r2, [pc, #116]	@ (80070dc <UART_AdvFeatureConfig+0x15c>)
 8007066:	4013      	ands	r3, r2
 8007068:	0019      	movs	r1, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800707a:	2380      	movs	r3, #128	@ 0x80
 800707c:	035b      	lsls	r3, r3, #13
 800707e:	429a      	cmp	r2, r3
 8007080:	d10b      	bne.n	800709a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	4a15      	ldr	r2, [pc, #84]	@ (80070e0 <UART_AdvFeatureConfig+0x160>)
 800708a:	4013      	ands	r3, r2
 800708c:	0019      	movs	r1, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709e:	2280      	movs	r2, #128	@ 0x80
 80070a0:	4013      	ands	r3, r2
 80070a2:	d00b      	beq.n	80070bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	4a0e      	ldr	r2, [pc, #56]	@ (80070e4 <UART_AdvFeatureConfig+0x164>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	0019      	movs	r1, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	605a      	str	r2, [r3, #4]
  }
}
 80070bc:	46c0      	nop			@ (mov r8, r8)
 80070be:	46bd      	mov	sp, r7
 80070c0:	b002      	add	sp, #8
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	ffff7fff 	.word	0xffff7fff
 80070c8:	fffdffff 	.word	0xfffdffff
 80070cc:	fffeffff 	.word	0xfffeffff
 80070d0:	fffbffff 	.word	0xfffbffff
 80070d4:	ffffefff 	.word	0xffffefff
 80070d8:	ffffdfff 	.word	0xffffdfff
 80070dc:	ffefffff 	.word	0xffefffff
 80070e0:	ff9fffff 	.word	0xff9fffff
 80070e4:	fff7ffff 	.word	0xfff7ffff

080070e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b092      	sub	sp, #72	@ 0x48
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2290      	movs	r2, #144	@ 0x90
 80070f4:	2100      	movs	r1, #0
 80070f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070f8:	f7fa fe12 	bl	8001d20 <HAL_GetTick>
 80070fc:	0003      	movs	r3, r0
 80070fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2208      	movs	r2, #8
 8007108:	4013      	ands	r3, r2
 800710a:	2b08      	cmp	r3, #8
 800710c:	d12d      	bne.n	800716a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800710e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007110:	2280      	movs	r2, #128	@ 0x80
 8007112:	0391      	lsls	r1, r2, #14
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4a47      	ldr	r2, [pc, #284]	@ (8007234 <UART_CheckIdleState+0x14c>)
 8007118:	9200      	str	r2, [sp, #0]
 800711a:	2200      	movs	r2, #0
 800711c:	f000 f88e 	bl	800723c <UART_WaitOnFlagUntilTimeout>
 8007120:	1e03      	subs	r3, r0, #0
 8007122:	d022      	beq.n	800716a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007124:	f3ef 8310 	mrs	r3, PRIMASK
 8007128:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800712c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800712e:	2301      	movs	r3, #1
 8007130:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007134:	f383 8810 	msr	PRIMASK, r3
}
 8007138:	46c0      	nop			@ (mov r8, r8)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2180      	movs	r1, #128	@ 0x80
 8007146:	438a      	bics	r2, r1
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800714e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007150:	f383 8810 	msr	PRIMASK, r3
}
 8007154:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2288      	movs	r2, #136	@ 0x88
 800715a:	2120      	movs	r1, #32
 800715c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2284      	movs	r2, #132	@ 0x84
 8007162:	2100      	movs	r1, #0
 8007164:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e060      	b.n	800722c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2204      	movs	r2, #4
 8007172:	4013      	ands	r3, r2
 8007174:	2b04      	cmp	r3, #4
 8007176:	d146      	bne.n	8007206 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800717a:	2280      	movs	r2, #128	@ 0x80
 800717c:	03d1      	lsls	r1, r2, #15
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4a2c      	ldr	r2, [pc, #176]	@ (8007234 <UART_CheckIdleState+0x14c>)
 8007182:	9200      	str	r2, [sp, #0]
 8007184:	2200      	movs	r2, #0
 8007186:	f000 f859 	bl	800723c <UART_WaitOnFlagUntilTimeout>
 800718a:	1e03      	subs	r3, r0, #0
 800718c:	d03b      	beq.n	8007206 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800718e:	f3ef 8310 	mrs	r3, PRIMASK
 8007192:	60fb      	str	r3, [r7, #12]
  return(result);
 8007194:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007196:	637b      	str	r3, [r7, #52]	@ 0x34
 8007198:	2301      	movs	r3, #1
 800719a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f383 8810 	msr	PRIMASK, r3
}
 80071a2:	46c0      	nop			@ (mov r8, r8)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4922      	ldr	r1, [pc, #136]	@ (8007238 <UART_CheckIdleState+0x150>)
 80071b0:	400a      	ands	r2, r1
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f383 8810 	msr	PRIMASK, r3
}
 80071be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80071c0:	f3ef 8310 	mrs	r3, PRIMASK
 80071c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80071c6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80071ca:	2301      	movs	r3, #1
 80071cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	f383 8810 	msr	PRIMASK, r3
}
 80071d4:	46c0      	nop			@ (mov r8, r8)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2101      	movs	r1, #1
 80071e2:	438a      	bics	r2, r1
 80071e4:	609a      	str	r2, [r3, #8]
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	f383 8810 	msr	PRIMASK, r3
}
 80071f0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	228c      	movs	r2, #140	@ 0x8c
 80071f6:	2120      	movs	r1, #32
 80071f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2284      	movs	r2, #132	@ 0x84
 80071fe:	2100      	movs	r1, #0
 8007200:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e012      	b.n	800722c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2288      	movs	r2, #136	@ 0x88
 800720a:	2120      	movs	r1, #32
 800720c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	228c      	movs	r2, #140	@ 0x8c
 8007212:	2120      	movs	r1, #32
 8007214:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2284      	movs	r2, #132	@ 0x84
 8007226:	2100      	movs	r1, #0
 8007228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	0018      	movs	r0, r3
 800722e:	46bd      	mov	sp, r7
 8007230:	b010      	add	sp, #64	@ 0x40
 8007232:	bd80      	pop	{r7, pc}
 8007234:	01ffffff 	.word	0x01ffffff
 8007238:	fffffedf 	.word	0xfffffedf

0800723c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	1dfb      	adds	r3, r7, #7
 800724a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800724c:	e051      	b.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	3301      	adds	r3, #1
 8007252:	d04e      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007254:	f7fa fd64 	bl	8001d20 <HAL_GetTick>
 8007258:	0002      	movs	r2, r0
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	429a      	cmp	r2, r3
 8007262:	d302      	bcc.n	800726a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e051      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2204      	movs	r2, #4
 8007276:	4013      	ands	r3, r2
 8007278:	d03b      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2b80      	cmp	r3, #128	@ 0x80
 800727e:	d038      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b40      	cmp	r3, #64	@ 0x40
 8007284:	d035      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	2208      	movs	r2, #8
 800728e:	4013      	ands	r3, r2
 8007290:	2b08      	cmp	r3, #8
 8007292:	d111      	bne.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2208      	movs	r2, #8
 800729a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	0018      	movs	r0, r3
 80072a0:	f000 f83c 	bl	800731c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2290      	movs	r2, #144	@ 0x90
 80072a8:	2108      	movs	r1, #8
 80072aa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2284      	movs	r2, #132	@ 0x84
 80072b0:	2100      	movs	r1, #0
 80072b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e02c      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69da      	ldr	r2, [r3, #28]
 80072be:	2380      	movs	r3, #128	@ 0x80
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	401a      	ands	r2, r3
 80072c4:	2380      	movs	r3, #128	@ 0x80
 80072c6:	011b      	lsls	r3, r3, #4
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d112      	bne.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2280      	movs	r2, #128	@ 0x80
 80072d2:	0112      	lsls	r2, r2, #4
 80072d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	0018      	movs	r0, r3
 80072da:	f000 f81f 	bl	800731c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2290      	movs	r2, #144	@ 0x90
 80072e2:	2120      	movs	r1, #32
 80072e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2284      	movs	r2, #132	@ 0x84
 80072ea:	2100      	movs	r1, #0
 80072ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e00f      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	4013      	ands	r3, r2
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	425a      	negs	r2, r3
 8007302:	4153      	adcs	r3, r2
 8007304:	b2db      	uxtb	r3, r3
 8007306:	001a      	movs	r2, r3
 8007308:	1dfb      	adds	r3, r7, #7
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	429a      	cmp	r2, r3
 800730e:	d09e      	beq.n	800724e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	0018      	movs	r0, r3
 8007314:	46bd      	mov	sp, r7
 8007316:	b004      	add	sp, #16
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b08e      	sub	sp, #56	@ 0x38
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007324:	f3ef 8310 	mrs	r3, PRIMASK
 8007328:	617b      	str	r3, [r7, #20]
  return(result);
 800732a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800732c:	637b      	str	r3, [r7, #52]	@ 0x34
 800732e:	2301      	movs	r3, #1
 8007330:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	f383 8810 	msr	PRIMASK, r3
}
 8007338:	46c0      	nop			@ (mov r8, r8)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4926      	ldr	r1, [pc, #152]	@ (80073e0 <UART_EndRxTransfer+0xc4>)
 8007346:	400a      	ands	r2, r1
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800734c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	f383 8810 	msr	PRIMASK, r3
}
 8007354:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007356:	f3ef 8310 	mrs	r3, PRIMASK
 800735a:	623b      	str	r3, [r7, #32]
  return(result);
 800735c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800735e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007360:	2301      	movs	r3, #1
 8007362:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007366:	f383 8810 	msr	PRIMASK, r3
}
 800736a:	46c0      	nop			@ (mov r8, r8)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	491b      	ldr	r1, [pc, #108]	@ (80073e4 <UART_EndRxTransfer+0xc8>)
 8007378:	400a      	ands	r2, r1
 800737a:	609a      	str	r2, [r3, #8]
 800737c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007382:	f383 8810 	msr	PRIMASK, r3
}
 8007386:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800738c:	2b01      	cmp	r3, #1
 800738e:	d118      	bne.n	80073c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007390:	f3ef 8310 	mrs	r3, PRIMASK
 8007394:	60bb      	str	r3, [r7, #8]
  return(result);
 8007396:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007398:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800739a:	2301      	movs	r3, #1
 800739c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f383 8810 	msr	PRIMASK, r3
}
 80073a4:	46c0      	nop			@ (mov r8, r8)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2110      	movs	r1, #16
 80073b2:	438a      	bics	r2, r1
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f383 8810 	msr	PRIMASK, r3
}
 80073c0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	228c      	movs	r2, #140	@ 0x8c
 80073c6:	2120      	movs	r1, #32
 80073c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073d6:	46c0      	nop			@ (mov r8, r8)
 80073d8:	46bd      	mov	sp, r7
 80073da:	b00e      	add	sp, #56	@ 0x38
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	46c0      	nop			@ (mov r8, r8)
 80073e0:	fffffedf 	.word	0xfffffedf
 80073e4:	effffffe 	.word	0xeffffffe

080073e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2284      	movs	r2, #132	@ 0x84
 80073f4:	5c9b      	ldrb	r3, [r3, r2]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d101      	bne.n	80073fe <HAL_UARTEx_DisableFifoMode+0x16>
 80073fa:	2302      	movs	r3, #2
 80073fc:	e027      	b.n	800744e <HAL_UARTEx_DisableFifoMode+0x66>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2284      	movs	r2, #132	@ 0x84
 8007402:	2101      	movs	r1, #1
 8007404:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2288      	movs	r2, #136	@ 0x88
 800740a:	2124      	movs	r1, #36	@ 0x24
 800740c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2101      	movs	r1, #1
 8007422:	438a      	bics	r2, r1
 8007424:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4a0b      	ldr	r2, [pc, #44]	@ (8007458 <HAL_UARTEx_DisableFifoMode+0x70>)
 800742a:	4013      	ands	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2288      	movs	r2, #136	@ 0x88
 8007440:	2120      	movs	r1, #32
 8007442:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2284      	movs	r2, #132	@ 0x84
 8007448:	2100      	movs	r1, #0
 800744a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	0018      	movs	r0, r3
 8007450:	46bd      	mov	sp, r7
 8007452:	b004      	add	sp, #16
 8007454:	bd80      	pop	{r7, pc}
 8007456:	46c0      	nop			@ (mov r8, r8)
 8007458:	dfffffff 	.word	0xdfffffff

0800745c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2284      	movs	r2, #132	@ 0x84
 800746a:	5c9b      	ldrb	r3, [r3, r2]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007470:	2302      	movs	r3, #2
 8007472:	e02e      	b.n	80074d2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2284      	movs	r2, #132	@ 0x84
 8007478:	2101      	movs	r1, #1
 800747a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2288      	movs	r2, #136	@ 0x88
 8007480:	2124      	movs	r1, #36	@ 0x24
 8007482:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2101      	movs	r1, #1
 8007498:	438a      	bics	r2, r1
 800749a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	08d9      	lsrs	r1, r3, #3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	0018      	movs	r0, r3
 80074b4:	f000 f854 	bl	8007560 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2288      	movs	r2, #136	@ 0x88
 80074c4:	2120      	movs	r1, #32
 80074c6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2284      	movs	r2, #132	@ 0x84
 80074cc:	2100      	movs	r1, #0
 80074ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	0018      	movs	r0, r3
 80074d4:	46bd      	mov	sp, r7
 80074d6:	b004      	add	sp, #16
 80074d8:	bd80      	pop	{r7, pc}
	...

080074dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2284      	movs	r2, #132	@ 0x84
 80074ea:	5c9b      	ldrb	r3, [r3, r2]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074f0:	2302      	movs	r3, #2
 80074f2:	e02f      	b.n	8007554 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2284      	movs	r2, #132	@ 0x84
 80074f8:	2101      	movs	r1, #1
 80074fa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2288      	movs	r2, #136	@ 0x88
 8007500:	2124      	movs	r1, #36	@ 0x24
 8007502:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2101      	movs	r1, #1
 8007518:	438a      	bics	r2, r1
 800751a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	4a0e      	ldr	r2, [pc, #56]	@ (800755c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007524:	4013      	ands	r3, r2
 8007526:	0019      	movs	r1, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	0018      	movs	r0, r3
 8007536:	f000 f813 	bl	8007560 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2288      	movs	r2, #136	@ 0x88
 8007546:	2120      	movs	r1, #32
 8007548:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2284      	movs	r2, #132	@ 0x84
 800754e:	2100      	movs	r1, #0
 8007550:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	0018      	movs	r0, r3
 8007556:	46bd      	mov	sp, r7
 8007558:	b004      	add	sp, #16
 800755a:	bd80      	pop	{r7, pc}
 800755c:	f1ffffff 	.word	0xf1ffffff

08007560 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800756c:	2b00      	cmp	r3, #0
 800756e:	d108      	bne.n	8007582 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	226a      	movs	r2, #106	@ 0x6a
 8007574:	2101      	movs	r1, #1
 8007576:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2268      	movs	r2, #104	@ 0x68
 800757c:	2101      	movs	r1, #1
 800757e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007580:	e043      	b.n	800760a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007582:	260f      	movs	r6, #15
 8007584:	19bb      	adds	r3, r7, r6
 8007586:	2208      	movs	r2, #8
 8007588:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800758a:	200e      	movs	r0, #14
 800758c:	183b      	adds	r3, r7, r0
 800758e:	2208      	movs	r2, #8
 8007590:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	0e5b      	lsrs	r3, r3, #25
 800759a:	b2da      	uxtb	r2, r3
 800759c:	240d      	movs	r4, #13
 800759e:	193b      	adds	r3, r7, r4
 80075a0:	2107      	movs	r1, #7
 80075a2:	400a      	ands	r2, r1
 80075a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	0f5b      	lsrs	r3, r3, #29
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	250c      	movs	r5, #12
 80075b2:	197b      	adds	r3, r7, r5
 80075b4:	2107      	movs	r1, #7
 80075b6:	400a      	ands	r2, r1
 80075b8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075ba:	183b      	adds	r3, r7, r0
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	197a      	adds	r2, r7, r5
 80075c0:	7812      	ldrb	r2, [r2, #0]
 80075c2:	4914      	ldr	r1, [pc, #80]	@ (8007614 <UARTEx_SetNbDataToProcess+0xb4>)
 80075c4:	5c8a      	ldrb	r2, [r1, r2]
 80075c6:	435a      	muls	r2, r3
 80075c8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80075ca:	197b      	adds	r3, r7, r5
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	4a12      	ldr	r2, [pc, #72]	@ (8007618 <UARTEx_SetNbDataToProcess+0xb8>)
 80075d0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075d2:	0019      	movs	r1, r3
 80075d4:	f7f8 fe2c 	bl	8000230 <__divsi3>
 80075d8:	0003      	movs	r3, r0
 80075da:	b299      	uxth	r1, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	226a      	movs	r2, #106	@ 0x6a
 80075e0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075e2:	19bb      	adds	r3, r7, r6
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	193a      	adds	r2, r7, r4
 80075e8:	7812      	ldrb	r2, [r2, #0]
 80075ea:	490a      	ldr	r1, [pc, #40]	@ (8007614 <UARTEx_SetNbDataToProcess+0xb4>)
 80075ec:	5c8a      	ldrb	r2, [r1, r2]
 80075ee:	435a      	muls	r2, r3
 80075f0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80075f2:	193b      	adds	r3, r7, r4
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	4a08      	ldr	r2, [pc, #32]	@ (8007618 <UARTEx_SetNbDataToProcess+0xb8>)
 80075f8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075fa:	0019      	movs	r1, r3
 80075fc:	f7f8 fe18 	bl	8000230 <__divsi3>
 8007600:	0003      	movs	r3, r0
 8007602:	b299      	uxth	r1, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2268      	movs	r2, #104	@ 0x68
 8007608:	5299      	strh	r1, [r3, r2]
}
 800760a:	46c0      	nop			@ (mov r8, r8)
 800760c:	46bd      	mov	sp, r7
 800760e:	b005      	add	sp, #20
 8007610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007612:	46c0      	nop			@ (mov r8, r8)
 8007614:	08008874 	.word	0x08008874
 8007618:	0800887c 	.word	0x0800887c

0800761c <sniprintf>:
 800761c:	b40c      	push	{r2, r3}
 800761e:	b530      	push	{r4, r5, lr}
 8007620:	4b17      	ldr	r3, [pc, #92]	@ (8007680 <sniprintf+0x64>)
 8007622:	000c      	movs	r4, r1
 8007624:	681d      	ldr	r5, [r3, #0]
 8007626:	b09d      	sub	sp, #116	@ 0x74
 8007628:	2900      	cmp	r1, #0
 800762a:	da08      	bge.n	800763e <sniprintf+0x22>
 800762c:	238b      	movs	r3, #139	@ 0x8b
 800762e:	2001      	movs	r0, #1
 8007630:	602b      	str	r3, [r5, #0]
 8007632:	4240      	negs	r0, r0
 8007634:	b01d      	add	sp, #116	@ 0x74
 8007636:	bc30      	pop	{r4, r5}
 8007638:	bc08      	pop	{r3}
 800763a:	b002      	add	sp, #8
 800763c:	4718      	bx	r3
 800763e:	2382      	movs	r3, #130	@ 0x82
 8007640:	466a      	mov	r2, sp
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	8293      	strh	r3, [r2, #20]
 8007646:	2300      	movs	r3, #0
 8007648:	9002      	str	r0, [sp, #8]
 800764a:	9006      	str	r0, [sp, #24]
 800764c:	4299      	cmp	r1, r3
 800764e:	d000      	beq.n	8007652 <sniprintf+0x36>
 8007650:	1e4b      	subs	r3, r1, #1
 8007652:	9304      	str	r3, [sp, #16]
 8007654:	9307      	str	r3, [sp, #28]
 8007656:	2301      	movs	r3, #1
 8007658:	466a      	mov	r2, sp
 800765a:	425b      	negs	r3, r3
 800765c:	82d3      	strh	r3, [r2, #22]
 800765e:	0028      	movs	r0, r5
 8007660:	ab21      	add	r3, sp, #132	@ 0x84
 8007662:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007664:	a902      	add	r1, sp, #8
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	f000 f8aa 	bl	80077c0 <_svfiprintf_r>
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	da01      	bge.n	8007674 <sniprintf+0x58>
 8007670:	238b      	movs	r3, #139	@ 0x8b
 8007672:	602b      	str	r3, [r5, #0]
 8007674:	2c00      	cmp	r4, #0
 8007676:	d0dd      	beq.n	8007634 <sniprintf+0x18>
 8007678:	2200      	movs	r2, #0
 800767a:	9b02      	ldr	r3, [sp, #8]
 800767c:	701a      	strb	r2, [r3, #0]
 800767e:	e7d9      	b.n	8007634 <sniprintf+0x18>
 8007680:	20000040 	.word	0x20000040

08007684 <memset>:
 8007684:	0003      	movs	r3, r0
 8007686:	1882      	adds	r2, r0, r2
 8007688:	4293      	cmp	r3, r2
 800768a:	d100      	bne.n	800768e <memset+0xa>
 800768c:	4770      	bx	lr
 800768e:	7019      	strb	r1, [r3, #0]
 8007690:	3301      	adds	r3, #1
 8007692:	e7f9      	b.n	8007688 <memset+0x4>

08007694 <__errno>:
 8007694:	4b01      	ldr	r3, [pc, #4]	@ (800769c <__errno+0x8>)
 8007696:	6818      	ldr	r0, [r3, #0]
 8007698:	4770      	bx	lr
 800769a:	46c0      	nop			@ (mov r8, r8)
 800769c:	20000040 	.word	0x20000040

080076a0 <__libc_init_array>:
 80076a0:	b570      	push	{r4, r5, r6, lr}
 80076a2:	2600      	movs	r6, #0
 80076a4:	4c0c      	ldr	r4, [pc, #48]	@ (80076d8 <__libc_init_array+0x38>)
 80076a6:	4d0d      	ldr	r5, [pc, #52]	@ (80076dc <__libc_init_array+0x3c>)
 80076a8:	1b64      	subs	r4, r4, r5
 80076aa:	10a4      	asrs	r4, r4, #2
 80076ac:	42a6      	cmp	r6, r4
 80076ae:	d109      	bne.n	80076c4 <__libc_init_array+0x24>
 80076b0:	2600      	movs	r6, #0
 80076b2:	f000 fc65 	bl	8007f80 <_init>
 80076b6:	4c0a      	ldr	r4, [pc, #40]	@ (80076e0 <__libc_init_array+0x40>)
 80076b8:	4d0a      	ldr	r5, [pc, #40]	@ (80076e4 <__libc_init_array+0x44>)
 80076ba:	1b64      	subs	r4, r4, r5
 80076bc:	10a4      	asrs	r4, r4, #2
 80076be:	42a6      	cmp	r6, r4
 80076c0:	d105      	bne.n	80076ce <__libc_init_array+0x2e>
 80076c2:	bd70      	pop	{r4, r5, r6, pc}
 80076c4:	00b3      	lsls	r3, r6, #2
 80076c6:	58eb      	ldr	r3, [r5, r3]
 80076c8:	4798      	blx	r3
 80076ca:	3601      	adds	r6, #1
 80076cc:	e7ee      	b.n	80076ac <__libc_init_array+0xc>
 80076ce:	00b3      	lsls	r3, r6, #2
 80076d0:	58eb      	ldr	r3, [r5, r3]
 80076d2:	4798      	blx	r3
 80076d4:	3601      	adds	r6, #1
 80076d6:	e7f2      	b.n	80076be <__libc_init_array+0x1e>
 80076d8:	080088b8 	.word	0x080088b8
 80076dc:	080088b8 	.word	0x080088b8
 80076e0:	080088bc 	.word	0x080088bc
 80076e4:	080088b8 	.word	0x080088b8

080076e8 <__retarget_lock_acquire_recursive>:
 80076e8:	4770      	bx	lr

080076ea <__retarget_lock_release_recursive>:
 80076ea:	4770      	bx	lr

080076ec <memcpy>:
 80076ec:	2300      	movs	r3, #0
 80076ee:	b510      	push	{r4, lr}
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d100      	bne.n	80076f6 <memcpy+0xa>
 80076f4:	bd10      	pop	{r4, pc}
 80076f6:	5ccc      	ldrb	r4, [r1, r3]
 80076f8:	54c4      	strb	r4, [r0, r3]
 80076fa:	3301      	adds	r3, #1
 80076fc:	e7f8      	b.n	80076f0 <memcpy+0x4>
	...

08007700 <__ssputs_r>:
 8007700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007702:	688e      	ldr	r6, [r1, #8]
 8007704:	b085      	sub	sp, #20
 8007706:	001f      	movs	r7, r3
 8007708:	000c      	movs	r4, r1
 800770a:	680b      	ldr	r3, [r1, #0]
 800770c:	9002      	str	r0, [sp, #8]
 800770e:	9203      	str	r2, [sp, #12]
 8007710:	42be      	cmp	r6, r7
 8007712:	d830      	bhi.n	8007776 <__ssputs_r+0x76>
 8007714:	210c      	movs	r1, #12
 8007716:	5e62      	ldrsh	r2, [r4, r1]
 8007718:	2190      	movs	r1, #144	@ 0x90
 800771a:	00c9      	lsls	r1, r1, #3
 800771c:	420a      	tst	r2, r1
 800771e:	d028      	beq.n	8007772 <__ssputs_r+0x72>
 8007720:	2003      	movs	r0, #3
 8007722:	6921      	ldr	r1, [r4, #16]
 8007724:	1a5b      	subs	r3, r3, r1
 8007726:	9301      	str	r3, [sp, #4]
 8007728:	6963      	ldr	r3, [r4, #20]
 800772a:	4343      	muls	r3, r0
 800772c:	9801      	ldr	r0, [sp, #4]
 800772e:	0fdd      	lsrs	r5, r3, #31
 8007730:	18ed      	adds	r5, r5, r3
 8007732:	1c7b      	adds	r3, r7, #1
 8007734:	181b      	adds	r3, r3, r0
 8007736:	106d      	asrs	r5, r5, #1
 8007738:	42ab      	cmp	r3, r5
 800773a:	d900      	bls.n	800773e <__ssputs_r+0x3e>
 800773c:	001d      	movs	r5, r3
 800773e:	0552      	lsls	r2, r2, #21
 8007740:	d528      	bpl.n	8007794 <__ssputs_r+0x94>
 8007742:	0029      	movs	r1, r5
 8007744:	9802      	ldr	r0, [sp, #8]
 8007746:	f000 f95b 	bl	8007a00 <_malloc_r>
 800774a:	1e06      	subs	r6, r0, #0
 800774c:	d02c      	beq.n	80077a8 <__ssputs_r+0xa8>
 800774e:	9a01      	ldr	r2, [sp, #4]
 8007750:	6921      	ldr	r1, [r4, #16]
 8007752:	f7ff ffcb 	bl	80076ec <memcpy>
 8007756:	89a2      	ldrh	r2, [r4, #12]
 8007758:	4b18      	ldr	r3, [pc, #96]	@ (80077bc <__ssputs_r+0xbc>)
 800775a:	401a      	ands	r2, r3
 800775c:	2380      	movs	r3, #128	@ 0x80
 800775e:	4313      	orrs	r3, r2
 8007760:	81a3      	strh	r3, [r4, #12]
 8007762:	9b01      	ldr	r3, [sp, #4]
 8007764:	6126      	str	r6, [r4, #16]
 8007766:	18f6      	adds	r6, r6, r3
 8007768:	6026      	str	r6, [r4, #0]
 800776a:	003e      	movs	r6, r7
 800776c:	6165      	str	r5, [r4, #20]
 800776e:	1aed      	subs	r5, r5, r3
 8007770:	60a5      	str	r5, [r4, #8]
 8007772:	42be      	cmp	r6, r7
 8007774:	d900      	bls.n	8007778 <__ssputs_r+0x78>
 8007776:	003e      	movs	r6, r7
 8007778:	0032      	movs	r2, r6
 800777a:	9903      	ldr	r1, [sp, #12]
 800777c:	6820      	ldr	r0, [r4, #0]
 800777e:	f000 fb7c 	bl	8007e7a <memmove>
 8007782:	2000      	movs	r0, #0
 8007784:	68a3      	ldr	r3, [r4, #8]
 8007786:	1b9b      	subs	r3, r3, r6
 8007788:	60a3      	str	r3, [r4, #8]
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	199b      	adds	r3, r3, r6
 800778e:	6023      	str	r3, [r4, #0]
 8007790:	b005      	add	sp, #20
 8007792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007794:	002a      	movs	r2, r5
 8007796:	9802      	ldr	r0, [sp, #8]
 8007798:	f000 fb40 	bl	8007e1c <_realloc_r>
 800779c:	1e06      	subs	r6, r0, #0
 800779e:	d1e0      	bne.n	8007762 <__ssputs_r+0x62>
 80077a0:	6921      	ldr	r1, [r4, #16]
 80077a2:	9802      	ldr	r0, [sp, #8]
 80077a4:	f000 fb9a 	bl	8007edc <_free_r>
 80077a8:	230c      	movs	r3, #12
 80077aa:	2001      	movs	r0, #1
 80077ac:	9a02      	ldr	r2, [sp, #8]
 80077ae:	4240      	negs	r0, r0
 80077b0:	6013      	str	r3, [r2, #0]
 80077b2:	89a2      	ldrh	r2, [r4, #12]
 80077b4:	3334      	adds	r3, #52	@ 0x34
 80077b6:	4313      	orrs	r3, r2
 80077b8:	81a3      	strh	r3, [r4, #12]
 80077ba:	e7e9      	b.n	8007790 <__ssputs_r+0x90>
 80077bc:	fffffb7f 	.word	0xfffffb7f

080077c0 <_svfiprintf_r>:
 80077c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077c2:	b0a1      	sub	sp, #132	@ 0x84
 80077c4:	9003      	str	r0, [sp, #12]
 80077c6:	001d      	movs	r5, r3
 80077c8:	898b      	ldrh	r3, [r1, #12]
 80077ca:	000f      	movs	r7, r1
 80077cc:	0016      	movs	r6, r2
 80077ce:	061b      	lsls	r3, r3, #24
 80077d0:	d511      	bpl.n	80077f6 <_svfiprintf_r+0x36>
 80077d2:	690b      	ldr	r3, [r1, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10e      	bne.n	80077f6 <_svfiprintf_r+0x36>
 80077d8:	2140      	movs	r1, #64	@ 0x40
 80077da:	f000 f911 	bl	8007a00 <_malloc_r>
 80077de:	6038      	str	r0, [r7, #0]
 80077e0:	6138      	str	r0, [r7, #16]
 80077e2:	2800      	cmp	r0, #0
 80077e4:	d105      	bne.n	80077f2 <_svfiprintf_r+0x32>
 80077e6:	230c      	movs	r3, #12
 80077e8:	9a03      	ldr	r2, [sp, #12]
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	2001      	movs	r0, #1
 80077ee:	4240      	negs	r0, r0
 80077f0:	e0cf      	b.n	8007992 <_svfiprintf_r+0x1d2>
 80077f2:	2340      	movs	r3, #64	@ 0x40
 80077f4:	617b      	str	r3, [r7, #20]
 80077f6:	2300      	movs	r3, #0
 80077f8:	ac08      	add	r4, sp, #32
 80077fa:	6163      	str	r3, [r4, #20]
 80077fc:	3320      	adds	r3, #32
 80077fe:	7663      	strb	r3, [r4, #25]
 8007800:	3310      	adds	r3, #16
 8007802:	76a3      	strb	r3, [r4, #26]
 8007804:	9507      	str	r5, [sp, #28]
 8007806:	0035      	movs	r5, r6
 8007808:	782b      	ldrb	r3, [r5, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <_svfiprintf_r+0x52>
 800780e:	2b25      	cmp	r3, #37	@ 0x25
 8007810:	d148      	bne.n	80078a4 <_svfiprintf_r+0xe4>
 8007812:	1bab      	subs	r3, r5, r6
 8007814:	9305      	str	r3, [sp, #20]
 8007816:	42b5      	cmp	r5, r6
 8007818:	d00b      	beq.n	8007832 <_svfiprintf_r+0x72>
 800781a:	0032      	movs	r2, r6
 800781c:	0039      	movs	r1, r7
 800781e:	9803      	ldr	r0, [sp, #12]
 8007820:	f7ff ff6e 	bl	8007700 <__ssputs_r>
 8007824:	3001      	adds	r0, #1
 8007826:	d100      	bne.n	800782a <_svfiprintf_r+0x6a>
 8007828:	e0ae      	b.n	8007988 <_svfiprintf_r+0x1c8>
 800782a:	6963      	ldr	r3, [r4, #20]
 800782c:	9a05      	ldr	r2, [sp, #20]
 800782e:	189b      	adds	r3, r3, r2
 8007830:	6163      	str	r3, [r4, #20]
 8007832:	782b      	ldrb	r3, [r5, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d100      	bne.n	800783a <_svfiprintf_r+0x7a>
 8007838:	e0a6      	b.n	8007988 <_svfiprintf_r+0x1c8>
 800783a:	2201      	movs	r2, #1
 800783c:	2300      	movs	r3, #0
 800783e:	4252      	negs	r2, r2
 8007840:	6062      	str	r2, [r4, #4]
 8007842:	a904      	add	r1, sp, #16
 8007844:	3254      	adds	r2, #84	@ 0x54
 8007846:	1852      	adds	r2, r2, r1
 8007848:	1c6e      	adds	r6, r5, #1
 800784a:	6023      	str	r3, [r4, #0]
 800784c:	60e3      	str	r3, [r4, #12]
 800784e:	60a3      	str	r3, [r4, #8]
 8007850:	7013      	strb	r3, [r2, #0]
 8007852:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007854:	4b54      	ldr	r3, [pc, #336]	@ (80079a8 <_svfiprintf_r+0x1e8>)
 8007856:	2205      	movs	r2, #5
 8007858:	0018      	movs	r0, r3
 800785a:	7831      	ldrb	r1, [r6, #0]
 800785c:	9305      	str	r3, [sp, #20]
 800785e:	f000 fb31 	bl	8007ec4 <memchr>
 8007862:	1c75      	adds	r5, r6, #1
 8007864:	2800      	cmp	r0, #0
 8007866:	d11f      	bne.n	80078a8 <_svfiprintf_r+0xe8>
 8007868:	6822      	ldr	r2, [r4, #0]
 800786a:	06d3      	lsls	r3, r2, #27
 800786c:	d504      	bpl.n	8007878 <_svfiprintf_r+0xb8>
 800786e:	2353      	movs	r3, #83	@ 0x53
 8007870:	a904      	add	r1, sp, #16
 8007872:	185b      	adds	r3, r3, r1
 8007874:	2120      	movs	r1, #32
 8007876:	7019      	strb	r1, [r3, #0]
 8007878:	0713      	lsls	r3, r2, #28
 800787a:	d504      	bpl.n	8007886 <_svfiprintf_r+0xc6>
 800787c:	2353      	movs	r3, #83	@ 0x53
 800787e:	a904      	add	r1, sp, #16
 8007880:	185b      	adds	r3, r3, r1
 8007882:	212b      	movs	r1, #43	@ 0x2b
 8007884:	7019      	strb	r1, [r3, #0]
 8007886:	7833      	ldrb	r3, [r6, #0]
 8007888:	2b2a      	cmp	r3, #42	@ 0x2a
 800788a:	d016      	beq.n	80078ba <_svfiprintf_r+0xfa>
 800788c:	0035      	movs	r5, r6
 800788e:	2100      	movs	r1, #0
 8007890:	200a      	movs	r0, #10
 8007892:	68e3      	ldr	r3, [r4, #12]
 8007894:	782a      	ldrb	r2, [r5, #0]
 8007896:	1c6e      	adds	r6, r5, #1
 8007898:	3a30      	subs	r2, #48	@ 0x30
 800789a:	2a09      	cmp	r2, #9
 800789c:	d950      	bls.n	8007940 <_svfiprintf_r+0x180>
 800789e:	2900      	cmp	r1, #0
 80078a0:	d111      	bne.n	80078c6 <_svfiprintf_r+0x106>
 80078a2:	e017      	b.n	80078d4 <_svfiprintf_r+0x114>
 80078a4:	3501      	adds	r5, #1
 80078a6:	e7af      	b.n	8007808 <_svfiprintf_r+0x48>
 80078a8:	9b05      	ldr	r3, [sp, #20]
 80078aa:	6822      	ldr	r2, [r4, #0]
 80078ac:	1ac0      	subs	r0, r0, r3
 80078ae:	2301      	movs	r3, #1
 80078b0:	4083      	lsls	r3, r0
 80078b2:	4313      	orrs	r3, r2
 80078b4:	002e      	movs	r6, r5
 80078b6:	6023      	str	r3, [r4, #0]
 80078b8:	e7cc      	b.n	8007854 <_svfiprintf_r+0x94>
 80078ba:	9b07      	ldr	r3, [sp, #28]
 80078bc:	1d19      	adds	r1, r3, #4
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	9107      	str	r1, [sp, #28]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	db01      	blt.n	80078ca <_svfiprintf_r+0x10a>
 80078c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078c8:	e004      	b.n	80078d4 <_svfiprintf_r+0x114>
 80078ca:	425b      	negs	r3, r3
 80078cc:	60e3      	str	r3, [r4, #12]
 80078ce:	2302      	movs	r3, #2
 80078d0:	4313      	orrs	r3, r2
 80078d2:	6023      	str	r3, [r4, #0]
 80078d4:	782b      	ldrb	r3, [r5, #0]
 80078d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80078d8:	d10c      	bne.n	80078f4 <_svfiprintf_r+0x134>
 80078da:	786b      	ldrb	r3, [r5, #1]
 80078dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80078de:	d134      	bne.n	800794a <_svfiprintf_r+0x18a>
 80078e0:	9b07      	ldr	r3, [sp, #28]
 80078e2:	3502      	adds	r5, #2
 80078e4:	1d1a      	adds	r2, r3, #4
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	9207      	str	r2, [sp, #28]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	da01      	bge.n	80078f2 <_svfiprintf_r+0x132>
 80078ee:	2301      	movs	r3, #1
 80078f0:	425b      	negs	r3, r3
 80078f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80078f4:	4e2d      	ldr	r6, [pc, #180]	@ (80079ac <_svfiprintf_r+0x1ec>)
 80078f6:	2203      	movs	r2, #3
 80078f8:	0030      	movs	r0, r6
 80078fa:	7829      	ldrb	r1, [r5, #0]
 80078fc:	f000 fae2 	bl	8007ec4 <memchr>
 8007900:	2800      	cmp	r0, #0
 8007902:	d006      	beq.n	8007912 <_svfiprintf_r+0x152>
 8007904:	2340      	movs	r3, #64	@ 0x40
 8007906:	1b80      	subs	r0, r0, r6
 8007908:	4083      	lsls	r3, r0
 800790a:	6822      	ldr	r2, [r4, #0]
 800790c:	3501      	adds	r5, #1
 800790e:	4313      	orrs	r3, r2
 8007910:	6023      	str	r3, [r4, #0]
 8007912:	7829      	ldrb	r1, [r5, #0]
 8007914:	2206      	movs	r2, #6
 8007916:	4826      	ldr	r0, [pc, #152]	@ (80079b0 <_svfiprintf_r+0x1f0>)
 8007918:	1c6e      	adds	r6, r5, #1
 800791a:	7621      	strb	r1, [r4, #24]
 800791c:	f000 fad2 	bl	8007ec4 <memchr>
 8007920:	2800      	cmp	r0, #0
 8007922:	d038      	beq.n	8007996 <_svfiprintf_r+0x1d6>
 8007924:	4b23      	ldr	r3, [pc, #140]	@ (80079b4 <_svfiprintf_r+0x1f4>)
 8007926:	2b00      	cmp	r3, #0
 8007928:	d122      	bne.n	8007970 <_svfiprintf_r+0x1b0>
 800792a:	2207      	movs	r2, #7
 800792c:	9b07      	ldr	r3, [sp, #28]
 800792e:	3307      	adds	r3, #7
 8007930:	4393      	bics	r3, r2
 8007932:	3308      	adds	r3, #8
 8007934:	9307      	str	r3, [sp, #28]
 8007936:	6963      	ldr	r3, [r4, #20]
 8007938:	9a04      	ldr	r2, [sp, #16]
 800793a:	189b      	adds	r3, r3, r2
 800793c:	6163      	str	r3, [r4, #20]
 800793e:	e762      	b.n	8007806 <_svfiprintf_r+0x46>
 8007940:	4343      	muls	r3, r0
 8007942:	0035      	movs	r5, r6
 8007944:	2101      	movs	r1, #1
 8007946:	189b      	adds	r3, r3, r2
 8007948:	e7a4      	b.n	8007894 <_svfiprintf_r+0xd4>
 800794a:	2300      	movs	r3, #0
 800794c:	200a      	movs	r0, #10
 800794e:	0019      	movs	r1, r3
 8007950:	3501      	adds	r5, #1
 8007952:	6063      	str	r3, [r4, #4]
 8007954:	782a      	ldrb	r2, [r5, #0]
 8007956:	1c6e      	adds	r6, r5, #1
 8007958:	3a30      	subs	r2, #48	@ 0x30
 800795a:	2a09      	cmp	r2, #9
 800795c:	d903      	bls.n	8007966 <_svfiprintf_r+0x1a6>
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0c8      	beq.n	80078f4 <_svfiprintf_r+0x134>
 8007962:	9109      	str	r1, [sp, #36]	@ 0x24
 8007964:	e7c6      	b.n	80078f4 <_svfiprintf_r+0x134>
 8007966:	4341      	muls	r1, r0
 8007968:	0035      	movs	r5, r6
 800796a:	2301      	movs	r3, #1
 800796c:	1889      	adds	r1, r1, r2
 800796e:	e7f1      	b.n	8007954 <_svfiprintf_r+0x194>
 8007970:	aa07      	add	r2, sp, #28
 8007972:	9200      	str	r2, [sp, #0]
 8007974:	0021      	movs	r1, r4
 8007976:	003a      	movs	r2, r7
 8007978:	4b0f      	ldr	r3, [pc, #60]	@ (80079b8 <_svfiprintf_r+0x1f8>)
 800797a:	9803      	ldr	r0, [sp, #12]
 800797c:	e000      	b.n	8007980 <_svfiprintf_r+0x1c0>
 800797e:	bf00      	nop
 8007980:	9004      	str	r0, [sp, #16]
 8007982:	9b04      	ldr	r3, [sp, #16]
 8007984:	3301      	adds	r3, #1
 8007986:	d1d6      	bne.n	8007936 <_svfiprintf_r+0x176>
 8007988:	89bb      	ldrh	r3, [r7, #12]
 800798a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800798c:	065b      	lsls	r3, r3, #25
 800798e:	d500      	bpl.n	8007992 <_svfiprintf_r+0x1d2>
 8007990:	e72c      	b.n	80077ec <_svfiprintf_r+0x2c>
 8007992:	b021      	add	sp, #132	@ 0x84
 8007994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007996:	aa07      	add	r2, sp, #28
 8007998:	9200      	str	r2, [sp, #0]
 800799a:	0021      	movs	r1, r4
 800799c:	003a      	movs	r2, r7
 800799e:	4b06      	ldr	r3, [pc, #24]	@ (80079b8 <_svfiprintf_r+0x1f8>)
 80079a0:	9803      	ldr	r0, [sp, #12]
 80079a2:	f000 f91d 	bl	8007be0 <_printf_i>
 80079a6:	e7eb      	b.n	8007980 <_svfiprintf_r+0x1c0>
 80079a8:	08008884 	.word	0x08008884
 80079ac:	0800888a 	.word	0x0800888a
 80079b0:	0800888e 	.word	0x0800888e
 80079b4:	00000000 	.word	0x00000000
 80079b8:	08007701 	.word	0x08007701

080079bc <sbrk_aligned>:
 80079bc:	b570      	push	{r4, r5, r6, lr}
 80079be:	4e0f      	ldr	r6, [pc, #60]	@ (80079fc <sbrk_aligned+0x40>)
 80079c0:	000d      	movs	r5, r1
 80079c2:	6831      	ldr	r1, [r6, #0]
 80079c4:	0004      	movs	r4, r0
 80079c6:	2900      	cmp	r1, #0
 80079c8:	d102      	bne.n	80079d0 <sbrk_aligned+0x14>
 80079ca:	f000 fa69 	bl	8007ea0 <_sbrk_r>
 80079ce:	6030      	str	r0, [r6, #0]
 80079d0:	0029      	movs	r1, r5
 80079d2:	0020      	movs	r0, r4
 80079d4:	f000 fa64 	bl	8007ea0 <_sbrk_r>
 80079d8:	1c43      	adds	r3, r0, #1
 80079da:	d103      	bne.n	80079e4 <sbrk_aligned+0x28>
 80079dc:	2501      	movs	r5, #1
 80079de:	426d      	negs	r5, r5
 80079e0:	0028      	movs	r0, r5
 80079e2:	bd70      	pop	{r4, r5, r6, pc}
 80079e4:	2303      	movs	r3, #3
 80079e6:	1cc5      	adds	r5, r0, #3
 80079e8:	439d      	bics	r5, r3
 80079ea:	42a8      	cmp	r0, r5
 80079ec:	d0f8      	beq.n	80079e0 <sbrk_aligned+0x24>
 80079ee:	1a29      	subs	r1, r5, r0
 80079f0:	0020      	movs	r0, r4
 80079f2:	f000 fa55 	bl	8007ea0 <_sbrk_r>
 80079f6:	3001      	adds	r0, #1
 80079f8:	d1f2      	bne.n	80079e0 <sbrk_aligned+0x24>
 80079fa:	e7ef      	b.n	80079dc <sbrk_aligned+0x20>
 80079fc:	200008ac 	.word	0x200008ac

08007a00 <_malloc_r>:
 8007a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a02:	2203      	movs	r2, #3
 8007a04:	1ccb      	adds	r3, r1, #3
 8007a06:	4393      	bics	r3, r2
 8007a08:	3308      	adds	r3, #8
 8007a0a:	0005      	movs	r5, r0
 8007a0c:	001f      	movs	r7, r3
 8007a0e:	2b0c      	cmp	r3, #12
 8007a10:	d234      	bcs.n	8007a7c <_malloc_r+0x7c>
 8007a12:	270c      	movs	r7, #12
 8007a14:	42b9      	cmp	r1, r7
 8007a16:	d833      	bhi.n	8007a80 <_malloc_r+0x80>
 8007a18:	0028      	movs	r0, r5
 8007a1a:	f000 f9ef 	bl	8007dfc <__malloc_lock>
 8007a1e:	4e37      	ldr	r6, [pc, #220]	@ (8007afc <_malloc_r+0xfc>)
 8007a20:	6833      	ldr	r3, [r6, #0]
 8007a22:	001c      	movs	r4, r3
 8007a24:	2c00      	cmp	r4, #0
 8007a26:	d12f      	bne.n	8007a88 <_malloc_r+0x88>
 8007a28:	0039      	movs	r1, r7
 8007a2a:	0028      	movs	r0, r5
 8007a2c:	f7ff ffc6 	bl	80079bc <sbrk_aligned>
 8007a30:	0004      	movs	r4, r0
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	d15f      	bne.n	8007af6 <_malloc_r+0xf6>
 8007a36:	6834      	ldr	r4, [r6, #0]
 8007a38:	9400      	str	r4, [sp, #0]
 8007a3a:	9b00      	ldr	r3, [sp, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d14a      	bne.n	8007ad6 <_malloc_r+0xd6>
 8007a40:	2c00      	cmp	r4, #0
 8007a42:	d052      	beq.n	8007aea <_malloc_r+0xea>
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	0028      	movs	r0, r5
 8007a48:	18e3      	adds	r3, r4, r3
 8007a4a:	9900      	ldr	r1, [sp, #0]
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	f000 fa27 	bl	8007ea0 <_sbrk_r>
 8007a52:	9b01      	ldr	r3, [sp, #4]
 8007a54:	4283      	cmp	r3, r0
 8007a56:	d148      	bne.n	8007aea <_malloc_r+0xea>
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	0028      	movs	r0, r5
 8007a5c:	1aff      	subs	r7, r7, r3
 8007a5e:	0039      	movs	r1, r7
 8007a60:	f7ff ffac 	bl	80079bc <sbrk_aligned>
 8007a64:	3001      	adds	r0, #1
 8007a66:	d040      	beq.n	8007aea <_malloc_r+0xea>
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	19db      	adds	r3, r3, r7
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	6833      	ldr	r3, [r6, #0]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	2a00      	cmp	r2, #0
 8007a74:	d133      	bne.n	8007ade <_malloc_r+0xde>
 8007a76:	9b00      	ldr	r3, [sp, #0]
 8007a78:	6033      	str	r3, [r6, #0]
 8007a7a:	e019      	b.n	8007ab0 <_malloc_r+0xb0>
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	dac9      	bge.n	8007a14 <_malloc_r+0x14>
 8007a80:	230c      	movs	r3, #12
 8007a82:	602b      	str	r3, [r5, #0]
 8007a84:	2000      	movs	r0, #0
 8007a86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a88:	6821      	ldr	r1, [r4, #0]
 8007a8a:	1bc9      	subs	r1, r1, r7
 8007a8c:	d420      	bmi.n	8007ad0 <_malloc_r+0xd0>
 8007a8e:	290b      	cmp	r1, #11
 8007a90:	d90a      	bls.n	8007aa8 <_malloc_r+0xa8>
 8007a92:	19e2      	adds	r2, r4, r7
 8007a94:	6027      	str	r7, [r4, #0]
 8007a96:	42a3      	cmp	r3, r4
 8007a98:	d104      	bne.n	8007aa4 <_malloc_r+0xa4>
 8007a9a:	6032      	str	r2, [r6, #0]
 8007a9c:	6863      	ldr	r3, [r4, #4]
 8007a9e:	6011      	str	r1, [r2, #0]
 8007aa0:	6053      	str	r3, [r2, #4]
 8007aa2:	e005      	b.n	8007ab0 <_malloc_r+0xb0>
 8007aa4:	605a      	str	r2, [r3, #4]
 8007aa6:	e7f9      	b.n	8007a9c <_malloc_r+0x9c>
 8007aa8:	6862      	ldr	r2, [r4, #4]
 8007aaa:	42a3      	cmp	r3, r4
 8007aac:	d10e      	bne.n	8007acc <_malloc_r+0xcc>
 8007aae:	6032      	str	r2, [r6, #0]
 8007ab0:	0028      	movs	r0, r5
 8007ab2:	f000 f9ab 	bl	8007e0c <__malloc_unlock>
 8007ab6:	0020      	movs	r0, r4
 8007ab8:	2207      	movs	r2, #7
 8007aba:	300b      	adds	r0, #11
 8007abc:	1d23      	adds	r3, r4, #4
 8007abe:	4390      	bics	r0, r2
 8007ac0:	1ac2      	subs	r2, r0, r3
 8007ac2:	4298      	cmp	r0, r3
 8007ac4:	d0df      	beq.n	8007a86 <_malloc_r+0x86>
 8007ac6:	1a1b      	subs	r3, r3, r0
 8007ac8:	50a3      	str	r3, [r4, r2]
 8007aca:	e7dc      	b.n	8007a86 <_malloc_r+0x86>
 8007acc:	605a      	str	r2, [r3, #4]
 8007ace:	e7ef      	b.n	8007ab0 <_malloc_r+0xb0>
 8007ad0:	0023      	movs	r3, r4
 8007ad2:	6864      	ldr	r4, [r4, #4]
 8007ad4:	e7a6      	b.n	8007a24 <_malloc_r+0x24>
 8007ad6:	9c00      	ldr	r4, [sp, #0]
 8007ad8:	6863      	ldr	r3, [r4, #4]
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	e7ad      	b.n	8007a3a <_malloc_r+0x3a>
 8007ade:	001a      	movs	r2, r3
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	42a3      	cmp	r3, r4
 8007ae4:	d1fb      	bne.n	8007ade <_malloc_r+0xde>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e7da      	b.n	8007aa0 <_malloc_r+0xa0>
 8007aea:	230c      	movs	r3, #12
 8007aec:	0028      	movs	r0, r5
 8007aee:	602b      	str	r3, [r5, #0]
 8007af0:	f000 f98c 	bl	8007e0c <__malloc_unlock>
 8007af4:	e7c6      	b.n	8007a84 <_malloc_r+0x84>
 8007af6:	6007      	str	r7, [r0, #0]
 8007af8:	e7da      	b.n	8007ab0 <_malloc_r+0xb0>
 8007afa:	46c0      	nop			@ (mov r8, r8)
 8007afc:	200008b0 	.word	0x200008b0

08007b00 <_printf_common>:
 8007b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b02:	0016      	movs	r6, r2
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	688a      	ldr	r2, [r1, #8]
 8007b08:	690b      	ldr	r3, [r1, #16]
 8007b0a:	000c      	movs	r4, r1
 8007b0c:	9000      	str	r0, [sp, #0]
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	da00      	bge.n	8007b14 <_printf_common+0x14>
 8007b12:	0013      	movs	r3, r2
 8007b14:	0022      	movs	r2, r4
 8007b16:	6033      	str	r3, [r6, #0]
 8007b18:	3243      	adds	r2, #67	@ 0x43
 8007b1a:	7812      	ldrb	r2, [r2, #0]
 8007b1c:	2a00      	cmp	r2, #0
 8007b1e:	d001      	beq.n	8007b24 <_printf_common+0x24>
 8007b20:	3301      	adds	r3, #1
 8007b22:	6033      	str	r3, [r6, #0]
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	069b      	lsls	r3, r3, #26
 8007b28:	d502      	bpl.n	8007b30 <_printf_common+0x30>
 8007b2a:	6833      	ldr	r3, [r6, #0]
 8007b2c:	3302      	adds	r3, #2
 8007b2e:	6033      	str	r3, [r6, #0]
 8007b30:	6822      	ldr	r2, [r4, #0]
 8007b32:	2306      	movs	r3, #6
 8007b34:	0015      	movs	r5, r2
 8007b36:	401d      	ands	r5, r3
 8007b38:	421a      	tst	r2, r3
 8007b3a:	d027      	beq.n	8007b8c <_printf_common+0x8c>
 8007b3c:	0023      	movs	r3, r4
 8007b3e:	3343      	adds	r3, #67	@ 0x43
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	1e5a      	subs	r2, r3, #1
 8007b44:	4193      	sbcs	r3, r2
 8007b46:	6822      	ldr	r2, [r4, #0]
 8007b48:	0692      	lsls	r2, r2, #26
 8007b4a:	d430      	bmi.n	8007bae <_printf_common+0xae>
 8007b4c:	0022      	movs	r2, r4
 8007b4e:	9901      	ldr	r1, [sp, #4]
 8007b50:	9800      	ldr	r0, [sp, #0]
 8007b52:	9d08      	ldr	r5, [sp, #32]
 8007b54:	3243      	adds	r2, #67	@ 0x43
 8007b56:	47a8      	blx	r5
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d025      	beq.n	8007ba8 <_printf_common+0xa8>
 8007b5c:	2206      	movs	r2, #6
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	2500      	movs	r5, #0
 8007b62:	4013      	ands	r3, r2
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d105      	bne.n	8007b74 <_printf_common+0x74>
 8007b68:	6833      	ldr	r3, [r6, #0]
 8007b6a:	68e5      	ldr	r5, [r4, #12]
 8007b6c:	1aed      	subs	r5, r5, r3
 8007b6e:	43eb      	mvns	r3, r5
 8007b70:	17db      	asrs	r3, r3, #31
 8007b72:	401d      	ands	r5, r3
 8007b74:	68a3      	ldr	r3, [r4, #8]
 8007b76:	6922      	ldr	r2, [r4, #16]
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	dd01      	ble.n	8007b80 <_printf_common+0x80>
 8007b7c:	1a9b      	subs	r3, r3, r2
 8007b7e:	18ed      	adds	r5, r5, r3
 8007b80:	2600      	movs	r6, #0
 8007b82:	42b5      	cmp	r5, r6
 8007b84:	d120      	bne.n	8007bc8 <_printf_common+0xc8>
 8007b86:	2000      	movs	r0, #0
 8007b88:	e010      	b.n	8007bac <_printf_common+0xac>
 8007b8a:	3501      	adds	r5, #1
 8007b8c:	68e3      	ldr	r3, [r4, #12]
 8007b8e:	6832      	ldr	r2, [r6, #0]
 8007b90:	1a9b      	subs	r3, r3, r2
 8007b92:	42ab      	cmp	r3, r5
 8007b94:	ddd2      	ble.n	8007b3c <_printf_common+0x3c>
 8007b96:	0022      	movs	r2, r4
 8007b98:	2301      	movs	r3, #1
 8007b9a:	9901      	ldr	r1, [sp, #4]
 8007b9c:	9800      	ldr	r0, [sp, #0]
 8007b9e:	9f08      	ldr	r7, [sp, #32]
 8007ba0:	3219      	adds	r2, #25
 8007ba2:	47b8      	blx	r7
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	d1f0      	bne.n	8007b8a <_printf_common+0x8a>
 8007ba8:	2001      	movs	r0, #1
 8007baa:	4240      	negs	r0, r0
 8007bac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007bae:	2030      	movs	r0, #48	@ 0x30
 8007bb0:	18e1      	adds	r1, r4, r3
 8007bb2:	3143      	adds	r1, #67	@ 0x43
 8007bb4:	7008      	strb	r0, [r1, #0]
 8007bb6:	0021      	movs	r1, r4
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	3145      	adds	r1, #69	@ 0x45
 8007bbc:	7809      	ldrb	r1, [r1, #0]
 8007bbe:	18a2      	adds	r2, r4, r2
 8007bc0:	3243      	adds	r2, #67	@ 0x43
 8007bc2:	3302      	adds	r3, #2
 8007bc4:	7011      	strb	r1, [r2, #0]
 8007bc6:	e7c1      	b.n	8007b4c <_printf_common+0x4c>
 8007bc8:	0022      	movs	r2, r4
 8007bca:	2301      	movs	r3, #1
 8007bcc:	9901      	ldr	r1, [sp, #4]
 8007bce:	9800      	ldr	r0, [sp, #0]
 8007bd0:	9f08      	ldr	r7, [sp, #32]
 8007bd2:	321a      	adds	r2, #26
 8007bd4:	47b8      	blx	r7
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	d0e6      	beq.n	8007ba8 <_printf_common+0xa8>
 8007bda:	3601      	adds	r6, #1
 8007bdc:	e7d1      	b.n	8007b82 <_printf_common+0x82>
	...

08007be0 <_printf_i>:
 8007be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007be2:	b08b      	sub	sp, #44	@ 0x2c
 8007be4:	9206      	str	r2, [sp, #24]
 8007be6:	000a      	movs	r2, r1
 8007be8:	3243      	adds	r2, #67	@ 0x43
 8007bea:	9307      	str	r3, [sp, #28]
 8007bec:	9005      	str	r0, [sp, #20]
 8007bee:	9203      	str	r2, [sp, #12]
 8007bf0:	7e0a      	ldrb	r2, [r1, #24]
 8007bf2:	000c      	movs	r4, r1
 8007bf4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007bf6:	2a78      	cmp	r2, #120	@ 0x78
 8007bf8:	d809      	bhi.n	8007c0e <_printf_i+0x2e>
 8007bfa:	2a62      	cmp	r2, #98	@ 0x62
 8007bfc:	d80b      	bhi.n	8007c16 <_printf_i+0x36>
 8007bfe:	2a00      	cmp	r2, #0
 8007c00:	d100      	bne.n	8007c04 <_printf_i+0x24>
 8007c02:	e0bc      	b.n	8007d7e <_printf_i+0x19e>
 8007c04:	497b      	ldr	r1, [pc, #492]	@ (8007df4 <_printf_i+0x214>)
 8007c06:	9104      	str	r1, [sp, #16]
 8007c08:	2a58      	cmp	r2, #88	@ 0x58
 8007c0a:	d100      	bne.n	8007c0e <_printf_i+0x2e>
 8007c0c:	e090      	b.n	8007d30 <_printf_i+0x150>
 8007c0e:	0025      	movs	r5, r4
 8007c10:	3542      	adds	r5, #66	@ 0x42
 8007c12:	702a      	strb	r2, [r5, #0]
 8007c14:	e022      	b.n	8007c5c <_printf_i+0x7c>
 8007c16:	0010      	movs	r0, r2
 8007c18:	3863      	subs	r0, #99	@ 0x63
 8007c1a:	2815      	cmp	r0, #21
 8007c1c:	d8f7      	bhi.n	8007c0e <_printf_i+0x2e>
 8007c1e:	f7f8 fa73 	bl	8000108 <__gnu_thumb1_case_shi>
 8007c22:	0016      	.short	0x0016
 8007c24:	fff6001f 	.word	0xfff6001f
 8007c28:	fff6fff6 	.word	0xfff6fff6
 8007c2c:	001ffff6 	.word	0x001ffff6
 8007c30:	fff6fff6 	.word	0xfff6fff6
 8007c34:	fff6fff6 	.word	0xfff6fff6
 8007c38:	003600a1 	.word	0x003600a1
 8007c3c:	fff60080 	.word	0xfff60080
 8007c40:	00b2fff6 	.word	0x00b2fff6
 8007c44:	0036fff6 	.word	0x0036fff6
 8007c48:	fff6fff6 	.word	0xfff6fff6
 8007c4c:	0084      	.short	0x0084
 8007c4e:	0025      	movs	r5, r4
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	3542      	adds	r5, #66	@ 0x42
 8007c54:	1d11      	adds	r1, r2, #4
 8007c56:	6019      	str	r1, [r3, #0]
 8007c58:	6813      	ldr	r3, [r2, #0]
 8007c5a:	702b      	strb	r3, [r5, #0]
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e0a0      	b.n	8007da2 <_printf_i+0x1c2>
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	6809      	ldr	r1, [r1, #0]
 8007c64:	1d02      	adds	r2, r0, #4
 8007c66:	060d      	lsls	r5, r1, #24
 8007c68:	d50b      	bpl.n	8007c82 <_printf_i+0xa2>
 8007c6a:	6806      	ldr	r6, [r0, #0]
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	2e00      	cmp	r6, #0
 8007c70:	da03      	bge.n	8007c7a <_printf_i+0x9a>
 8007c72:	232d      	movs	r3, #45	@ 0x2d
 8007c74:	9a03      	ldr	r2, [sp, #12]
 8007c76:	4276      	negs	r6, r6
 8007c78:	7013      	strb	r3, [r2, #0]
 8007c7a:	4b5e      	ldr	r3, [pc, #376]	@ (8007df4 <_printf_i+0x214>)
 8007c7c:	270a      	movs	r7, #10
 8007c7e:	9304      	str	r3, [sp, #16]
 8007c80:	e018      	b.n	8007cb4 <_printf_i+0xd4>
 8007c82:	6806      	ldr	r6, [r0, #0]
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	0649      	lsls	r1, r1, #25
 8007c88:	d5f1      	bpl.n	8007c6e <_printf_i+0x8e>
 8007c8a:	b236      	sxth	r6, r6
 8007c8c:	e7ef      	b.n	8007c6e <_printf_i+0x8e>
 8007c8e:	6808      	ldr	r0, [r1, #0]
 8007c90:	6819      	ldr	r1, [r3, #0]
 8007c92:	c940      	ldmia	r1!, {r6}
 8007c94:	0605      	lsls	r5, r0, #24
 8007c96:	d402      	bmi.n	8007c9e <_printf_i+0xbe>
 8007c98:	0640      	lsls	r0, r0, #25
 8007c9a:	d500      	bpl.n	8007c9e <_printf_i+0xbe>
 8007c9c:	b2b6      	uxth	r6, r6
 8007c9e:	6019      	str	r1, [r3, #0]
 8007ca0:	4b54      	ldr	r3, [pc, #336]	@ (8007df4 <_printf_i+0x214>)
 8007ca2:	270a      	movs	r7, #10
 8007ca4:	9304      	str	r3, [sp, #16]
 8007ca6:	2a6f      	cmp	r2, #111	@ 0x6f
 8007ca8:	d100      	bne.n	8007cac <_printf_i+0xcc>
 8007caa:	3f02      	subs	r7, #2
 8007cac:	0023      	movs	r3, r4
 8007cae:	2200      	movs	r2, #0
 8007cb0:	3343      	adds	r3, #67	@ 0x43
 8007cb2:	701a      	strb	r2, [r3, #0]
 8007cb4:	6863      	ldr	r3, [r4, #4]
 8007cb6:	60a3      	str	r3, [r4, #8]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	db03      	blt.n	8007cc4 <_printf_i+0xe4>
 8007cbc:	2104      	movs	r1, #4
 8007cbe:	6822      	ldr	r2, [r4, #0]
 8007cc0:	438a      	bics	r2, r1
 8007cc2:	6022      	str	r2, [r4, #0]
 8007cc4:	2e00      	cmp	r6, #0
 8007cc6:	d102      	bne.n	8007cce <_printf_i+0xee>
 8007cc8:	9d03      	ldr	r5, [sp, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00c      	beq.n	8007ce8 <_printf_i+0x108>
 8007cce:	9d03      	ldr	r5, [sp, #12]
 8007cd0:	0030      	movs	r0, r6
 8007cd2:	0039      	movs	r1, r7
 8007cd4:	f7f8 faa8 	bl	8000228 <__aeabi_uidivmod>
 8007cd8:	9b04      	ldr	r3, [sp, #16]
 8007cda:	3d01      	subs	r5, #1
 8007cdc:	5c5b      	ldrb	r3, [r3, r1]
 8007cde:	702b      	strb	r3, [r5, #0]
 8007ce0:	0033      	movs	r3, r6
 8007ce2:	0006      	movs	r6, r0
 8007ce4:	429f      	cmp	r7, r3
 8007ce6:	d9f3      	bls.n	8007cd0 <_printf_i+0xf0>
 8007ce8:	2f08      	cmp	r7, #8
 8007cea:	d109      	bne.n	8007d00 <_printf_i+0x120>
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	07db      	lsls	r3, r3, #31
 8007cf0:	d506      	bpl.n	8007d00 <_printf_i+0x120>
 8007cf2:	6862      	ldr	r2, [r4, #4]
 8007cf4:	6923      	ldr	r3, [r4, #16]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	dc02      	bgt.n	8007d00 <_printf_i+0x120>
 8007cfa:	2330      	movs	r3, #48	@ 0x30
 8007cfc:	3d01      	subs	r5, #1
 8007cfe:	702b      	strb	r3, [r5, #0]
 8007d00:	9b03      	ldr	r3, [sp, #12]
 8007d02:	1b5b      	subs	r3, r3, r5
 8007d04:	6123      	str	r3, [r4, #16]
 8007d06:	9b07      	ldr	r3, [sp, #28]
 8007d08:	0021      	movs	r1, r4
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	9805      	ldr	r0, [sp, #20]
 8007d0e:	9b06      	ldr	r3, [sp, #24]
 8007d10:	aa09      	add	r2, sp, #36	@ 0x24
 8007d12:	f7ff fef5 	bl	8007b00 <_printf_common>
 8007d16:	3001      	adds	r0, #1
 8007d18:	d148      	bne.n	8007dac <_printf_i+0x1cc>
 8007d1a:	2001      	movs	r0, #1
 8007d1c:	4240      	negs	r0, r0
 8007d1e:	b00b      	add	sp, #44	@ 0x2c
 8007d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d22:	2220      	movs	r2, #32
 8007d24:	6809      	ldr	r1, [r1, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	6022      	str	r2, [r4, #0]
 8007d2a:	2278      	movs	r2, #120	@ 0x78
 8007d2c:	4932      	ldr	r1, [pc, #200]	@ (8007df8 <_printf_i+0x218>)
 8007d2e:	9104      	str	r1, [sp, #16]
 8007d30:	0021      	movs	r1, r4
 8007d32:	3145      	adds	r1, #69	@ 0x45
 8007d34:	700a      	strb	r2, [r1, #0]
 8007d36:	6819      	ldr	r1, [r3, #0]
 8007d38:	6822      	ldr	r2, [r4, #0]
 8007d3a:	c940      	ldmia	r1!, {r6}
 8007d3c:	0610      	lsls	r0, r2, #24
 8007d3e:	d402      	bmi.n	8007d46 <_printf_i+0x166>
 8007d40:	0650      	lsls	r0, r2, #25
 8007d42:	d500      	bpl.n	8007d46 <_printf_i+0x166>
 8007d44:	b2b6      	uxth	r6, r6
 8007d46:	6019      	str	r1, [r3, #0]
 8007d48:	07d3      	lsls	r3, r2, #31
 8007d4a:	d502      	bpl.n	8007d52 <_printf_i+0x172>
 8007d4c:	2320      	movs	r3, #32
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	2e00      	cmp	r6, #0
 8007d54:	d001      	beq.n	8007d5a <_printf_i+0x17a>
 8007d56:	2710      	movs	r7, #16
 8007d58:	e7a8      	b.n	8007cac <_printf_i+0xcc>
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	4393      	bics	r3, r2
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	e7f8      	b.n	8007d56 <_printf_i+0x176>
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	680d      	ldr	r5, [r1, #0]
 8007d68:	1d10      	adds	r0, r2, #4
 8007d6a:	6949      	ldr	r1, [r1, #20]
 8007d6c:	6018      	str	r0, [r3, #0]
 8007d6e:	6813      	ldr	r3, [r2, #0]
 8007d70:	062e      	lsls	r6, r5, #24
 8007d72:	d501      	bpl.n	8007d78 <_printf_i+0x198>
 8007d74:	6019      	str	r1, [r3, #0]
 8007d76:	e002      	b.n	8007d7e <_printf_i+0x19e>
 8007d78:	066d      	lsls	r5, r5, #25
 8007d7a:	d5fb      	bpl.n	8007d74 <_printf_i+0x194>
 8007d7c:	8019      	strh	r1, [r3, #0]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	9d03      	ldr	r5, [sp, #12]
 8007d82:	6123      	str	r3, [r4, #16]
 8007d84:	e7bf      	b.n	8007d06 <_printf_i+0x126>
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	1d11      	adds	r1, r2, #4
 8007d8a:	6019      	str	r1, [r3, #0]
 8007d8c:	6815      	ldr	r5, [r2, #0]
 8007d8e:	2100      	movs	r1, #0
 8007d90:	0028      	movs	r0, r5
 8007d92:	6862      	ldr	r2, [r4, #4]
 8007d94:	f000 f896 	bl	8007ec4 <memchr>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d001      	beq.n	8007da0 <_printf_i+0x1c0>
 8007d9c:	1b40      	subs	r0, r0, r5
 8007d9e:	6060      	str	r0, [r4, #4]
 8007da0:	6863      	ldr	r3, [r4, #4]
 8007da2:	6123      	str	r3, [r4, #16]
 8007da4:	2300      	movs	r3, #0
 8007da6:	9a03      	ldr	r2, [sp, #12]
 8007da8:	7013      	strb	r3, [r2, #0]
 8007daa:	e7ac      	b.n	8007d06 <_printf_i+0x126>
 8007dac:	002a      	movs	r2, r5
 8007dae:	6923      	ldr	r3, [r4, #16]
 8007db0:	9906      	ldr	r1, [sp, #24]
 8007db2:	9805      	ldr	r0, [sp, #20]
 8007db4:	9d07      	ldr	r5, [sp, #28]
 8007db6:	47a8      	blx	r5
 8007db8:	3001      	adds	r0, #1
 8007dba:	d0ae      	beq.n	8007d1a <_printf_i+0x13a>
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	079b      	lsls	r3, r3, #30
 8007dc0:	d415      	bmi.n	8007dee <_printf_i+0x20e>
 8007dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc4:	68e0      	ldr	r0, [r4, #12]
 8007dc6:	4298      	cmp	r0, r3
 8007dc8:	daa9      	bge.n	8007d1e <_printf_i+0x13e>
 8007dca:	0018      	movs	r0, r3
 8007dcc:	e7a7      	b.n	8007d1e <_printf_i+0x13e>
 8007dce:	0022      	movs	r2, r4
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	9906      	ldr	r1, [sp, #24]
 8007dd4:	9805      	ldr	r0, [sp, #20]
 8007dd6:	9e07      	ldr	r6, [sp, #28]
 8007dd8:	3219      	adds	r2, #25
 8007dda:	47b0      	blx	r6
 8007ddc:	3001      	adds	r0, #1
 8007dde:	d09c      	beq.n	8007d1a <_printf_i+0x13a>
 8007de0:	3501      	adds	r5, #1
 8007de2:	68e3      	ldr	r3, [r4, #12]
 8007de4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007de6:	1a9b      	subs	r3, r3, r2
 8007de8:	42ab      	cmp	r3, r5
 8007dea:	dcf0      	bgt.n	8007dce <_printf_i+0x1ee>
 8007dec:	e7e9      	b.n	8007dc2 <_printf_i+0x1e2>
 8007dee:	2500      	movs	r5, #0
 8007df0:	e7f7      	b.n	8007de2 <_printf_i+0x202>
 8007df2:	46c0      	nop			@ (mov r8, r8)
 8007df4:	08008895 	.word	0x08008895
 8007df8:	080088a6 	.word	0x080088a6

08007dfc <__malloc_lock>:
 8007dfc:	b510      	push	{r4, lr}
 8007dfe:	4802      	ldr	r0, [pc, #8]	@ (8007e08 <__malloc_lock+0xc>)
 8007e00:	f7ff fc72 	bl	80076e8 <__retarget_lock_acquire_recursive>
 8007e04:	bd10      	pop	{r4, pc}
 8007e06:	46c0      	nop			@ (mov r8, r8)
 8007e08:	200008a8 	.word	0x200008a8

08007e0c <__malloc_unlock>:
 8007e0c:	b510      	push	{r4, lr}
 8007e0e:	4802      	ldr	r0, [pc, #8]	@ (8007e18 <__malloc_unlock+0xc>)
 8007e10:	f7ff fc6b 	bl	80076ea <__retarget_lock_release_recursive>
 8007e14:	bd10      	pop	{r4, pc}
 8007e16:	46c0      	nop			@ (mov r8, r8)
 8007e18:	200008a8 	.word	0x200008a8

08007e1c <_realloc_r>:
 8007e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e1e:	0006      	movs	r6, r0
 8007e20:	000c      	movs	r4, r1
 8007e22:	0015      	movs	r5, r2
 8007e24:	2900      	cmp	r1, #0
 8007e26:	d105      	bne.n	8007e34 <_realloc_r+0x18>
 8007e28:	0011      	movs	r1, r2
 8007e2a:	f7ff fde9 	bl	8007a00 <_malloc_r>
 8007e2e:	0004      	movs	r4, r0
 8007e30:	0020      	movs	r0, r4
 8007e32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e34:	2a00      	cmp	r2, #0
 8007e36:	d103      	bne.n	8007e40 <_realloc_r+0x24>
 8007e38:	f000 f850 	bl	8007edc <_free_r>
 8007e3c:	2400      	movs	r4, #0
 8007e3e:	e7f7      	b.n	8007e30 <_realloc_r+0x14>
 8007e40:	f000 f896 	bl	8007f70 <_malloc_usable_size_r>
 8007e44:	0007      	movs	r7, r0
 8007e46:	4285      	cmp	r5, r0
 8007e48:	d802      	bhi.n	8007e50 <_realloc_r+0x34>
 8007e4a:	0843      	lsrs	r3, r0, #1
 8007e4c:	42ab      	cmp	r3, r5
 8007e4e:	d3ef      	bcc.n	8007e30 <_realloc_r+0x14>
 8007e50:	0029      	movs	r1, r5
 8007e52:	0030      	movs	r0, r6
 8007e54:	f7ff fdd4 	bl	8007a00 <_malloc_r>
 8007e58:	9001      	str	r0, [sp, #4]
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d0ee      	beq.n	8007e3c <_realloc_r+0x20>
 8007e5e:	002a      	movs	r2, r5
 8007e60:	42bd      	cmp	r5, r7
 8007e62:	d900      	bls.n	8007e66 <_realloc_r+0x4a>
 8007e64:	003a      	movs	r2, r7
 8007e66:	0021      	movs	r1, r4
 8007e68:	9801      	ldr	r0, [sp, #4]
 8007e6a:	f7ff fc3f 	bl	80076ec <memcpy>
 8007e6e:	0021      	movs	r1, r4
 8007e70:	0030      	movs	r0, r6
 8007e72:	f000 f833 	bl	8007edc <_free_r>
 8007e76:	9c01      	ldr	r4, [sp, #4]
 8007e78:	e7da      	b.n	8007e30 <_realloc_r+0x14>

08007e7a <memmove>:
 8007e7a:	b510      	push	{r4, lr}
 8007e7c:	4288      	cmp	r0, r1
 8007e7e:	d806      	bhi.n	8007e8e <memmove+0x14>
 8007e80:	2300      	movs	r3, #0
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d008      	beq.n	8007e98 <memmove+0x1e>
 8007e86:	5ccc      	ldrb	r4, [r1, r3]
 8007e88:	54c4      	strb	r4, [r0, r3]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	e7f9      	b.n	8007e82 <memmove+0x8>
 8007e8e:	188b      	adds	r3, r1, r2
 8007e90:	4298      	cmp	r0, r3
 8007e92:	d2f5      	bcs.n	8007e80 <memmove+0x6>
 8007e94:	3a01      	subs	r2, #1
 8007e96:	d200      	bcs.n	8007e9a <memmove+0x20>
 8007e98:	bd10      	pop	{r4, pc}
 8007e9a:	5c8b      	ldrb	r3, [r1, r2]
 8007e9c:	5483      	strb	r3, [r0, r2]
 8007e9e:	e7f9      	b.n	8007e94 <memmove+0x1a>

08007ea0 <_sbrk_r>:
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	b570      	push	{r4, r5, r6, lr}
 8007ea4:	4d06      	ldr	r5, [pc, #24]	@ (8007ec0 <_sbrk_r+0x20>)
 8007ea6:	0004      	movs	r4, r0
 8007ea8:	0008      	movs	r0, r1
 8007eaa:	602b      	str	r3, [r5, #0]
 8007eac:	f7f9 fc06 	bl	80016bc <_sbrk>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d103      	bne.n	8007ebc <_sbrk_r+0x1c>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d000      	beq.n	8007ebc <_sbrk_r+0x1c>
 8007eba:	6023      	str	r3, [r4, #0]
 8007ebc:	bd70      	pop	{r4, r5, r6, pc}
 8007ebe:	46c0      	nop			@ (mov r8, r8)
 8007ec0:	200008b4 	.word	0x200008b4

08007ec4 <memchr>:
 8007ec4:	b2c9      	uxtb	r1, r1
 8007ec6:	1882      	adds	r2, r0, r2
 8007ec8:	4290      	cmp	r0, r2
 8007eca:	d101      	bne.n	8007ed0 <memchr+0xc>
 8007ecc:	2000      	movs	r0, #0
 8007ece:	4770      	bx	lr
 8007ed0:	7803      	ldrb	r3, [r0, #0]
 8007ed2:	428b      	cmp	r3, r1
 8007ed4:	d0fb      	beq.n	8007ece <memchr+0xa>
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	e7f6      	b.n	8007ec8 <memchr+0x4>
	...

08007edc <_free_r>:
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	0005      	movs	r5, r0
 8007ee0:	1e0c      	subs	r4, r1, #0
 8007ee2:	d010      	beq.n	8007f06 <_free_r+0x2a>
 8007ee4:	3c04      	subs	r4, #4
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	da00      	bge.n	8007eee <_free_r+0x12>
 8007eec:	18e4      	adds	r4, r4, r3
 8007eee:	0028      	movs	r0, r5
 8007ef0:	f7ff ff84 	bl	8007dfc <__malloc_lock>
 8007ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8007f6c <_free_r+0x90>)
 8007ef6:	6813      	ldr	r3, [r2, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d105      	bne.n	8007f08 <_free_r+0x2c>
 8007efc:	6063      	str	r3, [r4, #4]
 8007efe:	6014      	str	r4, [r2, #0]
 8007f00:	0028      	movs	r0, r5
 8007f02:	f7ff ff83 	bl	8007e0c <__malloc_unlock>
 8007f06:	bd70      	pop	{r4, r5, r6, pc}
 8007f08:	42a3      	cmp	r3, r4
 8007f0a:	d908      	bls.n	8007f1e <_free_r+0x42>
 8007f0c:	6820      	ldr	r0, [r4, #0]
 8007f0e:	1821      	adds	r1, r4, r0
 8007f10:	428b      	cmp	r3, r1
 8007f12:	d1f3      	bne.n	8007efc <_free_r+0x20>
 8007f14:	6819      	ldr	r1, [r3, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	1809      	adds	r1, r1, r0
 8007f1a:	6021      	str	r1, [r4, #0]
 8007f1c:	e7ee      	b.n	8007efc <_free_r+0x20>
 8007f1e:	001a      	movs	r2, r3
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <_free_r+0x4e>
 8007f26:	42a3      	cmp	r3, r4
 8007f28:	d9f9      	bls.n	8007f1e <_free_r+0x42>
 8007f2a:	6811      	ldr	r1, [r2, #0]
 8007f2c:	1850      	adds	r0, r2, r1
 8007f2e:	42a0      	cmp	r0, r4
 8007f30:	d10b      	bne.n	8007f4a <_free_r+0x6e>
 8007f32:	6820      	ldr	r0, [r4, #0]
 8007f34:	1809      	adds	r1, r1, r0
 8007f36:	1850      	adds	r0, r2, r1
 8007f38:	6011      	str	r1, [r2, #0]
 8007f3a:	4283      	cmp	r3, r0
 8007f3c:	d1e0      	bne.n	8007f00 <_free_r+0x24>
 8007f3e:	6818      	ldr	r0, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	1841      	adds	r1, r0, r1
 8007f44:	6011      	str	r1, [r2, #0]
 8007f46:	6053      	str	r3, [r2, #4]
 8007f48:	e7da      	b.n	8007f00 <_free_r+0x24>
 8007f4a:	42a0      	cmp	r0, r4
 8007f4c:	d902      	bls.n	8007f54 <_free_r+0x78>
 8007f4e:	230c      	movs	r3, #12
 8007f50:	602b      	str	r3, [r5, #0]
 8007f52:	e7d5      	b.n	8007f00 <_free_r+0x24>
 8007f54:	6820      	ldr	r0, [r4, #0]
 8007f56:	1821      	adds	r1, r4, r0
 8007f58:	428b      	cmp	r3, r1
 8007f5a:	d103      	bne.n	8007f64 <_free_r+0x88>
 8007f5c:	6819      	ldr	r1, [r3, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	1809      	adds	r1, r1, r0
 8007f62:	6021      	str	r1, [r4, #0]
 8007f64:	6063      	str	r3, [r4, #4]
 8007f66:	6054      	str	r4, [r2, #4]
 8007f68:	e7ca      	b.n	8007f00 <_free_r+0x24>
 8007f6a:	46c0      	nop			@ (mov r8, r8)
 8007f6c:	200008b0 	.word	0x200008b0

08007f70 <_malloc_usable_size_r>:
 8007f70:	1f0b      	subs	r3, r1, #4
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	1f18      	subs	r0, r3, #4
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	da01      	bge.n	8007f7e <_malloc_usable_size_r+0xe>
 8007f7a:	580b      	ldr	r3, [r1, r0]
 8007f7c:	18c0      	adds	r0, r0, r3
 8007f7e:	4770      	bx	lr

08007f80 <_init>:
 8007f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f82:	46c0      	nop			@ (mov r8, r8)
 8007f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f86:	bc08      	pop	{r3}
 8007f88:	469e      	mov	lr, r3
 8007f8a:	4770      	bx	lr

08007f8c <_fini>:
 8007f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8e:	46c0      	nop			@ (mov r8, r8)
 8007f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f92:	bc08      	pop	{r3}
 8007f94:	469e      	mov	lr, r3
 8007f96:	4770      	bx	lr
