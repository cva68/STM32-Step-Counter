
StepCounter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016f4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080017b4  080017b4  000027b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800182c  0800182c  0000303c  2**0
                  CONTENTS
  4 .ARM          00000000  0800182c  0800182c  0000303c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800182c  0800182c  0000303c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800182c  0800182c  0000282c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001830  08001830  00002830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08001834  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000003c  08001870  0000303c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08001870  00003064  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000038f1  00000000  00000000  00003064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014ca  00000000  00000000  00006955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c0  00000000  00000000  00007e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000035e  00000000  00000000  000082e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000138f7  00000000  00000000  0000863e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006cab  00000000  00000000  0001bf35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077448  00000000  00000000  00022be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009a028  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e68  00000000  00000000  0009a06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0009aed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000003c 	.word	0x2000003c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800179c 	.word	0x0800179c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000040 	.word	0x20000040
 8000104:	0800179c 	.word	0x0800179c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <app_main>:

void button_task_execute(void);
void blinky_task_execute(void);

void app_main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
	// Initialize and start timer

	buttons_init();
 8000226:	f000 f877 	bl	8000318 <buttons_init>

	buttonTaskNextRun = HAL_GetTick() + BUTTON_TASK_PERIOD_TICKS;
 800022a:	f000 fc07 	bl	8000a3c <HAL_GetTick>
 800022e:	0003      	movs	r3, r0
 8000230:	330a      	adds	r3, #10
 8000232:	001a      	movs	r2, r3
 8000234:	4b1b      	ldr	r3, [pc, #108]	@ (80002a4 <app_main+0x84>)
 8000236:	601a      	str	r2, [r3, #0]
	blinkyTaskNextRun = HAL_GetTick() + BLINKY_TASK_PERIOD_TICKS;
 8000238:	f000 fc00 	bl	8000a3c <HAL_GetTick>
 800023c:	0003      	movs	r3, r0
 800023e:	33f5      	adds	r3, #245	@ 0xf5
 8000240:	33ff      	adds	r3, #255	@ 0xff
 8000242:	001a      	movs	r2, r3
 8000244:	4b18      	ldr	r3, [pc, #96]	@ (80002a8 <app_main+0x88>)
 8000246:	601a      	str	r2, [r3, #0]
	uint32_t ticks = HAL_GetTick();
 8000248:	f000 fbf8 	bl	8000a3c <HAL_GetTick>
 800024c:	0003      	movs	r3, r0
 800024e:	607b      	str	r3, [r7, #4]

	while(1)
	{
		rgb_colour_on(RGB_RED);
 8000250:	2000      	movs	r0, #0
 8000252:	f000 fabf 	bl	80007d4 <rgb_colour_on>
		rgb_colour_on(RGB_GREEN);
 8000256:	2001      	movs	r0, #1
 8000258:	f000 fabc 	bl	80007d4 <rgb_colour_on>
		rgb_colour_on(RGB_BLUE);
 800025c:	2002      	movs	r0, #2
 800025e:	f000 fab9 	bl	80007d4 <rgb_colour_on>
		ticks = HAL_GetTick();
 8000262:	f000 fbeb 	bl	8000a3c <HAL_GetTick>
 8000266:	0003      	movs	r3, r0
 8000268:	607b      	str	r3, [r7, #4]

		if(ticks > buttonTaskNextRun)
 800026a:	4b0e      	ldr	r3, [pc, #56]	@ (80002a4 <app_main+0x84>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	429a      	cmp	r2, r3
 8000272:	d907      	bls.n	8000284 <app_main+0x64>
		{
		  button_task_execute();
 8000274:	f000 f81a 	bl	80002ac <button_task_execute>
		  buttonTaskNextRun += BUTTON_TASK_PERIOD_TICKS;
 8000278:	4b0a      	ldr	r3, [pc, #40]	@ (80002a4 <app_main+0x84>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	330a      	adds	r3, #10
 800027e:	001a      	movs	r2, r3
 8000280:	4b08      	ldr	r3, [pc, #32]	@ (80002a4 <app_main+0x84>)
 8000282:	601a      	str	r2, [r3, #0]
		}

		if (ticks > blinkyTaskNextRun)
 8000284:	4b08      	ldr	r3, [pc, #32]	@ (80002a8 <app_main+0x88>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	429a      	cmp	r2, r3
 800028c:	d9e0      	bls.n	8000250 <app_main+0x30>
		{
		  blinky_task_execute();
 800028e:	f000 f838 	bl	8000302 <blinky_task_execute>
		  blinkyTaskNextRun += BLINKY_TASK_PERIOD_TICKS;
 8000292:	4b05      	ldr	r3, [pc, #20]	@ (80002a8 <app_main+0x88>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	33f5      	adds	r3, #245	@ 0xf5
 8000298:	33ff      	adds	r3, #255	@ 0xff
 800029a:	001a      	movs	r2, r3
 800029c:	4b02      	ldr	r3, [pc, #8]	@ (80002a8 <app_main+0x88>)
 800029e:	601a      	str	r2, [r3, #0]
		rgb_colour_on(RGB_RED);
 80002a0:	e7d6      	b.n	8000250 <app_main+0x30>
 80002a2:	46c0      	nop			@ (mov r8, r8)
 80002a4:	20000058 	.word	0x20000058
 80002a8:	2000005c 	.word	0x2000005c

080002ac <button_task_execute>:
		}
	}
}

void button_task_execute(void) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	// Update the buttons
	buttons_update();
 80002b0:	f000 f86c 	bl	800038c <buttons_update>


	if (buttons_checkButton(UP) == PUSHED) {
 80002b4:	2000      	movs	r0, #0
 80002b6:	f000 f8e9 	bl	800048c <buttons_checkButton>
 80002ba:	0003      	movs	r3, r0
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d102      	bne.n	80002c6 <button_task_execute+0x1a>
		rgb_led_toggle(RGB_UP);
 80002c0:	2002      	movs	r0, #2
 80002c2:	f000 faaf 	bl	8000824 <rgb_led_toggle>
	}

	if (buttons_checkButton(DOWN) == PUSHED) {
 80002c6:	2001      	movs	r0, #1
 80002c8:	f000 f8e0 	bl	800048c <buttons_checkButton>
 80002cc:	0003      	movs	r3, r0
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d102      	bne.n	80002d8 <button_task_execute+0x2c>
		rgb_led_toggle(RGB_DOWN);
 80002d2:	2003      	movs	r0, #3
 80002d4:	f000 faa6 	bl	8000824 <rgb_led_toggle>
	}

	if (buttons_checkButton(LEFT) == PUSHED) {
 80002d8:	2002      	movs	r0, #2
 80002da:	f000 f8d7 	bl	800048c <buttons_checkButton>
 80002de:	0003      	movs	r3, r0
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d102      	bne.n	80002ea <button_task_execute+0x3e>
		rgb_led_toggle(RGB_LEFT);
 80002e4:	2000      	movs	r0, #0
 80002e6:	f000 fa9d 	bl	8000824 <rgb_led_toggle>
	}

	if (buttons_checkButton(RIGHT) == PUSHED) {
 80002ea:	2003      	movs	r0, #3
 80002ec:	f000 f8ce 	bl	800048c <buttons_checkButton>
 80002f0:	0003      	movs	r3, r0
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d102      	bne.n	80002fc <button_task_execute+0x50>
		rgb_led_toggle(RGB_RIGHT);
 80002f6:	2001      	movs	r0, #1
 80002f8:	f000 fa94 	bl	8000824 <rgb_led_toggle>
	}
}
 80002fc:	46c0      	nop			@ (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <blinky_task_execute>:

void blinky_task_execute(void) {
 8000302:	b580      	push	{r7, lr}
 8000304:	af00      	add	r7, sp, #0
	// Toggle LD1
	HAL_GPIO_TogglePin(NUCLEO_LD1_GPIO_Port, NUCLEO_LD1_Pin);
 8000306:	23a0      	movs	r3, #160	@ 0xa0
 8000308:	05db      	lsls	r3, r3, #23
 800030a:	2120      	movs	r1, #32
 800030c:	0018      	movs	r0, r3
 800030e:	f000 fe29 	bl	8000f64 <HAL_GPIO_TogglePin>
}
 8000312:	46c0      	nop			@ (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <buttons_init>:
};

// *******************************************************
// buttons_init: Initialise the variables associated with the set of buttons.
void buttons_init (void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++)
 800031e:	2300      	movs	r3, #0
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	e029      	b.n	8000378 <buttons_init+0x60>
	{
		buttons[i].state = buttons[i].normalState;
 8000324:	4918      	ldr	r1, [pc, #96]	@ (8000388 <buttons_init+0x70>)
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	0013      	movs	r3, r2
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	189b      	adds	r3, r3, r2
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	18cb      	adds	r3, r1, r3
 8000332:	3306      	adds	r3, #6
 8000334:	7818      	ldrb	r0, [r3, #0]
 8000336:	4914      	ldr	r1, [pc, #80]	@ (8000388 <buttons_init+0x70>)
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	0013      	movs	r3, r2
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	189b      	adds	r3, r3, r2
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	18cb      	adds	r3, r1, r3
 8000344:	3307      	adds	r3, #7
 8000346:	1c02      	adds	r2, r0, #0
 8000348:	701a      	strb	r2, [r3, #0]
		buttons[i].newStateCount = 0;
 800034a:	490f      	ldr	r1, [pc, #60]	@ (8000388 <buttons_init+0x70>)
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	0013      	movs	r3, r2
 8000350:	005b      	lsls	r3, r3, #1
 8000352:	189b      	adds	r3, r3, r2
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	18cb      	adds	r3, r1, r3
 8000358:	3308      	adds	r3, #8
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
		buttons[i].hasChanged = false;
 800035e:	490a      	ldr	r1, [pc, #40]	@ (8000388 <buttons_init+0x70>)
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	0013      	movs	r3, r2
 8000364:	005b      	lsls	r3, r3, #1
 8000366:	189b      	adds	r3, r3, r2
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	18cb      	adds	r3, r1, r3
 800036c:	3309      	adds	r3, #9
 800036e:	2200      	movs	r2, #0
 8000370:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BUTTONS; i++)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	3301      	adds	r3, #1
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b03      	cmp	r3, #3
 800037c:	ddd2      	ble.n	8000324 <buttons_init+0xc>
	}
}
 800037e:	46c0      	nop			@ (mov r8, r8)
 8000380:	46c0      	nop			@ (mov r8, r8)
 8000382:	46bd      	mov	sp, r7
 8000384:	b002      	add	sp, #8
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000000 	.word	0x20000000

0800038c <buttons_update>:
// Debouncing algorithm: A finite state machine (FSM) is associated with each button.
// A state change can be declared only after NUM_BUT_POLLS consecutive polls have
// read the pin in the opposite condition, before the state changes and
// a flag is set. Set NUM_BUT_POLLS according to the polling rate.
void buttons_update (void)
{
 800038c:	b590      	push	{r4, r7, lr}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
	// Iterate through the buttons, updating button variables as required
	for (int i = 0; i < NUM_BUTTONS; i++)
 8000392:	2300      	movs	r3, #0
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	e06f      	b.n	8000478 <buttons_update+0xec>
	{
		// Read the pin value
		GPIO_PinState rawState = HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin);
 8000398:	493b      	ldr	r1, [pc, #236]	@ (8000488 <buttons_update+0xfc>)
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	0013      	movs	r3, r2
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	189b      	adds	r3, r3, r2
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	5858      	ldr	r0, [r3, r1]
 80003a6:	4938      	ldr	r1, [pc, #224]	@ (8000488 <buttons_update+0xfc>)
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	0013      	movs	r3, r2
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	189b      	adds	r3, r3, r2
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	18cb      	adds	r3, r1, r3
 80003b4:	3304      	adds	r3, #4
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	1cfc      	adds	r4, r7, #3
 80003ba:	0019      	movs	r1, r3
 80003bc:	f000 fd98 	bl	8000ef0 <HAL_GPIO_ReadPin>
 80003c0:	0003      	movs	r3, r0
 80003c2:	7023      	strb	r3, [r4, #0]

		// If reading is different from last confirmed state, increment counter
        if (rawState != buttons[i].state)
 80003c4:	4930      	ldr	r1, [pc, #192]	@ (8000488 <buttons_update+0xfc>)
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	0013      	movs	r3, r2
 80003ca:	005b      	lsls	r3, r3, #1
 80003cc:	189b      	adds	r3, r3, r2
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	18cb      	adds	r3, r1, r3
 80003d2:	3307      	adds	r3, #7
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	1cfa      	adds	r2, r7, #3
 80003d8:	7812      	ldrb	r2, [r2, #0]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d03f      	beq.n	800045e <buttons_update+0xd2>
        {
        	buttons[i].newStateCount++;
 80003de:	492a      	ldr	r1, [pc, #168]	@ (8000488 <buttons_update+0xfc>)
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	0013      	movs	r3, r2
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	189b      	adds	r3, r3, r2
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	18cb      	adds	r3, r1, r3
 80003ec:	3308      	adds	r3, #8
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	3301      	adds	r3, #1
 80003f2:	b2d8      	uxtb	r0, r3
 80003f4:	4924      	ldr	r1, [pc, #144]	@ (8000488 <buttons_update+0xfc>)
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	0013      	movs	r3, r2
 80003fa:	005b      	lsls	r3, r3, #1
 80003fc:	189b      	adds	r3, r3, r2
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	18cb      	adds	r3, r1, r3
 8000402:	3308      	adds	r3, #8
 8000404:	1c02      	adds	r2, r0, #0
 8000406:	701a      	strb	r2, [r3, #0]

        	// If count exceeds poll count, confirm change of state
        	if (buttons[i].newStateCount >= NUM_BUT_POLLS)
 8000408:	491f      	ldr	r1, [pc, #124]	@ (8000488 <buttons_update+0xfc>)
 800040a:	687a      	ldr	r2, [r7, #4]
 800040c:	0013      	movs	r3, r2
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	189b      	adds	r3, r3, r2
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	18cb      	adds	r3, r1, r3
 8000416:	3308      	adds	r3, #8
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b02      	cmp	r3, #2
 800041c:	d929      	bls.n	8000472 <buttons_update+0xe6>
        	{
        		buttons[i].state = rawState;
 800041e:	491a      	ldr	r1, [pc, #104]	@ (8000488 <buttons_update+0xfc>)
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	0013      	movs	r3, r2
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	189b      	adds	r3, r3, r2
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	18cb      	adds	r3, r1, r3
 800042c:	3307      	adds	r3, #7
 800042e:	1cfa      	adds	r2, r7, #3
 8000430:	7812      	ldrb	r2, [r2, #0]
 8000432:	701a      	strb	r2, [r3, #0]
        		buttons[i].hasChanged = true;	// Reset by call to buttons_checkButton()
 8000434:	4914      	ldr	r1, [pc, #80]	@ (8000488 <buttons_update+0xfc>)
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	0013      	movs	r3, r2
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	189b      	adds	r3, r3, r2
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	18cb      	adds	r3, r1, r3
 8000442:	3309      	adds	r3, #9
 8000444:	2201      	movs	r2, #1
 8000446:	701a      	strb	r2, [r3, #0]
        		buttons[i].newStateCount = 0;
 8000448:	490f      	ldr	r1, [pc, #60]	@ (8000488 <buttons_update+0xfc>)
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	0013      	movs	r3, r2
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	189b      	adds	r3, r3, r2
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	18cb      	adds	r3, r1, r3
 8000456:	3308      	adds	r3, #8
 8000458:	2200      	movs	r2, #0
 800045a:	701a      	strb	r2, [r3, #0]
 800045c:	e009      	b.n	8000472 <buttons_update+0xe6>
        	}
        }
        else
        {
        	buttons[i].newStateCount = 0;
 800045e:	490a      	ldr	r1, [pc, #40]	@ (8000488 <buttons_update+0xfc>)
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	0013      	movs	r3, r2
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	189b      	adds	r3, r3, r2
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	18cb      	adds	r3, r1, r3
 800046c:	3308      	adds	r3, #8
 800046e:	2200      	movs	r2, #0
 8000470:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BUTTONS; i++)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	3301      	adds	r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2b03      	cmp	r3, #3
 800047c:	dd8c      	ble.n	8000398 <buttons_update+0xc>
        }
	}
}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	46c0      	nop			@ (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b003      	add	sp, #12
 8000486:	bd90      	pop	{r4, r7, pc}
 8000488:	20000000 	.word	0x20000000

0800048c <buttons_checkButton>:
// *******************************************************
// buttons_checkButton: Function returns the new button logical state if the button
// logical state (PUSHED or RELEASED) has changed since the last call,
// otherwise returns NO_CHANGE.
buttonState_t buttons_checkButton (buttonName_t butName)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	0002      	movs	r2, r0
 8000494:	1dfb      	adds	r3, r7, #7
 8000496:	701a      	strb	r2, [r3, #0]
	if (buttons[butName].hasChanged)
 8000498:	1dfb      	adds	r3, r7, #7
 800049a:	781a      	ldrb	r2, [r3, #0]
 800049c:	4919      	ldr	r1, [pc, #100]	@ (8000504 <buttons_checkButton+0x78>)
 800049e:	0013      	movs	r3, r2
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	189b      	adds	r3, r3, r2
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	18cb      	adds	r3, r1, r3
 80004a8:	3309      	adds	r3, #9
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d024      	beq.n	80004fa <buttons_checkButton+0x6e>
	{
		buttons[butName].hasChanged = false;
 80004b0:	1dfb      	adds	r3, r7, #7
 80004b2:	781a      	ldrb	r2, [r3, #0]
 80004b4:	4913      	ldr	r1, [pc, #76]	@ (8000504 <buttons_checkButton+0x78>)
 80004b6:	0013      	movs	r3, r2
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	189b      	adds	r3, r3, r2
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	18cb      	adds	r3, r1, r3
 80004c0:	3309      	adds	r3, #9
 80004c2:	2200      	movs	r2, #0
 80004c4:	701a      	strb	r2, [r3, #0]
		if (buttons[butName].state == buttons[butName].normalState)
 80004c6:	1dfb      	adds	r3, r7, #7
 80004c8:	781a      	ldrb	r2, [r3, #0]
 80004ca:	490e      	ldr	r1, [pc, #56]	@ (8000504 <buttons_checkButton+0x78>)
 80004cc:	0013      	movs	r3, r2
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	189b      	adds	r3, r3, r2
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	18cb      	adds	r3, r1, r3
 80004d6:	3307      	adds	r3, #7
 80004d8:	7819      	ldrb	r1, [r3, #0]
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	781a      	ldrb	r2, [r3, #0]
 80004de:	4809      	ldr	r0, [pc, #36]	@ (8000504 <buttons_checkButton+0x78>)
 80004e0:	0013      	movs	r3, r2
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	189b      	adds	r3, r3, r2
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	18c3      	adds	r3, r0, r3
 80004ea:	3306      	adds	r3, #6
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	4299      	cmp	r1, r3
 80004f0:	d101      	bne.n	80004f6 <buttons_checkButton+0x6a>
			return RELEASED;
 80004f2:	2300      	movs	r3, #0
 80004f4:	e002      	b.n	80004fc <buttons_checkButton+0x70>
		else
			return PUSHED;
 80004f6:	2301      	movs	r3, #1
 80004f8:	e000      	b.n	80004fc <buttons_checkButton+0x70>
	}
	return NO_CHANGE;
 80004fa:	2302      	movs	r3, #2
}
 80004fc:	0018      	movs	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	b002      	add	sp, #8
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000000 	.word	0x20000000

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b08b      	sub	sp, #44	@ 0x2c
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	2414      	movs	r4, #20
 8000510:	193b      	adds	r3, r7, r4
 8000512:	0018      	movs	r0, r3
 8000514:	2314      	movs	r3, #20
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f001 f913 	bl	8001744 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b79      	ldr	r3, [pc, #484]	@ (8000704 <MX_GPIO_Init+0x1fc>)
 8000520:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000522:	4b78      	ldr	r3, [pc, #480]	@ (8000704 <MX_GPIO_Init+0x1fc>)
 8000524:	2104      	movs	r1, #4
 8000526:	430a      	orrs	r2, r1
 8000528:	635a      	str	r2, [r3, #52]	@ 0x34
 800052a:	4b76      	ldr	r3, [pc, #472]	@ (8000704 <MX_GPIO_Init+0x1fc>)
 800052c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800052e:	2204      	movs	r2, #4
 8000530:	4013      	ands	r3, r2
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000536:	4b73      	ldr	r3, [pc, #460]	@ (8000704 <MX_GPIO_Init+0x1fc>)
 8000538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800053a:	4b72      	ldr	r3, [pc, #456]	@ (8000704 <MX_GPIO_Init+0x1fc>)
 800053c:	2120      	movs	r1, #32
 800053e:	430a      	orrs	r2, r1
 8000540:	635a      	str	r2, [r3, #52]	@ 0x34
 8000542:	4b70      	ldr	r3, [pc, #448]	@ (8000704 <MX_GPIO_Init+0x1fc>)
 8000544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000546:	2220      	movs	r2, #32
 8000548:	4013      	ands	r3, r2
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b6d      	ldr	r3, [pc, #436]	@ (8000704 <MX_GPIO_Init+0x1fc>)
 8000550:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000552:	4b6c      	ldr	r3, [pc, #432]	@ (8000704 <MX_GPIO_Init+0x1fc>)
 8000554:	2101      	movs	r1, #1
 8000556:	430a      	orrs	r2, r1
 8000558:	635a      	str	r2, [r3, #52]	@ 0x34
 800055a:	4b6a      	ldr	r3, [pc, #424]	@ (8000704 <MX_GPIO_Init+0x1fc>)
 800055c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800055e:	2201      	movs	r2, #1
 8000560:	4013      	ands	r3, r2
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b67      	ldr	r3, [pc, #412]	@ (8000704 <MX_GPIO_Init+0x1fc>)
 8000568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800056a:	4b66      	ldr	r3, [pc, #408]	@ (8000704 <MX_GPIO_Init+0x1fc>)
 800056c:	2102      	movs	r1, #2
 800056e:	430a      	orrs	r2, r1
 8000570:	635a      	str	r2, [r3, #52]	@ 0x34
 8000572:	4b64      	ldr	r3, [pc, #400]	@ (8000704 <MX_GPIO_Init+0x1fc>)
 8000574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000576:	2202      	movs	r2, #2
 8000578:	4013      	ands	r3, r2
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	4b61      	ldr	r3, [pc, #388]	@ (8000704 <MX_GPIO_Init+0x1fc>)
 8000580:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000582:	4b60      	ldr	r3, [pc, #384]	@ (8000704 <MX_GPIO_Init+0x1fc>)
 8000584:	2108      	movs	r1, #8
 8000586:	430a      	orrs	r2, r1
 8000588:	635a      	str	r2, [r3, #52]	@ 0x34
 800058a:	4b5e      	ldr	r3, [pc, #376]	@ (8000704 <MX_GPIO_Init+0x1fc>)
 800058c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800058e:	2208      	movs	r2, #8
 8000590:	4013      	ands	r3, r2
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB_DS4_Pin|RGB_DS2_Pin|RGB_DS3_Pin, GPIO_PIN_SET);
 8000596:	495c      	ldr	r1, [pc, #368]	@ (8000708 <MX_GPIO_Init+0x200>)
 8000598:	4b5c      	ldr	r3, [pc, #368]	@ (800070c <MX_GPIO_Init+0x204>)
 800059a:	2201      	movs	r2, #1
 800059c:	0018      	movs	r0, r3
 800059e:	f000 fcc4 	bl	8000f2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_DS1_GPIO_Port, RGB_DS1_Pin, GPIO_PIN_SET);
 80005a2:	4b5b      	ldr	r3, [pc, #364]	@ (8000710 <MX_GPIO_Init+0x208>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	2108      	movs	r1, #8
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 fcbe 	bl	8000f2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NUCLEO_LD1_GPIO_Port, NUCLEO_LD1_Pin, GPIO_PIN_RESET);
 80005ae:	23a0      	movs	r3, #160	@ 0xa0
 80005b0:	05db      	lsls	r3, r3, #23
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	0018      	movs	r0, r3
 80005b8:	f000 fcb7 	bl	8000f2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NUCLEO_LD2_GPIO_Port, NUCLEO_LD2_Pin, GPIO_PIN_RESET);
 80005bc:	2380      	movs	r3, #128	@ 0x80
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	4852      	ldr	r0, [pc, #328]	@ (800070c <MX_GPIO_Init+0x204>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	0019      	movs	r1, r3
 80005c6:	f000 fcb0 	bl	8000f2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin, GPIO_PIN_RESET);
 80005ca:	4b52      	ldr	r3, [pc, #328]	@ (8000714 <MX_GPIO_Init+0x20c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	211c      	movs	r1, #28
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 fcaa 	bl	8000f2a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	4a4f      	ldr	r2, [pc, #316]	@ (8000718 <MX_GPIO_Init+0x210>)
 80005da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2200      	movs	r2, #0
 80005e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	2202      	movs	r2, #2
 80005e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	4a48      	ldr	r2, [pc, #288]	@ (800070c <MX_GPIO_Init+0x204>)
 80005ec:	0019      	movs	r1, r3
 80005ee:	0010      	movs	r0, r2
 80005f0:	f000 fb0c 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RGB_DS4_Pin|RGB_DS2_Pin|RGB_DS3_Pin|NUCLEO_LD2_Pin;
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	4a49      	ldr	r2, [pc, #292]	@ (800071c <MX_GPIO_Init+0x214>)
 80005f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	2201      	movs	r2, #1
 80005fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	193b      	adds	r3, r7, r4
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	193b      	adds	r3, r7, r4
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800060c:	193b      	adds	r3, r7, r4
 800060e:	4a3f      	ldr	r2, [pc, #252]	@ (800070c <MX_GPIO_Init+0x204>)
 8000610:	0019      	movs	r1, r3
 8000612:	0010      	movs	r0, r2
 8000614:	f000 fafa 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW4_Pin;
 8000618:	0021      	movs	r1, r4
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2280      	movs	r2, #128	@ 0x80
 800061e:	0192      	lsls	r2, r2, #6
 8000620:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000622:	000c      	movs	r4, r1
 8000624:	193b      	adds	r3, r7, r4
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	2201      	movs	r2, #1
 800062e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW4_GPIO_Port, &GPIO_InitStruct);
 8000630:	193b      	adds	r3, r7, r4
 8000632:	4a36      	ldr	r2, [pc, #216]	@ (800070c <MX_GPIO_Init+0x204>)
 8000634:	0019      	movs	r1, r3
 8000636:	0010      	movs	r0, r2
 8000638:	f000 fae8 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RGB_DS1_Pin;
 800063c:	193b      	adds	r3, r7, r4
 800063e:	2208      	movs	r2, #8
 8000640:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	193b      	adds	r3, r7, r4
 8000644:	2201      	movs	r2, #1
 8000646:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	193b      	adds	r3, r7, r4
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	193b      	adds	r3, r7, r4
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RGB_DS1_GPIO_Port, &GPIO_InitStruct);
 8000654:	193b      	adds	r3, r7, r4
 8000656:	4a2e      	ldr	r2, [pc, #184]	@ (8000710 <MX_GPIO_Init+0x208>)
 8000658:	0019      	movs	r1, r3
 800065a:	0010      	movs	r0, r2
 800065c:	f000 fad6 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUCLEO_LD1_Pin;
 8000660:	193b      	adds	r3, r7, r4
 8000662:	2220      	movs	r2, #32
 8000664:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	193b      	adds	r3, r7, r4
 8000668:	2201      	movs	r2, #1
 800066a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	193b      	adds	r3, r7, r4
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NUCLEO_LD1_GPIO_Port, &GPIO_InitStruct);
 8000678:	193a      	adds	r2, r7, r4
 800067a:	23a0      	movs	r3, #160	@ 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f000 fac3 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOYSTICK_CLICK_Pin;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2202      	movs	r2, #2
 800068a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068c:	193b      	adds	r3, r7, r4
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2202      	movs	r2, #2
 8000696:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(JOYSTICK_CLICK_GPIO_Port, &GPIO_InitStruct);
 8000698:	193b      	adds	r3, r7, r4
 800069a:	4a21      	ldr	r2, [pc, #132]	@ (8000720 <MX_GPIO_Init+0x218>)
 800069c:	0019      	movs	r1, r3
 800069e:	0010      	movs	r0, r2
 80006a0:	f000 fab4 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	221c      	movs	r2, #28
 80006a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2201      	movs	r2, #1
 80006ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	4a15      	ldr	r2, [pc, #84]	@ (8000714 <MX_GPIO_Init+0x20c>)
 80006c0:	0019      	movs	r1, r3
 80006c2:	0010      	movs	r0, r2
 80006c4:	f000 faa2 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW3_Pin;
 80006c8:	0021      	movs	r1, r4
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2280      	movs	r2, #128	@ 0x80
 80006ce:	00d2      	lsls	r2, r2, #3
 80006d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	4a13      	ldr	r2, [pc, #76]	@ (8000724 <MX_GPIO_Init+0x21c>)
 80006d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2202      	movs	r2, #2
 80006dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	4a0a      	ldr	r2, [pc, #40]	@ (800070c <MX_GPIO_Init+0x204>)
 80006e2:	0019      	movs	r1, r3
 80006e4:	0010      	movs	r0, r2
 80006e6:	f000 fa91 	bl	8000c0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	2007      	movs	r0, #7
 80006f0:	f000 fa5a 	bl	8000ba8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80006f4:	2007      	movs	r0, #7
 80006f6:	f000 fa6c 	bl	8000bd2 <HAL_NVIC_EnableIRQ>

}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b00b      	add	sp, #44	@ 0x2c
 8000700:	bd90      	pop	{r4, r7, pc}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	40021000 	.word	0x40021000
 8000708:	00001044 	.word	0x00001044
 800070c:	50000800 	.word	0x50000800
 8000710:	50001400 	.word	0x50001400
 8000714:	50000c00 	.word	0x50000c00
 8000718:	00000802 	.word	0x00000802
 800071c:	00001244 	.word	0x00001244
 8000720:	50000400 	.word	0x50000400
 8000724:	10110000 	.word	0x10110000

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072c:	f000 f913 	bl	8000956 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000730:	f000 f805 	bl	800073e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000734:	f7ff fee8 	bl	8000508 <MX_GPIO_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	app_main();
 8000738:	f7ff fd72 	bl	8000220 <app_main>
 800073c:	e7fc      	b.n	8000738 <main+0x10>

0800073e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073e:	b590      	push	{r4, r7, lr}
 8000740:	b08f      	sub	sp, #60	@ 0x3c
 8000742:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000744:	2418      	movs	r4, #24
 8000746:	193b      	adds	r3, r7, r4
 8000748:	0018      	movs	r0, r3
 800074a:	2320      	movs	r3, #32
 800074c:	001a      	movs	r2, r3
 800074e:	2100      	movs	r1, #0
 8000750:	f000 fff8 	bl	8001744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	0018      	movs	r0, r3
 8000758:	2314      	movs	r3, #20
 800075a:	001a      	movs	r2, r3
 800075c:	2100      	movs	r1, #0
 800075e:	f000 fff1 	bl	8001744 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000762:	193b      	adds	r3, r7, r4
 8000764:	2202      	movs	r2, #2
 8000766:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	0052      	lsls	r2, r2, #1
 800076e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000770:	193b      	adds	r3, r7, r4
 8000772:	2280      	movs	r2, #128	@ 0x80
 8000774:	0152      	lsls	r2, r2, #5
 8000776:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2240      	movs	r2, #64	@ 0x40
 800077c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	193b      	adds	r3, r7, r4
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fc49 	bl	8001018 <HAL_RCC_OscConfig>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x50>
  {
    Error_Handler();
 800078a:	f000 f81c 	bl	80007c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2207      	movs	r2, #7
 8000792:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2100      	movs	r1, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fe57 	bl	8001464 <HAL_RCC_ClockConfig>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007ba:	f000 f804 	bl	80007c6 <Error_Handler>
  }
}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b00f      	add	sp, #60	@ 0x3c
 80007c4:	bd90      	pop	{r4, r7, pc}

080007c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ca:	b672      	cpsid	i
}
 80007cc:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	e7fd      	b.n	80007ce <Error_Handler+0x8>
	...

080007d4 <rgb_colour_on>:
	GPIO_PinState state = RGB_LEDS[led].active_high ? GPIO_PIN_SET : GPIO_PIN_RESET;
	HAL_GPIO_WritePin(RGB_LEDS[led].port, RGB_LEDS[led].pin, state);
}

void rgb_colour_on(rgb_colour_t colour)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	0002      	movs	r2, r0
 80007dc:	1dfb      	adds	r3, r7, #7
 80007de:	701a      	strb	r2, [r3, #0]
	GPIO_PinState state = RGB_COLOURS[colour].active_high ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000820 <rgb_colour_on+0x4c>)
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	18d3      	adds	r3, r2, r3
 80007ea:	3306      	adds	r3, #6
 80007ec:	781a      	ldrb	r2, [r3, #0]
 80007ee:	240f      	movs	r4, #15
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RGB_COLOURS[colour].port, RGB_COLOURS[colour].pin, state);
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	781a      	ldrb	r2, [r3, #0]
 80007f8:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <rgb_colour_on+0x4c>)
 80007fa:	00d2      	lsls	r2, r2, #3
 80007fc:	58d0      	ldr	r0, [r2, r3]
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4a07      	ldr	r2, [pc, #28]	@ (8000820 <rgb_colour_on+0x4c>)
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	18d3      	adds	r3, r2, r3
 8000808:	3304      	adds	r3, #4
 800080a:	8819      	ldrh	r1, [r3, #0]
 800080c:	193b      	adds	r3, r7, r4
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	001a      	movs	r2, r3
 8000812:	f000 fb8a 	bl	8000f2a <HAL_GPIO_WritePin>
}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b005      	add	sp, #20
 800081c:	bd90      	pop	{r4, r7, pc}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	080017d4 	.word	0x080017d4

08000824 <rgb_led_toggle>:
	GPIO_PinState state = RGB_COLOURS[colour].active_high ? GPIO_PIN_RESET : GPIO_PIN_SET;
	HAL_GPIO_WritePin(RGB_COLOURS[colour].port, RGB_COLOURS[colour].pin, state);
}

void rgb_led_toggle(rgb_led_t led)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	0002      	movs	r2, r0
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(RGB_LEDS[led].port, RGB_LEDS[led].pin);
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	781a      	ldrb	r2, [r3, #0]
 8000834:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <rgb_led_toggle+0x34>)
 8000836:	00d2      	lsls	r2, r2, #3
 8000838:	58d0      	ldr	r0, [r2, r3]
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	4a06      	ldr	r2, [pc, #24]	@ (8000858 <rgb_led_toggle+0x34>)
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	18d3      	adds	r3, r2, r3
 8000844:	3304      	adds	r3, #4
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	0019      	movs	r1, r3
 800084a:	f000 fb8b 	bl	8000f64 <HAL_GPIO_TogglePin>
}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b002      	add	sp, #8
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	080017b4 	.word	0x080017b4

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <HAL_MspInit+0x44>)
 8000864:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <HAL_MspInit+0x44>)
 8000868:	2101      	movs	r1, #1
 800086a:	430a      	orrs	r2, r1
 800086c:	641a      	str	r2, [r3, #64]	@ 0x40
 800086e:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <HAL_MspInit+0x44>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	2201      	movs	r2, #1
 8000874:	4013      	ands	r3, r2
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <HAL_MspInit+0x44>)
 800087c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <HAL_MspInit+0x44>)
 8000880:	2180      	movs	r1, #128	@ 0x80
 8000882:	0549      	lsls	r1, r1, #21
 8000884:	430a      	orrs	r2, r1
 8000886:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000888:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <HAL_MspInit+0x44>)
 800088a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800088c:	2380      	movs	r3, #128	@ 0x80
 800088e:	055b      	lsls	r3, r3, #21
 8000890:	4013      	ands	r3, r2
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b002      	add	sp, #8
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	40021000 	.word	0x40021000

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	e7fd      	b.n	80008a8 <NMI_Handler+0x4>

080008ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b0:	46c0      	nop			@ (mov r8, r8)
 80008b2:	e7fd      	b.n	80008b0 <HardFault_Handler+0x4>

080008b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008cc:	f000 f8a4 	bl	8000a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d0:	46c0      	nop			@ (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 80008da:	2380      	movs	r3, #128	@ 0x80
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 fb5c 	bl	8000f9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f0:	4b03      	ldr	r3, [pc, #12]	@ (8000900 <SystemInit+0x14>)
 80008f2:	2280      	movs	r2, #128	@ 0x80
 80008f4:	0512      	lsls	r2, r2, #20
 80008f6:	609a      	str	r2, [r3, #8]
#endif
}
 80008f8:	46c0      	nop			@ (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000904:	480d      	ldr	r0, [pc, #52]	@ (800093c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000906:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000908:	f7ff fff0 	bl	80008ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800090c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800090e:	e003      	b.n	8000918 <LoopCopyDataInit>

08000910 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000910:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000912:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000914:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000916:	3104      	adds	r1, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000918:	480a      	ldr	r0, [pc, #40]	@ (8000944 <LoopForever+0xa>)
  ldr r3, =_edata
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <LoopForever+0xe>)
  adds r2, r0, r1
 800091c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800091e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000920:	d3f6      	bcc.n	8000910 <CopyDataInit>
  ldr r2, =_sbss
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <LoopForever+0x12>)
  b LoopFillZerobss
 8000924:	e002      	b.n	800092c <LoopFillZerobss>

08000926 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  str  r3, [r2]
 8000928:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092a:	3204      	adds	r2, #4

0800092c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800092c:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <LoopForever+0x16>)
  cmp r2, r3
 800092e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000930:	d3f9      	bcc.n	8000926 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000932:	f000 ff0f 	bl	8001754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000936:	f7ff fef7 	bl	8000728 <main>

0800093a <LoopForever>:

LoopForever:
    b LoopForever
 800093a:	e7fe      	b.n	800093a <LoopForever>
  ldr   r0, =_estack
 800093c:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8000940:	08001834 	.word	0x08001834
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000948:	2000003c 	.word	0x2000003c
  ldr r2, =_sbss
 800094c:	2000003c 	.word	0x2000003c
  ldr r3, = _ebss
 8000950:	20000064 	.word	0x20000064

08000954 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC1_IRQHandler>

08000956 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800095c:	1dfb      	adds	r3, r7, #7
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000962:	2003      	movs	r0, #3
 8000964:	f000 f80e 	bl	8000984 <HAL_InitTick>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d003      	beq.n	8000974 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800096c:	1dfb      	adds	r3, r7, #7
 800096e:	2201      	movs	r2, #1
 8000970:	701a      	strb	r2, [r3, #0]
 8000972:	e001      	b.n	8000978 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000974:	f7ff ff72 	bl	800085c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	781b      	ldrb	r3, [r3, #0]
}
 800097c:	0018      	movs	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	b002      	add	sp, #8
 8000982:	bd80      	pop	{r7, pc}

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800098c:	230f      	movs	r3, #15
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000994:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <HAL_InitTick+0x88>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d02b      	beq.n	80009f4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800099c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <HAL_InitTick+0x8c>)
 800099e:	681c      	ldr	r4, [r3, #0]
 80009a0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <HAL_InitTick+0x88>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	0019      	movs	r1, r3
 80009a6:	23fa      	movs	r3, #250	@ 0xfa
 80009a8:	0098      	lsls	r0, r3, #2
 80009aa:	f7ff fbad 	bl	8000108 <__udivsi3>
 80009ae:	0003      	movs	r3, r0
 80009b0:	0019      	movs	r1, r3
 80009b2:	0020      	movs	r0, r4
 80009b4:	f7ff fba8 	bl	8000108 <__udivsi3>
 80009b8:	0003      	movs	r3, r0
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 f919 	bl	8000bf2 <HAL_SYSTICK_Config>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d112      	bne.n	80009ea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d80a      	bhi.n	80009e0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	2301      	movs	r3, #1
 80009ce:	425b      	negs	r3, r3
 80009d0:	2200      	movs	r2, #0
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 f8e8 	bl	8000ba8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <HAL_InitTick+0x90>)
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	e00d      	b.n	80009fc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009e0:	230f      	movs	r3, #15
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	e008      	b.n	80009fc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ea:	230f      	movs	r3, #15
 80009ec:	18fb      	adds	r3, r7, r3
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e003      	b.n	80009fc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f4:	230f      	movs	r3, #15
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009fc:	230f      	movs	r3, #15
 80009fe:	18fb      	adds	r3, r7, r3
 8000a00:	781b      	ldrb	r3, [r3, #0]
}
 8000a02:	0018      	movs	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b005      	add	sp, #20
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	20000038 	.word	0x20000038
 8000a10:	20000030 	.word	0x20000030
 8000a14:	20000034 	.word	0x20000034

08000a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a1c:	4b05      	ldr	r3, [pc, #20]	@ (8000a34 <HAL_IncTick+0x1c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	001a      	movs	r2, r3
 8000a22:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <HAL_IncTick+0x20>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	18d2      	adds	r2, r2, r3
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <HAL_IncTick+0x20>)
 8000a2a:	601a      	str	r2, [r3, #0]
}
 8000a2c:	46c0      	nop			@ (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	20000038 	.word	0x20000038
 8000a38:	20000060 	.word	0x20000060

08000a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b02      	ldr	r3, [pc, #8]	@ (8000a4c <HAL_GetTick+0x10>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	20000060 	.word	0x20000060

08000a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	0002      	movs	r2, r0
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a62:	d809      	bhi.n	8000a78 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	001a      	movs	r2, r3
 8000a6a:	231f      	movs	r3, #31
 8000a6c:	401a      	ands	r2, r3
 8000a6e:	4b04      	ldr	r3, [pc, #16]	@ (8000a80 <__NVIC_EnableIRQ+0x30>)
 8000a70:	2101      	movs	r1, #1
 8000a72:	4091      	lsls	r1, r2
 8000a74:	000a      	movs	r2, r1
 8000a76:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000a78:	46c0      	nop			@ (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b002      	add	sp, #8
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a98:	d828      	bhi.n	8000aec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b58 <__NVIC_SetPriority+0xd4>)
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b25b      	sxtb	r3, r3
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	33c0      	adds	r3, #192	@ 0xc0
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	589b      	ldr	r3, [r3, r2]
 8000aaa:	1dfa      	adds	r2, r7, #7
 8000aac:	7812      	ldrb	r2, [r2, #0]
 8000aae:	0011      	movs	r1, r2
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	400a      	ands	r2, r1
 8000ab4:	00d2      	lsls	r2, r2, #3
 8000ab6:	21ff      	movs	r1, #255	@ 0xff
 8000ab8:	4091      	lsls	r1, r2
 8000aba:	000a      	movs	r2, r1
 8000abc:	43d2      	mvns	r2, r2
 8000abe:	401a      	ands	r2, r3
 8000ac0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	019b      	lsls	r3, r3, #6
 8000ac6:	22ff      	movs	r2, #255	@ 0xff
 8000ac8:	401a      	ands	r2, r3
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	0018      	movs	r0, r3
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	4003      	ands	r3, r0
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad8:	481f      	ldr	r0, [pc, #124]	@ (8000b58 <__NVIC_SetPriority+0xd4>)
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	33c0      	adds	r3, #192	@ 0xc0
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aea:	e031      	b.n	8000b50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aec:	4a1b      	ldr	r2, [pc, #108]	@ (8000b5c <__NVIC_SetPriority+0xd8>)
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	0019      	movs	r1, r3
 8000af4:	230f      	movs	r3, #15
 8000af6:	400b      	ands	r3, r1
 8000af8:	3b08      	subs	r3, #8
 8000afa:	089b      	lsrs	r3, r3, #2
 8000afc:	3306      	adds	r3, #6
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	18d3      	adds	r3, r2, r3
 8000b02:	3304      	adds	r3, #4
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	1dfa      	adds	r2, r7, #7
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	400a      	ands	r2, r1
 8000b10:	00d2      	lsls	r2, r2, #3
 8000b12:	21ff      	movs	r1, #255	@ 0xff
 8000b14:	4091      	lsls	r1, r2
 8000b16:	000a      	movs	r2, r1
 8000b18:	43d2      	mvns	r2, r2
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	019b      	lsls	r3, r3, #6
 8000b22:	22ff      	movs	r2, #255	@ 0xff
 8000b24:	401a      	ands	r2, r3
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	4003      	ands	r3, r0
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b34:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <__NVIC_SetPriority+0xd8>)
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	001c      	movs	r4, r3
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	4023      	ands	r3, r4
 8000b40:	3b08      	subs	r3, #8
 8000b42:	089b      	lsrs	r3, r3, #2
 8000b44:	430a      	orrs	r2, r1
 8000b46:	3306      	adds	r3, #6
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	18c3      	adds	r3, r0, r3
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	601a      	str	r2, [r3, #0]
}
 8000b50:	46c0      	nop			@ (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b003      	add	sp, #12
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	e000e100 	.word	0xe000e100
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	1e5a      	subs	r2, r3, #1
 8000b6c:	2380      	movs	r3, #128	@ 0x80
 8000b6e:	045b      	lsls	r3, r3, #17
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d301      	bcc.n	8000b78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b74:	2301      	movs	r3, #1
 8000b76:	e010      	b.n	8000b9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <SysTick_Config+0x44>)
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	3a01      	subs	r2, #1
 8000b7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b80:	2301      	movs	r3, #1
 8000b82:	425b      	negs	r3, r3
 8000b84:	2103      	movs	r1, #3
 8000b86:	0018      	movs	r0, r3
 8000b88:	f7ff ff7c 	bl	8000a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <SysTick_Config+0x44>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b92:	4b04      	ldr	r3, [pc, #16]	@ (8000ba4 <SysTick_Config+0x44>)
 8000b94:	2207      	movs	r2, #7
 8000b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b002      	add	sp, #8
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	e000e010 	.word	0xe000e010

08000ba8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	1c02      	adds	r2, r0, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b25b      	sxtb	r3, r3
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f7ff ff5d 	bl	8000a84 <__NVIC_SetPriority>
}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b004      	add	sp, #16
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	0002      	movs	r2, r0
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff ff33 	bl	8000a50 <__NVIC_EnableIRQ>
}
 8000bea:	46c0      	nop			@ (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b002      	add	sp, #8
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff ffaf 	bl	8000b60 <SysTick_Config>
 8000c02:	0003      	movs	r3, r0
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b002      	add	sp, #8
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000c1a:	e153      	b.n	8000ec4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2101      	movs	r1, #1
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4091      	lsls	r1, r2
 8000c26:	000a      	movs	r2, r1
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d100      	bne.n	8000c34 <HAL_GPIO_Init+0x28>
 8000c32:	e144      	b.n	8000ebe <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d003      	beq.n	8000c44 <HAL_GPIO_Init+0x38>
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b12      	cmp	r3, #18
 8000c42:	d125      	bne.n	8000c90 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	08da      	lsrs	r2, r3, #3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3208      	adds	r2, #8
 8000c4c:	0092      	lsls	r2, r2, #2
 8000c4e:	58d3      	ldr	r3, [r2, r3]
 8000c50:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	2207      	movs	r2, #7
 8000c56:	4013      	ands	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	220f      	movs	r2, #15
 8000c5c:	409a      	lsls	r2, r3
 8000c5e:	0013      	movs	r3, r2
 8000c60:	43da      	mvns	r2, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	4013      	ands	r3, r2
 8000c66:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	401a      	ands	r2, r3
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	2107      	movs	r1, #7
 8000c74:	400b      	ands	r3, r1
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	409a      	lsls	r2, r3
 8000c7a:	0013      	movs	r3, r2
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	08da      	lsrs	r2, r3, #3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3208      	adds	r2, #8
 8000c8a:	0092      	lsls	r2, r2, #2
 8000c8c:	6979      	ldr	r1, [r7, #20]
 8000c8e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	409a      	lsls	r2, r3
 8000c9e:	0013      	movs	r3, r2
 8000ca0:	43da      	mvns	r2, r3
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2203      	movs	r2, #3
 8000cae:	401a      	ands	r2, r3
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	0013      	movs	r3, r2
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d00b      	beq.n	8000ce4 <HAL_GPIO_Init+0xd8>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d007      	beq.n	8000ce4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cd8:	2b11      	cmp	r3, #17
 8000cda:	d003      	beq.n	8000ce4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2b12      	cmp	r3, #18
 8000ce2:	d130      	bne.n	8000d46 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	2203      	movs	r2, #3
 8000cf0:	409a      	lsls	r2, r3
 8000cf2:	0013      	movs	r3, r2
 8000cf4:	43da      	mvns	r2, r3
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	68da      	ldr	r2, [r3, #12]
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	409a      	lsls	r2, r3
 8000d06:	0013      	movs	r3, r2
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	409a      	lsls	r2, r3
 8000d20:	0013      	movs	r3, r2
 8000d22:	43da      	mvns	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	4013      	ands	r3, r2
 8000d28:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	091b      	lsrs	r3, r3, #4
 8000d30:	2201      	movs	r2, #1
 8000d32:	401a      	ands	r2, r3
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	409a      	lsls	r2, r3
 8000d38:	0013      	movs	r3, r2
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d017      	beq.n	8000d7e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	4013      	ands	r3, r2
 8000d64:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	0013      	movs	r3, r2
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	2380      	movs	r3, #128	@ 0x80
 8000d84:	055b      	lsls	r3, r3, #21
 8000d86:	4013      	ands	r3, r2
 8000d88:	d100      	bne.n	8000d8c <HAL_GPIO_Init+0x180>
 8000d8a:	e098      	b.n	8000ebe <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000d8c:	4a53      	ldr	r2, [pc, #332]	@ (8000edc <HAL_GPIO_Init+0x2d0>)
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3318      	adds	r3, #24
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	589b      	ldr	r3, [r3, r2]
 8000d98:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	4013      	ands	r3, r2
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	220f      	movs	r2, #15
 8000da4:	409a      	lsls	r2, r3
 8000da6:	0013      	movs	r3, r2
 8000da8:	43da      	mvns	r2, r3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	4013      	ands	r3, r2
 8000dae:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	23a0      	movs	r3, #160	@ 0xa0
 8000db4:	05db      	lsls	r3, r3, #23
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d019      	beq.n	8000dee <HAL_GPIO_Init+0x1e2>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a48      	ldr	r2, [pc, #288]	@ (8000ee0 <HAL_GPIO_Init+0x2d4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d013      	beq.n	8000dea <HAL_GPIO_Init+0x1de>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a47      	ldr	r2, [pc, #284]	@ (8000ee4 <HAL_GPIO_Init+0x2d8>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d00d      	beq.n	8000de6 <HAL_GPIO_Init+0x1da>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a46      	ldr	r2, [pc, #280]	@ (8000ee8 <HAL_GPIO_Init+0x2dc>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d007      	beq.n	8000de2 <HAL_GPIO_Init+0x1d6>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a45      	ldr	r2, [pc, #276]	@ (8000eec <HAL_GPIO_Init+0x2e0>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d101      	bne.n	8000dde <HAL_GPIO_Init+0x1d2>
 8000dda:	2305      	movs	r3, #5
 8000ddc:	e008      	b.n	8000df0 <HAL_GPIO_Init+0x1e4>
 8000dde:	2306      	movs	r3, #6
 8000de0:	e006      	b.n	8000df0 <HAL_GPIO_Init+0x1e4>
 8000de2:	2303      	movs	r3, #3
 8000de4:	e004      	b.n	8000df0 <HAL_GPIO_Init+0x1e4>
 8000de6:	2302      	movs	r3, #2
 8000de8:	e002      	b.n	8000df0 <HAL_GPIO_Init+0x1e4>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <HAL_GPIO_Init+0x1e4>
 8000dee:	2300      	movs	r3, #0
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	2103      	movs	r1, #3
 8000df4:	400a      	ands	r2, r1
 8000df6:	00d2      	lsls	r2, r2, #3
 8000df8:	4093      	lsls	r3, r2
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000e00:	4936      	ldr	r1, [pc, #216]	@ (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3318      	adds	r3, #24
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000e0e:	4a33      	ldr	r2, [pc, #204]	@ (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e10:	2380      	movs	r3, #128	@ 0x80
 8000e12:	58d3      	ldr	r3, [r2, r3]
 8000e14:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	43da      	mvns	r2, r3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	2380      	movs	r3, #128	@ 0x80
 8000e26:	025b      	lsls	r3, r3, #9
 8000e28:	4013      	ands	r3, r2
 8000e2a:	d003      	beq.n	8000e34 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000e34:	4929      	ldr	r1, [pc, #164]	@ (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e36:	2280      	movs	r2, #128	@ 0x80
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000e3c:	4a27      	ldr	r2, [pc, #156]	@ (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e3e:	2384      	movs	r3, #132	@ 0x84
 8000e40:	58d3      	ldr	r3, [r2, r3]
 8000e42:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	43da      	mvns	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	2380      	movs	r3, #128	@ 0x80
 8000e54:	029b      	lsls	r3, r3, #10
 8000e56:	4013      	ands	r3, r2
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000e62:	491e      	ldr	r1, [pc, #120]	@ (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e64:	2284      	movs	r2, #132	@ 0x84
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	43da      	mvns	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	4013      	ands	r3, r2
 8000e78:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	2380      	movs	r3, #128	@ 0x80
 8000e80:	035b      	lsls	r3, r3, #13
 8000e82:	4013      	ands	r3, r2
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000e94:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	43da      	mvns	r2, r3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	2380      	movs	r3, #128	@ 0x80
 8000eaa:	039b      	lsls	r3, r3, #14
 8000eac:	4013      	ands	r3, r2
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <HAL_GPIO_Init+0x2d0>)
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	40da      	lsrs	r2, r3
 8000ecc:	1e13      	subs	r3, r2, #0
 8000ece:	d000      	beq.n	8000ed2 <HAL_GPIO_Init+0x2c6>
 8000ed0:	e6a4      	b.n	8000c1c <HAL_GPIO_Init+0x10>
  }
}
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	46c0      	nop			@ (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b006      	add	sp, #24
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40021800 	.word	0x40021800
 8000ee0:	50000400 	.word	0x50000400
 8000ee4:	50000800 	.word	0x50000800
 8000ee8:	50000c00 	.word	0x50000c00
 8000eec:	50001400 	.word	0x50001400

08000ef0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	000a      	movs	r2, r1
 8000efa:	1cbb      	adds	r3, r7, #2
 8000efc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	1cba      	adds	r2, r7, #2
 8000f04:	8812      	ldrh	r2, [r2, #0]
 8000f06:	4013      	ands	r3, r2
 8000f08:	d004      	beq.n	8000f14 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000f0a:	230f      	movs	r3, #15
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	2201      	movs	r2, #1
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	e003      	b.n	8000f1c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f14:	230f      	movs	r3, #15
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000f1c:	230f      	movs	r3, #15
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	781b      	ldrb	r3, [r3, #0]
}
 8000f22:	0018      	movs	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b004      	add	sp, #16
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	0008      	movs	r0, r1
 8000f34:	0011      	movs	r1, r2
 8000f36:	1cbb      	adds	r3, r7, #2
 8000f38:	1c02      	adds	r2, r0, #0
 8000f3a:	801a      	strh	r2, [r3, #0]
 8000f3c:	1c7b      	adds	r3, r7, #1
 8000f3e:	1c0a      	adds	r2, r1, #0
 8000f40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f42:	1c7b      	adds	r3, r7, #1
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d004      	beq.n	8000f54 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f4a:	1cbb      	adds	r3, r7, #2
 8000f4c:	881a      	ldrh	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f52:	e003      	b.n	8000f5c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f54:	1cbb      	adds	r3, r7, #2
 8000f56:	881a      	ldrh	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	000a      	movs	r2, r1
 8000f6e:	1cbb      	adds	r3, r7, #2
 8000f70:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f78:	1cbb      	adds	r3, r7, #2
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	041a      	lsls	r2, r3, #16
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	1cb9      	adds	r1, r7, #2
 8000f88:	8809      	ldrh	r1, [r1, #0]
 8000f8a:	400b      	ands	r3, r1
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	619a      	str	r2, [r3, #24]
}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b004      	add	sp, #16
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	0002      	movs	r2, r0
 8000fa4:	1dbb      	adds	r3, r7, #6
 8000fa6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8000fa8:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	1dba      	adds	r2, r7, #6
 8000fae:	8812      	ldrh	r2, [r2, #0]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d008      	beq.n	8000fc6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000fb6:	1dba      	adds	r2, r7, #6
 8000fb8:	8812      	ldrh	r2, [r2, #0]
 8000fba:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000fbc:	1dbb      	adds	r3, r7, #6
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f000 f815 	bl	8000ff0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	1dba      	adds	r2, r7, #6
 8000fcc:	8812      	ldrh	r2, [r2, #0]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d008      	beq.n	8000fe4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000fd4:	1dba      	adds	r2, r7, #6
 8000fd6:	8812      	ldrh	r2, [r2, #0]
 8000fd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000fda:	1dbb      	adds	r3, r7, #6
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f000 f810 	bl	8001004 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000fe4:	46c0      	nop			@ (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021800 	.word	0x40021800

08000ff0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	1dbb      	adds	r3, r7, #6
 8000ffa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000ffc:	46c0      	nop			@ (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b002      	add	sp, #8
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	0002      	movs	r2, r0
 800100c:	1dbb      	adds	r3, r7, #6
 800100e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001010:	46c0      	nop			@ (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	b002      	add	sp, #8
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e20f      	b.n	800144a <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2201      	movs	r2, #1
 8001030:	4013      	ands	r3, r2
 8001032:	d100      	bne.n	8001036 <HAL_RCC_OscConfig+0x1e>
 8001034:	e069      	b.n	800110a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001036:	4bc8      	ldr	r3, [pc, #800]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2238      	movs	r2, #56	@ 0x38
 800103c:	4013      	ands	r3, r2
 800103e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	2b08      	cmp	r3, #8
 8001044:	d105      	bne.n	8001052 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d15d      	bne.n	800110a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e1fb      	b.n	800144a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	2380      	movs	r3, #128	@ 0x80
 8001058:	025b      	lsls	r3, r3, #9
 800105a:	429a      	cmp	r2, r3
 800105c:	d107      	bne.n	800106e <HAL_RCC_OscConfig+0x56>
 800105e:	4bbe      	ldr	r3, [pc, #760]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4bbd      	ldr	r3, [pc, #756]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001064:	2180      	movs	r1, #128	@ 0x80
 8001066:	0249      	lsls	r1, r1, #9
 8001068:	430a      	orrs	r2, r1
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	e020      	b.n	80010b0 <HAL_RCC_OscConfig+0x98>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	23a0      	movs	r3, #160	@ 0xa0
 8001074:	02db      	lsls	r3, r3, #11
 8001076:	429a      	cmp	r2, r3
 8001078:	d10e      	bne.n	8001098 <HAL_RCC_OscConfig+0x80>
 800107a:	4bb7      	ldr	r3, [pc, #732]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4bb6      	ldr	r3, [pc, #728]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001080:	2180      	movs	r1, #128	@ 0x80
 8001082:	02c9      	lsls	r1, r1, #11
 8001084:	430a      	orrs	r2, r1
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	4bb3      	ldr	r3, [pc, #716]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4bb2      	ldr	r3, [pc, #712]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 800108e:	2180      	movs	r1, #128	@ 0x80
 8001090:	0249      	lsls	r1, r1, #9
 8001092:	430a      	orrs	r2, r1
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e00b      	b.n	80010b0 <HAL_RCC_OscConfig+0x98>
 8001098:	4baf      	ldr	r3, [pc, #700]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4bae      	ldr	r3, [pc, #696]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 800109e:	49af      	ldr	r1, [pc, #700]	@ (800135c <HAL_RCC_OscConfig+0x344>)
 80010a0:	400a      	ands	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	4bac      	ldr	r3, [pc, #688]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4bab      	ldr	r3, [pc, #684]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 80010aa:	49ad      	ldr	r1, [pc, #692]	@ (8001360 <HAL_RCC_OscConfig+0x348>)
 80010ac:	400a      	ands	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d014      	beq.n	80010e2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b8:	f7ff fcc0 	bl	8000a3c <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80010c2:	f7ff fcbb 	bl	8000a3c <HAL_GetTick>
 80010c6:	0002      	movs	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b64      	cmp	r3, #100	@ 0x64
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e1ba      	b.n	800144a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010d4:	4ba0      	ldr	r3, [pc, #640]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2380      	movs	r3, #128	@ 0x80
 80010da:	029b      	lsls	r3, r3, #10
 80010dc:	4013      	ands	r3, r2
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0xaa>
 80010e0:	e013      	b.n	800110a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e2:	f7ff fcab 	bl	8000a3c <HAL_GetTick>
 80010e6:	0003      	movs	r3, r0
 80010e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80010ec:	f7ff fca6 	bl	8000a3c <HAL_GetTick>
 80010f0:	0002      	movs	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b64      	cmp	r3, #100	@ 0x64
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e1a5      	b.n	800144a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010fe:	4b96      	ldr	r3, [pc, #600]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	2380      	movs	r3, #128	@ 0x80
 8001104:	029b      	lsls	r3, r3, #10
 8001106:	4013      	ands	r3, r2
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2202      	movs	r2, #2
 8001110:	4013      	ands	r3, r2
 8001112:	d100      	bne.n	8001116 <HAL_RCC_OscConfig+0xfe>
 8001114:	e086      	b.n	8001224 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001116:	4b90      	ldr	r3, [pc, #576]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	2238      	movs	r2, #56	@ 0x38
 800111c:	4013      	ands	r3, r2
 800111e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d12f      	bne.n	8001186 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e18b      	b.n	800144a <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001132:	4b89      	ldr	r3, [pc, #548]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4a8b      	ldr	r2, [pc, #556]	@ (8001364 <HAL_RCC_OscConfig+0x34c>)
 8001138:	4013      	ands	r3, r2
 800113a:	0019      	movs	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	021a      	lsls	r2, r3, #8
 8001142:	4b85      	ldr	r3, [pc, #532]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001144:	430a      	orrs	r2, r1
 8001146:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d112      	bne.n	8001174 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800114e:	4b82      	ldr	r3, [pc, #520]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a85      	ldr	r2, [pc, #532]	@ (8001368 <HAL_RCC_OscConfig+0x350>)
 8001154:	4013      	ands	r3, r2
 8001156:	0019      	movs	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691a      	ldr	r2, [r3, #16]
 800115c:	4b7e      	ldr	r3, [pc, #504]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001162:	4b7d      	ldr	r3, [pc, #500]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	0adb      	lsrs	r3, r3, #11
 8001168:	2207      	movs	r2, #7
 800116a:	4013      	ands	r3, r2
 800116c:	4a7f      	ldr	r2, [pc, #508]	@ (800136c <HAL_RCC_OscConfig+0x354>)
 800116e:	40da      	lsrs	r2, r3
 8001170:	4b7f      	ldr	r3, [pc, #508]	@ (8001370 <HAL_RCC_OscConfig+0x358>)
 8001172:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001174:	4b7f      	ldr	r3, [pc, #508]	@ (8001374 <HAL_RCC_OscConfig+0x35c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff fc03 	bl	8000984 <HAL_InitTick>
 800117e:	1e03      	subs	r3, r0, #0
 8001180:	d050      	beq.n	8001224 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e161      	b.n	800144a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d030      	beq.n	80011f0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800118e:	4b72      	ldr	r3, [pc, #456]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a75      	ldr	r2, [pc, #468]	@ (8001368 <HAL_RCC_OscConfig+0x350>)
 8001194:	4013      	ands	r3, r2
 8001196:	0019      	movs	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	4b6e      	ldr	r3, [pc, #440]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80011a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 80011a8:	2180      	movs	r1, #128	@ 0x80
 80011aa:	0049      	lsls	r1, r1, #1
 80011ac:	430a      	orrs	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b0:	f7ff fc44 	bl	8000a3c <HAL_GetTick>
 80011b4:	0003      	movs	r3, r0
 80011b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80011ba:	f7ff fc3f 	bl	8000a3c <HAL_GetTick>
 80011be:	0002      	movs	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e13e      	b.n	800144a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011cc:	4b62      	ldr	r3, [pc, #392]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	2380      	movs	r3, #128	@ 0x80
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4013      	ands	r3, r2
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d8:	4b5f      	ldr	r3, [pc, #380]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	4a61      	ldr	r2, [pc, #388]	@ (8001364 <HAL_RCC_OscConfig+0x34c>)
 80011de:	4013      	ands	r3, r2
 80011e0:	0019      	movs	r1, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	021a      	lsls	r2, r3, #8
 80011e8:	4b5b      	ldr	r3, [pc, #364]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 80011ea:	430a      	orrs	r2, r1
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	e019      	b.n	8001224 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80011f0:	4b59      	ldr	r3, [pc, #356]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b58      	ldr	r3, [pc, #352]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 80011f6:	4960      	ldr	r1, [pc, #384]	@ (8001378 <HAL_RCC_OscConfig+0x360>)
 80011f8:	400a      	ands	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fc:	f7ff fc1e 	bl	8000a3c <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001206:	f7ff fc19 	bl	8000a3c <HAL_GetTick>
 800120a:	0002      	movs	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e118      	b.n	800144a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001218:	4b4f      	ldr	r3, [pc, #316]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	2380      	movs	r3, #128	@ 0x80
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4013      	ands	r3, r2
 8001222:	d1f0      	bne.n	8001206 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2208      	movs	r2, #8
 800122a:	4013      	ands	r3, r2
 800122c:	d042      	beq.n	80012b4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800122e:	4b4a      	ldr	r3, [pc, #296]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2238      	movs	r2, #56	@ 0x38
 8001234:	4013      	ands	r3, r2
 8001236:	2b18      	cmp	r3, #24
 8001238:	d105      	bne.n	8001246 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d138      	bne.n	80012b4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e101      	b.n	800144a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d019      	beq.n	8001282 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800124e:	4b42      	ldr	r3, [pc, #264]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001250:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001252:	4b41      	ldr	r3, [pc, #260]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001254:	2101      	movs	r1, #1
 8001256:	430a      	orrs	r2, r1
 8001258:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125a:	f7ff fbef 	bl	8000a3c <HAL_GetTick>
 800125e:	0003      	movs	r3, r0
 8001260:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001264:	f7ff fbea 	bl	8000a3c <HAL_GetTick>
 8001268:	0002      	movs	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e0e9      	b.n	800144a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001276:	4b38      	ldr	r3, [pc, #224]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d0f1      	beq.n	8001264 <HAL_RCC_OscConfig+0x24c>
 8001280:	e018      	b.n	80012b4 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001282:	4b35      	ldr	r3, [pc, #212]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001284:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001286:	4b34      	ldr	r3, [pc, #208]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001288:	2101      	movs	r1, #1
 800128a:	438a      	bics	r2, r1
 800128c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128e:	f7ff fbd5 	bl	8000a3c <HAL_GetTick>
 8001292:	0003      	movs	r3, r0
 8001294:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001298:	f7ff fbd0 	bl	8000a3c <HAL_GetTick>
 800129c:	0002      	movs	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e0cf      	b.n	800144a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80012aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 80012ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ae:	2202      	movs	r2, #2
 80012b0:	4013      	ands	r3, r2
 80012b2:	d1f1      	bne.n	8001298 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2204      	movs	r2, #4
 80012ba:	4013      	ands	r3, r2
 80012bc:	d100      	bne.n	80012c0 <HAL_RCC_OscConfig+0x2a8>
 80012be:	e084      	b.n	80013ca <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012c0:	230f      	movs	r3, #15
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80012c8:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	2238      	movs	r2, #56	@ 0x38
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b20      	cmp	r3, #32
 80012d2:	d106      	bne.n	80012e2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d000      	beq.n	80012de <HAL_RCC_OscConfig+0x2c6>
 80012dc:	e075      	b.n	80013ca <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e0b3      	b.n	800144a <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d106      	bne.n	80012f8 <HAL_RCC_OscConfig+0x2e0>
 80012ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 80012ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 80012f0:	2101      	movs	r1, #1
 80012f2:	430a      	orrs	r2, r1
 80012f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012f6:	e01c      	b.n	8001332 <HAL_RCC_OscConfig+0x31a>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	2b05      	cmp	r3, #5
 80012fe:	d10c      	bne.n	800131a <HAL_RCC_OscConfig+0x302>
 8001300:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001302:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001304:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001306:	2104      	movs	r1, #4
 8001308:	430a      	orrs	r2, r1
 800130a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800130c:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 800130e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001312:	2101      	movs	r1, #1
 8001314:	430a      	orrs	r2, r1
 8001316:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001318:	e00b      	b.n	8001332 <HAL_RCC_OscConfig+0x31a>
 800131a:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 800131c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001320:	2101      	movs	r1, #1
 8001322:	438a      	bics	r2, r1
 8001324:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001326:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 8001328:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <HAL_RCC_OscConfig+0x340>)
 800132c:	2104      	movs	r1, #4
 800132e:	438a      	bics	r2, r1
 8001330:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d028      	beq.n	800138c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133a:	f7ff fb7f 	bl	8000a3c <HAL_GetTick>
 800133e:	0003      	movs	r3, r0
 8001340:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001342:	e01d      	b.n	8001380 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001344:	f7ff fb7a 	bl	8000a3c <HAL_GetTick>
 8001348:	0002      	movs	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	4a0b      	ldr	r2, [pc, #44]	@ (800137c <HAL_RCC_OscConfig+0x364>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d915      	bls.n	8001380 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e078      	b.n	800144a <HAL_RCC_OscConfig+0x432>
 8001358:	40021000 	.word	0x40021000
 800135c:	fffeffff 	.word	0xfffeffff
 8001360:	fffbffff 	.word	0xfffbffff
 8001364:	ffff80ff 	.word	0xffff80ff
 8001368:	ffffc7ff 	.word	0xffffc7ff
 800136c:	02dc6c00 	.word	0x02dc6c00
 8001370:	20000030 	.word	0x20000030
 8001374:	20000034 	.word	0x20000034
 8001378:	fffffeff 	.word	0xfffffeff
 800137c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001380:	4b34      	ldr	r3, [pc, #208]	@ (8001454 <HAL_RCC_OscConfig+0x43c>)
 8001382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001384:	2202      	movs	r2, #2
 8001386:	4013      	ands	r3, r2
 8001388:	d0dc      	beq.n	8001344 <HAL_RCC_OscConfig+0x32c>
 800138a:	e013      	b.n	80013b4 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fb56 	bl	8000a3c <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001394:	e009      	b.n	80013aa <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001396:	f7ff fb51 	bl	8000a3c <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	4a2d      	ldr	r2, [pc, #180]	@ (8001458 <HAL_RCC_OscConfig+0x440>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e04f      	b.n	800144a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80013aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001454 <HAL_RCC_OscConfig+0x43c>)
 80013ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ae:	2202      	movs	r2, #2
 80013b0:	4013      	ands	r3, r2
 80013b2:	d1f0      	bne.n	8001396 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80013b4:	230f      	movs	r3, #15
 80013b6:	18fb      	adds	r3, r7, r3
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d105      	bne.n	80013ca <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80013be:	4b25      	ldr	r3, [pc, #148]	@ (8001454 <HAL_RCC_OscConfig+0x43c>)
 80013c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013c2:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <HAL_RCC_OscConfig+0x43c>)
 80013c4:	4925      	ldr	r1, [pc, #148]	@ (800145c <HAL_RCC_OscConfig+0x444>)
 80013c6:	400a      	ands	r2, r1
 80013c8:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2210      	movs	r2, #16
 80013d0:	4013      	ands	r3, r2
 80013d2:	d039      	beq.n	8001448 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d01b      	beq.n	8001414 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001454 <HAL_RCC_OscConfig+0x43c>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <HAL_RCC_OscConfig+0x43c>)
 80013e2:	2180      	movs	r1, #128	@ 0x80
 80013e4:	03c9      	lsls	r1, r1, #15
 80013e6:	430a      	orrs	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ea:	f7ff fb27 	bl	8000a3c <HAL_GetTick>
 80013ee:	0003      	movs	r3, r0
 80013f0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013f4:	f7ff fb22 	bl	8000a3c <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e021      	b.n	800144a <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8001406:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <HAL_RCC_OscConfig+0x43c>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	2380      	movs	r3, #128	@ 0x80
 800140c:	041b      	lsls	r3, r3, #16
 800140e:	4013      	ands	r3, r2
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0x3dc>
 8001412:	e019      	b.n	8001448 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <HAL_RCC_OscConfig+0x43c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <HAL_RCC_OscConfig+0x43c>)
 800141a:	4911      	ldr	r1, [pc, #68]	@ (8001460 <HAL_RCC_OscConfig+0x448>)
 800141c:	400a      	ands	r2, r1
 800141e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001420:	f7ff fb0c 	bl	8000a3c <HAL_GetTick>
 8001424:	0003      	movs	r3, r0
 8001426:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800142a:	f7ff fb07 	bl	8000a3c <HAL_GetTick>
 800142e:	0002      	movs	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e006      	b.n	800144a <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <HAL_RCC_OscConfig+0x43c>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2380      	movs	r3, #128	@ 0x80
 8001442:	041b      	lsls	r3, r3, #16
 8001444:	4013      	ands	r3, r2
 8001446:	d1f0      	bne.n	800142a <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b006      	add	sp, #24
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	40021000 	.word	0x40021000
 8001458:	00001388 	.word	0x00001388
 800145c:	efffffff 	.word	0xefffffff
 8001460:	ffbfffff 	.word	0xffbfffff

08001464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e0f6      	b.n	8001666 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001478:	4b7d      	ldr	r3, [pc, #500]	@ (8001670 <HAL_RCC_ClockConfig+0x20c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2207      	movs	r2, #7
 800147e:	4013      	ands	r3, r2
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d91e      	bls.n	80014c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001486:	4b7a      	ldr	r3, [pc, #488]	@ (8001670 <HAL_RCC_ClockConfig+0x20c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2207      	movs	r2, #7
 800148c:	4393      	bics	r3, r2
 800148e:	0019      	movs	r1, r3
 8001490:	4b77      	ldr	r3, [pc, #476]	@ (8001670 <HAL_RCC_ClockConfig+0x20c>)
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001498:	f7ff fad0 	bl	8000a3c <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014a0:	e009      	b.n	80014b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80014a2:	f7ff facb 	bl	8000a3c <HAL_GetTick>
 80014a6:	0002      	movs	r2, r0
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	4a71      	ldr	r2, [pc, #452]	@ (8001674 <HAL_RCC_ClockConfig+0x210>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e0d7      	b.n	8001666 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001670 <HAL_RCC_ClockConfig+0x20c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2207      	movs	r2, #7
 80014bc:	4013      	ands	r3, r2
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d1ee      	bne.n	80014a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2202      	movs	r2, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d017      	beq.n	80014fe <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2204      	movs	r2, #4
 80014d4:	4013      	ands	r3, r2
 80014d6:	d008      	beq.n	80014ea <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014d8:	4b67      	ldr	r3, [pc, #412]	@ (8001678 <HAL_RCC_ClockConfig+0x214>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4a67      	ldr	r2, [pc, #412]	@ (800167c <HAL_RCC_ClockConfig+0x218>)
 80014de:	401a      	ands	r2, r3
 80014e0:	4b65      	ldr	r3, [pc, #404]	@ (8001678 <HAL_RCC_ClockConfig+0x214>)
 80014e2:	21b0      	movs	r1, #176	@ 0xb0
 80014e4:	0109      	lsls	r1, r1, #4
 80014e6:	430a      	orrs	r2, r1
 80014e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ea:	4b63      	ldr	r3, [pc, #396]	@ (8001678 <HAL_RCC_ClockConfig+0x214>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	4a64      	ldr	r2, [pc, #400]	@ (8001680 <HAL_RCC_ClockConfig+0x21c>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	0019      	movs	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001678 <HAL_RCC_ClockConfig+0x214>)
 80014fa:	430a      	orrs	r2, r1
 80014fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2201      	movs	r2, #1
 8001504:	4013      	ands	r3, r2
 8001506:	d100      	bne.n	800150a <HAL_RCC_ClockConfig+0xa6>
 8001508:	e061      	b.n	80015ce <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800150a:	4b5b      	ldr	r3, [pc, #364]	@ (8001678 <HAL_RCC_ClockConfig+0x214>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	221c      	movs	r2, #28
 8001510:	4393      	bics	r3, r2
 8001512:	0019      	movs	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	4b57      	ldr	r3, [pc, #348]	@ (8001678 <HAL_RCC_ClockConfig+0x214>)
 800151a:	430a      	orrs	r2, r1
 800151c:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d107      	bne.n	8001536 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001526:	4b54      	ldr	r3, [pc, #336]	@ (8001678 <HAL_RCC_ClockConfig+0x214>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	2380      	movs	r3, #128	@ 0x80
 800152c:	029b      	lsls	r3, r3, #10
 800152e:	4013      	ands	r3, r2
 8001530:	d12b      	bne.n	800158a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e097      	b.n	8001666 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d107      	bne.n	800154e <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800153e:	4b4e      	ldr	r3, [pc, #312]	@ (8001678 <HAL_RCC_ClockConfig+0x214>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	2380      	movs	r3, #128	@ 0x80
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4013      	ands	r3, r2
 8001548:	d11f      	bne.n	800158a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e08b      	b.n	8001666 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d107      	bne.n	8001566 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8001556:	4b48      	ldr	r3, [pc, #288]	@ (8001678 <HAL_RCC_ClockConfig+0x214>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	2380      	movs	r3, #128	@ 0x80
 800155c:	041b      	lsls	r3, r3, #16
 800155e:	4013      	ands	r3, r2
 8001560:	d113      	bne.n	800158a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e07f      	b.n	8001666 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b03      	cmp	r3, #3
 800156c:	d106      	bne.n	800157c <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800156e:	4b42      	ldr	r3, [pc, #264]	@ (8001678 <HAL_RCC_ClockConfig+0x214>)
 8001570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001572:	2202      	movs	r2, #2
 8001574:	4013      	ands	r3, r2
 8001576:	d108      	bne.n	800158a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e074      	b.n	8001666 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800157c:	4b3e      	ldr	r3, [pc, #248]	@ (8001678 <HAL_RCC_ClockConfig+0x214>)
 800157e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001580:	2202      	movs	r2, #2
 8001582:	4013      	ands	r3, r2
 8001584:	d101      	bne.n	800158a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e06d      	b.n	8001666 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800158a:	4b3b      	ldr	r3, [pc, #236]	@ (8001678 <HAL_RCC_ClockConfig+0x214>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2207      	movs	r2, #7
 8001590:	4393      	bics	r3, r2
 8001592:	0019      	movs	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	4b37      	ldr	r3, [pc, #220]	@ (8001678 <HAL_RCC_ClockConfig+0x214>)
 800159a:	430a      	orrs	r2, r1
 800159c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800159e:	f7ff fa4d 	bl	8000a3c <HAL_GetTick>
 80015a2:	0003      	movs	r3, r0
 80015a4:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a6:	e009      	b.n	80015bc <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80015a8:	f7ff fa48 	bl	8000a3c <HAL_GetTick>
 80015ac:	0002      	movs	r2, r0
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	4a30      	ldr	r2, [pc, #192]	@ (8001674 <HAL_RCC_ClockConfig+0x210>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e054      	b.n	8001666 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001678 <HAL_RCC_ClockConfig+0x214>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2238      	movs	r2, #56	@ 0x38
 80015c2:	401a      	ands	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d1ec      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ce:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <HAL_RCC_ClockConfig+0x20c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2207      	movs	r2, #7
 80015d4:	4013      	ands	r3, r2
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d21e      	bcs.n	800161a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015dc:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <HAL_RCC_ClockConfig+0x20c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2207      	movs	r2, #7
 80015e2:	4393      	bics	r3, r2
 80015e4:	0019      	movs	r1, r3
 80015e6:	4b22      	ldr	r3, [pc, #136]	@ (8001670 <HAL_RCC_ClockConfig+0x20c>)
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015ee:	f7ff fa25 	bl	8000a3c <HAL_GetTick>
 80015f2:	0003      	movs	r3, r0
 80015f4:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015f6:	e009      	b.n	800160c <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80015f8:	f7ff fa20 	bl	8000a3c <HAL_GetTick>
 80015fc:	0002      	movs	r2, r0
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	4a1c      	ldr	r2, [pc, #112]	@ (8001674 <HAL_RCC_ClockConfig+0x210>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d901      	bls.n	800160c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e02c      	b.n	8001666 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800160c:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <HAL_RCC_ClockConfig+0x20c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2207      	movs	r2, #7
 8001612:	4013      	ands	r3, r2
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d1ee      	bne.n	80015f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2204      	movs	r2, #4
 8001620:	4013      	ands	r3, r2
 8001622:	d009      	beq.n	8001638 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <HAL_RCC_ClockConfig+0x214>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4a16      	ldr	r2, [pc, #88]	@ (8001684 <HAL_RCC_ClockConfig+0x220>)
 800162a:	4013      	ands	r3, r2
 800162c:	0019      	movs	r1, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691a      	ldr	r2, [r3, #16]
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <HAL_RCC_ClockConfig+0x214>)
 8001634:	430a      	orrs	r2, r1
 8001636:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001638:	f000 f82c 	bl	8001694 <HAL_RCC_GetSysClockFreq>
 800163c:	0001      	movs	r1, r0
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <HAL_RCC_ClockConfig+0x214>)
 8001640:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001642:	0a1b      	lsrs	r3, r3, #8
 8001644:	220f      	movs	r2, #15
 8001646:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001648:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <HAL_RCC_ClockConfig+0x224>)
 800164a:	0092      	lsls	r2, r2, #2
 800164c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800164e:	221f      	movs	r2, #31
 8001650:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001652:	000a      	movs	r2, r1
 8001654:	40da      	lsrs	r2, r3
 8001656:	4b0d      	ldr	r3, [pc, #52]	@ (800168c <HAL_RCC_ClockConfig+0x228>)
 8001658:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800165a:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <HAL_RCC_ClockConfig+0x22c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	0018      	movs	r0, r3
 8001660:	f7ff f990 	bl	8000984 <HAL_InitTick>
 8001664:	0003      	movs	r3, r0
}
 8001666:	0018      	movs	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	b004      	add	sp, #16
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	40022000 	.word	0x40022000
 8001674:	00001388 	.word	0x00001388
 8001678:	40021000 	.word	0x40021000
 800167c:	ffff84ff 	.word	0xffff84ff
 8001680:	fffff0ff 	.word	0xfffff0ff
 8001684:	ffff8fff 	.word	0xffff8fff
 8001688:	080017ec 	.word	0x080017ec
 800168c:	20000030 	.word	0x20000030
 8001690:	20000034 	.word	0x20000034

08001694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 800169a:	4b27      	ldr	r3, [pc, #156]	@ (8001738 <HAL_RCC_GetSysClockFreq+0xa4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	2207      	movs	r2, #7
 80016a2:	4013      	ands	r3, r2
 80016a4:	3301      	adds	r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80016a8:	4b23      	ldr	r3, [pc, #140]	@ (8001738 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2238      	movs	r2, #56	@ 0x38
 80016ae:	4013      	ands	r3, r2
 80016b0:	d10f      	bne.n	80016d2 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80016b2:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	0adb      	lsrs	r3, r3, #11
 80016b8:	2207      	movs	r2, #7
 80016ba:	4013      	ands	r3, r2
 80016bc:	2201      	movs	r2, #1
 80016be:	409a      	lsls	r2, r3
 80016c0:	0013      	movs	r3, r2
 80016c2:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	481d      	ldr	r0, [pc, #116]	@ (800173c <HAL_RCC_GetSysClockFreq+0xa8>)
 80016c8:	f7fe fd1e 	bl	8000108 <__udivsi3>
 80016cc:	0003      	movs	r3, r0
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e027      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80016d2:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2238      	movs	r2, #56	@ 0x38
 80016d8:	4013      	ands	r3, r2
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d102      	bne.n	80016e4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016de:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <HAL_RCC_GetSysClockFreq+0xac>)
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	e01e      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80016e4:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2238      	movs	r2, #56	@ 0x38
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b20      	cmp	r3, #32
 80016ee:	d103      	bne.n	80016f8 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	e014      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80016f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2238      	movs	r2, #56	@ 0x38
 80016fe:	4013      	ands	r3, r2
 8001700:	2b18      	cmp	r3, #24
 8001702:	d103      	bne.n	800170c <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001704:	23fa      	movs	r3, #250	@ 0xfa
 8001706:	01db      	lsls	r3, r3, #7
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	e00a      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 800170c:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <HAL_RCC_GetSysClockFreq+0xa4>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2238      	movs	r2, #56	@ 0x38
 8001712:	4013      	ands	r3, r2
 8001714:	2b10      	cmp	r3, #16
 8001716:	d102      	bne.n	800171e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8001718:	4b08      	ldr	r3, [pc, #32]	@ (800173c <HAL_RCC_GetSysClockFreq+0xa8>)
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	e001      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8001722:	68b9      	ldr	r1, [r7, #8]
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f7fe fcef 	bl	8000108 <__udivsi3>
 800172a:	0003      	movs	r3, r0
 800172c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800172e:	68fb      	ldr	r3, [r7, #12]
}
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b004      	add	sp, #16
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	02dc6c00 	.word	0x02dc6c00
 8001740:	007a1200 	.word	0x007a1200

08001744 <memset>:
 8001744:	0003      	movs	r3, r0
 8001746:	1882      	adds	r2, r0, r2
 8001748:	4293      	cmp	r3, r2
 800174a:	d100      	bne.n	800174e <memset+0xa>
 800174c:	4770      	bx	lr
 800174e:	7019      	strb	r1, [r3, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	e7f9      	b.n	8001748 <memset+0x4>

08001754 <__libc_init_array>:
 8001754:	b570      	push	{r4, r5, r6, lr}
 8001756:	2600      	movs	r6, #0
 8001758:	4c0c      	ldr	r4, [pc, #48]	@ (800178c <__libc_init_array+0x38>)
 800175a:	4d0d      	ldr	r5, [pc, #52]	@ (8001790 <__libc_init_array+0x3c>)
 800175c:	1b64      	subs	r4, r4, r5
 800175e:	10a4      	asrs	r4, r4, #2
 8001760:	42a6      	cmp	r6, r4
 8001762:	d109      	bne.n	8001778 <__libc_init_array+0x24>
 8001764:	2600      	movs	r6, #0
 8001766:	f000 f819 	bl	800179c <_init>
 800176a:	4c0a      	ldr	r4, [pc, #40]	@ (8001794 <__libc_init_array+0x40>)
 800176c:	4d0a      	ldr	r5, [pc, #40]	@ (8001798 <__libc_init_array+0x44>)
 800176e:	1b64      	subs	r4, r4, r5
 8001770:	10a4      	asrs	r4, r4, #2
 8001772:	42a6      	cmp	r6, r4
 8001774:	d105      	bne.n	8001782 <__libc_init_array+0x2e>
 8001776:	bd70      	pop	{r4, r5, r6, pc}
 8001778:	00b3      	lsls	r3, r6, #2
 800177a:	58eb      	ldr	r3, [r5, r3]
 800177c:	4798      	blx	r3
 800177e:	3601      	adds	r6, #1
 8001780:	e7ee      	b.n	8001760 <__libc_init_array+0xc>
 8001782:	00b3      	lsls	r3, r6, #2
 8001784:	58eb      	ldr	r3, [r5, r3]
 8001786:	4798      	blx	r3
 8001788:	3601      	adds	r6, #1
 800178a:	e7f2      	b.n	8001772 <__libc_init_array+0x1e>
 800178c:	0800182c 	.word	0x0800182c
 8001790:	0800182c 	.word	0x0800182c
 8001794:	08001830 	.word	0x08001830
 8001798:	0800182c 	.word	0x0800182c

0800179c <_init>:
 800179c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800179e:	46c0      	nop			@ (mov r8, r8)
 80017a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017a2:	bc08      	pop	{r3}
 80017a4:	469e      	mov	lr, r3
 80017a6:	4770      	bx	lr

080017a8 <_fini>:
 80017a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ae:	bc08      	pop	{r3}
 80017b0:	469e      	mov	lr, r3
 80017b2:	4770      	bx	lr
